.TH "The Rust Programming Language" 7
.SH "The Rust Programming Language"

.br

.br
\fBThe Rust Programming Language\fR
.br
===============================
.br
\fIby Steve Klabnik and Carol Nichols, with contributions from the Rust Community\fR
.P
This version of the text assumes you‚Äôre using Rust 1\.62 (released 2022\-06\-30)or later\. See the 
.UR ch01\-01\-installation\.html
.UE
‚ÄúInstallation‚Äù section of Chapter 1to install or update Rust\.
.P
The HTML format is available online at
.UR https://doc\.rust\-lang\.org/stable/book/
.UE
https://doc\.rust\-lang\.org/stable/book/and offline with installations of Rust made with `\fIrustup\fR`; run `\fIrustup docs \-\-book\fR` to open\.
.P
Several community 
.UR appendix\-06\-translation\.html
.UE
translations are also available\.
.P
This text is available in 
.UR https://nostarch\.com/rust
.UE
paperback and ebook format from No StarchPress\.\fBüö® Want a more interactive learning experience? Try out a different version\fRof the Rust Book, featuring: quizzes, highlighting, visualizations, andmore: 
.UR https://rust\-book\.cs\.brown\.edu
.UE
https://rust\-book\.cs\.brown\.edu
.SH Foreword

.br

.br
\fBForeword\fR
.br
==========
.br

.P
It wasn‚Äôt always so clear, but the Rust programming language is fundamentallyabout \fIempowerment\fR: no matter what kind of code you are writing now, Rustempowers you to reach farther, to program with confidence in a wider variety ofdomains than you did before\.
.P
Take, for example, ‚Äúsystems\-level‚Äù work that deals with low\-level details ofmemory management, data representation, and concurrency\. Traditionally, thisrealm of programming is seen as arcane, accessible only to a select few whohave devoted the necessary years learning to avoid its infamous pitfalls\. Andeven those who practice it do so with caution, lest their code be open toexploits, crashes, or corruption\.
.P
Rust breaks down these barriers by eliminating the old pitfalls and providing afriendly, polished set of tools to help you along the way\. Programmers who needto ‚Äúdip down‚Äù into lower\-level control can do so with Rust, without taking onthe customary risk of crashes or security holes, and without having to learnthe fine points of a fickle toolchain\. Better yet, the language is designed toguide you naturally towards reliable code that is efficient in terms of speedand memory usage\.
.P
Programmers who are already working with low\-level code can use Rust to raisetheir ambitions\. For example, introducing parallelism in Rust is a relativelylow\-risk operation: the compiler will catch the classical mistakes for you\. Andyou can tackle more aggressive optimizations in your code with the confidencethat you won‚Äôt accidentally introduce crashes or vulnerabilities\.
.P
But Rust isn‚Äôt limited to low\-level systems programming\. It‚Äôs expressive andergonomic enough to make CLI apps, web servers, and many other kinds of codequite pleasant to write ‚Äî you‚Äôll find simple examples of both later in thebook\. Working with Rust allows you to build skills that transfer from onedomain to another; you can learn Rust by writing a web app, then apply thosesame skills to target your Raspberry Pi\.
.P
This book fully embraces the potential of Rust to empower its users\. It‚Äôs afriendly and approachable text intended to help you level up not just yourknowledge of Rust, but also your reach and confidence as a programmer ingeneral\. So dive in, get ready to learn‚Äîand welcome to the Rust community!
.P
‚Äî Nicholas Matsakis and Aaron Turon
.SH Introduction

.br

.br
\fBIntroduction\fR
.br
==============
.br

.P
Note: This edition of the book is the same as 
.UR https://nostarch\.com/rust
.UE
The Rust ProgrammingLanguage available in print and ebook format from 
.UR https://nostarch\.com/
.UE
No StarchPress\.
.P
Welcome to \fIThe Rust Programming Language\fR, an introductory book about Rust\.The Rust programming language helps you write faster, more reliable software\.High\-level ergonomics and low\-level control are often at odds in programminglanguage design; Rust challenges that conflict\. Through balancing powerfultechnical capacity and a great developer experience, Rust gives you the optionto control low\-level details (such as memory usage) without all the hassletraditionally associated with such control\.
.br

.br
\fBWho Rust Is For\fR
.br
=================
.br

.P
Rust is ideal for many people for a variety of reasons\. Let‚Äôs look at a few ofthe most important groups\.
.br

.br
\fBTeams of Developers\fR
.br
=====================
.br

.P
Rust is proving to be a productive tool for collaborating among large teams ofdevelopers with varying levels of systems programming knowledge\. Low\-level codeis prone to a variety of subtle bugs, which in most other languages can becaught only through extensive testing and careful code review by experienceddevelopers\. In Rust, the compiler plays a gatekeeper role by refusing tocompile code with these elusive bugs, including concurrency bugs\. By workingalongside the compiler, the team can spend their time focusing on the program‚Äôslogic rather than chasing down bugs\.
.P
Rust also brings contemporary developer tools to the systems programming world:
.P
Cargo, the included dependency manager and build tool, makes adding,compiling, and managing dependencies painless and consistent across the Rustecosystem\.
.P
Rustfmt ensures a consistent coding style across developers\.
.P
The Rust Language Server powers Integrated Development Environment (IDE)integration for code completion and inline error messages\.
.P
By using these and other tools in the Rust ecosystem, developers can beproductive while writing systems\-level code\.
.br

.br
\fBStudents\fR
.br
==========
.br

.P
Rust is for students and those who are interested in learning about systemsconcepts\. Using Rust, many people have learned about topics like operatingsystems development\. The community is very welcoming and happy to answerstudent questions\. Through efforts such as this book, the Rust teams want tomake systems concepts more accessible to more people, especially those new toprogramming\.
.br

.br
\fBCompanies\fR
.br
===========
.br

.P
Hundreds of companies, large and small, use Rust in production for a variety oftasks\. Those tasks include command line tools, web services, DevOps tooling,embedded devices, audio and video analysis and transcoding, cryptocurrencies,bioinformatics, search engines, Internet of Things applications, machinelearning, and even major parts of the Firefox web browser\.
.br

.br
\fBOpen Source Developers\fR
.br
========================
.br

.P
Rust is for people who want to build the Rust programming language, community,developer tools, and libraries\. We‚Äôd love to have you contribute to the Rustlanguage\.
.br

.br
\fBPeople Who Value Speed and Stability\fR
.br
======================================
.br

.P
Rust is for people who crave speed and stability in a language\. By speed, wemean the speed of the programs that you can create with Rust and the speed atwhich Rust lets you write them\. The Rust compiler‚Äôs checks ensure stabilitythrough feature additions and refactoring\. This is in contrast to the brittlelegacy code in languages without these checks, which developers are oftenafraid to modify\. By striving for zero\-cost abstractions, higher\-level featuresthat compile to lower\-level code as fast as code written manually, Rustendeavors to make safe code be fast code as well\.
.P
The Rust language hopes to support many other users as well; those mentionedhere are merely some of the biggest stakeholders\. Overall, Rust‚Äôs greatestambition is to eliminate the trade\-offs that programmers have accepted fordecades by providing safety \fIand\fR productivity, speed \fIand\fR ergonomics\. GiveRust a try and see if its choices work for you\.
.br

.br
\fBWho This Book Is For\fR
.br
======================
.br

.P
This book assumes that you‚Äôve written code in another programming language butdoesn‚Äôt make any assumptions about which one\. We‚Äôve tried to make the materialbroadly accessible to those from a wide variety of programming backgrounds\. Wedon‚Äôt spend a lot of time talking about what programming \fIis\fR or how to thinkabout it\. If you‚Äôre entirely new to programming, you would be better served byreading a book that specifically provides an introduction to programming\.
.br

.br
\fBHow to Use This Book\fR
.br
======================
.br

.P
In general, this book assumes that you‚Äôre reading it in sequence from front toback\. Later chapters build on concepts in earlier chapters, and earlierchapters might not delve into details on a topic; we typically revisit thetopic in a later chapter\.
.P
You‚Äôll find two kinds of chapters in this book: concept chapters and projectchapters\. In concept chapters, you‚Äôll learn about an aspect of Rust\. In projectchapters, we‚Äôll build small programs together, applying what you‚Äôve learned sofar\. Chapters 2, 12, and 20 are project chapters; the rest are concept chapters\.
.P
Chapter 1 explains how to install Rust, how to write a ‚ÄúHello, world!‚Äù program,and how to use Cargo, Rust‚Äôs package manager and build tool\. Chapter 2 is ahands\-on introduction to the Rust language\. Here we cover concepts at a highlevel, and later chapters will provide additional detail\. If you want to getyour hands dirty right away, Chapter 2 is the place for that\. At first, youmight even want to skip Chapter 3, which covers Rust features similar to thoseof other programming languages, and head straight to Chapter 4 to learn aboutRust‚Äôs ownership system\. However, if you‚Äôre a particularly meticulous learnerwho prefers to learn every detail before moving on to the next, you might wantto skip Chapter 2 and go straight to Chapter 3, returning to Chapter 2 whenyou‚Äôd like to work on a project applying the details you‚Äôve learned\.
.P
Chapter 5 discusses structs and methods, and Chapter 6 covers enums, `\fImatch\fR`expressions, and the `\fIif let\fR` control flow construct\. You‚Äôll use structs andenums to make custom types in Rust\.
.P
In Chapter 7, you‚Äôll learn about Rust‚Äôs module system and about privacy rulesfor organizing your code and its public Application Programming Interface(API)\. Chapter 8 discusses some common collection data structures that thestandard library provides, such as vectors, strings, and hash maps\. Chapter 9explores Rust‚Äôs error\-handling philosophy and techniques\.
.P
Chapter 10 digs into generics, traits, and lifetimes, which give you the powerto define code that applies to multiple types\. Chapter 11 is all about testing,which even with Rust‚Äôs safety guarantees is necessary to ensure your program‚Äôslogic is correct\. In Chapter 12, we‚Äôll build our own implementation of a subsetof functionality from the `\fIgrep\fR` command line tool that searches for textwithin files\. For this, we‚Äôll use many of the concepts we discussed in theprevious chapters\.
.P
Chapter 13 explores closures and iterators: features of Rust that come fromfunctional programming languages\. In Chapter 14, we‚Äôll examine Cargo in moredepth and talk about best practices for sharing your libraries with others\.Chapter 15 discusses smart pointers that the standard library provides and thetraits that enable their functionality\.
.P
In Chapter 16, we‚Äôll walk through different models of concurrent programmingand talk about how Rust helps you to program in multiple threads fearlessly\.Chapter 17 looks at how Rust idioms compare to object\-oriented programmingprinciples you might be familiar with\.
.P
Chapter 18 is a reference on patterns and pattern matching, which are powerfulways of expressing ideas throughout Rust programs\. Chapter 19 contains asmorgasbord of advanced topics of interest, including unsafe Rust, macros, andmore about lifetimes, traits, types, functions, and closures\.
.P
In Chapter 20, we‚Äôll complete a project in which we‚Äôll implement a low\-levelmultithreaded web server!
.P
Finally, some appendices contain useful information about the language in amore reference\-like format\. Appendix A covers Rust‚Äôs keywords, Appendix Bcovers Rust‚Äôs operators and symbols, Appendix C covers derivable traitsprovided by the standard library, Appendix D covers some useful developmenttools, and Appendix E explains Rust editions\. In Appendix F, you can findtranslations of the book, and in Appendix G we‚Äôll cover how Rust is made andwhat nightly Rust is\.
.P
There is no wrong way to read this book: if you want to skip ahead, go for it!You might have to jump back to earlier chapters if you experience anyconfusion\. But do whatever works for you\.
.P
An important part of the process of learning Rust is learning how to read theerror messages the compiler displays: these will guide you toward working code\.As such, we‚Äôll provide many examples that don‚Äôt compile along with the errormessage the compiler will show you in each situation\. Know that if you enterand run a random example, it may not compile! Make sure you read thesurrounding text to see whether the example you‚Äôre trying to run is meant toerror\. Ferris will also help you distinguish code that isn‚Äôt meant to work:
.P
| Ferris                                                                                                           | Meaning                                          ||\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-||             | This code does not compile!                      ||                    | This code panics!                                ||  | This code does not produce the desired behavior\. |
.P
In most situations, we‚Äôll lead you to the correct version of any code thatdoesn‚Äôt compile\.
.br

.br
\fBSource Code\fR
.br
=============
.br

.P
The source files from which this book is generated can be found on
.UR https://github\.com/rust\-lang/book/tree/main/src
.UE
GitHub\.
.SH "Getting Started"

.br

.br
\fBGetting Started\fR
.br
=================
.br

.P
Let‚Äôs start your Rust journey! There‚Äôs a lot to learn, but every journey startssomewhere\. In this chapter, we‚Äôll discuss:
.P
Installing Rust on Linux, macOS, and Windows
.P
Writing a program that prints `\fIHello, world!\fR`
.P
Using `\fIcargo\fR`, Rust‚Äôs package manager and build system
.SH Installation

.br

.br
\fBInstallation\fR
.br
==============
.br

.P
The first step is to install Rust\. We‚Äôll download Rust through `\fIrustup\fR`, acommand line tool for managing Rust versions and associated tools\. You‚Äôll needan internet connection for the download\.
.P
Note: If you prefer not to use `\fIrustup\fR` for some reason, please see the
.UR https://forge\.rust\-lang\.org/infra/other\-installation\-methods\.html
.UE
Other Rust Installation Methods page for more options\.
.P
The following steps install the latest stable version of the Rust compiler\.Rust‚Äôs stability guarantees ensure that all the examples in the book thatcompile will continue to compile with newer Rust versions\. The output mightdiffer slightly between versions, because Rust often improves error messagesand warnings\. In other words, any newer, stable version of Rust you installusing these steps should work as expected with the content of this book\.
.br

.br
\fBCommand Line Notation\fR
.br
=======================
.br

.P
In this chapter and throughout the book, we‚Äôll show some commands used in theterminal\. Lines that you should enter in a terminal all start with `\fI$\fR`\. Youdon‚Äôt need to type in the `\fI$\fR` character; it‚Äôs the command line prompt shownto indicate the start of each command\. Lines that don‚Äôt start with `\fI$\fR`typically show the output of the previous command\. Additionally,PowerShell\-specific examples will use `\fI>\fR` rather than `\fI$\fR`\.
.br

.br
\fBInstalling \fR
.br
=============
.br
`\fIrustup\fR` on Linux or macOS
.P
If you‚Äôre using Linux or macOS, open a terminal and enter the following command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ curl \-\-proto '=https' \-\-tlsv1\.3 https://sh\.rustup\.rs \-sSf | sh

.EE

.RE
.P
The command downloads a script and starts the installation of the `\fIrustup\fR`tool, which installs the latest stable version of Rust\. You might be promptedfor your password\. If the install is successful, the following line will appear:
.RS
.IP \fBtext\fR 2

.br
.EX
Rust is installed now\. Great!

.EE

.RE
.P
You will also need a \fIlinker\fR, which is a program that Rust uses to join itscompiled outputs into one file\. It is likely you already have one\. If you getlinker errors, you should install a C compiler, which will typically include alinker\. A C compiler is also useful because some common Rust packages depend onC code and will need a C compiler\.
.P
On macOS, you can get a C compiler by running:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ xcode\-select \-\-install

.EE

.RE
.P
Linux users should generally install GCC or Clang, according to theirdistribution‚Äôs documentation\. For example, if you use Ubuntu, you can installthe `\fIbuild\-essential\fR` package\.
.br

.br
\fBInstalling \fR
.br
=============
.br
`\fIrustup\fR` on Windows
.P
On Windows, go to 
.UR https://www\.rust\-lang\.org/tools/install
.UE
https://www\.rust\-lang\.org/tools/install and followthe instructions for installing Rust\. At some point in the installation, you‚Äôllreceive a message explaining that you‚Äôll also need the MSVC build tools forVisual Studio 2013 or later\. To acquire the build tools, you‚Äôll need to install
.UR https://visualstudio\.microsoft\.com/downloads/
.UE
Visual Studio 2022\. When asked which workloads to install,include:
.P
‚ÄúDesktop Development with C++‚Äù
.P
The Windows 10 or 11 SDK
.P
The English language pack component, along with any other language pack ofyour choosing
.P
The rest of this book uses commands that work in both \fIcmd\.exe\fR and PowerShell\.If there are specific differences, we‚Äôll explain which to use\.
.br

.br
\fBTroubleshooting\fR
.br
=================
.br

.P
To check whether you have Rust installed correctly, open a shell and enter thisline:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustc \-\-version

.EE

.RE
.P
You should see the version number, commit hash, and commit date for the lateststable version that has been released in the following format:
.RS
.IP \fBtext\fR 2

.br
.EX
rustc x\.y\.z (abcabcabc yyyy\-mm\-dd)

.EE

.RE
.P
If you see this information, you have installed Rust successfully! If you don‚Äôtsee this information, check that Rust is in your `\fI%PATH%\fR`system variable as follows\.
.P
In Windows CMD, use:
.RS
.IP \fBconsole\fR 2

.br
.EX
> echo %PATH%

.EE

.RE
.P
In PowerShell, use:
.RS
.IP \fBconsole\fR 2

.br
.EX
> echo $env:Path

.EE

.RE
.P
In Linux and macOS, use:
.RS
.IP \fBconsole\fR 2

.br
.EX
echo $PATH

.EE

.RE
.P
If that‚Äôs all correct and Rust still isn‚Äôt working, there are a number ofplaces you can get help\. The easiest is the #beginners channel on 
.UR https://discord\.gg/rust\-lang
.UE
the officialRust Discord\. There, you can chat with other Rustaceans (a sillynickname we call ourselves) who can help you out\. Other great resources include
.UR https://users\.rust\-lang\.org/
.UE
the Users forum and 
.UR https://stackoverflow\.com/questions/tagged/rust
.UE
Stack Overflow\.
.br

.br
\fBUpdating and Uninstalling\fR
.br
===========================
.br

.P
Once Rust is installed via `\fIrustup\fR`, when a new version of Rust is released,updating to the latest version is easy\. From your shell, run the followingupdate script:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup update

.EE

.RE
.P
To uninstall Rust and `\fIrustup\fR`, run the following uninstall script from yourshell:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup self uninstall

.EE

.RE

.br

.br
\fBLocal Documentation\fR
.br
=====================
.br

.P
The installation of Rust also includes a local copy of the documentation, soyou can read it offline\. Run `\fIrustup doc\fR` to open the local documentation inyour browser\.
.P
Any time a type or function is provided by the standard library and you‚Äôre notsure what it does or how to use it, use the application programming interface(API) documentation to find out!
.SH "Hello, World!"

.br

.br
\fBHello, World!\fR
.br
===============
.br

.P
Now that you‚Äôve installed Rust, let‚Äôs write your first Rust program\. It‚Äôstraditional when learning a new language to write a little program that printsthe text `\fIHello, world!\fR` to the screen, so we‚Äôll do the same here!
.P
Note: This book assumes basic familiarity with the command line\. Rust makesno specific demands about your editing or tooling or where your code lives, soif you prefer to use an integrated development environment (IDE) instead ofthe command line, feel free to use your favorite IDE\. Many IDEs now have somedegree of Rust support; check the IDE‚Äôs documentation for details\. The Rustteam has been focusing on enabling great IDE support via `\fIrust\-analyzer\fR`\. See
.UR appendix\-04\-useful\-development\-tools\.md
.UE
Appendix D for more details!
.br

.br
\fBCreating a Project Directory\fR
.br
==============================
.br

.P
You‚Äôll start by making a directory to store your Rust code\. It doesn‚Äôt matterto Rust where your code lives, but for the exercises and projects in this book,we suggest making a \fIprojects\fR directory in your home directory and keeping allyour projects there\.
.P
Open a terminal and enter the following commands to make a \fIprojects\fR directoryand a directory for the ‚ÄúHello, world!‚Äù project within the \fIprojects\fR directory\.
.P
For Linux, macOS, and PowerShell on Windows, enter this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ mkdir ~/projects
$ cd ~/projects
$ mkdir hello_world
$ cd hello_world

.EE

.RE
.P
For Windows CMD, enter this:
.RS
.IP \fBcmd\fR 2

.br
.EX
> mkdir "%USERPROFILE%\projects"
> cd /d "%USERPROFILE%\projects"
> mkdir hello_world
> cd hello_world

.EE

.RE

.br

.br
\fBWriting and Running a Rust Program\fR
.br
====================================
.br

.P
Next, make a new source file and call it \fImain\.rs\fR\. Rust files always end withthe \fI\.rs\fR extension\. If you‚Äôre using more than one word in your filename, theconvention is to use an underscore to separate them\. For example, use\fIhello_world\.rs\fR rather than \fIhelloworld\.rs\fR\.
.P
Now open the \fImain\.rs\fR file you just created and enter the code in Listing 1\-1\.Filename: main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    println!("Hello, world!");
}

.EE

.RE
Listing 1\-1: A program that prints `\fIHello, world!\fR`
.P
Save the file and go back to your terminal window in the\fI~/projects/hello_world\fR directory\. On Linux or macOS, enter the followingcommands to compile and run the file:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustc main\.rs
$ \./main
Hello, world!

.EE

.RE
.P
On Windows, enter the command `\fI\.\main\.exe\fR` instead of `\fI\./main\fR`:
.RS
.IP \fBpowershell\fR 2

.br
.EX
> rustc main\.rs
> \.\main\.exe
Hello, world!

.EE

.RE
.P
Regardless of your operating system, the string `\fIHello, world!\fR` should print tothe terminal\. If you don‚Äôt see this output, refer back to the
.UR ch01\-01\-installation\.html#troubleshooting
.UE
‚ÄúTroubleshooting‚Äù part of the Installationsection for ways to get help\.
.P
If `\fIHello, world!\fR` did print, congratulations! You‚Äôve officially written a Rustprogram\. That makes you a Rust programmer‚Äîwelcome!
.br

.br
\fBAnatomy of a Rust Program\fR
.br
===========================
.br

.P
Let‚Äôs review this ‚ÄúHello, world!‚Äù program in detail\. Here‚Äôs the first piece ofthe puzzle:
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {

}

.EE

.RE
.P
These lines define a function named `\fImain\fR`\. The `\fImain\fR` function is special: itis always the first code that runs in every executable Rust program\. Here, thefirst line declares a function named `\fImain\fR` that has no parameters and returnsnothing\. If there were parameters, they would go inside the parentheses `\fI()\fR`\.
.P
The function body is wrapped in `\fI{}\fR`\. Rust requires curly brackets around allfunction bodies\. It‚Äôs good style to place the opening curly bracket on the sameline as the function declaration, adding one space in between\.
.P
Note: If you want to stick to a standard style across Rust projects, you canuse an automatic formatter tool called `\fIrustfmt\fR` to format your code in aparticular style (more on `\fIrustfmt\fR` in
.UR appendix\-04\-useful\-development\-tools\.md
.UE
Appendix D)\. The Rust team has included this toolwith the standard Rust distribution, like `\fIrustc\fR`, so it should already beinstalled on your computer!
.P
The body of the `\fImain\fR` function holds the following code:
.RS
.IP \fBrust\fR 2

.br
.EX
    println!("Hello, world!");

.EE

.RE
.P
This line does all the work in this little program: it prints text to thescreen\. There are four important details to notice here\.
.P
First, Rust style is to indent with four spaces, not a tab\.
.P
Second, `\fIprintln!\fR` calls a Rust macro\. If it had called a function instead, itwould be entered as `\fIprintln\fR` (without the `\fI!\fR`)\. We‚Äôll discuss Rust macros inmore detail in Chapter 19\. For now, you just need to know that using a `\fI!\fR`means that you‚Äôre calling a macro instead of a normal function, and that macrosdon‚Äôt always follow the same rules as functions\.
.P
Third, you see the `\fI"Hello, world!"\fR` string\. We pass this string as an argumentto `\fIprintln!\fR`, and the string is printed to the screen\.
.P
Fourth, we end the line with a semicolon (`\fI;\fR`), which indicates that thisexpression is over and the next one is ready to begin\. Most lines of Rust codeend with a semicolon\.
.br

.br
\fBCompiling and Running Are Separate Steps\fR
.br
==========================================
.br

.P
You‚Äôve just run a newly created program, so let‚Äôs examine each step in theprocess\.
.P
Before running a Rust program, you must compile it using the Rust compiler byentering the `\fIrustc\fR` command and passing it the name of your source file, likethis:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustc main\.rs

.EE

.RE
.P
If you have a C or C++ background, you‚Äôll notice that this is similar to `\fIgcc\fR`or `\fIclang\fR`\. After compiling successfully, Rust outputs a binary executable\.
.P
On Linux, macOS, and PowerShell on Windows, you can see the executable byentering the `\fIls\fR` command in your shell\. On Linux and macOS, you‚Äôll see twofiles\. With PowerShell on Windows, you‚Äôll see the same three files that youwould see using CMD\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ ls
main  main\.rs

.EE

.RE
.P
With CMD on Windows, you would enter the following:
.RS
.IP \fBcmd\fR 2

.br
.EX
> dir /B %= the /B option says to only show the file names =%
main\.exe
main\.pdb
main\.rs

.EE

.RE
.P
This shows the source code file with the \fI\.rs\fR extension, the executable file(\fImain\.exe\fR on Windows, but \fImain\fR on all other platforms), and, when usingWindows, a file containing debugging information with the \fI\.pdb\fR extension\.From here, you run the \fImain\fR or \fImain\.exe\fR file, like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ \./main # or \.\main\.exe on Windows

.EE

.RE
.P
If your \fImain\.rs\fR is your ‚ÄúHello, world!‚Äù program, this line prints `\fIHello, world!\fR` to your terminal\.
.P
If you‚Äôre more familiar with a dynamic language, such as Ruby, Python, orJavaScript, you might not be used to compiling and running a program asseparate steps\. Rust is an \fIahead\-of\-time compiled\fR language, meaning you cancompile a program and give the executable to someone else, and they can run iteven without having Rust installed\. If you give someone a \fI\.rb\fR, \fI\.py\fR, or\fI\.js\fR file, they need to have a Ruby, Python, or JavaScript implementationinstalled (respectively)\. But in those languages, you only need one command tocompile and run your program\. Everything is a trade\-off in language design\.
.P
Just compiling with `\fIrustc\fR` is fine for simple programs, but as your projectgrows, you‚Äôll want to manage all the options and make it easy to share yourcode\. Next, we‚Äôll introduce you to the Cargo tool, which will help you writereal\-world Rust programs\.
.SH "Hello, Cargo!"

.br

.br
\fBHello, Cargo!\fR
.br
===============
.br

.P
Cargo is Rust‚Äôs build system and package manager\. Most Rustaceans use this toolto manage their Rust projects because Cargo handles a lot of tasks for you,such as building your code, downloading the libraries your code depends on, andbuilding those libraries\. (We call the libraries that your code needs\fIdependencies\fR\.)
.P
The simplest Rust programs, like the one we‚Äôve written so far, don‚Äôt have anydependencies\. If we had built the ‚ÄúHello, world!‚Äù project with Cargo, it wouldonly use the part of Cargo that handles building your code\. As you write morecomplex Rust programs, you‚Äôll add dependencies, and if you start a projectusing Cargo, adding dependencies will be much easier to do\.
.P
Because the vast majority of Rust projects use Cargo, the rest of this bookassumes that you‚Äôre using Cargo too\. Cargo comes installed with Rust if youused the official installers discussed in the
.UR ch01\-01\-installation\.html#installation
.UE
‚ÄúInstallation‚Äù section\. If you installed Rustthrough some other means, check whether Cargo is installed by entering thefollowing into your terminal:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo \-\-version

.EE

.RE
.P
If you see a version number, you have it! If you see an error, such as `\fIcommand not found\fR`, look at the documentation for your method of installation todetermine how to install Cargo separately\.
.br

.br
\fBCreating a Project with Cargo\fR
.br
===============================
.br

.P
Let‚Äôs create a new project using Cargo and look at how it differs from ouroriginal ‚ÄúHello, world!‚Äù project\. Navigate back to your \fIprojects\fR directory (orwherever you decided to store your code)\. Then, on any operating system, runthe following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new hello_cargo
$ cd hello_cargo

.EE

.RE
.P
The first command creates a new directory and project called \fIhello_cargo\fR\.We‚Äôve named our project \fIhello_cargo\fR, and Cargo creates its files in adirectory of the same name\.
.P
Go into the \fIhello_cargo\fR directory and list the files\. You‚Äôll see that Cargohas generated two files and one directory for us: a \fICargo\.toml\fR file and a\fIsrc\fR directory with a \fImain\.rs\fR file inside\.
.P
It has also initialized a new Git repository along with a \fI\.gitignore\fR file\.Git files won‚Äôt be generated if you run `\fIcargo new\fR` within an existing Gitrepository; you can override this behavior by using `\fIcargo new \-\-vcs=git\fR`\.
.P
Note: Git is a common version control system\. You can change `\fIcargo new\fR` touse a different version control system or no version control system by usingthe `\fI\-\-vcs\fR` flag\. Run `\fIcargo new \-\-help\fR` to see the available options\.
.P
Open \fICargo\.toml\fR in your text editor of choice\. It should look similar to thecode in Listing 1\-2\.Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "hello_cargo"
version = "0\.1\.0"
edition = "2021"

# See more keys and their definitions at https://doc\.rust\-lang\.org/cargo/reference/manifest\.html

[dependencies]

.EE

.RE
Listing 1\-2: Contents of \fICargo\.toml\fR generated by `\fIcargo new\fR`
.P
This file is in the 
.UR https://toml\.io
.UE
\fITOML\fR (\fITom‚Äôs Obvious,\fRMinimal Language) format, which is Cargo‚Äôs configuration format\.
.P
The first line, `\fI[package]\fR`, is a section heading that indicates that thefollowing statements are configuring a package\. As we add more information tothis file, we‚Äôll add other sections\.
.P
The next three lines set the configuration information Cargo needs to compileyour program: the name, the version, and the edition of Rust to use\. We‚Äôll talkabout the `\fIedition\fR` key in 
.UR appendix\-05\-editions\.html
.UE
Appendix E\.
.P
The last line, `\fI[dependencies]\fR`, is the start of a section for you to list anyof your project‚Äôs dependencies\. In Rust, packages of code are referred to as\fIcrates\fR\. We won‚Äôt need any other crates for this project, but we will in thefirst project in Chapter 2, so we‚Äôll use this dependencies section then\.
.P
Now open \fIsrc/main\.rs\fR and take a look:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    println!("Hello, world!");
}

.EE

.RE
.P
Cargo has generated a ‚ÄúHello, world!‚Äù program for you, just like the one wewrote in Listing 1\-1! So far, the differences between our project and theproject Cargo generated are that Cargo placed the code in the \fIsrc\fR directory,and we have a \fICargo\.toml\fR configuration file in the top directory\.
.P
Cargo expects your source files to live inside the \fIsrc\fR directory\. Thetop\-level project directory is just for README files, license information,configuration files, and anything else not related to your code\. Using Cargohelps you organize your projects\. There‚Äôs a place for everything, andeverything is in its place\.
.P
If you started a project that doesn‚Äôt use Cargo, as we did with the ‚ÄúHello,world!‚Äù project, you can convert it to a project that does use Cargo\. Move theproject code into the \fIsrc\fR directory and create an appropriate \fICargo\.toml\fRfile\.
.br

.br
\fBBuilding and Running a Cargo Project\fR
.br
======================================
.br

.P
Now let‚Äôs look at what‚Äôs different when we build and run the ‚ÄúHello, world!‚Äùprogram with Cargo! From your \fIhello_cargo\fR directory, build your project byentering the following command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling hello_cargo v0\.1\.0 (file:///projects/hello_cargo)
    Finished dev [unoptimized + debuginfo] target(s) in 2\.85 secs

.EE

.RE
.P
This command creates an executable file in \fItarget/debug/hello_cargo\fR (or\fItarget\debug\hello_cargo\.exe\fR on Windows) rather than in your currentdirectory\. Because the default build is a debug build, Cargo puts the binary ina directory named \fIdebug\fR\. You can run the executable with this command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ \./target/debug/hello_cargo # or \.\target\debug\hello_cargo\.exe on Windows
Hello, world!

.EE

.RE
.P
If all goes well, `\fIHello, world!\fR` should print to the terminal\. Running `\fIcargo build\fR` for the first time also causes Cargo to create a new file at the toplevel: \fICargo\.lock\fR\. This file keeps track of the exact versions ofdependencies in your project\. This project doesn‚Äôt have dependencies, so thefile is a bit sparse\. You won‚Äôt ever need to change this file manually; Cargomanages its contents for you\.
.P
We just built a project with `\fIcargo build\fR` and ran it with`\fI\./target/debug/hello_cargo\fR`, but we can also use `\fIcargo run\fR` to compile thecode and then run the resulting executable all in one command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0 secs
     Running `target/debug/hello_cargo`
Hello, world!

.EE

.RE
.P
Using `\fIcargo run\fR` is more convenient than having to remember to run `\fIcargo build\fR` and then use the whole path to the binary, so most developers use `\fIcargo run\fR`\.
.P
Notice that this time we didn‚Äôt see output indicating that Cargo was compiling`\fIhello_cargo\fR`\. Cargo figured out that the files hadn‚Äôt changed, so it didn‚Äôtrebuild but just ran the binary\. If you had modified your source code, Cargowould have rebuilt the project before running it, and you would have seen thisoutput:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling hello_cargo v0\.1\.0 (file:///projects/hello_cargo)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.33 secs
     Running `target/debug/hello_cargo`
Hello, world!

.EE

.RE
.P
Cargo also provides a command called `\fIcargo check\fR`\. This command quickly checksyour code to make sure it compiles but doesn‚Äôt produce an executable:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
   Checking hello_cargo v0\.1\.0 (file:///projects/hello_cargo)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.32 secs

.EE

.RE
.P
Why would you not want an executable? Often, `\fIcargo check\fR` is much faster than`\fIcargo build\fR`, because it skips the step of producing an executable\. If you‚Äôrecontinually checking your work while writing the code, using `\fIcargo check\fR` willspeed up the process of letting you know if your project is still compiling! Assuch, many Rustaceans run `\fIcargo check\fR` periodically as they write theirprogram to make sure it compiles\. Then they run `\fIcargo build\fR` when they‚Äôreready to use the executable\.
.P
Let‚Äôs recap what we‚Äôve learned so far about Cargo:
.P
We can create a project using `\fIcargo new\fR`\.
.P
We can build a project using `\fIcargo build\fR`\.
.P
We can build and run a project in one step using `\fIcargo run\fR`\.
.P
We can build a project without producing a binary to check for errors using`\fIcargo check\fR`\.
.P
Instead of saving the result of the build in the same directory as our code,Cargo stores it in the \fItarget/debug\fR directory\.
.P
An additional advantage of using Cargo is that the commands are the same nomatter which operating system you‚Äôre working on\. So, at this point, we‚Äôll nolonger provide specific instructions for Linux and macOS versus Windows\.
.br

.br
\fBBuilding for Release\fR
.br
======================
.br

.P
When your project is finally ready for release, you can use `\fIcargo build \-\-release\fR` to compile it with optimizations\. This command will create anexecutable in \fItarget/release\fR instead of \fItarget/debug\fR\. The optimizationsmake your Rust code run faster, but turning them on lengthens the time it takesfor your program to compile\. This is why there are two different profiles: onefor development, when you want to rebuild quickly and often, and another forbuilding the final program you‚Äôll give to a user that won‚Äôt be rebuiltrepeatedly and that will run as fast as possible\. If you‚Äôre benchmarking yourcode‚Äôs running time, be sure to run `\fIcargo build \-\-release\fR` and benchmark withthe executable in \fItarget/release\fR\.
.br

.br
\fBCargo as Convention\fR
.br
=====================
.br

.P
With simple projects, Cargo doesn‚Äôt provide a lot of value over just using`\fIrustc\fR`, but it will prove its worth as your programs become more intricate\.Once programs grow to multiple files or need a dependency, it‚Äôs much easier tolet Cargo coordinate the build\.
.P
Even though the `\fIhello_cargo\fR` project is simple, it now uses much of the realtooling you‚Äôll use in the rest of your Rust career\. In fact, to work on anyexisting projects, you can use the following commands to check out the codeusing Git, change to that project‚Äôs directory, and build:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ git clone example\.org/someproject
$ cd someproject
$ cargo build

.EE

.RE
.P
For more information about Cargo, check out 
.UR https://doc\.rust\-lang\.org/cargo/
.UE
its documentation\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
You‚Äôre already off to a great start on your Rust journey! In this chapter,you‚Äôve learned how to:
.P
Install the latest stable version of Rust using `\fIrustup\fR`
.P
Update to a newer Rust version
.P
Open locally installed documentation
.P
Write and run a ‚ÄúHello, world!‚Äù program using `\fIrustc\fR` directly
.P
Create and run a new project using the conventions of Cargo
.P
This is a great time to build a more substantial program to get used to readingand writing Rust code\. So, in Chapter 2, we‚Äôll build a guessing game program\.If you would rather start by learning how common programming concepts work inRust, see Chapter 3 and then return to Chapter 2\.
.SH "Programming a Guessing Game"

.br

.br
\fBProgramming a Guessing Game\fR
.br
=============================
.br

.P
Let‚Äôs jump into Rust by working through a hands\-on project together! Thischapter introduces you to a few common Rust concepts by showing you how to usethem in a real program\. You‚Äôll learn about `\fIlet\fR`, `\fImatch\fR`, methods, associatedfunctions, using external crates, and more! In the following chapters, we‚Äôllexplore these ideas in more detail\. In this chapter, you‚Äôll practice thefundamentals\.
.P
We‚Äôll implement a classic beginner programming problem: a guessing game\. Here‚Äôshow it works: the program will generate a random integer between 1 and 100\. Itwill then prompt the player to enter a guess\. After a guess is entered, theprogram will indicate whether the guess is too low or too high\. If the guess iscorrect, the game will print a congratulatory message and exit\.
.br

.br
\fBSetting Up a New Project\fR
.br
==========================
.br

.P
To set up a new project, go to the \fIprojects\fR directory that you created inChapter 1 and make a new project using Cargo, like so:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new guessing_game
$ cd guessing_game

.EE

.RE
.P
The first command, `\fIcargo new\fR`, takes the name of the project (`\fIguessing_game\fR`)as the first argument\. The second command changes to the new project‚Äôsdirectory\.
.P
Look at the generated \fICargo\.toml\fR file:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "guessing_game"
version = "0\.1\.0"
edition = "2021"

# See more keys and their definitions at https://doc\.rust\-lang\.org/cargo/reference/manifest\.html

[dependencies]

.EE

.RE
.P
As you saw in Chapter 1, `\fIcargo new\fR` generates a ‚ÄúHello, world!‚Äù program foryou\. Check out the \fIsrc/main\.rs\fR file:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    println!("Hello, world!");
}

.EE

.RE
.P
Now let‚Äôs compile this ‚ÄúHello, world!‚Äù program and run it in the same stepusing the `\fIcargo run\fR` command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.50s
     Running `target/debug/guessing_game`
Hello, world!

.EE

.RE
.P
The `\fIrun\fR` command comes in handy when you need to rapidly iterate on a project,as we‚Äôll do in this game, quickly testing each iteration before moving on tothe next one\.
.P
Reopen the \fIsrc/main\.rs\fR file\. You‚Äôll be writing all the code in this file\.
.br

.br
\fBProcessing a Guess\fR
.br
====================
.br

.P
The first part of the guessing game program will ask for user input, processthat input, and check that the input is in the expected form\. To start, we‚Äôllallow the player to input a guess\. Enter the code in Listing 2\-1 into\fIsrc/main\.rs\fR\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::io;

fn main() {
    println!("Guess the number!");

    println!("Please input your guess\.");

    let mut guess = String::new();

    io::stdin()
        \.read_line(&mut guess)
        \.expect("Failed to read line");

    println!("You guessed: {guess}");
}

.EE

.RE
Listing 2\-1: Code that gets a guess from the user andprints it
.P
This code contains a lot of information, so let‚Äôs go over it line by line\. Toobtain user input and then print the result as output, we need to bring the`\fIio\fR` input/output library into scope\. The `\fIio\fR` library comes from thestandard library, known as `\fIstd\fR`:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {guess}");
# }

.EE

.RE
.P
By default, Rust has a set of items defined in the standard library that it bringsinto the scope of every program\. This set is called the \fIprelude\fR, and you cansee everything in it 
.UR \.\./std/prelude/index\.html
.UE
in the standard library documentation\.
.P
If a type you want to use isn‚Äôt in the prelude, you have to bring that typeinto scope explicitly with a `\fIuse\fR` statement\. Using the `\fIstd::io\fR` libraryprovides you with a number of useful features, including the ability to acceptuser input\.
.P
As you saw in Chapter 1, the `\fImain\fR` function is the entry point into theprogram:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {guess}");
# }

.EE

.RE
.P
The `\fIfn\fR` syntax declares a new function, the parentheses, `\fI()\fR`, indicate thereare no parameters, and the curly bracket, `\fI{\fR`, starts the body of the function\.
.P
As you also learned in Chapter 1, `\fIprintln!\fR` is a macro that prints a string tothe screen:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
    println!("Guess the number!");

    println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {guess}");
# }

.EE

.RE
.P
This code is printing a prompt stating what the game is and requesting inputfrom the user\.
.br

.br
\fBStoring Values with Variables\fR
.br
===============================
.br

.P
Next, we‚Äôll create a \fIvariable\fR to store the user input, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
    let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {guess}");
# }

.EE

.RE
.P
Now the program is getting interesting! There‚Äôs a lot going on in this littleline\. We use the `\fIlet\fR` statement to create the variable\. Here‚Äôs another example:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let apples = 5;

.EE

.RE
.P
This line creates a new variable named `\fIapples\fR` and binds it to the value 5\. InRust, variables are immutable by default, meaning once we give the variable avalue, the value won't change\. We‚Äôll be discussing this concept in detail inthe 
.UR ch03\-01\-variables\-and\-mutability\.html#variables\-and\-mutability
.UE
‚ÄúVariables and Mutability‚Äùsection in Chapter 3\. To make a variable mutable, we add `\fImut\fR` before thevariable name:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let apples = 5; // immutable
let mut bananas = 5; // mutable

.EE

.RE
.P
Note: The `\fI//\fR` syntax starts a comment that continues until the end of theline\. Rust ignores everything in comments\. We‚Äôll discuss comments in moredetail in 
.UR ch03\-04\-comments\.html
.UE
Chapter 3\.
.P
Returning to the guessing game program, you now know that `\fIlet mut guess\fR` willintroduce a mutable variable named `\fIguess\fR`\. The equal sign (`\fI=\fR`) tells Rust wewant to bind something to the variable now\. On the right of the equals sign isthe value that `\fIguess\fR` is bound to, which is the result of calling`\fIString::new\fR`, a function that returns a new instance of a `\fIString\fR`\.
.UR \.\./std/string/struct\.String\.html
.UE
`\fIString\fR` is a string type provided by the standardlibrary that is a growable, UTF\-8 encoded bit of text\.
.P
The `\fI::\fR` syntax in the `\fI::new\fR` line indicates that `\fInew\fR` is an associatedfunction of the `\fIString\fR` type\. An \fIassociated function\fR is a function that‚Äôsimplemented on a type, in this case `\fIString\fR`\. This `\fInew\fR` function creates anew, empty string\. You‚Äôll find a `\fInew\fR` function on many types, because it‚Äôs acommon name for a function that makes a new value of some kind\.
.P
In full, the `\fIlet mut guess = String::new();\fR` line has created a mutablevariable that is currently bound to a new, empty instance of a `\fIString\fR`\. Whew!
.br

.br
\fBReceiving User Input\fR
.br
======================
.br

.P
Recall that we included the input/output functionality from the standardlibrary with `\fIuse std::io;\fR` on the first line of the program\. Now we‚Äôll callthe `\fIstdin\fR` function from the `\fIio\fR` module, which will allow us to handle userinput:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
    io::stdin()
        \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {guess}");
# }

.EE

.RE
.P
If we hadn‚Äôt imported the `\fIio\fR` library with `\fIuse std::io\fR` at the beginning ofthe program, we could still use the function by writing this function call as`\fIstd::io::stdin\fR`\. The `\fIstdin\fR` function returns an instance of
.UR \.\./std/io/struct\.Stdin\.html
.UE
`\fIstd::io::Stdin\fR`, which is a type that represents ahandle to the standard input for your terminal\.
.P
Next, the line `\fI\.read_line(&mut guess)\fR` calls the 
.UR \.\./std/io/struct\.Stdin\.html#method\.read_line
.UE
`\fIread_line\fR` method on the standard input handle to get input from the user\.We‚Äôre also passing `\fI&mut guess\fR` as the argument to `\fIread_line\fR` to tell it whatstring to store the user input in\. The full job of `\fIread_line\fR` is to takewhatever the user types into standard input and append that into a string(without overwriting its contents), so we therefore pass that string as anargument\. The string argument needs to be mutable so the method can change thestring‚Äôs content\.
.P
The `\fI&\fR` indicates that this argument is a \fIreference\fR, which gives you a way tolet multiple parts of your code access one piece of data without needing tocopy that data into memory multiple times\. References are a complex feature,and one of Rust‚Äôs major advantages is how safe and easy it is to usereferences\. You don‚Äôt need to know a lot of those details to finish thisprogram\. For now, all you need to know is that like variables, references areimmutable by default\. Hence, you need to write `\fI&mut guess\fR` rather than`\fI&guess\fR` to make it mutable\. (Chapter 4 will explain references morethoroughly\.)
.br

.br
\fBHandling Potential Failure with the \fR
.br
======================================
.br
`\fIResult\fR` Type
.P
We‚Äôre still working on this line of code\. We‚Äôre now discussing a third line oftext, but note that it‚Äôs still part of a single logical line of code\. The nextpart is this method:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
        \.expect("Failed to read line");
# 
#     println!("You guessed: {guess}");
# }

.EE

.RE
.P
We could have written this code as:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
io::stdin()\.read_line(&mut guess)\.expect("Failed to read line");

.EE

.RE
.P
However, one long line is difficult to read, so it‚Äôs best to divide it\. It‚Äôsoften wise to introduce a newline and other whitespace to help break up longlines when you call a method with the `\fI\.method_name()\fR` syntax\. Now let‚Äôsdiscuss what this line does\.
.P
As mentioned earlier, `\fIread_line\fR` puts whatever the user enters into the stringwe pass to it, but it also returns a `\fIResult\fR` value\. 
.UR \.\./std/result/enum\.Result\.html
.UE
`\fIResult\fR` is an 
.UR ch06\-00\-enums\.html
.UE
\fIenumeration\fR, often called an \fIenum\fR,which is a type that can be in one of multiple possible states\. We call eachpossible state a \fIvariant\fR\.
.P
Chapter 6 will cover enums in more detail\. The purpose of these `\fIResult\fR` typesis to encode error\-handling information\.`\fIResult\fR`'s variants are `\fIOk\fR` and `\fIErr\fR`\. The `\fIOk\fR` variant indicates theoperation was successful, and inside `\fIOk\fR` is the successfully generated value\.The `\fIErr\fR` variant means the operation failed, and `\fIErr\fR` contains informationabout how or why the operation failed\.
.P
Values of the `\fIResult\fR` type, like values of any type, have methods defined onthem\. An instance of `\fIResult\fR` has an 
.UR \.\./std/result/enum\.Result\.html#method\.expect
.UE
`\fIexpect\fR` methodthat you can call\. If this instance of `\fIResult\fR` is an `\fIErr\fR` value, `\fIexpect\fR`will cause the program to crash and display the message that you passed as anargument to `\fIexpect\fR`\. If the `\fIread_line\fR` method returns an `\fIErr\fR`, it wouldlikely be the result of an error coming from the underlying operating system\.If this instance of `\fIResult\fR` is an `\fIOk\fR` value, `\fIexpect\fR` will take the returnvalue that `\fIOk\fR` is holding and return just that value to you so you can use it\.In this case, that value is the number of bytes in the user‚Äôs input\.
.P
If you don‚Äôt call `\fIexpect\fR`, the program will compile, but you‚Äôll get a warning:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
warning: unused `Result` that must be used
  \-\-> src/main\.rs:10:5
   |
10 |     io::stdin()\.read_line(&mut guess);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `guessing_game` (bin "guessing_game") generated 1 warning
    Finished dev [unoptimized + debuginfo] target(s) in 0\.59s

.EE

.RE
.P
Rust warns that you haven‚Äôt used the `\fIResult\fR` value returned from `\fIread_line\fR`,indicating that the program hasn‚Äôt handled a possible error\.
.P
The right way to suppress the warning is to actually write error handling, butin our case we just want to crash this program when a problem occurs, so we canuse `\fIexpect\fR`\. You‚Äôll learn about recovering from errors in 
.UR ch09\-02\-recoverable\-errors\-with\-result\.html
.UE
Chapter9\.
.br

.br
\fBPrinting Values with \fR
.br
=======================
.br
`\fIprintln!\fR` Placeholders
.P
Aside from the closing curly bracket, there‚Äôs only one more line to discuss inthe code so far:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
    println!("You guessed: {guess}");
# }

.EE

.RE
.P
This line prints the string that now contains the user‚Äôs input\. The `\fI{}\fR` set ofcurly brackets is a placeholder: think of `\fI{}\fR` as little crab pincers that holda value in place\. You can print more than one value using curly brackets: thefirst set of curly brackets holds the first value listed after the formatstring, the second set holds the second value, and so on\. Printing multiplevalues in one call to `\fIprintln!\fR` would look like this:
.RS
.IP \fBrust\fR 2

.br
.EX
let x = 5;
let y = 10;

println!("x = {} and y = {}", x, y);

.EE

.RE
.P
This code would print `\fIx = 5 and y = 10\fR`\.
.br

.br
\fBTesting the First Part\fR
.br
========================
.br

.P
Let‚Äôs test the first part of the guessing game\. Run it using `\fIcargo run\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 6\.44s
     Running `target/debug/guessing_game`
Guess the number!
Please input your guess\.
6
You guessed: 6

.EE

.RE
.P
At this point, the first part of the game is done: we‚Äôre getting input from thekeyboard and then printing it\.
.br

.br
\fBGenerating a Secret Number\fR
.br
============================
.br

.P
Next, we need to generate a secret number that the user will try to guess\. Thesecret number should be different every time so the game is fun to play morethan once\. We‚Äôll use a random number between 1 and 100 so the game isn‚Äôt toodifficult\. Rust doesn‚Äôt yet include random number functionality in its standardlibrary\. However, the Rust team does provide a 
.UR https://crates\.io/crates/rand
.UE
`\fIrand\fR` crate withsaid functionality\.
.br

.br
\fBUsing a Crate to Get More Functionality\fR
.br
=========================================
.br

.P
Remember that a crate is a collection of Rust source code files\. The projectwe‚Äôve been building is a \fIbinary crate\fR, which is an executable\. The `\fIrand\fR`crate is a \fIlibrary crate\fR, which contains code intended to be used in otherprograms and can't be executed on its own\.
.P
Cargo‚Äôs coordination of external crates is where Cargo really shines\. Before wecan write code that uses `\fIrand\fR`, we need to modify the \fICargo\.toml\fR file toinclude the `\fIrand\fR` crate as a dependency\. Open that file now and add thefollowing line to the bottom beneath the `\fI[dependencies]\fR` section header thatCargo created for you\. Be sure to specify `\fIrand\fR` exactly as we have here, withthis version number, or the code examples in this tutorial may not work\.Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
rand = "0\.8\.3"

.EE

.RE
.P
In the \fICargo\.toml\fR file, everything that follows a header is part of thatsection that continues until another section starts\. In `\fI[dependencies]\fR` youtell Cargo which external crates your project depends on and which versions ofthose crates you require\. In this case, we specify the `\fIrand\fR` crate with thesemantic version specifier `\fI0\.8\.3\fR`\. Cargo understands 
.UR http://semver\.org
.UE
SemanticVersioning (sometimes called \fISemVer\fR), which is astandard for writing version numbers\. The number `\fI0\.8\.3\fR` is actually shorthandfor `\fI^0\.8\.3\fR`, which means any version that is at least `\fI0\.8\.3\fR` but below`\fI0\.9\.0\fR`\.
.P
Cargo considers these versions to have public APIs compatible with version`\fI0\.8\.3\fR`, and this specification ensures you‚Äôll get the latest patch releasethat will still compile with the code in this chapter\. Any version `\fI0\.9\.0\fR` orgreater is not guaranteed to have the same API as what the following examplesuse\.
.P
Now, without changing any of the code, let‚Äôs build the project, as shown inListing 2\-2\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
    Updating crates\.io index
  Downloaded rand v0\.8\.3
  Downloaded libc v0\.2\.86
  Downloaded getrandom v0\.2\.2
  Downloaded cfg\-if v1\.0\.0
  Downloaded ppv\-lite86 v0\.2\.10
  Downloaded rand_chacha v0\.3\.0
  Downloaded rand_core v0\.6\.2
   Compiling rand_core v0\.6\.2
   Compiling libc v0\.2\.86
   Compiling getrandom v0\.2\.2
   Compiling cfg\-if v1\.0\.0
   Compiling ppv\-lite86 v0\.2\.10
   Compiling rand_chacha v0\.3\.0
   Compiling rand v0\.8\.3
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 2\.53s

.EE

.RE
Listing 2\-2: The output from running `\fIcargo build\fR` afteradding the rand crate as a dependency
.P
You may see different version numbers (but they will all be compatible with thecode, thanks to SemVer!), different lines (depending on the operating system),and the lines may be in a different order\.
.P
When we include an external dependency, Cargo fetches the latest versions ofeverything that dependency needs from the \fIregistry\fR, which is a copy of datafrom 
.UR https://crates\.io/
.UE
Crates\.io\. Crates\.io is where people in the Rust ecosystempost their open source Rust projects for others to use\.
.P
After updating the registry, Cargo checks the `\fI[dependencies]\fR` section anddownloads any crates listed that aren‚Äôt already downloaded\. In this case,although we only listed `\fIrand\fR` as a dependency, Cargo also grabbed other cratesthat `\fIrand\fR` depends on to work\. After downloading the crates, Rust compilesthem and then compiles the project with the dependencies available\.
.P
If you immediately run `\fIcargo build\fR` again without making any changes, youwon‚Äôt get any output aside from the `\fIFinished\fR` line\. Cargo knows it has alreadydownloaded and compiled the dependencies, and you haven‚Äôt changed anythingabout them in your \fICargo\.toml\fR file\. Cargo also knows that you haven‚Äôt changedanything about your code, so it doesn‚Äôt recompile that either\. With nothing todo, it simply exits\.
.P
If you open up the \fIsrc/main\.rs\fR file, make a trivial change, and then save itand build again, you‚Äôll only see two lines of output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 2\.53 secs

.EE

.RE
.P
These lines show Cargo only updates the build with your tiny change to the\fIsrc/main\.rs\fR file\. Your dependencies haven‚Äôt changed, so Cargo knows it canreuse what it has already downloaded and compiled for those\.
.br

.br
\fBEnsuring Reproducible Builds with the \fR
.br
========================================
.br
\fICargo\.lock\fR File
.P
Cargo has a mechanism that ensures you can rebuild the same artifact every timeyou or anyone else builds your code: Cargo will use only the versions of thedependencies you specified until you indicate otherwise\. For example, say thatnext week version 0\.8\.4 of the `\fIrand\fR` crate comes out, and that versioncontains an important bug fix, but it also contains a regression that willbreak your code\. To handle this, Rust creates the \fICargo\.lock\fR file the firsttime you run `\fIcargo build\fR`, so we now have this in the \fIguessing_game\fRdirectory\.
.P
When you build a project for the first time, Cargo figures out all theversions of the dependencies that fit the criteria and then writes them tothe \fICargo\.lock\fR file\. When you build your project in the future, Cargo willsee that the \fICargo\.lock\fR file exists and use the versions specified thererather than doing all the work of figuring out versions again\. This lets youhave a reproducible build automatically\. In other words, your project willremain at `\fI0\.8\.3\fR` until you explicitly upgrade, thanks to the \fICargo\.lock\fRfile\. Because the \fICargo\.lock\fR file is important for reproducible builds, it'soften checked into source control with the rest of the code in your project\.
.br

.br
\fBUpdating a Crate to Get a New Version\fR
.br
=======================================
.br

.P
When you \fIdo\fR want to update a crate, Cargo provides the command `\fIupdate\fR`,which will ignore the \fICargo\.lock\fR file and figure out all the latest versionsthat fit your specifications in \fICargo\.toml\fR\. Cargo will then write thoseversions to the \fICargo\.lock\fR file\. Otherwise, by default, Cargo will only lookfor versions greater than `\fI0\.8\.3\fR` and less than `\fI0\.9\.0\fR`\. If the `\fIrand\fR` cratehas released the two new versions `\fI0\.8\.4\fR` and `\fI0\.9\.0\fR` you would see thefollowing if you ran `\fIcargo update\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo update
    Updating crates\.io index
    Updating rand v0\.8\.3 \-> v0\.8\.4

.EE

.RE
.P
Cargo ignores the `\fI0\.9\.0\fR` release\. At this point, you would also notice achange in your \fICargo\.lock\fR file noting that the version of the `\fIrand\fR` crateyou are now using is `\fI0\.8\.4\fR`\. To use `\fIrand\fR` version `\fI0\.9\.0\fR` or any version inthe `\fI0\.9\.x\fR` series, you‚Äôd have to update the \fICargo\.toml\fR file to look likethis instead:
.RS
.IP \fBtoml\fR 2

.br
.EX
[dependencies]
rand = "0\.9\.0"

.EE

.RE
.P
The next time you run `\fIcargo build\fR`, Cargo will update the registry of cratesavailable and reevaluate your `\fIrand\fR` requirements according to the new versionyou have specified\.
.P
There‚Äôs a lot more to say about 
.UR http://doc\.crates\.io
.UE
Cargo and 
.UR http://doc\.crates\.io/crates\-io\.html
.UE
itsecosystem which we‚Äôll discuss in Chapter 14, butfor now, that‚Äôs all you need to know\. Cargo makes it very easy to reuselibraries, so Rustaceans are able to write smaller projects that are assembledfrom a number of packages\.
.br

.br
\fBGenerating a Random Number\fR
.br
============================
.br

.P
Let‚Äôs start using `\fIrand\fR` to generate a number to guess\. The next step is toupdate \fIsrc/main\.rs\fR, as shown in Listing 2\-3\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::io;
use rand::Rng;

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);

    println!("The secret number is: {secret_number}");

    println!("Please input your guess\.");

    let mut guess = String::new();

    io::stdin()
        \.read_line(&mut guess)
        \.expect("Failed to read line");

    println!("You guessed: {guess}");
}

.EE

.RE
Listing 2\-3: Adding code to generate a randomnumber
.P
First, we add the line `\fIuse rand::Rng\fR`\. The `\fIRng\fR` trait defines methods thatrandom number generators implement, and this trait must be in scope for us touse those methods\. Chapter 10 will cover traits in detail\.
.P
Next, we‚Äôre adding two lines in the middle\. In the first line, we call the`\fIrand::thread_rng\fR` function that gives us the particular random numbergenerator that we‚Äôre going to use: one that is local to the current thread ofexecution and seeded by the operating system\. Then we call the `\fIgen_range\fR`method on the random number generator\. This method is defined by the `\fIRng\fR`trait that we brought into scope with the `\fIuse rand::Rng\fR` statement\. The`\fIgen_range\fR` method takes a range expression as an argument and generates arandom number in the range\. The kind of range expression we‚Äôre using here takesthe form `\fIstart\.\.=end\fR` and is inclusive on the lower and upper bounds, so weneed to specify `\fI1\.\.=100\fR` to request a number between 1 and 100\.
.P
Note: You won‚Äôt just know which traits to use and which methods and functionsto call from a crate, so each crate has documentation with instructions forusing it\. Another neat feature of Cargo is that running the `\fIcargo doc \-\-open\fR` command will build documentation provided by all of your dependencieslocally and open it in your browser\. If you‚Äôre interested in otherfunctionality in the `\fIrand\fR` crate, for example, run `\fIcargo doc \-\-open\fR` andclick `\fIrand\fR` in the sidebar on the left\.
.P
The second new line prints the secret number\. This is useful while we‚Äôredeveloping the program to be able to test it, but we‚Äôll delete it from thefinal version\. It‚Äôs not much of a game if the program prints the answer as soonas it starts!
.P
Try running the program a few times:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 2\.53s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 7
Please input your guess\.
4
You guessed: 4

$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0\.02s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 83
Please input your guess\.
5
You guessed: 5

.EE

.RE
.P
You should get different random numbers, and they should all be numbers between1 and 100\. Great job!
.br

.br
\fBComparing the Guess to the Secret Number\fR
.br
==========================================
.br

.P
Now that we have user input and a random number, we can compare them\. That stepis shown in Listing 2\-4\. Note that this code won‚Äôt compile quite yet, as wewill explain\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use rand::Rng;
use std::cmp::Ordering;
use std::io;

fn main() {
    // \-\-snip\-\-
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
#     println!("The secret number is: {secret_number}");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");

    println!("You guessed: {guess}");

    match guess\.cmp(&secret_number) {
        Ordering::Less => println!("Too small!"),
        Ordering::Greater => println!("Too big!"),
        Ordering::Equal => println!("You win!"),
    }
}

.EE

.RE
Listing 2\-4: Handling the possible return values ofcomparing two numbers
.P
First we add another `\fIuse\fR` statement, bringing a type called`\fIstd::cmp::Ordering\fR` into scope from the standard library\. The `\fIOrdering\fR` typeis another enum and has the variants `\fILess\fR`, `\fIGreater\fR`, and `\fIEqual\fR`\. These arethe three outcomes that are possible when you compare two values\.
.P
Then we add five new lines at the bottom that use the `\fIOrdering\fR` type\. The`\fIcmp\fR` method compares two values and can be called on anything that can becompared\. It takes a reference to whatever you want to compare with: here it‚Äôscomparing the `\fIguess\fR` to the `\fIsecret_number\fR`\. Then it returns a variant of the`\fIOrdering\fR` enum we brought into scope with the `\fIuse\fR` statement\. We use a
.UR ch06\-02\-match\.html
.UE
`\fImatch\fR` expression to decide what to do next based onwhich variant of `\fIOrdering\fR` was returned from the call to `\fIcmp\fR` with the valuesin `\fIguess\fR` and `\fIsecret_number\fR`\.
.P
A `\fImatch\fR` expression is made up of \fIarms\fR\. An arm consists of a \fIpattern\fR tomatch against, and the code that should be run if the value given to `\fImatch\fR`fits that arm‚Äôs pattern\. Rust takes the value given to `\fImatch\fR` and looksthrough each arm‚Äôs pattern in turn\. Patterns and the `\fImatch\fR` construct arepowerful Rust features that let you express a variety of situations your codemight encounter and make sure that you handle them all\. These features will becovered in detail in Chapter 6 and Chapter 18, respectively\.
.P
Let‚Äôs walk through an example with the `\fImatch\fR` expression we use here\. Say thatthe user has guessed 50 and the randomly generated secret number this time is38\. When the code compares 50 to 38, the `\fIcmp\fR` method will return`\fIOrdering::Greater\fR`, because 50 is greater than 38\. The `\fImatch\fR` expression getsthe `\fIOrdering::Greater\fR` value and starts checking each arm‚Äôs pattern\. It looksat the first arm‚Äôs pattern, `\fIOrdering::Less\fR`, and sees that the value`\fIOrdering::Greater\fR` does not match `\fIOrdering::Less\fR`, so it ignores the code inthat arm and moves to the next arm\. The next arm‚Äôs pattern is`\fIOrdering::Greater\fR`, which \fIdoes\fR match `\fIOrdering::Greater\fR`! The associatedcode in that arm will execute and print `\fIToo big!\fR` to the screen\. The `\fImatch\fR`expression ends after the first successful match, so it won‚Äôt look at the lastarm in this scenario\.
.P
However, the code in Listing 2\-4 won‚Äôt compile yet\. Let‚Äôs try it:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling libc v0\.2\.86
   Compiling getrandom v0\.2\.2
   Compiling cfg\-if v1\.0\.0
   Compiling ppv\-lite86 v0\.2\.10
   Compiling rand_core v0\.6\.2
   Compiling rand_chacha v0\.3\.0
   Compiling rand v0\.8\.3
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
error[E0308]: mismatched types
  \-\-> src/main\.rs:22:21
   |
22 |     match guess\.cmp(&secret_number) {
   |                     ^^^^^^^^^^^^^^ expected struct `String`, found integer
   |
   = note: expected reference `&String`
              found reference `&{integer}`

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `guessing_game` due to previous error

.EE

.RE
.P
The core of the error states that there are \fImismatched types\fR\. Rust has astrong, static type system\. However, it also has type inference\. When we wrote`\fIlet mut guess = String::new()\fR`, Rust was able to infer that `\fIguess\fR` should bea `\fIString\fR` and didn‚Äôt make us write the type\. The `\fIsecret_number\fR`, on the otherhand, is a number type\. A few of Rust‚Äôs number types can have a value between 1and 100: `\fIi32\fR`, a 32\-bit number; `\fIu32\fR`, an unsigned 32\-bit number; `\fIi64\fR`, a64\-bit number; as well as others\. Unless otherwise specified, Rust defaults toan `\fIi32\fR`, which is the type of `\fIsecret_number\fR` unless you add type informationelsewhere that would cause Rust to infer a different numerical type\. The reasonfor the error is that Rust cannot compare a string and a number type\.
.P
Ultimately, we want to convert the `\fIString\fR` the program reads as input into areal number type so we can compare it numerically to the secret number\. We do soby adding this line to the `\fImain\fR` function body:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
#     println!("The secret number is: {secret_number}");
# 
#     println!("Please input your guess\.");
# 
    // \-\-snip\-\-

    let mut guess = String::new();

    io::stdin()
        \.read_line(&mut guess)
        \.expect("Failed to read line");

    let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");

    println!("You guessed: {guess}");

    match guess\.cmp(&secret_number) {
        Ordering::Less => println!("Too small!"),
        Ordering::Greater => println!("Too big!"),
        Ordering::Equal => println!("You win!"),
    }
# }

.EE

.RE
.P
The line is:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");

.EE

.RE
.P
We create a variable named `\fIguess\fR`\. But wait, doesn‚Äôt the program already havea variable named `\fIguess\fR`? It does, but helpfully Rust allows us to \fIshadow\fR theprevious value of `\fIguess\fR` with a new one\. Shadowing lets us reuse the `\fIguess\fR`variable name rather than forcing us to create two unique variables, such as`\fIguess_str\fR` and `\fIguess\fR` for example\. We‚Äôll cover this in more detail in Chapter3, but for now know that this feature is often used when you want to convert avalue from one type to another type\.
.P
We bind this new variable to the expression `\fIguess\.trim()\.parse()\fR`\. The `\fIguess\fR`in the expression refers to the original `\fIguess\fR` variable that contained theinput as a string\. The `\fItrim\fR` method on a `\fIString\fR` instance will eliminate anywhitespace at the beginning and end, which we must do to be able to compare thestring to the `\fIu32\fR`, which can only contain numerical data\. The user must pressenter to satisfy `\fIread_line\fR` and input theirguess, which adds a newline character to the string\. For example, if the usertypes 5 and presses enter, `\fIguess\fR` looks like this: `\fI5\n\fR`\. The `\fI\n\fR`represents ‚Äúnewline‚Äù\. (On Windows, pressing enter results in a carriage return and a newline,`\fI\r\n\fR`)\. The `\fItrim\fR` method eliminates `\fI\n\fR` or `\fI\r\n\fR`, resulting in just `\fI5\fR`\.
.P
The 
.UR \.\./std/primitive\.str\.html#method\.parse
.UE
`\fIparse\fR` method on strings converts a string toanother type\. Here, we use it to convert from a string to a number\. We need totell Rust the exact number type we want by using `\fIlet guess: u32\fR`\. The colon(`\fI:\fR`) after `\fIguess\fR` tells Rust we‚Äôll annotate the variable‚Äôs type\. Rust has afew built\-in number types; the `\fIu32\fR` seen here is an unsigned, 32\-bit integer\.It‚Äôs a good default choice for a small positive number\. You‚Äôll learn aboutother number types in Chapter 3\. Additionally, the `\fIu32\fR` annotation in thisexample program and the comparison with `\fIsecret_number\fR` means that Rust willinfer that `\fIsecret_number\fR` should be a `\fIu32\fR` as well\. So now the comparisonwill be between two values of the same type!
.P
The `\fIparse\fR` method will only work on characters that can logically be convertedinto numbers and so can easily cause errors\. If, for example, the stringcontained `\fIAüëç%\fR`, there would be no way to convert that to a number\. Because itmight fail, the `\fIparse\fR` method returns a `\fIResult\fR` type, much as the `\fIread_line\fR`method does (discussed earlier in 
.UR #handling\-potential\-failure\-with\-the\-result\-type
.UE
‚ÄúHandling Potential Failure with the`\fIResult\fR` Type‚Äù)\. We‚Äôll treat this `\fIResult\fR` the same way by using the `\fIexpect\fR` methodagain\. If `\fIparse\fR` returns an `\fIErr\fR` `\fIResult\fR` variant because it couldn‚Äôt createa number from the string, the `\fIexpect\fR` call will crash the game and print themessage we give it\. If `\fIparse\fR` can successfully convert the string to a number,it will return the `\fIOk\fR` variant of `\fIResult\fR`, and `\fIexpect\fR` will return thenumber that we want from the `\fIOk\fR` value\.
.P
Let‚Äôs run the program now!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.43s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 58
Please input your guess\.
  76
You guessed: 76
Too big!

.EE

.RE
.P
Nice! Even though spaces were added before the guess, the program still figuredout that the user guessed 76\. Run the program a few times to verify thedifferent behavior with different kinds of input: guess the number correctly,guess a number that is too high, and guess a number that is too low\.
.P
We have most of the game working now, but the user can make only one guess\.Let‚Äôs change that by adding a loop!
.br

.br
\fBAllowing Multiple Guesses with Looping\fR
.br
========================================
.br

.P
The `\fIloop\fR` keyword creates an infinite loop\. We‚Äôll add a loop to give usersmore chances at guessing the number:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
    // \-\-snip\-\-

    println!("The secret number is: {secret_number}");

    loop {
        println!("Please input your guess\.");

        // \-\-snip\-\-

# 
#         let mut guess = String::new();
# 
#         io::stdin()
#             \.read_line(&mut guess)
#             \.expect("Failed to read line");
# 
#         let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");
# 
#         println!("You guessed: {guess}");
# 
        match guess\.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => println!("You win!"),
        }
    }
}

.EE

.RE
.P
As you can see, we‚Äôve moved everything from the guess input prompt onward intoa loop\. Be sure to indent the lines inside the loop another four spaces eachand run the program again\. The program will now ask for another guess forever,which actually introduces a new problem\. It doesn‚Äôt seem like the user can quit!
.P
The user could always interrupt the program by using the keyboard shortcutctrl\-c\. But there‚Äôs another way to escape thisinsatiable monster, as mentioned in the `\fIparse\fR` discussion in 
.UR #comparing\-the\-guess\-to\-the\-secret\-number
.UE
‚ÄúComparing theGuess to the Secret Number‚Äù: if the user enters a non\-number answer, the program will crash\. Wecan take advantage of that to allow the user to quit, as shown here:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.50s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 59
Please input your guess\.
45
You guessed: 45
Too small!
Please input your guess\.
60
You guessed: 60
Too big!
Please input your guess\.
59
You guessed: 59
You win!
Please input your guess\.
quit
thread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main\.rs:28:47
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
Typing `\fIquit\fR` will quit the game, but as you‚Äôll notice so will entering anyother non\-number input\. This is suboptimal to say the least; we want the gameto also stop when the correct number is guessed\.
.br

.br
\fBQuitting After a Correct Guess\fR
.br
================================
.br

.P
Let‚Äôs program the game to quit when the user wins by adding a `\fIbreak\fR` statement:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
#     println!("The secret number is: {secret_number}");
# 
#     loop {
#         println!("Please input your guess\.");
# 
#         let mut guess = String::new();
# 
#         io::stdin()
#             \.read_line(&mut guess)
#             \.expect("Failed to read line");
# 
#         let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");
# 
#         println!("You guessed: {guess}");
# 
        // \-\-snip\-\-

        match guess\.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}

.EE

.RE
.P
Adding the `\fIbreak\fR` line after `\fIYou win!\fR` makes the program exit the loop whenthe user guesses the secret number correctly\. Exiting the loop also meansexiting the program, because the loop is the last part of `\fImain\fR`\.
.br

.br
\fBHandling Invalid Input\fR
.br
========================
.br

.P
To further refine the game‚Äôs behavior, rather than crashing the program whenthe user inputs a non\-number, let‚Äôs make the game ignore a non\-number so theuser can continue guessing\. We can do that by altering the line where `\fIguess\fR`is converted from a `\fIString\fR` to a `\fIu32\fR`, as shown in Listing 2\-5\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
#     println!("The secret number is: {secret_number}");
# 
#     loop {
#         println!("Please input your guess\.");
# 
#         let mut guess = String::new();
# 
        // \-\-snip\-\-

        io::stdin()
            \.read_line(&mut guess)
            \.expect("Failed to read line");

        let guess: u32 = match guess\.trim()\.parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {guess}");

        // \-\-snip\-\-
# 
#         match guess\.cmp(&secret_number) {
#             Ordering::Less => println!("Too small!"),
#             Ordering::Greater => println!("Too big!"),
#             Ordering::Equal => {
#                 println!("You win!");
#                 break;
#             }
#         }
#     }
# }

.EE

.RE
Listing 2\-5: Ignoring a non\-number guess and asking foranother guess instead of crashing the program
.P
We switch from an `\fIexpect\fR` call to a `\fImatch\fR` expression to move from crashingon an error to handling the error\. Remember that `\fIparse\fR` returns a `\fIResult\fR`type and `\fIResult\fR` is an enum that has the variants `\fIOk\fR` and `\fIErr\fR`\. We‚Äôre usinga `\fImatch\fR` expression here, as we did with the `\fIOrdering\fR` result of the `\fIcmp\fR`method\.
.P
If `\fIparse\fR` is able to successfully turn the string into a number, it willreturn an `\fIOk\fR` value that contains the resulting number\. That `\fIOk\fR` value willmatch the first arm‚Äôs pattern, and the `\fImatch\fR` expression will just return the`\fInum\fR` value that `\fIparse\fR` produced and put inside the `\fIOk\fR` value\. That numberwill end up right where we want it in the new `\fIguess\fR` variable we‚Äôre creating\.
.P
If `\fIparse\fR` is \fInot\fR able to turn the string into a number, it will return an`\fIErr\fR` value that contains more information about the error\. The `\fIErr\fR` valuedoes not match the `\fIOk(num)\fR` pattern in the first `\fImatch\fR` arm, but it doesmatch the `\fIErr(_)\fR` pattern in the second arm\. The underscore, `\fI_\fR`, is acatchall value; in this example, we‚Äôre saying we want to match all `\fIErr\fR`values, no matter what information they have inside them\. So the program willexecute the second arm‚Äôs code, `\fIcontinue\fR`, which tells the program to go to thenext iteration of the `\fIloop\fR` and ask for another guess\. So, effectively, theprogram ignores all errors that `\fIparse\fR` might encounter!
.P
Now everything in the program should work as expected\. Let‚Äôs try it:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 4\.45s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 61
Please input your guess\.
10
You guessed: 10
Too small!
Please input your guess\.
99
You guessed: 99
Too big!
Please input your guess\.
foo
Please input your guess\.
61
You guessed: 61
You win!

.EE

.RE
.P
Awesome! With one tiny final tweak, we will finish the guessing game\. Recallthat the program is still printing the secret number\. That worked well fortesting, but it ruins the game\. Let‚Äôs delete the `\fIprintln!\fR` that outputs thesecret number\. Listing 2\-6 shows the final code\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use rand::Rng;
use std::cmp::Ordering;
use std::io;

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);

    loop {
        println!("Please input your guess\.");

        let mut guess = String::new();

        io::stdin()
            \.read_line(&mut guess)
            \.expect("Failed to read line");

        let guess: u32 = match guess\.trim()\.parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {guess}");

        match guess\.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}

.EE

.RE
Listing 2\-6: Complete guessing game code
.br

.br
\fBSummary\fR
.br
=========
.br

.P
At this point, you‚Äôve successfully built the guessing game\. Congratulations!
.P
This project was a hands\-on way to introduce you to many new Rust concepts:`\fIlet\fR`, `\fImatch\fR`, functions, the use of external crates, and more\. In the nextfew chapters, you‚Äôll learn about these concepts in more detail\. Chapter 3covers concepts that most programming languages have, such as variables, datatypes, and functions, and shows how to use them in Rust\. Chapter 4 exploresownership, a feature that makes Rust different from other languages\. Chapter 5discusses structs and method syntax, and Chapter 6 explains how enums work\.
.SH "Common Programming Concepts"

.br

.br
\fBCommon Programming Concepts\fR
.br
=============================
.br

.P
This chapter covers concepts that appear in almost every programming languageand how they work in Rust\. Many programming languages have much in common attheir core\. None of the concepts presented in this chapter are unique to Rust,but we‚Äôll discuss them in the context of Rust and explain the conventionsaround using these concepts\.
.P
Specifically, you‚Äôll learn about variables, basic types, functions, comments,and control flow\. These foundations will be in every Rust program, and learningthem early will give you a strong core to start from\.
.br

.br
\fBKeywords\fR
.br
==========
.br

.P
The Rust language has a set of \fIkeywords\fR that are reserved for use bythe language only, much as in other languages\. Keep in mind that you cannotuse these words as names of variables or functions\. Most of the keywords havespecial meanings, and you‚Äôll be using them to do various tasks in your Rustprograms; a few have no current functionality associated with them but havebeen reserved for functionality that might be added to Rust in the future\. Youcan find a list of the keywords in 
.UR appendix\-01\-keywords\.md
.UE
Appendix A\.
.SH "Variables and Mutability"

.br

.br
\fBVariables and Mutability\fR
.br
==========================
.br

.P
As mentioned in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#storing\-values\-with\-variables
.UE
‚ÄúStoring Values withVariables‚Äù section, by defaultvariables are immutable\. This is one of many nudges Rust gives you to writeyour code in a way that takes advantage of the safety and easy concurrency thatRust offers\. However, you still have the option to make your variables mutable\.Let‚Äôs explore how and why Rust encourages you to favor immutability and whysometimes you might want to opt out\.
.P
When a variable is immutable, once a value is bound to a name, you can‚Äôt changethat value\. To illustrate this, let‚Äôs generate a new project called \fIvariables\fRin your \fIprojects\fR directory by using `\fIcargo new variables\fR`\.
.P
Then, in your new \fIvariables\fR directory, open \fIsrc/main\.rs\fR and replace itscode with the following code\. This code won‚Äôt compile just yet, we‚Äôll firstexamine the immutability error\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = 5;
    println!("The value of x is: {x}");
    x = 6;
    println!("The value of x is: {x}");
}

.EE

.RE
.P
Save and run the program using `\fIcargo run\fR`\. You should receive an errormessage, as shown in this output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling variables v0\.1\.0 (file:///projects/variables)
error[E0384]: cannot assign twice to immutable variable `x`
 \-\-> src/main\.rs:4:5
  |
2 |     let x = 5;
  |         \-
  |         |
  |         first assignment to `x`
  |         help: consider making this binding mutable: `mut x`
3 |     println!("The value of x is: {x}");
4 |     x = 6;
  |     ^^^^^ cannot assign twice to immutable variable

For more information about this error, try `rustc \-\-explain E0384`\.
error: could not compile `variables` due to previous error

.EE

.RE
.P
This example shows how the compiler helps you find errors in your programs\.Compiler errors can be frustrating, but really they only mean your programisn‚Äôt safely doing what you want it to do yet; they do \fInot\fR mean that you‚Äôrenot a good programmer! Experienced Rustaceans still get compiler errors\.
.P
The error message indicates that the cause of the error is that you `\fIcannot assign twice to immutable variable `x`\fR`, because you tried to assign a secondvalue to the immutable `\fIx\fR` variable\.
.P
It‚Äôs important that we get compile\-time errors when we attempt to change avalue that‚Äôs designated as immutable because this very situation can lead tobugs\. If one part of our code operates on the assumption that a value willnever change and another part of our code changes that value, it‚Äôs possiblethat the first part of the code won‚Äôt do what it was designed to do\. The causeof this kind of bug can be difficult to track down after the fact, especiallywhen the second piece of code changes the value only \fIsometimes\fR\. The Rustcompiler guarantees that when you state a value won‚Äôt change, it really won‚Äôtchange, so you don‚Äôt have to keep track of it yourself\. Your code is thuseasier to reason through\.
.P
But mutability can be very useful, and can make code more convenient to write\.Although variables are immutable by default, you can make them mutable by adding`\fImut\fR` in front of the variable name as you did in Chapter 2\. Adding `\fImut\fR` alsoconveys intent to future readers of the code by indicating that other parts ofthe code will be changing this variable‚Äôs value\.
.P
For example, let‚Äôs change \fIsrc/main\.rs\fR to the following:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut x = 5;
    println!("The value of x is: {x}");
    x = 6;
    println!("The value of x is: {x}");
}

.EE

.RE
.P
When we run the program now, we get this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling variables v0\.1\.0 (file:///projects/variables)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.30s
     Running `target/debug/variables`
The value of x is: 5
The value of x is: 6

.EE

.RE
.P
We‚Äôre allowed to change the value bound to `\fIx\fR` from `\fI5\fR` to `\fI6\fR` when `\fImut\fR`is used\. Ultimately, deciding whether to use mutability or not is up to you anddepends on what you think is clearest in that particular situation\.
.br

.br
\fBConstants\fR
.br
===========
.br

.P
Like immutable variables, \fIconstants\fR are values that are bound to a name andare not allowed to change, but there are a few differences between constantsand variables\.
.P
First, you aren‚Äôt allowed to use `\fImut\fR` with constants\. Constants aren‚Äôt justimmutable by default‚Äîthey‚Äôre always immutable\. You declare constants using the`\fIconst\fR` keyword instead of the `\fIlet\fR` keyword, and the type of the value \fImust\fRbe annotated\. We‚Äôre about to cover types and type annotations in the nextsection, 
.UR ch03\-02\-data\-types\.html#data\-types
.UE
‚ÄúData Types,‚Äù so don‚Äôt worry about thedetails right now\. Just know that you must always annotate the type\.
.P
Constants can be declared in any scope, including the global scope, which makesthem useful for values that many parts of code need to know about\.
.P
The last difference is that constants may be set only to a constant expression,not the result of a value that could only be computed at runtime\.
.P
Here‚Äôs an example of a constant declaration:
.RS
.IP \fBrust\fR 2

.br
.EX
const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;

.EE

.RE
.P
The constant‚Äôs name is `\fITHREE_HOURS_IN_SECONDS\fR` and its value is set to theresult of multiplying 60 (the number of seconds in a minute) by 60 (the numberof minutes in an hour) by 3 (the number of hours we want to count in thisprogram)\. Rust‚Äôs naming convention for constants is to use all uppercase withunderscores between words\. The compiler is able to evaluate a limited set ofoperations at compile time, which lets us choose to write out this value in away that‚Äôs easier to understand and verify, rather than setting this constantto the value 10,800\. See the 
.UR \.\./reference/const_eval\.html
.UE
Rust Reference‚Äôs section on constantevaluation for more information on what operations can be usedwhen declaring constants\.
.P
Constants are valid for the entire time a program runs, within the scope theywere declared in\. This property makes constants useful for values in yourapplication domain that multiple parts of the program might need to know about,such as the maximum number of points any player of a game is allowed to earn orthe speed of light\.
.P
Naming hardcoded values used throughout your program as constants is useful inconveying the meaning of that value to future maintainers of the code\. It alsohelps to have only one place in your code you would need to change if thehardcoded value needed to be updated in the future\.
.br

.br
\fBShadowing\fR
.br
===========
.br

.P
As you saw in the guessing game tutorial in 
.UR ch02\-00\-guessing\-game\-tutorial\.html#comparing\-the\-guess\-to\-the\-secret\-number
.UE
Chapter2, you can declare anew variable with the same name as a previous variable\. Rustaceans say that thefirst variable is \fIshadowed\fR by the second, which means that the secondvariable is what the compiler will see when you use the name of the variable\.In effect, the second variable overshadows the first, taking any uses of thevariable name to itself until either it itself is shadowed or the scope ends\.We can shadow a variable by using the same variable‚Äôs name and repeating theuse of the `\fIlet\fR` keyword as follows:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 5;

    let x = x + 1;

    {
        let x = x * 2;
        println!("The value of x in the inner scope is: {x}");
    }

    println!("The value of x is: {x}");
}

.EE

.RE
.P
This program first binds `\fIx\fR` to a value of `\fI5\fR`\. Then it creates a new variable`\fIx\fR` by repeating `\fIlet x =\fR`, taking the original value and adding `\fI1\fR` so thevalue of `\fIx\fR` is then `\fI6\fR`\. Then, within an inner scope created with the curlybrackets, the third `\fIlet\fR` statement also shadows `\fIx\fR` and creates a newvariable, multiplying the previous value by `\fI2\fR` to give `\fIx\fR` a value of `\fI12\fR`\.When that scope is over, the inner shadowing ends and `\fIx\fR` returns to being `\fI6\fR`\.When we run this program, it will output the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling variables v0\.1\.0 (file:///projects/variables)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/variables`
The value of x in the inner scope is: 12
The value of x is: 6

.EE

.RE
.P
Shadowing is different from marking a variable as `\fImut\fR`, because we‚Äôll get acompile\-time error if we accidentally try to reassign to this variable withoutusing the `\fIlet\fR` keyword\. By using `\fIlet\fR`, we can perform a few transformationson a value but have the variable be immutable after those transformations havebeen completed\.
.P
The other difference between `\fImut\fR` and shadowing is that because we‚Äôreeffectively creating a new variable when we use the `\fIlet\fR` keyword again, we canchange the type of the value but reuse the same name\. For example, say ourprogram asks a user to show how many spaces they want between some text byinputting space characters, and then we want to store that input as a number:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let spaces = "   ";
    let spaces = spaces\.len();
# }

.EE

.RE
.P
The first `\fIspaces\fR` variable is a string type and the second `\fIspaces\fR` variableis a number type\. Shadowing thus spares us from having to come up withdifferent names, such as `\fIspaces_str\fR` and `\fIspaces_num\fR`; instead, we can reusethe simpler `\fIspaces\fR` name\. However, if we try to use `\fImut\fR` for this, as shownhere, we‚Äôll get a compile\-time error:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let mut spaces = "   ";
    spaces = spaces\.len();
# }

.EE

.RE
.P
The error says we‚Äôre not allowed to mutate a variable‚Äôs type:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling variables v0\.1\.0 (file:///projects/variables)
error[E0308]: mismatched types
 \-\-> src/main\.rs:3:14
  |
2 |     let mut spaces = "   ";
  |                      \-\-\-\-\- expected due to this value
3 |     spaces = spaces\.len();
  |              ^^^^^^^^^^^^ expected `&str`, found `usize`

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `variables` due to previous error

.EE

.RE
.P
Now that we‚Äôve explored how variables work, let‚Äôs look at more data types theycan have\.
.SH "Data Types"

.br

.br
\fBData Types\fR
.br
============
.br

.P
Every value in Rust is of a certain \fIdata type\fR, which tells Rust what kind ofdata is being specified so it knows how to work with that data\. We‚Äôll look attwo data type subsets: scalar and compound\.
.P
Keep in mind that Rust is a \fIstatically typed\fR language, which means that itmust know the types of all variables at compile time\. The compiler can usuallyinfer what type we want to use based on the value and how we use it\. In caseswhen many types are possible, such as when we converted a `\fIString\fR` to a numerictype using `\fIparse\fR` in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#comparing\-the\-guess\-to\-the\-secret\-number
.UE
‚ÄúComparing the Guess to the SecretNumber‚Äù section inChapter 2, we must add a type annotation, like this:
.RS
.IP \fBrust\fR 2

.br
.EX
let guess: u32 = "42"\.parse()\.expect("Not a number!");

.EE

.RE
.P
If we don‚Äôt add the `\fI: u32\fR` type annotation above, Rust will display thefollowing error, which means the compiler needs more information from us toknow which type we want to use:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling no_type_annotations v0\.1\.0 (file:///projects/no_type_annotations)
error[E0282]: type annotations needed
 \-\-> src/main\.rs:2:9
  |
2 |     let guess = "42"\.parse()\.expect("Not a number!");
  |         ^^^^^ consider giving `guess` a type

For more information about this error, try `rustc \-\-explain E0282`\.
error: could not compile `no_type_annotations` due to previous error

.EE

.RE
.P
You‚Äôll see different type annotations for other data types\.
.br

.br
\fBScalar Types\fR
.br
==============
.br

.P
A \fIscalar\fR type represents a single value\. Rust has four primary scalar types:integers, floating\-point numbers, Booleans, and characters\. You may recognizethese from other programming languages\. Let‚Äôs jump into how they work in Rust\.
.br

.br
\fBInteger Types\fR
.br
===============
.br

.P
An \fIinteger\fR is a number without a fractional component\. We used one integertype in Chapter 2, the `\fIu32\fR` type\. This type declaration indicates that thevalue it‚Äôs associated with should be an unsigned integer (signed integer typesstart with `\fIi\fR`, instead of `\fIu\fR`) that takes up 32 bits of space\. Table 3\-1 showsthe built\-in integer types in Rust\. We can use any of these variants to declarethe type of an integer value\.Table 3\-1: Integer Types in Rust
.P
| Length  | Signed  | Unsigned ||\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|| 8\-bit   | `\fIi8\fR`    | `\fIu8\fR`     || 16\-bit  | `\fIi16\fR`   | `\fIu16\fR`    || 32\-bit  | `\fIi32\fR`   | `\fIu32\fR`    || 64\-bit  | `\fIi64\fR`   | `\fIu64\fR`    || 128\-bit | `\fIi128\fR`  | `\fIu128\fR`   || arch    | `\fIisize\fR` | `\fIusize\fR`  |
.P
Each variant can be either signed or unsigned and has an explicit size\.\fISigned\fR and \fIunsigned\fR refer to whether it‚Äôs possible for the number to benegative‚Äîin other words, whether the number needs to have a sign with it(signed) or whether it will only ever be positive and can therefore berepresented without a sign (unsigned)\. It‚Äôs like writing numbers on paper: whenthe sign matters, a number is shown with a plus sign or a minus sign; however,when it‚Äôs safe to assume the number is positive, it‚Äôs shown with no sign\.Signed numbers are stored using 
.UR https://en\.wikipedia\.org/wiki/Two%27s_complement
.UE
two‚Äôscomplementrepresentation\.
.P
Each signed variant can store numbers from \-(2n \- 1) to 2n \-1 \- 1 inclusive, where \fIn\fR is the number of bits that variant uses\. So an`\fIi8\fR` can store numbers from \-(27) to 27 \- 1, which equals\-128 to 127\. Unsigned variants can store numbers from 0 to 2n \- 1,so a `\fIu8\fR` can store numbers from 0 to 28 \- 1, which equals 0 to 255\.
.P
Additionally, the `\fIisize\fR` and `\fIusize\fR` types depend on the architecture of thecomputer your program is running on, which is denoted in the table as ‚Äúarch‚Äù:64 bits if you‚Äôre on a 64\-bit architecture and 32 bits if you‚Äôre on a 32\-bitarchitecture\.
.P
You can write integer literals in any of the forms shown in Table 3\-2\. Notethat number literals that can be multiple numeric types allow a type suffix,such as `\fI57u8\fR`, to designate the type\. Number literals can also use `\fI_\fR` as avisual separator to make the number easier to read, such as `\fI1_000\fR`, which willhave the same value as if you had specified `\fI1000\fR`\.Table 3\-2: Integer Literals in Rust
.P
| Number literals  | Example       ||\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|| Decimal          | `\fI98_222\fR`      || Hex              | `\fI0xff\fR`        || Octal            | `\fI0o77\fR`        || Binary           | `\fI0b1111_0000\fR` || Byte (`\fIu8\fR` only) | `\fIb'A'\fR`        |
.P
So how do you know which type of integer to use? If you‚Äôre unsure, Rust‚Äôsdefaults are generally good places to start: integer types default to `\fIi32\fR`\.The primary situation in which you‚Äôd use `\fIisize\fR` or `\fIusize\fR` is when indexingsome sort of collection\.
.br

.br
\fBInteger Overflow\fR
.br
==================
.br

.P
Let‚Äôs say you have a variable of type `\fIu8\fR` that can hold values between 0 and255\. If you try to change the variable to a value outside of that range, suchas 256, \fIinteger overflow\fR will occur, which can result in one of twobehaviors\. When you‚Äôre compiling in debug mode, Rust includes checks forinteger overflow that cause your program to \fIpanic\fR at runtime if thisbehavior occurs\. Rust uses the term panicking when a program exits with anerror; we‚Äôll discuss panics in more depth in the 
.UR ch09\-01\-unrecoverable\-errors\-with\-panic\.html
.UE
‚ÄúUnrecoverable Errors with`\fIpanic!\fR`‚Äù section in Chapter9\.
.P
When you‚Äôre compiling in release mode with the `\fI\-\-release\fR` flag, Rust does\fInot\fR include checks for integer overflow that cause panics\. Instead, ifoverflow occurs, Rust performs \fItwo‚Äôs complement wrapping\fR\. In short, valuesgreater than the maximum value the type can hold ‚Äúwrap around‚Äù to the minimumof the values the type can hold\. In the case of a `\fIu8\fR`, the value 256 becomes0, the value 257 becomes 1, and so on\. The program won‚Äôt panic, but thevariable will have a value that probably isn‚Äôt what you were expecting it tohave\. Relying on integer overflow‚Äôs wrapping behavior is considered an error\.
.P
To explicitly handle the possibility of overflow, you can use these familiesof methods provided by the standard library for primitive numeric types:
.P
Wrap in all modes with the `\fIwrapping_*\fR` methods, such as `\fIwrapping_add\fR`
.P
Return the `\fINone\fR` value if there is overflow with the `\fIchecked_*\fR` methods
.P
Return the value and a boolean indicating whether there was overflow withthe `\fIoverflowing_*\fR` methods
.P
Saturate at the value‚Äôs minimum or maximum values with `\fIsaturating_*\fR`methods
.br

.br
\fBFloating\-Point Types\fR
.br
======================
.br

.P
Rust also has two primitive types for \fIfloating\-point numbers\fR, which arenumbers with decimal points\. Rust‚Äôs floating\-point types are `\fIf32\fR` and `\fIf64\fR`,which are 32 bits and 64 bits in size, respectively\. The default type is `\fIf64\fR`because on modern CPUs it‚Äôs roughly the same speed as `\fIf32\fR` but is capable ofmore precision\. All floating\-point types are signed\.
.P
Here‚Äôs an example that shows floating\-point numbers in action:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 2\.0; // f64

    let y: f32 = 3\.0; // f32
}

.EE

.RE
.P
Floating\-point numbers are represented according to the IEEE\-754 standard\. The`\fIf32\fR` type is a single\-precision float, and `\fIf64\fR` has double precision\.
.br

.br
\fBNumeric Operations\fR
.br
====================
.br

.P
Rust supports the basic mathematical operations you‚Äôd expect for all of thenumber types: addition, subtraction, multiplication, division, and remainder\.Integer division rounds down to the nearest integer\. The following code showshow you‚Äôd use each numeric operation in a `\fIlet\fR` statement:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    // addition
    let sum = 5 + 10;

    // subtraction
    let difference = 95\.5 \- 4\.3;

    // multiplication
    let product = 4 * 30;

    // division
    let quotient = 56\.7 / 32\.2;
    let floored = 2 / 3; // Results in 0

    // remainder
    let remainder = 43 % 5;
}

.EE

.RE
.P
Each expression in these statements uses a mathematical operator and evaluatesto a single value, which is then bound to a variable\. 
.UR appendix\-02\-operators\.md
.UE
Appendix B contains alist of all operators that Rust provides\.
.br

.br
\fBThe Boolean Type\fR
.br
==================
.br

.P
As in most other programming languages, a Boolean type in Rust has two possiblevalues: `\fItrue\fR` and `\fIfalse\fR`\. Booleans are one byte in size\. The Boolean type inRust is specified using `\fIbool\fR`\. For example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let t = true;

    let f: bool = false; // with explicit type annotation
}

.EE

.RE
.P
The main way to use Boolean values is through conditionals, such as an `\fIif\fR`expression\. We‚Äôll cover how `\fIif\fR` expressions work in Rust in the 
.UR ch03\-05\-control\-flow\.html#control\-flow
.UE
‚ÄúControlFlow‚Äù section\.
.br

.br
\fBThe Character Type\fR
.br
====================
.br

.P
Rust‚Äôs `\fIchar\fR` type is the language‚Äôs most primitive alphabetic type\. Here‚Äôssome examples of declaring `\fIchar\fR` values:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let c = 'z';
    let z: char = '‚Ñ§'; // with explicit type annotation
    let heart_eyed_cat = 'üòª';
}

.EE

.RE
.P
Note that we specify `\fIchar\fR` literals with single quotes, as opposed to stringliterals, which use double quotes\. Rust‚Äôs `\fIchar\fR` type is four bytes in size andrepresents a Unicode Scalar Value, which means it can represent a lot more thanjust ASCII\. Accented letters; Chinese, Japanese, and Korean characters; emoji;and zero\-width spaces are all valid `\fIchar\fR` values in Rust\. Unicode ScalarValues range from `\fIU+0000\fR` to `\fIU+D7FF\fR` and `\fIU+E000\fR` to `\fIU+10FFFF\fR` inclusive\.However, a ‚Äúcharacter‚Äù isn‚Äôt really a concept in Unicode, so your humanintuition for what a ‚Äúcharacter‚Äù is may not match up with what a `\fIchar\fR` is inRust\. We‚Äôll discuss this topic in detail in 
.UR ch08\-02\-strings\.html#storing\-utf\-8\-encoded\-text\-with\-strings
.UE
‚ÄúStoring UTF\-8 Encoded Text withStrings‚Äù in Chapter 8\.
.br

.br
\fBCompound Types\fR
.br
================
.br
\fICompound types\fR can group multiple values into one type\. Rust has twoprimitive compound types: tuples and arrays\.
.br

.br
\fBThe Tuple Type\fR
.br
================
.br

.P
A tuple is a general way of grouping together a number of values with a varietyof types into one compound type\. Tuples have a fixed length: once declared,they cannot grow or shrink in size\.
.P
We create a tuple by writing a comma\-separated list of values insideparentheses\. Each position in the tuple has a type, and the types of thedifferent values in the tuple don‚Äôt have to be the same\. We‚Äôve added optionaltype annotations in this example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let tup: (i32, f64, u8) = (500, 6\.4, 1);
}

.EE

.RE
.P
The variable `\fItup\fR` binds to the entire tuple, because a tuple is considered asingle compound element\. To get the individual values out of a tuple, we canuse pattern matching to destructure a tuple value, like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let tup = (500, 6\.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is: {y}");
}

.EE

.RE
.P
This program first creates a tuple and binds it to the variable `\fItup\fR`\. It thenuses a pattern with `\fIlet\fR` to take `\fItup\fR` and turn it into three separatevariables, `\fIx\fR`, `\fIy\fR`, and `\fIz\fR`\. This is called \fIdestructuring\fR, because it breaksthe single tuple into three parts\. Finally, the program prints the value of`\fIy\fR`, which is `\fI6\.4\fR`\.
.P
We can also access a tuple element directly by using a period (`\fI\.\fR`) followed bythe index of the value we want to access\. For example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x: (i32, f64, u8) = (500, 6\.4, 1);

    let five_hundred = x\.0;

    let six_point_four = x\.1;

    let one = x\.2;
}

.EE

.RE
.P
This program creates the tuple `\fIx\fR` and then accesses each element of the tupleusing their respective indices\. As with most programming languages, the firstindex in a tuple is 0\.
.P
The tuple without any values has a special name, \fIunit\fR\. This value and itscorresponding type are both written `\fI()\fR` and represent an empty value or anempty return type\. Expressions implicitly return the unit value if they don‚Äôtreturn any other value\.
.br

.br
\fBThe Array Type\fR
.br
================
.br

.P
Another way to have a collection of multiple values is with an \fIarray\fR\. Unlikea tuple, every element of an array must have the same type\. Unlike arrays insome other languages, arrays in Rust have a fixed length\.
.P
We write the values in an array as a comma\-separated list inside squarebrackets:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let a = [1, 2, 3, 4, 5];
}

.EE

.RE
.P
Arrays are useful when you want your data allocated on the stack rather thanthe heap (we will discuss the stack and the heap more in 
.UR ch04\-01\-what\-is\-ownership\.html#the\-stack\-and\-the\-heap
.UE
Chapter4) or when you want to ensure you always have afixed number of elements\. An array isn‚Äôt as flexible as the vector type,though\. A vector is a similar collection type provided by the standard librarythat \fIis\fR allowed to grow or shrink in size\. If you‚Äôre unsure whether to use anarray or a vector, chances are you should use a vector\. 
.UR ch08\-01\-vectors\.html
.UE
Chapter8 discusses vectors in more detail\.
.P
However, arrays are more useful when you know the number of elements will notneed to change\. For example, if you were using the names of the month in aprogram, you would probably use an array rather than a vector because you knowit will always contain 12 elements:
.RS
.IP \fBrust\fR 2

.br
.EX
let months = ["January", "February", "March", "April", "May", "June", "July",
              "August", "September", "October", "November", "December"];

.EE

.RE
.P
You write an array‚Äôs type using square brackets with the type of each element,a semicolon, and then the number of elements in the array, like so:
.RS
.IP \fBrust\fR 2

.br
.EX
let a: [i32; 5] = [1, 2, 3, 4, 5];

.EE

.RE
.P
Here, `\fIi32\fR` is the type of each element\. After the semicolon, the number `\fI5\fR`indicates the array contains five elements\.
.P
You can also initialize an array to contain the same value for each element byspecifying the initial value, followed by a semicolon, and then the length ofthe array in square brackets, as shown here:
.RS
.IP \fBrust\fR 2

.br
.EX
let a = [3; 5];

.EE

.RE
.P
The array named `\fIa\fR` will contain `\fI5\fR` elements that will all be set to the value`\fI3\fR` initially\. This is the same as writing `\fIlet a = [3, 3, 3, 3, 3];\fR` but in amore concise way\.
.br

.br
\fBAccessing Array Elements\fR
.br
==========================
.br

.P
An array is a single chunk of memory of a known, fixed size that can beallocated on the stack\. You can access elements of an array using indexing,like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let a = [1, 2, 3, 4, 5];

    let first = a[0];
    let second = a[1];
}

.EE

.RE
.P
In this example, the variable named `\fIfirst\fR` will get the value `\fI1\fR`, becausethat is the value at index `\fI[0]\fR` in the array\. The variable named `\fIsecond\fR` willget the value `\fI2\fR` from index `\fI[1]\fR` in the array\.
.br

.br
\fBInvalid Array Element Access\fR
.br
==============================
.br

.P
Let‚Äôs see what happens if you try to access an element of an array that is pastthe end of the array\. Say you run this code, similar to the guessing game inChapter 2, to get an array index from the user:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,panics\fR 2

.br
.EX
use std::io;

fn main() {
    let a = [1, 2, 3, 4, 5];

    println!("Please enter an array index\.");

    let mut index = String::new();

    io::stdin()
        \.read_line(&mut index)
        \.expect("Failed to read line");

    let index: usize = index
        \.trim()
        \.parse()
        \.expect("Index entered was not a number");

    let element = a[index];

    println!("The value of the element at index {index} is: {element}");
}

.EE

.RE
.P
This code compiles successfully\. If you run this code using `\fIcargo run\fR` andenter 0, 1, 2, 3, or 4, the program will print out the corresponding value atthat index in the array\. If you instead enter a number past the end of thearray, such as 10, you‚Äôll see output like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main\.rs:19:19
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
The program resulted in a \fIruntime\fR error at the point of using an invalidvalue in the indexing operation\. The program exited with an error message anddidn‚Äôt execute the final `\fIprintln!\fR` statement\. When you attempt to access anelement using indexing, Rust will check that the index you‚Äôve specified is lessthan the array length\. If the index is greater than or equal to the length,Rust will panic\. This check has to happen at runtime, especially in this case,because the compiler can‚Äôt possibly know what value a user will enter when theyrun the code later\.
.P
This is an example of Rust‚Äôs memory safety principles in action\. In manylow\-level languages, this kind of check is not done, and when you provide anincorrect index, invalid memory can be accessed\. Rust protects you against thiskind of error by immediately exiting instead of allowing the memory access andcontinuing\. Chapter 9 discusses more of Rust‚Äôs error handling and how you canwrite readable, safe code that neither panics nor allows invalid memory access\.
.SH Functions

.br

.br
\fBFunctions\fR
.br
===========
.br

.P
Functions are prevalent in Rust code\. You‚Äôve already seen one of the mostimportant functions in the language: the `\fImain\fR` function, which is the entrypoint of many programs\. You‚Äôve also seen the `\fIfn\fR` keyword, which allows you todeclare new functions\.
.P
Rust code uses \fIsnake case\fR as the conventional style for function and variablenames, in which all letters are lowercase and underscores separate words\.Here‚Äôs a program that contains an example function definition:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    println!("Hello, world!");

    another_function();
}

fn another_function() {
    println!("Another function\.");
}

.EE

.RE
.P
We define a function in Rust by entering `\fIfn\fR` followed by a function name and aset of parentheses\. The curly brackets tell the compiler where the functionbody begins and ends\.
.P
We can call any function we‚Äôve defined by entering its name followed by a setof parentheses\. Because `\fIanother_function\fR` is defined in the program, it can becalled from inside the `\fImain\fR` function\. Note that we defined `\fIanother_function\fR`\fIafter\fR the `\fImain\fR` function in the source code; we could have defined it beforeas well\. Rust doesn‚Äôt care where you define your functions, only that they‚Äôredefined somewhere in a scope that can be seen by the caller\.
.P
Let‚Äôs start a new binary project named \fIfunctions\fR to explore functionsfurther\. Place the `\fIanother_function\fR` example in \fIsrc/main\.rs\fR and run it\. Youshould see the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.28s
     Running `target/debug/functions`
Hello, world!
Another function\.

.EE

.RE
.P
The lines execute in the order in which they appear in the `\fImain\fR` function\.First, the ‚ÄúHello, world!‚Äù message prints, and then `\fIanother_function\fR` iscalled and its message is printed\.
.br

.br
\fBParameters\fR
.br
============
.br

.P
We can define functions to have \fIparameters\fR, which are special variables thatare part of a function‚Äôs signature\. When a function has parameters, you canprovide it with concrete values for those parameters\. Technically, the concretevalues are called \fIarguments\fR, but in casual conversation, people tend to usethe words \fIparameter\fR and \fIargument\fR interchangeably for either the variablesin a function‚Äôs definition or the concrete values passed in when you call afunction\.
.P
In this version of `\fIanother_function\fR` we add a parameter:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    another_function(5);
}

fn another_function(x: i32) {
    println!("The value of x is: {x}");
}

.EE

.RE
.P
Try running this program; you should get the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.21s
     Running `target/debug/functions`
The value of x is: 5

.EE

.RE
.P
The declaration of `\fIanother_function\fR` has one parameter named `\fIx\fR`\. The type of`\fIx\fR` is specified as `\fIi32\fR`\. When we pass `\fI5\fR` in to `\fIanother_function\fR`, the`\fIprintln!\fR` macro puts `\fI5\fR` where the pair of curly brackets containing `\fIx\fR` wasin the format string\.
.P
In function signatures, you \fImust\fR declare the type of each parameter\. This isa deliberate decision in Rust‚Äôs design: requiring type annotations in functiondefinitions means the compiler almost never needs you to use them elsewhere inthe code to figure out what type you mean\. The compiler is also able to givemore helpful error messages if it knows what types the function expects\.
.P
When defining multiple parameters, separate the parameter declarations withcommas, like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    print_labeled_measurement(5, 'h');
}

fn print_labeled_measurement(value: i32, unit_label: char) {
    println!("The measurement is: {value}{unit_label}");
}

.EE

.RE
.P
This example creates a function named `\fIprint_labeled_measurement\fR` with twoparameters\. The first parameter is named `\fIvalue\fR` and is an `\fIi32\fR`\. The second isnamed `\fIunit_label\fR` and is type `\fIchar\fR`\. The function then prints text containingboth the `\fIvalue\fR` and the `\fIunit_label\fR`\.
.P
Let‚Äôs try running this code\. Replace the program currently in your \fIfunctions\fRproject‚Äôs \fIsrc/main\.rs\fR file with the preceding example and run it using `\fIcargo run\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/functions`
The measurement is: 5h

.EE

.RE
.P
Because we called the function with `\fI5\fR` as the value for `\fIvalue\fR` and `\fI'h'\fR` asthe value for `\fIunit_label\fR`, the program output contains those values\.
.br

.br
\fBStatements and Expressions\fR
.br
============================
.br

.P
Function bodies are made up of a series of statements optionally ending in anexpression\. So far, the functions we‚Äôve covered haven‚Äôt included an endingexpression, but you have seen an expression as part of a statement\. BecauseRust is an expression\-based language, this is an important distinction tounderstand\. Other languages don‚Äôt have the same distinctions, so let‚Äôs look atwhat statements and expressions are and how their differences affect the bodiesof functions\.\fIStatements\fR are instructions that perform some action and do not return avalue\. \fIExpressions\fR evaluate to a resulting value\. Let‚Äôs look at some examples\.
.P
We‚Äôve actually already used statements and expressions\. Creating a variable andassigning a value to it with the `\fIlet\fR` keyword is a statement\. In Listing 3\-1,`\fIlet y = 6;\fR` is a statement\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let y = 6;
}

.EE

.RE
Listing 3\-1: A `\fImain\fR` function declaration containing one statement
.P
Function definitions are also statements; the entire preceding example is astatement in itself\.
.P
Statements do not return values\. Therefore, you can‚Äôt assign a `\fIlet\fR` statementto another variable, as the following code tries to do; you‚Äôll get an error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = (let y = 6);
}

.EE

.RE
.P
When you run this program, the error you‚Äôll get looks like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
error: expected expression, found statement (`let`)
 \-\-> src/main\.rs:2:14
  |
2 |     let x = (let y = 6);
  |              ^^^^^^^^^
  |
  = note: variable declaration using `let` is a statement

error[E0658]: `let` expressions in this position are unstable
 \-\-> src/main\.rs:2:14
  |
2 |     let x = (let y = 6);
  |              ^^^^^^^^^
  |
  = note: see issue #53667 <https://github\.com/rust\-lang/rust/issues/53667> for more information

warning: unnecessary parentheses around assigned value
 \-\-> src/main\.rs:2:13
  |
2 |     let x = (let y = 6);
  |             ^         ^
  |
  = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
  |
2 \-     let x = (let y = 6);
2 +     let x = let y = 6;
  | 

For more information about this error, try `rustc \-\-explain E0658`\.
warning: `functions` (bin "functions") generated 1 warning
error: could not compile `functions` due to 2 previous errors; 1 warning emitted

.EE

.RE
.P
The `\fIlet y = 6\fR` statement does not return a value, so there isn‚Äôt anything for`\fIx\fR` to bind to\. This is different from what happens in other languages, such asC and Ruby, where the assignment returns the value of the assignment\. In thoselanguages, you can write `\fIx = y = 6\fR` and have both `\fIx\fR` and `\fIy\fR` have the value`\fI6\fR`; that is not the case in Rust\.
.P
Expressions evaluate to a value and make up most of the rest of the code thatyou‚Äôll write in Rust\. Consider a math operation, such as `\fI5 + 6\fR`, which is anexpression that evaluates to the value `\fI11\fR`\. Expressions can be part ofstatements: in Listing 3\-1, the `\fI6\fR` in the statement `\fIlet y = 6;\fR` is anexpression that evaluates to the value `\fI6\fR`\. Calling a function is anexpression\. Calling a macro is an expression\. A new scope block created withcurly brackets is an expression, for example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let y = {
        let x = 3;
        x + 1
    };

    println!("The value of y is: {y}");
}

.EE

.RE
.P
This expression:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
{
    let x = 3;
    x + 1
}

.EE

.RE
.P
is a block that, in this case, evaluates to `\fI4\fR`\. That value gets bound to `\fIy\fR`as part of the `\fIlet\fR` statement\. Note that the `\fIx + 1\fR` line doesn‚Äôt have asemicolon at the end, unlike most of the lines you‚Äôve seen so far\. Expressionsdo not include ending semicolons\. If you add a semicolon to the end of anexpression, you turn it into a statement, and it will then not return a value\.Keep this in mind as you explore function return values and expressions next\.
.br

.br
\fBFunctions with Return Values\fR
.br
==============================
.br

.P
Functions can return values to the code that calls them\. We don‚Äôt name returnvalues, but we must declare their type after an arrow (`\fI\->\fR`)\. In Rust, thereturn value of the function is synonymous with the value of the finalexpression in the block of the body of a function\. You can return early from afunction by using the `\fIreturn\fR` keyword and specifying a value, but mostfunctions return the last expression implicitly\. Here‚Äôs an example of afunction that returns a value:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn five() \-> i32 {
    5
}

fn main() {
    let x = five();

    println!("The value of x is: {x}");
}

.EE

.RE
.P
There are no function calls, macros, or even `\fIlet\fR` statements in the `\fIfive\fR`function‚Äîjust the number `\fI5\fR` by itself\. That‚Äôs a perfectly valid function inRust\. Note that the function‚Äôs return type is specified too, as `\fI\-> i32\fR`\. Tryrunning this code; the output should look like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.30s
     Running `target/debug/functions`
The value of x is: 5

.EE

.RE
.P
The `\fI5\fR` in `\fIfive\fR` is the function‚Äôs return value, which is why the return typeis `\fIi32\fR`\. Let‚Äôs examine this in more detail\. There are two important bits:first, the line `\fIlet x = five();\fR` shows that we‚Äôre using the return value of afunction to initialize a variable\. Because the function `\fIfive\fR` returns a `\fI5\fR`,that line is the same as the following:
.RS
.IP \fBrust\fR 2

.br
.EX
let x = 5;

.EE

.RE
.P
Second, the `\fIfive\fR` function has no parameters and defines the type of thereturn value, but the body of the function is a lonely `\fI5\fR` with no semicolonbecause it‚Äôs an expression whose value we want to return\.
.P
Let‚Äôs look at another example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = plus_one(5);

    println!("The value of x is: {x}");
}

fn plus_one(x: i32) \-> i32 {
    x + 1
}

.EE

.RE
.P
Running this code will print `\fIThe value of x is: 6\fR`\. But if we place asemicolon at the end of the line containing `\fIx + 1\fR`, changing it from anexpression to a statement, we‚Äôll get an error\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = plus_one(5);

    println!("The value of x is: {x}");
}

fn plus_one(x: i32) \-> i32 {
    x + 1;
}

.EE

.RE
.P
Compiling this code produces an error, as follows:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
error[E0308]: mismatched types
 \-\-> src/main\.rs:7:24
  |
7 | fn plus_one(x: i32) \-> i32 {
  |    \-\-\-\-\-\-\-\-            ^^^ expected `i32`, found `()`
  |    |
  |    implicitly returns `()` as its body has no tail or `return` expression
8 |     x + 1;
  |          \- help: remove this semicolon

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `functions` due to previous error

.EE

.RE
.P
The main error message, ‚Äúmismatched types,‚Äù reveals the core issue with thiscode\. The definition of the function `\fIplus_one\fR` says that it will return an`\fIi32\fR`, but statements don‚Äôt evaluate to a value, which is expressed by `\fI()\fR`,the unit type\. Therefore, nothing is returned, which contradicts the functiondefinition and results in an error\. In this output, Rust provides a message topossibly help rectify this issue: it suggests removing the semicolon, whichwould fix the error\.
.SH Comments

.br

.br
\fBComments\fR
.br
==========
.br

.P
All programmers strive to make their code easy to understand, but sometimesextra explanation is warranted\. In these cases, programmers leave \fIcomments\fR intheir source code that the compiler will ignore but people reading the sourcecode may find useful\.
.P
Here‚Äôs a simple comment:
.RS
.IP \fBrust\fR 2

.br
.EX
// hello, world

.EE

.RE
.P
In Rust, the idiomatic comment style starts a comment with two slashes, and thecomment continues until the end of the line\. For comments that extend beyond asingle line, you‚Äôll need to include `\fI//\fR` on each line, like this:
.RS
.IP \fBrust\fR 2

.br
.EX
// So we‚Äôre doing something complicated here, long enough that we need
// multiple lines of comments to do it! Whew! Hopefully, this comment will
// explain what‚Äôs going on\.

.EE

.RE
.P
Comments can also be placed at the end of lines containing code:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let lucky_number = 7; // I‚Äôm feeling lucky today
}

.EE

.RE
.P
But you‚Äôll more often see them used in this format, with the comment on aseparate line above the code it‚Äôs annotating:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    // I‚Äôm feeling lucky today
    let lucky_number = 7;
}

.EE

.RE
.P
Rust also has another kind of comment, documentation comments, which we‚Äôlldiscuss in the ‚ÄúPublishing a Crate to Crates\.io‚Äù section of Chapter 14\.
.SH "Control Flow"

.br

.br
\fBControl Flow\fR
.br
==============
.br

.P
The ability to run some code depending on if a condition is true, or run somecode repeatedly while a condition is true, are basic building blocks in mostprogramming languages\. The most common constructs that let you control the flowof execution of Rust code are `\fIif\fR` expressions and loops\.`\fIif\fR` Expressions
.P
An `\fIif\fR` expression allows you to branch your code depending on conditions\. Youprovide a condition and then state, ‚ÄúIf this condition is met, run this blockof code\. If the condition is not met, do not run this block of code\.‚Äù
.P
Create a new project called \fIbranches\fR in your \fIprojects\fR directory to explorethe `\fIif\fR` expression\. In the \fIsrc/main\.rs\fR file, input the following:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number = 3;

    if number < 5 {
        println!("condition was true");
    } else {
        println!("condition was false");
    }
}

.EE

.RE
.P
All `\fIif\fR` expressions start with the keyword `\fIif\fR`, followed by a condition\. Inthis case, the condition checks whether or not the variable `\fInumber\fR` has avalue less than 5\. We place the block of code to execute if the condition is trueimmediately after the condition inside curly brackets\. Blocks of codeassociated with the conditions in `\fIif\fR` expressions are sometimes called \fIarms\fR,just like the arms in `\fImatch\fR` expressions that we discussed in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#comparing\-the\-guess\-to\-the\-secret\-number
.UE
‚ÄúComparingthe Guess to the Secret Number‚Äù section of Chapter 2\.
.P
Optionally, we can also include an `\fIelse\fR` expression, which we choseto do here, to give the program an alternative block of code to execute shouldthe condition evaluate to false\. If you don‚Äôt provide an `\fIelse\fR` expression andthe condition is false, the program will just skip the `\fIif\fR` block and move onto the next bit of code\.
.P
Try running this code; you should see the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/branches`
condition was true

.EE

.RE
.P
Let‚Äôs try changing the value of `\fInumber\fR` to a value that makes the condition`\fIfalse\fR` to see what happens:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
    let number = 7;
# 
#     if number < 5 {
#         println!("condition was true");
#     } else {
#         println!("condition was false");
#     }
# }

.EE

.RE
.P
Run the program again, and look at the output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/branches`
condition was false

.EE

.RE
.P
It‚Äôs also worth noting that the condition in this code \fImust\fR be a `\fIbool\fR`\. Ifthe condition isn‚Äôt a `\fIbool\fR`, we‚Äôll get an error\. For example, try running thefollowing code:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let number = 3;

    if number {
        println!("number was three");
    }
}

.EE

.RE
.P
The `\fIif\fR` condition evaluates to a value of `\fI3\fR` this time, and Rust throws anerror:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
error[E0308]: mismatched types
 \-\-> src/main\.rs:4:8
  |
4 |     if number {
  |        ^^^^^^ expected `bool`, found integer

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `branches` due to previous error

.EE

.RE
.P
The error indicates that Rust expected a `\fIbool\fR` but got an integer\. Unlikelanguages such as Ruby and JavaScript, Rust will not automatically try toconvert non\-Boolean types to a Boolean\. You must be explicit and always provide`\fIif\fR` with a Boolean as its condition\. If we want the `\fIif\fR` code block to runonly when a number is not equal to `\fI0\fR`, for example, we can change the `\fIif\fR`expression to the following:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number = 3;

    if number != 0 {
        println!("number was something other than zero");
    }
}

.EE

.RE
.P
Running this code will print `\fInumber was something other than zero\fR`\.
.br

.br
\fBHandling Multiple Conditions with \fR
.br
====================================
.br
`\fIelse if\fR`
.P
You can use multiple conditions by combining `\fIif\fR` and `\fIelse\fR` in an `\fIelse if\fR`expression\. For example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number = 6;

    if number % 4 == 0 {
        println!("number is divisible by 4");
    } else if number % 3 == 0 {
        println!("number is divisible by 3");
    } else if number % 2 == 0 {
        println!("number is divisible by 2");
    } else {
        println!("number is not divisible by 4, 3, or 2");
    }
}

.EE

.RE
.P
This program has four possible paths it can take\. After running it, you shouldsee the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/branches`
number is divisible by 3

.EE

.RE
.P
When this program executes, it checks each `\fIif\fR` expression in turn and executesthe first body for which the condition holds true\. Note that even though 6 isdivisible by 2, we don‚Äôt see the output `\fInumber is divisible by 2\fR`, nor do wesee the `\fInumber is not divisible by 4, 3, or 2\fR` text from the `\fIelse\fR` block\.That‚Äôs because Rust only executes the block for the first true condition, andonce it finds one, it doesn‚Äôt even check the rest\.
.P
Using too many `\fIelse if\fR` expressions can clutter your code, so if you have morethan one, you might want to refactor your code\. Chapter 6 describes a powerfulRust branching construct called `\fImatch\fR` for these cases\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIif\fR` in a `\fIlet\fR` Statement
.P
Because `\fIif\fR` is an expression, we can use it on the right side of a `\fIlet\fR`statement to assign the outcome to a variable, as in Listing 3\-2\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let condition = true;
    let number = if condition { 5 } else { 6 };

    println!("The value of number is: {number}");
}

.EE

.RE
Listing 3\-2: Assigning the result of an `\fIif\fR` expressionto a variable
.P
The `\fInumber\fR` variable will be bound to a value based on the outcome of the `\fIif\fR`expression\. Run this code to see what happens:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.30s
     Running `target/debug/branches`
The value of number is: 5

.EE

.RE
.P
Remember that blocks of code evaluate to the last expression in them, andnumbers by themselves are also expressions\. In this case, the value of thewhole `\fIif\fR` expression depends on which block of code executes\. This means thevalues that have the potential to be results from each arm of the `\fIif\fR` must bethe same type; in Listing 3\-2, the results of both the `\fIif\fR` arm and the `\fIelse\fR`arm were `\fIi32\fR` integers\. If the types are mismatched, as in the followingexample, we‚Äôll get an error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let condition = true;

    let number = if condition { 5 } else { "six" };

    println!("The value of number is: {number}");
}

.EE

.RE
.P
When we try to compile this code, we‚Äôll get an error\. The `\fIif\fR` and `\fIelse\fR` armshave value types that are incompatible, and Rust indicates exactly where tofind the problem in the program:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
error[E0308]: `if` and `else` have incompatible types
 \-\-> src/main\.rs:4:44
  |
4 |     let number = if condition { 5 } else { "six" };
  |                                 \-          ^^^^^ expected integer, found `&str`
  |                                 |
  |                                 expected because of this

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `branches` due to previous error

.EE

.RE
.P
The expression in the `\fIif\fR` block evaluates to an integer, and the expression inthe `\fIelse\fR` block evaluates to a string\. This won‚Äôt work because variables musthave a single type, and Rust needs to know at compile time what type the`\fInumber\fR` variable is, definitively\. Knowing the type of `\fInumber\fR` lets thecompiler verify the type is valid everywhere we use `\fInumber\fR`\. Rust wouldn‚Äôt beable to do that if the type of `\fInumber\fR` was only determined at runtime; thecompiler would be more complex and would make fewer guarantees about the codeif it had to keep track of multiple hypothetical types for any variable\.
.br

.br
\fBRepetition with Loops\fR
.br
=======================
.br

.P
It‚Äôs often useful to execute a block of code more than once\. For this task,Rust provides several \fIloops\fR, which will run through the code inside the loopbody to the end and then start immediately back at the beginning\. Toexperiment with loops, let‚Äôs make a new project called \fIloops\fR\.
.P
Rust has three kinds of loops: `\fIloop\fR`, `\fIwhile\fR`, and `\fIfor\fR`\. Let‚Äôs try each one\.
.br

.br
\fBRepeating Code with \fR
.br
======================
.br
`\fIloop\fR`
.P
The `\fIloop\fR` keyword tells Rust to execute a block of code over and over againforever or until you explicitly tell it to stop\.
.P
As an example, change the \fIsrc/main\.rs\fR file in your \fIloops\fR directory to looklike this:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn main() {
    loop {
        println!("again!");
    }
}

.EE

.RE
.P
When we run this program, we‚Äôll see `\fIagain!\fR` printed over and over continuouslyuntil we stop the program manually\. Most terminals support the keyboard shortcutctrl\-c to interrupt a program that is stuck ina continual loop\. Give it a try:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling loops v0\.1\.0 (file:///projects/loops)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.29s
     Running `target/debug/loops`
again!
again!
again!
again!
^Cagain!

.EE

.RE
.P
The symbol `\fI^C\fR` represents where you pressed ctrl\-c\. You may or may not see the word `\fIagain!\fR` printed after the `\fI^C\fR`,depending on where the code was in the loop when it received the interruptsignal\.
.P
Fortunately, Rust also provides a way to break out of a loop using code\. Youcan place the `\fIbreak\fR` keyword within the loop to tell the program when to stopexecuting the loop\. Recall that we did this in the guessing game in the
.UR ch02\-00\-guessing\-game\-tutorial\.html#quitting\-after\-a\-correct\-guess
.UE
‚ÄúQuitting After a Correct Guess‚Äù section of Chapter 2 to exit the program when the user won the game byguessing the correct number\.
.P
We also used `\fIcontinue\fR` in the guessing game, which in a loop tells the programto skip over any remaining code in this iteration of the loop and go to thenext iteration\.
.br

.br
\fBReturning Values from Loops\fR
.br
=============================
.br

.P
One of the uses of a `\fIloop\fR` is to retry an operation you know might fail, suchas checking whether a thread has completed its job\. You might also need to passthe result of that operation out of the loop to the rest of your code\. To dothis, you can add the value you want returned after the `\fIbreak\fR` expression youuse to stop the loop; that value will be returned out of the loop so you canuse it, as shown here:
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    println!("The result is {result}");
}

.EE

.RE
.P
Before the loop, we declare a variable named `\fIcounter\fR` and initialize it to`\fI0\fR`\. Then we declare a variable named `\fIresult\fR` to hold the value returned fromthe loop\. On every iteration of the loop, we add `\fI1\fR` to the `\fIcounter\fR` variable,and then check whether the counter is equal to `\fI10\fR`\. When it is, we use the`\fIbreak\fR` keyword with the value `\fIcounter * 2\fR`\. After the loop, we use asemicolon to end the statement that assigns the value to `\fIresult\fR`\. Finally, weprint the value in `\fIresult\fR`, which in this case is 20\.
.br

.br
\fBLoop Labels to Disambiguate Between Multiple Loops\fR
.br
====================================================
.br

.P
If you have loops within loops, `\fIbreak\fR` and `\fIcontinue\fR` apply to the innermostloop at that point\. You can optionally specify a \fIloop label\fR on a loop that wecan then use with `\fIbreak\fR` or `\fIcontinue\fR` to specify that those keywords apply tothe labeled loop instead of the innermost loop\. Loop labels must begin with asingle quote\. Here‚Äôs an example with two nested loops:
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut count = 0;
    'counting_up: loop {
        println!("count = {count}");
        let mut remaining = 10;

        loop {
            println!("remaining = {remaining}");
            if remaining == 9 {
                break;
            }
            if count == 2 {
                break 'counting_up;
            }
            remaining \-= 1;
        }

        count += 1;
    }
    println!("End count = {count}");
}

.EE

.RE
.P
The outer loop has the label `\fI'counting_up\fR`, and it will count up from 0 to 2\.The inner loop without a label counts down from 10 to 9\. The first `\fIbreak\fR` thatdoesn‚Äôt specify a label will exit the inner loop only\. The `\fIbreak 'counting_up;\fR` statement will exit the outer loop\. This code prints:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling loops v0\.1\.0 (file:///projects/loops)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.58s
     Running `target/debug/loops`
count = 0
remaining = 10
remaining = 9
count = 1
remaining = 10
remaining = 9
count = 2
remaining = 10
End count = 2

.EE

.RE

.br

.br
\fBConditional Loops with \fR
.br
=========================
.br
`\fIwhile\fR`
.P
A program will often need to evaluate a condition within a loop\. While thecondition is true, the loop runs\. When the condition ceases to be true, theprogram calls `\fIbreak\fR`, stopping the loop\. It‚Äôs possible to implement behaviorlike this using a combination of `\fIloop\fR`, `\fIif\fR`, `\fIelse\fR`, and `\fIbreak\fR`; you couldtry that now in a program, if you‚Äôd like\. However, this pattern is so commonthat Rust has a built\-in language construct for it, called a `\fIwhile\fR` loop\. InListing 3\-3, we use `\fIwhile\fR` to loop the program three times, counting down eachtime, and then, after the loop, print a message and exit\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut number = 3;

    while number != 0 {
        println!("{number}!");

        number \-= 1;
    }

    println!("LIFTOFF!!!");
}

.EE

.RE
Listing 3\-3: Using a `\fIwhile\fR` loop to run code while acondition holds true
.P
This construct eliminates a lot of nesting that would be necessary if you used`\fIloop\fR`, `\fIif\fR`, `\fIelse\fR`, and `\fIbreak\fR`, and it‚Äôs clearer\. While a condition holdstrue, the code runs; otherwise, it exits the loop\.
.br

.br
\fBLooping Through a Collection with \fR
.br
====================================
.br
`\fIfor\fR`
.P
You can choose to use the `\fIwhile\fR` construct to loop over the elements of acollection, such as an array\. For example, the loop in Listing 3\-4 prints eachelement in the array `\fIa\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let a = [10, 20, 30, 40, 50];
    let mut index = 0;

    while index < 5 {
        println!("the value is: {}", a[index]);

        index += 1;
    }
}

.EE

.RE
Listing 3\-4: Looping through each element of a collectionusing a `\fIwhile\fR` loop
.P
Here, the code counts up through the elements in the array\. It starts at index`\fI0\fR`, and then loops until it reaches the final index in the array (that is,when `\fIindex < 5\fR` is no longer true)\. Running this code will print every elementin the array:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling loops v0\.1\.0 (file:///projects/loops)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.32s
     Running `target/debug/loops`
the value is: 10
the value is: 20
the value is: 30
the value is: 40
the value is: 50

.EE

.RE
.P
All five array values appear in the terminal, as expected\. Even though `\fIindex\fR`will reach a value of `\fI5\fR` at some point, the loop stops executing before tryingto fetch a sixth value from the array\.
.P
However, this approach is error prone; we could cause the program to panic ifthe index value or test condition are incorrect\. For example, if you changedthe definition of the `\fIa\fR` array to have four elements but forgot to update thecondition to `\fIwhile index < 4\fR`, the code would panic\. It‚Äôs also slow, becausethe compiler adds runtime code to perform the conditional check of whether theindex is within the bounds of the array on every iteration through the loop\.
.P
As a more concise alternative, you can use a `\fIfor\fR` loop and execute some codefor each item in a collection\. A `\fIfor\fR` loop looks like the code in Listing 3\-5\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a {
        println!("the value is: {element}");
    }
}

.EE

.RE
Listing 3\-5: Looping through each element of a collectionusing a `\fIfor\fR` loop
.P
When we run this code, we‚Äôll see the same output as in Listing 3\-4\. Moreimportantly, we‚Äôve now increased the safety of the code and eliminated thechance of bugs that might result from going beyond the end of the array or notgoing far enough and missing some items\.
.P
Using the `\fIfor\fR` loop, you wouldn‚Äôt need to remember to change any other code ifyou changed the number of values in the array, as you would with the methodused in Listing 3\-4\.
.P
The safety and conciseness of `\fIfor\fR` loops make them the most commonly used loopconstruct in Rust\. Even in situations in which you want to run some code acertain number of times, as in the countdown example that used a `\fIwhile\fR` loopin Listing 3\-3, most Rustaceans would use a `\fIfor\fR` loop\. The way to do thatwould be to use a `\fIRange\fR`, provided by the standard library, which generatesall numbers in sequence starting from one number and ending before anothernumber\.
.P
Here‚Äôs what the countdown would look like using a `\fIfor\fR` loop and another methodwe‚Äôve not yet talked about, `\fIrev\fR`, to reverse the range:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    for number in (1\.\.4)\.rev() {
        println!("{number}!");
    }
    println!("LIFTOFF!!!");
}

.EE

.RE
.P
This code is a bit nicer, isn‚Äôt it?
.br

.br
\fBSummary\fR
.br
=========
.br

.P
You made it! That was a sizable chapter: you learned about variables, scalarand compound data types, functions, comments, `\fIif\fR` expressions, and loops!To practice with the concepts discussed in this chapter, try buildingprograms to do the following:
.P
Convert temperatures between Fahrenheit and Celsius\.
.P
Generate the nth Fibonacci number\.
.P
Print the lyrics to the Christmas carol ‚ÄúThe Twelve Days of Christmas,‚Äùtaking advantage of the repetition in the song\.
.P
When you‚Äôre ready to move on, we‚Äôll talk about a concept in Rust that \fIdoesn‚Äôt\fRcommonly exist in other programming languages: ownership\.
.SH "Understanding Ownership"

.br

.br
\fBUnderstanding Ownership\fR
.br
=========================
.br

.P
Ownership is Rust‚Äôs most unique feature and has deep implications for the restof the language\. It enables Rust to make memory safety guarantees withoutneeding a garbage collector, so it‚Äôs important to understand how ownershipworks\. In this chapter, we‚Äôll talk about ownership as well as several relatedfeatures: borrowing, slices, and how Rust lays data out in memory\.
.SH "What is Ownership?"

.br

.br
\fBWhat Is Ownership?\fR
.br
====================
.br
\fIOwnership\fR is a set of rules that governs how a Rust program manages memory\.All programs have to manage the way they use a computer‚Äôs memory while running\.Some languages have garbage collection that regularly looks for no\-longer usedmemory as the program runs; in other languages, the programmer must explicitlyallocate and free the memory\. Rust uses a third approach: memory is managedthrough a system of ownership with a set of rules that the compiler checks\. Ifany of the rules are violated, the program won‚Äôt compile\. None of the featuresof ownership will slow down your program while it‚Äôs running\.
.P
Because ownership is a new concept for many programmers, it does take some timeto get used to\. The good news is that the more experienced you become with Rustand the rules of the ownership system, the easier you‚Äôll find it to naturallydevelop code that is safe and efficient\. Keep at it!
.P
When you understand ownership, you‚Äôll have a solid foundation for understandingthe features that make Rust unique\. In this chapter, you‚Äôll learn ownership byworking through some examples that focus on a very common data structure:strings\.
.br

.br
\fBThe Stack and the Heap\fR
.br
========================
.br

.P
Many programming languages don‚Äôt require you to think about the stack and theheap very often\. But in a systems programming language like Rust, whether avalue is on the stack or the heap affects how the language behaves and whyyou have to make certain decisions\. Parts of ownership will be described inrelation to the stack and the heap later in this chapter, so here is a briefexplanation in preparation\.
.P
Both the stack and the heap are parts of memory available to your code to useat runtime, but they are structured in different ways\. The stack storesvalues in the order it gets them and removes the values in the oppositeorder\. This is referred to as \fIlast in, first out\fR\. Think of a stack ofplates: when you add more plates, you put them on top of the pile, and whenyou need a plate, you take one off the top\. Adding or removing plates fromthe middle or bottom wouldn‚Äôt work as well! Adding data is called \fIpushing\fRonto the stack, and removing data is called \fIpopping off the stack\fR\. Alldata stored on the stack must have a known, fixed size\. Data with an unknownsize at compile time or a size that might change must be stored on the heapinstead\.
.P
The heap is less organized: when you put data on the heap, you request acertain amount of space\. The memory allocator finds an empty spot in the heapthat is big enough, marks it as being in use, and returns a \fIpointer\fR, whichis the address of that location\. This process is called \fIallocating on the\fRheap and is sometimes abbreviated as just \fIallocating\fR (pushing values ontothe stack is not considered allocating)\. Because the pointer to the heap is aknown, fixed size, you can store the pointer on the stack, but when you wantthe actual data, you must follow the pointer\. Think of being seated at arestaurant\. When you enter, you state the number of people in your group, andthe staff finds an empty table that fits everyone and leads you there\. Ifsomeone in your group comes late, they can ask where you‚Äôve been seated tofind you\.
.P
Pushing to the stack is faster than allocating on the heap because theallocator never has to search for a place to store new data; that location isalways at the top of the stack\. Comparatively, allocating space on the heaprequires more work, because the allocator must first find a big enough spaceto hold the data and then perform bookkeeping to prepare for the nextallocation\.
.P
Accessing data in the heap is slower than accessing data on the stack becauseyou have to follow a pointer to get there\. Contemporary processors are fasterif they jump around less in memory\. Continuing the analogy, consider a serverat a restaurant taking orders from many tables\. It‚Äôs most efficient to getall the orders at one table before moving on to the next table\. Taking anorder from table A, then an order from table B, then one from A again, andthen one from B again would be a much slower process\. By the same token, aprocessor can do its job better if it works on data that‚Äôs close to otherdata (as it is on the stack) rather than farther away (as it can be on theheap)\.
.P
When your code calls a function, the values passed into the function(including, potentially, pointers to data on the heap) and the function‚Äôslocal variables get pushed onto the stack\. When the function is over, thosevalues get popped off the stack\.
.P
Keeping track of what parts of code are using what data on the heap,minimizing the amount of duplicate data on the heap, and cleaning up unuseddata on the heap so you don‚Äôt run out of space are all problems that ownershipaddresses\. Once you understand ownership, you won‚Äôt need to think about thestack and the heap very often, but knowing that the main purpose of ownershipis to manage heap data can help explain why it works the way it does\.
.br

.br
\fBOwnership Rules\fR
.br
=================
.br

.P
First, let‚Äôs take a look at the ownership rules\. Keep these rules in mind as wework through the examples that illustrate them:
.P
Each value in Rust has an \fIowner\fR\.
.P
There can only be one owner at a time\.
.P
When the owner goes out of scope, the value will be dropped\.
.br

.br
\fBVariable Scope\fR
.br
================
.br

.P
Now that we‚Äôre past basic Rust syntax, we won‚Äôt include all the `\fIfn main() {\fR`code in examples, so if you‚Äôre following along, make sure to put the followingexamples inside a `\fImain\fR` function manually\. As a result, our examples will be abit more concise, letting us focus on the actual details rather thanboilerplate code\.
.P
As a first example of ownership, we‚Äôll look at the \fIscope\fR of some variables\. Ascope is the range within a program for which an item is valid\. Take thefollowing variable:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = "hello";

.EE

.RE
.P
The variable `\fIs\fR` refers to a string literal, where the value of the string ishardcoded into the text of our program\. The variable is valid from the point atwhich it‚Äôs declared until the end of the current \fIscope\fR\. Listing 4\-1 shows aprogram with comments annotating where the variable `\fIs\fR` would be valid\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    {                      // s is not valid here, it‚Äôs not yet declared
        let s = "hello";   // s is valid from this point forward

        // do stuff with s
    }                      // this scope is now over, and s is no longer valid
# }

.EE

.RE
Listing 4\-1: A variable and the scope in which it isvalid
.P
In other words, there are two important points in time here:
.P
When `\fIs\fR` comes \fIinto scope\fR, it is valid\.
.P
It remains valid until it goes \fIout of scope\fR\.
.P
At this point, the relationship between scopes and when variables are valid issimilar to that in other programming languages\. Now we‚Äôll build on top of thisunderstanding by introducing the `\fIString\fR` type\.
.br

.br
\fBThe \fR
.br
======
.br
`\fIString\fR` Type
.P
To illustrate the rules of ownership, we need a data type that is more complexthan those we covered in the 
.UR ch03\-02\-data\-types\.html#data\-types
.UE
‚ÄúData Types‚Äù sectionof Chapter 3\. The types covered previously are all a known size, can be storedon the stack and popped off the stack when their scope is over, and can bequickly and trivially copied to make a new, independent instance if anotherpart of code needs to use the same value in a different scope\. But we want tolook at data that is stored on the heap and explore how Rust knows when toclean up that data, and the `\fIString\fR` type is a great example\.
.P
We‚Äôll concentrate on the parts of `\fIString\fR` that relate to ownership\. Theseaspects also apply to other complex data types, whether they are provided bythe standard library or created by you\. We‚Äôll discuss `\fIString\fR` in more depth in
.UR ch08\-02\-strings\.html
.UE
Chapter 8\.
.P
We‚Äôve already seen string literals, where a string value is hardcoded into ourprogram\. String literals are convenient, but they aren‚Äôt suitable for everysituation in which we may want to use text\. One reason is that they‚Äôreimmutable\. Another is that not every string value can be known when we writeour code: for example, what if we want to take user input and store it? Forthese situations, Rust has a second string type, `\fIString\fR`\. This type managesdata allocated on the heap and as such is able to store an amount of text thatis unknown to us at compile time\. You can create a `\fIString\fR` from a stringliteral using the `\fIfrom\fR` function, like so:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = String::from("hello");

.EE

.RE
.P
The double colon `\fI::\fR` operator allows us to namespace this particular `\fIfrom\fR`function under the `\fIString\fR` type rather than using some sort of name like`\fIstring_from\fR`\. We‚Äôll discuss this syntax more in the 
.UR ch05\-03\-method\-syntax\.html#method\-syntax
.UE
‚ÄúMethodSyntax‚Äù section of Chapter 5 and when we talkabout namespacing with modules in 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html
.UE
‚ÄúPaths for Referring to an Item in theModule Tree‚Äù in Chapter 7\.
.P
This kind of string \fIcan\fR be mutated:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    s\.push_str(", world!"); // push_str() appends a literal to a String

    println!("{}", s); // This will print `hello, world!`
# }

.EE

.RE
.P
So, what‚Äôs the difference here? Why can `\fIString\fR` be mutated but literalscannot? The difference is how these two types deal with memory\.
.br

.br
\fBMemory and Allocation\fR
.br
=======================
.br

.P
In the case of a string literal, we know the contents at compile time, so thetext is hardcoded directly into the final executable\. This is why stringliterals are fast and efficient\. But these properties only come from the stringliteral‚Äôs immutability\. Unfortunately, we can‚Äôt put a blob of memory into thebinary for each piece of text whose size is unknown at compile time and whosesize might change while running the program\.
.P
With the `\fIString\fR` type, in order to support a mutable, growable piece of text,we need to allocate an amount of memory on the heap, unknown at compile time,to hold the contents\. This means:
.P
The memory must be requested from the memory allocator at runtime\.
.P
We need a way of returning this memory to the allocator when we‚Äôredone with our `\fIString\fR`\.
.P
That first part is done by us: when we call `\fIString::from\fR`, its implementationrequests the memory it needs\. This is pretty much universal in programminglanguages\.
.P
However, the second part is different\. In languages with a \fIgarbage collector\fR(GC), the GC keeps track of and cleans up memory that isn‚Äôt being usedanymore, and we don‚Äôt need to think about it\. In most languages without a GC,it‚Äôs our responsibility to identify when memory is no longer being used andcall code to explicitly free it, just as we did to request it\. Doing thiscorrectly has historically been a difficult programming problem\. If we forget,we‚Äôll waste memory\. If we do it too early, we‚Äôll have an invalid variable\. Ifwe do it twice, that‚Äôs a bug too\. We need to pair exactly one `\fIallocate\fR` withexactly one `\fIfree\fR`\.
.P
Rust takes a different path: the memory is automatically returned once thevariable that owns it goes out of scope\. Here‚Äôs a version of our scope examplefrom Listing 4\-1 using a `\fIString\fR` instead of a string literal:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    {
        let s = String::from("hello"); // s is valid from this point forward

        // do stuff with s
    }                                  // this scope is now over, and s is no
                                       // longer valid
# }

.EE

.RE
.P
There is a natural point at which we can return the memory our `\fIString\fR` needsto the allocator: when `\fIs\fR` goes out of scope\. When a variable goes out ofscope, Rust calls a special function for us\. This function is called
.UR \.\./std/ops/trait\.Drop\.html#tymethod\.drop
.UE
`\fIdrop\fR`, and it‚Äôs where the author of `\fIString\fR` can putthe code to return the memory\. Rust calls `\fIdrop\fR` automatically at the closingcurly bracket\.
.P
Note: In C++, this pattern of deallocating resources at the end of an item‚Äôslifetime is sometimes called \fIResource Acquisition Is Initialization (RAII)\fR\.The `\fIdrop\fR` function in Rust will be familiar to you if you‚Äôve used RAIIpatterns\.
.P
This pattern has a profound impact on the way Rust code is written\. It may seemsimple right now, but the behavior of code can be unexpected in morecomplicated situations when we want to have multiple variables use the datawe‚Äôve allocated on the heap\. Let‚Äôs explore some of those situations now\.
.br

.br
\fBWays Variables and Data Interact: Move\fR
.br
========================================
.br

.P
Multiple variables can interact with the same data in different ways in Rust\.Let‚Äôs look at an example using an integer in Listing 4\-2\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 5;
    let y = x;
# }

.EE

.RE
Listing 4\-2: Assigning the integer value of variable `\fIx\fR`to `\fIy\fR`
.P
We can probably guess what this is doing: ‚Äúbind the value `\fI5\fR` to `\fIx\fR`; then makea copy of the value in `\fIx\fR` and bind it to `\fIy\fR`\.‚Äù We now have two variables, `\fIx\fR`and `\fIy\fR`, and both equal `\fI5\fR`\. This is indeed what is happening, because integersare simple values with a known, fixed size, and these two `\fI5\fR` values are pushedonto the stack\.
.P
Now let‚Äôs look at the `\fIString\fR` version:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");
    let s2 = s1;
# }

.EE

.RE
.P
This looks very similar, so we might assume that the way it works would be thesame: that is, the second line would make a copy of the value in `\fIs1\fR` and bindit to `\fIs2\fR`\. But this isn‚Äôt quite what happens\.
.P
Take a look at Figure 4\-1 to see what is happening to `\fIString\fR` under thecovers\. A `\fIString\fR` is made up of three parts, shown on the left: a pointer tothe memory that holds the contents of the string, a length, and a capacity\.This group of data is stored on the stack\. On the right is the memory on theheap that holds the contents\.Figure 4\-1: Representation in memory of a `\fIString\fR`holding the value `\fI"hello"\fR` bound to `\fIs1\fR`
.P
The length is how much memory, in bytes, the contents of the `\fIString\fR` iscurrently using\. The capacity is the total amount of memory, in bytes, that the`\fIString\fR` has received from the allocator\. The difference between lengthand capacity matters, but not in this context, so for now, it‚Äôs fine to ignorethe capacity\.
.P
When we assign `\fIs1\fR` to `\fIs2\fR`, the `\fIString\fR` data is copied, meaning we copy thepointer, the length, and the capacity that are on the stack\. We do not copy thedata on the heap that the pointer refers to\. In other words, the datarepresentation in memory looks like Figure 4\-2\.Figure 4\-2: Representation in memory of the variable `\fIs2\fR`that has a copy of the pointer, length, and capacity of `\fIs1\fR`
.P
The representation does \fInot\fR look like Figure 4\-3, which is what memory wouldlook like if Rust instead copied the heap data as well\. If Rust did this, theoperation `\fIs2 = s1\fR` could be very expensive in terms of runtime performance ifthe data on the heap were large\.Figure 4\-3: Another possibility for what `\fIs2 = s1\fR` mightdo if Rust copied the heap data as well
.P
Earlier, we said that when a variable goes out of scope, Rust automaticallycalls the `\fIdrop\fR` function and cleans up the heap memory for that variable\. ButFigure 4\-2 shows both data pointers pointing to the same location\. This is aproblem: when `\fIs2\fR` and `\fIs1\fR` go out of scope, they will both try to free thesame memory\. This is known as a \fIdouble free\fR error and is one of the memorysafety bugs we mentioned previously\. Freeing memory twice can lead to memorycorruption, which can potentially lead to security vulnerabilities\.
.P
To ensure memory safety, after the line `\fIlet s2 = s1\fR`, Rust considers `\fIs1\fR` asno longer valid\. Therefore, Rust doesn‚Äôt need to free anything when `\fIs1\fR` goesout of scope\. Check out what happens when you try to use `\fIs1\fR` after `\fIs2\fR` iscreated; it won‚Äôt work:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");
    let s2 = s1;

    println!("{}, world!", s1);
# }

.EE

.RE
.P
You‚Äôll get an error like this because Rust prevents you from using theinvalidated reference:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0382]: borrow of moved value: `s1`
 \-\-> src/main\.rs:5:28
  |
2 |     let s1 = String::from("hello");
  |         \-\- move occurs because `s1` has type `String`, which does not implement the `Copy` trait
3 |     let s2 = s1;
  |              \-\- value moved here
4 | 
5 |     println!("{}, world!", s1);
  |                            ^^ value borrowed here after move
  |
  = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with \-Z macro\-backtrace for more info)

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `ownership` due to previous error

.EE

.RE
.P
If you‚Äôve heard the terms \fIshallow copy\fR and \fIdeep copy\fR while working withother languages, the concept of copying the pointer, length, and capacitywithout copying the data probably sounds like making a shallow copy\. Butbecause Rust also invalidates the first variable, instead of calling it ashallow copy, it‚Äôs known as a \fImove\fR\. In this example, we would say that`\fIs1\fR` was \fImoved\fR into `\fIs2\fR`\. So what actually happens is shown in Figure 4\-4\.Figure 4\-4: Representation in memory after `\fIs1\fR` has beeninvalidated
.P
That solves our problem! With only `\fIs2\fR` valid, when it goes out of scope, italone will free the memory, and we‚Äôre done\.
.P
In addition, there‚Äôs a design choice that‚Äôs implied by this: Rust will neverautomatically create ‚Äúdeep‚Äù copies of your data\. Therefore, any \fIautomatic\fRcopying can be assumed to be inexpensive in terms of runtime performance\.
.br

.br
\fBWays Variables and Data Interact: Clone\fR
.br
=========================================
.br

.P
If we \fIdo\fR want to deeply copy the heap data of the `\fIString\fR`, not just thestack data, we can use a common method called `\fIclone\fR`\. We‚Äôll discuss methodsyntax in Chapter 5, but because methods are a common feature in manyprogramming languages, you‚Äôve probably seen them before\.
.P
Here‚Äôs an example of the `\fIclone\fR` method in action:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");
    let s2 = s1\.clone();

    println!("s1 = {}, s2 = {}", s1, s2);
# }

.EE

.RE
.P
This works just fine and explicitly produces the behavior shown in Figure 4\-3,where the heap data \fIdoes\fR get copied\.
.P
When you see a call to `\fIclone\fR`, you know that some arbitrary code is beingexecuted and that code may be expensive\. It‚Äôs a visual indicator that somethingdifferent is going on\.
.br

.br
\fBStack\-Only Data: Copy\fR
.br
=======================
.br

.P
There‚Äôs another wrinkle we haven‚Äôt talked about yet\. This code using integers ‚Äìpart of which was shown in Listing 4\-2 ‚Äì works and is valid:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 5;
    let y = x;

    println!("x = {}, y = {}", x, y);
# }

.EE

.RE
.P
But this code seems to contradict what we just learned: we don‚Äôt have a call to`\fIclone\fR`, but `\fIx\fR` is still valid and wasn‚Äôt moved into `\fIy\fR`\.
.P
The reason is that types such as integers that have a known size at compiletime are stored entirely on the stack, so copies of the actual values are quickto make\. That means there‚Äôs no reason we would want to prevent `\fIx\fR` from beingvalid after we create the variable `\fIy\fR`\. In other words, there‚Äôs no differencebetween deep and shallow copying here, so calling `\fIclone\fR` wouldn‚Äôt do anythingdifferent from the usual shallow copying and we can leave it out\.
.P
Rust has a special annotation called the `\fICopy\fR` trait that we can place ontypes that are stored on the stack, as integers are (we‚Äôll talk more abouttraits in 
.UR ch10\-02\-traits\.html
.UE
Chapter 10)\. If a type implements the `\fICopy\fR`trait, variables that use it do not move, but rather are trivially copied,making them still valid after assignment to another variable\.
.P
Rust won‚Äôt let us annotate a type with `\fICopy\fR` if the type, or any of its parts,has implemented the `\fIDrop\fR` trait\. If the type needs something special to happenwhen the value goes out of scope and we add the `\fICopy\fR` annotation to that type,we‚Äôll get a compile\-time error\. To learn about how to add the `\fICopy\fR` annotationto your type to implement the trait, see 
.UR appendix\-03\-derivable\-traits\.html
.UE
‚ÄúDerivableTraits‚Äù in Appendix C\.
.P
So what types implement the `\fICopy\fR` trait? You can check the documentation forthe given type to be sure, but as a general rule, any group of simple scalarvalues can implement `\fICopy\fR`, and nothing that requires allocation or is someform of resource can implement `\fICopy\fR`\. Here are some of the types thatimplement `\fICopy\fR`:
.P
All the integer types, such as `\fIu32\fR`\.
.P
The Boolean type, `\fIbool\fR`, with values `\fItrue\fR` and `\fIfalse\fR`\.
.P
All the floating point types, such as `\fIf64\fR`\.
.P
The character type, `\fIchar\fR`\.
.P
Tuples, if they only contain types that also implement `\fICopy\fR`\. For example,`\fI(i32, i32)\fR` implements `\fICopy\fR`, but `\fI(i32, String)\fR` does not\.
.br

.br
\fBOwnership and Functions\fR
.br
=========================
.br

.P
The mechanics of passing a value to a function are similar to those whenassigning a value to a variable\. Passing a variable to a function will move orcopy, just as assignment does\. Listing 4\-3 has an example with some annotationsshowing where variables go into and out of scope\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let s = String::from("hello");  // s comes into scope

    takes_ownership(s);             // s's value moves into the function\.\.\.
                                    // \.\.\. and so is no longer valid here

    let x = 5;                      // x comes into scope

    makes_copy(x);                  // x would move into the function,
                                    // but i32 is Copy, so it's okay to still
                                    // use x afterward

} // Here, x goes out of scope, then s\. But because s's value was moved, nothing
  // special happens\.

fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
} // Here, some_string goes out of scope and `drop` is called\. The backing
  // memory is freed\.

fn makes_copy(some_integer: i32) { // some_integer comes into scope
    println!("{}", some_integer);
} // Here, some_integer goes out of scope\. Nothing special happens\.

.EE

.RE
Listing 4\-3: Functions with ownership and scopeannotated
.P
If we tried to use `\fIs\fR` after the call to `\fItakes_ownership\fR`, Rust would throw acompile\-time error\. These static checks protect us from mistakes\. Try addingcode to `\fImain\fR` that uses `\fIs\fR` and `\fIx\fR` to see where you can use them and wherethe ownership rules prevent you from doing so\.
.br

.br
\fBReturn Values and Scope\fR
.br
=========================
.br

.P
Returning values can also transfer ownership\. Listing 4\-4 shows an exampleof a function that returns some value, with similar annotations as those inListing 4\-3\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let s1 = gives_ownership();         // gives_ownership moves its return
                                        // value into s1

    let s2 = String::from("hello");     // s2 comes into scope

    let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                        // takes_and_gives_back, which also
                                        // moves its return value into s3
} // Here, s3 goes out of scope and is dropped\. s2 was moved, so nothing
  // happens\. s1 goes out of scope and is dropped\.

fn gives_ownership() \-> String {             // gives_ownership will move its
                                             // return value into the function
                                             // that calls it

    let some_string = String::from("yours"); // some_string comes into scope

    some_string                              // some_string is returned and
                                             // moves out to the calling
                                             // function
}

// This function takes a String and returns one
fn takes_and_gives_back(a_string: String) \-> String { // a_string comes into
                                                      // scope

    a_string  // a_string is returned and moves out to the calling function
}

.EE

.RE
Listing 4\-4: Transferring ownership of returnvalues
.P
The ownership of a variable follows the same pattern every time: assigning avalue to another variable moves it\. When a variable that includes data on theheap goes out of scope, the value will be cleaned up by `\fIdrop\fR` unless ownershipof the data has been moved to another variable\.
.P
While this works, taking ownership and then returning ownership with everyfunction is a bit tedious\. What if we want to let a function use a value butnot take ownership? It‚Äôs quite annoying that anything we pass in also needs tobe passed back if we want to use it again, in addition to any data resultingfrom the body of the function that we might want to return as well\.
.P
Rust does let us return multiple values using a tuple, as shown in Listing 4\-5\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let s1 = String::from("hello");

    let (s2, len) = calculate_length(s1);

    println!("The length of '{}' is {}\.", s2, len);
}

fn calculate_length(s: String) \-> (String, usize) {
    let length = s\.len(); // len() returns the length of a String

    (s, length)
}

.EE

.RE
Listing 4\-5: Returning ownership of parameters
.P
But this is too much ceremony and a lot of work for a concept that should becommon\. Luckily for us, Rust has a feature for using a value withouttransferring ownership, called \fIreferences\fR\.
.SH "References and Borrowing"

.br

.br
\fBReferences and Borrowing\fR
.br
==========================
.br

.P
The issue with the tuple code in Listing 4\-5 is that we have to return the`\fIString\fR` to the calling function so we can still use the `\fIString\fR` after thecall to `\fIcalculate_length\fR`, because the `\fIString\fR` was moved into`\fIcalculate_length\fR`\. Instead, we can provide a reference to the `\fIString\fR` value\.A \fIreference\fR is like a pointer in that it‚Äôs an address we can follow to accessthe data stored at that address; that data is owned by some other variable\.Unlike a pointer, a reference is guaranteed to point to a valid value of aparticular type for the life of that reference\.
.P
Here is how you would define and use a `\fIcalculate_length\fR` function thathas a reference to an object as a parameter instead of taking ownership of thevalue:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}\.", s1, len);
}

fn calculate_length(s: &String) \-> usize {
    s\.len()
}

.EE

.RE
.P
First, notice that all the tuple code in the variable declaration and thefunction return value is gone\. Second, note that we pass `\fI&s1\fR` into`\fIcalculate_length\fR` and, in its definition, we take `\fI&String\fR` rather than`\fIString\fR`\. These ampersands represent \fIreferences\fR, and they allow you to referto some value without taking ownership of it\. Figure 4\-5 depicts this concept\.Figure 4\-5: A diagram of `\fI&String s\fR` pointing at `\fIString s1\fR`
.P
Note: The opposite of referencing by using `\fI&\fR` is \fIdereferencing\fR, which isaccomplished with the dereference operator, `\fI*\fR`\. We‚Äôll see some uses of thedereference operator in Chapter 8 and discuss details of dereferencing inChapter 15\.
.P
Let‚Äôs take a closer look at the function call here:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);
# 
#     println!("The length of '{}' is {}\.", s1, len);
# }
# 
# fn calculate_length(s: &String) \-> usize {
#     s\.len()
# }

.EE

.RE
.P
The `\fI&s1\fR` syntax lets us create a reference that \fIrefers\fR to the value of `\fIs1\fR`but does not own it\. Because it does not own it, the value it points to willnot be dropped when the reference stops being used\.
.P
Likewise, the signature of the function uses `\fI&\fR` to indicate that the type ofthe parameter `\fIs\fR` is a reference\. Let‚Äôs add some explanatory annotations:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let s1 = String::from("hello");
# 
#     let len = calculate_length(&s1);
# 
#     println!("The length of '{}' is {}\.", s1, len);
# }
# 
fn calculate_length(s: &String) \-> usize { // s is a reference to a String
    s\.len()
} // Here, s goes out of scope\. But because it does not have ownership of what
  // it refers to, it is not dropped\.

.EE

.RE
.P
The scope in which the variable `\fIs\fR` is valid is the same as any functionparameter‚Äôs scope, but the value pointed to by the reference is not droppedwhen `\fIs\fR` stops being used because `\fIs\fR` doesn‚Äôt have ownership\. When functionshave references as parameters instead of the actual values, we won‚Äôt need toreturn the values in order to give back ownership, because we never hadownership\.
.P
We call the action of creating a reference \fIborrowing\fR\. As in real life, if aperson owns something, you can borrow it from them\. When you‚Äôre done, you haveto give it back\. You don‚Äôt own it\.
.P
So what happens if we try to modify something we‚Äôre borrowing? Try the code inListing 4\-6\. Spoiler alert: it doesn‚Äôt work!Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let s = String::from("hello");

    change(&s);
}

fn change(some_string: &String) {
    some_string\.push_str(", world");
}

.EE

.RE
Listing 4\-6: Attempting to modify a borrowed value
.P
Here‚Äôs the error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0596]: cannot borrow `*some_string` as mutable, as it is behind a `&` reference
 \-\-> src/main\.rs:8:5
  |
7 | fn change(some_string: &String) {
  |                        \-\-\-\-\-\-\- help: consider changing this to be a mutable reference: `&mut String`
8 |     some_string\.push_str(", world");
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `some_string` is a `&` reference, so the data it refers to cannot be borrowed as mutable

For more information about this error, try `rustc \-\-explain E0596`\.
error: could not compile `ownership` due to previous error

.EE

.RE
.P
Just as variables are immutable by default, so are references\. We‚Äôre notallowed to modify something we have a reference to\.
.br

.br
\fBMutable References\fR
.br
====================
.br

.P
We can fix the code from Listing 4\-6 to allow us to modify a borrowed valuewith just a few small tweaks that use, instead, a \fImutable reference\fR:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut s = String::from("hello");

    change(&mut s);
}

fn change(some_string: &mut String) {
    some_string\.push_str(", world");
}

.EE

.RE
.P
First, we change `\fIs\fR` to be `\fImut\fR`\. Then we create a mutable reference with `\fI&mut s\fR` where we call the `\fIchange\fR` function, and update the function signature toaccept a mutable reference with `\fIsome_string: &mut String\fR`\. This makes it veryclear that the `\fIchange\fR` function will mutate the value it borrows\.
.P
Mutable references have one big restriction: if you have a mutable reference toa value, you can have no other references to that value\. This code thatattempts to create two mutable references to `\fIs\fR` will fail:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    let r1 = &mut s;
    let r2 = &mut s;

    println!("{}, {}", r1, r2);
# }

.EE

.RE
.P
Here‚Äôs the error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0499]: cannot borrow `s` as mutable more than once at a time
 \-\-> src/main\.rs:5:14
  |
4 |     let r1 = &mut s;
  |              \-\-\-\-\-\- first mutable borrow occurs here
5 |     let r2 = &mut s;
  |              ^^^^^^ second mutable borrow occurs here
6 | 
7 |     println!("{}, {}", r1, r2);
  |                        \-\- first borrow later used here

For more information about this error, try `rustc \-\-explain E0499`\.
error: could not compile `ownership` due to previous error

.EE

.RE
.P
This error says that this code is invalid because we cannot borrow `\fIs\fR` asmutable more than once at a time\. The first mutable borrow is in `\fIr1\fR` and mustlast until it‚Äôs used in the `\fIprintln!\fR`, but between the creation of thatmutable reference and its usage, we tried to create another mutable referencein `\fIr2\fR` that borrows the same data as `\fIr1\fR`\.
.P
The restriction preventing multiple mutable references to the same data at thesame time allows for mutation but in a very controlled fashion\. It‚Äôs somethingthat new Rustaceans struggle with, because most languages let you mutatewhenever you‚Äôd like\. The benefit of having this restriction is that Rust canprevent data races at compile time\. A \fIdata race\fR is similar to a racecondition and happens when these three behaviors occur:
.P
Two or more pointers access the same data at the same time\.
.P
At least one of the pointers is being used to write to the data\.
.P
There‚Äôs no mechanism being used to synchronize access to the data\.
.P
Data races cause undefined behavior and can be difficult to diagnose and fixwhen you‚Äôre trying to track them down at runtime; Rust prevents this problemby refusing to compile code with data races!
.P
As always, we can use curly brackets to create a new scope, allowing formultiple mutable references, just not \fIsimultaneous\fR ones:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    {
        let r1 = &mut s;
    } // r1 goes out of scope here, so we can make a new reference with no problems\.

    let r2 = &mut s;
# }

.EE

.RE
.P
Rust enforces a similar rule for combining mutable and immutable references\.This code results in an error:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    let r3 = &mut s; // BIG PROBLEM

    println!("{}, {}, and {}", r1, r2, r3);
# }

.EE

.RE
.P
Here‚Äôs the error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable
 \-\-> src/main\.rs:6:14
  |
4 |     let r1 = &s; // no problem
  |              \-\- immutable borrow occurs here
5 |     let r2 = &s; // no problem
6 |     let r3 = &mut s; // BIG PROBLEM
  |              ^^^^^^ mutable borrow occurs here
7 | 
8 |     println!("{}, {}, and {}", r1, r2, r3);
  |                                \-\- immutable borrow later used here

For more information about this error, try `rustc \-\-explain E0502`\.
error: could not compile `ownership` due to previous error

.EE

.RE
.P
Whew! We \fIalso\fR cannot have a mutable reference while we have an immutable oneto the same value\.
.P
Users of an immutable reference don‚Äôt expect the value to suddenly change outfrom under them! However, multiple immutable references are allowed because noone who is just reading the data has the ability to affect anyone else‚Äôsreading of the data\.
.P
Note that a reference‚Äôs scope starts from where it is introduced and continuesthrough the last time that reference is used\. For instance, this code willcompile because the last usage of the immutable references, the `\fIprintln!\fR`,occurs before the mutable reference is introduced:
.RS
.IP \fBrust,edition2021\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    println!("{} and {}", r1, r2);
    // variables r1 and r2 will not be used after this point

    let r3 = &mut s; // no problem
    println!("{}", r3);
# }

.EE

.RE
.P
The scopes of the immutable references `\fIr1\fR` and `\fIr2\fR` end after the `\fIprintln!\fR`where they are last used, which is before the mutable reference `\fIr3\fR` iscreated\. These scopes don‚Äôt overlap, so this code is allowed\. The ability ofthe compiler to tell that a reference is no longer being used at a point beforethe end of the scope is called \fINon\-Lexical Lifetimes\fR (NLL for short), and youcan read more about it in 
.UR https://doc\.rust\-lang\.org/edition\-guide/rust\-2018/ownership\-and\-lifetimes/non\-lexical\-lifetimes\.html
.UE
The Edition Guide\.
.P
Even though borrowing errors may be frustrating at times, remember that it‚Äôsthe Rust compiler pointing out a potential bug early (at compile time ratherthan at runtime) and showing you exactly where the problem is\. Then you don‚Äôthave to track down why your data isn‚Äôt what you thought it was\.
.br

.br
\fBDangling References\fR
.br
=====================
.br

.P
In languages with pointers, it‚Äôs easy to erroneously create a \fIdangling\fRpointer\-\-a pointer that references a location in memory that may have beengiven to someone else\-\-by freeing some memory while preserving a pointer tothat memory\. In Rust, by contrast, the compiler guarantees that references willnever be dangling references: if you have a reference to some data, thecompiler will ensure that the data will not go out of scope before thereference to the data does\.
.P
Let‚Äôs try to create a dangling reference to see how Rust prevents them with acompile\-time error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let reference_to_nothing = dangle();
}

fn dangle() \-> &String {
    let s = String::from("hello");

    &s
}

.EE

.RE
.P
Here‚Äôs the error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0106]: missing lifetime specifier
 \-\-> src/main\.rs:5:16
  |
5 | fn dangle() \-> &String {
  |                ^ expected named lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime
  |
5 | fn dangle() \-> &'static String {
  |                ~~~~~~~~

For more information about this error, try `rustc \-\-explain E0106`\.
error: could not compile `ownership` due to previous error

.EE

.RE
.P
This error message refers to a feature we haven‚Äôt covered yet: lifetimes\. We‚Äôlldiscuss lifetimes in detail in Chapter 10\. But, if you disregard the partsabout lifetimes, the message does contain the key to why this code is a problem:
.RS
.IP \fBtext\fR 2

.br
.EX
this function's return type contains a borrowed value, but there is no value
for it to be borrowed from

.EE

.RE
.P
Let‚Äôs take a closer look at exactly what‚Äôs happening at each stage of our`\fIdangle\fR` code:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let reference_to_nothing = dangle();
# }
# 
fn dangle() \-> &String { // dangle returns a reference to a String

    let s = String::from("hello"); // s is a new String

    &s // we return a reference to the String, s
} // Here, s goes out of scope, and is dropped\. Its memory goes away\.
  // Danger!

.EE

.RE
.P
Because `\fIs\fR` is created inside `\fIdangle\fR`, when the code of `\fIdangle\fR` is finished,`\fIs\fR` will be deallocated\. But we tried to return a reference to it\. That meansthis reference would be pointing to an invalid `\fIString\fR`\. That‚Äôs no good! Rustwon‚Äôt let us do this\.
.P
The solution here is to return the `\fIString\fR` directly:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let string = no_dangle();
# }
# 
fn no_dangle() \-> String {
    let s = String::from("hello");

    s
}

.EE

.RE
.P
This works without any problems\. Ownership is moved out, and nothing isdeallocated\.
.br

.br
\fBThe Rules of References\fR
.br
=========================
.br

.P
Let‚Äôs recap what we‚Äôve discussed about references:
.P
At any given time, you can have \fIeither\fR one mutable reference \fIor\fR anynumber of immutable references\.
.P
References must always be valid\.
.P
Next, we‚Äôll look at a different kind of reference: slices\.
.SH "The Slice Type"

.br

.br
\fBThe Slice Type\fR
.br
================
.br
\fISlices\fR let you reference a contiguous sequence of elements in a collectionrather than the whole collection\. A slice is a kind of reference, so it doesnot have ownership\.
.P
Here‚Äôs a small programming problem: write a function that takes a string ofwords separated by spaces and returns the first word it finds in that string\.If the function doesn‚Äôt find a space in the string, the whole string must beone word, so the entire string should be returned\.
.P
Let‚Äôs work through how we‚Äôd write the signature of this function without usingslices, to understand the problem that slices will solve:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word(s: &String) \-> ?

.EE

.RE
.P
The `\fIfirst_word\fR` function has a `\fI&String\fR` as a parameter\. We don‚Äôt wantownership, so this is fine\. But what should we return? We don‚Äôt really have away to talk about \fIpart\fR of a string\. However, we could return the index of theend of the word, indicated by a space\. Let‚Äôs try that, as shown in Listing 4\-7\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn first_word(s: &String) \-> usize {
    let bytes = s\.as_bytes();

    for (i, &item) in bytes\.iter()\.enumerate() {
        if item == b' ' {
            return i;
        }
    }

    s\.len()
}
# 
# fn main() {}

.EE

.RE
Listing 4\-7: The `\fIfirst_word\fR` function that returns abyte index value into the `\fIString\fR` parameter
.P
Because we need to go through the `\fIString\fR` element by element and check whethera value is a space, we‚Äôll convert our `\fIString\fR` to an array of bytes using the`\fIas_bytes\fR` method:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn first_word(s: &String) \-> usize {
    let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return i;
#         }
#     }
# 
#     s\.len()
# }
# 
# fn main() {}

.EE

.RE
.P
Next, we create an iterator over the array of bytes using the `\fIiter\fR` method:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn first_word(s: &String) \-> usize {
#     let bytes = s\.as_bytes();
# 
    for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return i;
#         }
#     }
# 
#     s\.len()
# }
# 
# fn main() {}

.EE

.RE
.P
We‚Äôll discuss iterators in more detail in 
.UR ch13\-02\-iterators\.html
.UE
Chapter 13\.For now, know that `\fIiter\fR` is a method that returns each element in a collectionand that `\fIenumerate\fR` wraps the result of `\fIiter\fR` and returns each element aspart of a tuple instead\. The first element of the tuple returned from`\fIenumerate\fR` is the index, and the second element is a reference to the element\.This is a bit more convenient than calculating the index ourselves\.
.P
Because the `\fIenumerate\fR` method returns a tuple, we can use patterns todestructure that tuple\. We‚Äôll be discussing patterns more in 
.UR ch06\-02\-match\.html#patterns\-that\-bind\-to\-values
.UE
Chapter6\. In the `\fIfor\fR` loop, we specify a pattern that has `\fIi\fR`for the index in the tuple and `\fI&item\fR` for the single byte in the tuple\.Because we get a reference to the element from `\fI\.iter()\.enumerate()\fR`, we use`\fI&\fR` in the pattern\.
.P
Inside the `\fIfor\fR` loop, we search for the byte that represents the space byusing the byte literal syntax\. If we find a space, we return the position\.Otherwise, we return the length of the string by using `\fIs\.len()\fR`:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn first_word(s: &String) \-> usize {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
        if item == b' ' {
            return i;
        }
    }

    s\.len()
# }
# 
# fn main() {}

.EE

.RE
.P
We now have a way to find out the index of the end of the first word in thestring, but there‚Äôs a problem\. We‚Äôre returning a `\fIusize\fR` on its own, but it‚Äôsonly a meaningful number in the context of the `\fI&String\fR`\. In other words,because it‚Äôs a separate value from the `\fIString\fR`, there‚Äôs no guarantee that itwill still be valid in the future\. Consider the program in Listing 4\-8 thatuses the `\fIfirst_word\fR` function from Listing 4\-7\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn first_word(s: &String) \-> usize {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return i;
#         }
#     }
# 
#     s\.len()
# }
# 
fn main() {
    let mut s = String::from("hello world");

    let word = first_word(&s); // word will get the value 5

    s\.clear(); // this empties the String, making it equal to ""

    // word still has the value 5 here, but there's no more string that
    // we could meaningfully use the value 5 with\. word is now totally invalid!
}

.EE

.RE
Listing 4\-8: Storing the result from calling the`\fIfirst_word\fR` function and then changing the `\fIString\fR` contents
.P
This program compiles without any errors and would also do so if we used `\fIword\fR`after calling `\fIs\.clear()\fR`\. Because `\fIword\fR` isn‚Äôt connected to the state of `\fIs\fR`at all, `\fIword\fR` still contains the value `\fI5\fR`\. We could use that value `\fI5\fR` withthe variable `\fIs\fR` to try to extract the first word out, but this would be a bugbecause the contents of `\fIs\fR` have changed since we saved `\fI5\fR` in `\fIword\fR`\.
.P
Having to worry about the index in `\fIword\fR` getting out of sync with the data in`\fIs\fR` is tedious and error prone! Managing these indices is even more brittle ifwe write a `\fIsecond_word\fR` function\. Its signature would have to look like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn second_word(s: &String) \-> (usize, usize) {

.EE

.RE
.P
Now we‚Äôre tracking a starting \fIand\fR an ending index, and we have even morevalues that were calculated from data in a particular state but aren‚Äôt tied tothat state at all\. We have three unrelated variables floating around thatneed to be kept in sync\.
.P
Luckily, Rust has a solution to this problem: string slices\.
.br

.br
\fBString Slices\fR
.br
===============
.br

.P
A \fIstring slice\fR is a reference to part of a `\fIString\fR`, and it looks like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s = String::from("hello world");

    let hello = &s[0\.\.5];
    let world = &s[6\.\.11];
# }

.EE

.RE
.P
Rather than a reference to the entire `\fIString\fR`, `\fIhello\fR` is a reference to aportion of the `\fIString\fR`, specified in the extra `\fI[0\.\.5]\fR` bit\. We create slicesusing a range within brackets by specifying `\fI[starting_index\.\.ending_index]\fR`,where `\fIstarting_index\fR` is the first position in the slice and `\fIending_index\fR` isone more than the last position in the slice\. Internally, the slice datastructure stores the starting position and the length of the slice, whichcorresponds to `\fIending_index\fR` minus `\fIstarting_index\fR`\. So in the case of `\fIlet world = &s[6\.\.11];\fR`, `\fIworld\fR` would be a slice that contains a pointer to thebyte at index 6 of `\fIs\fR` with a length value of 5\.
.P
Figure 4\-6 shows this in a diagram\.Figure 4\-6: String slice referring to part of a`\fIString\fR`
.P
With Rust‚Äôs `\fI\.\.\fR` range syntax, if you want to start at index zero, you can dropthe value before the two periods\. In other words, these are equal:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = String::from("hello");

let slice = &s[0\.\.2];
let slice = &s[\.\.2];

.EE

.RE
.P
By the same token, if your slice includes the last byte of the `\fIString\fR`, youcan drop the trailing number\. That means these are equal:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = String::from("hello");

let len = s\.len();

let slice = &s[3\.\.len];
let slice = &s[3\.\.];

.EE

.RE
.P
You can also drop both values to take a slice of the entire string\. So theseare equal:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = String::from("hello");

let len = s\.len();

let slice = &s[0\.\.len];
let slice = &s[\.\.];

.EE

.RE
.P
Note: String slice range indices must occur at valid UTF\-8 characterboundaries\. If you attempt to create a string slice in the middle of amultibyte character, your program will exit with an error\. For the purposesof introducing string slices, we are assuming ASCII only in this section; amore thorough discussion of UTF\-8 handling is in the 
.UR ch08\-02\-strings\.html#storing\-utf\-8\-encoded\-text\-with\-strings
.UE
‚ÄúStoring UTF\-8 EncodedText with Strings‚Äù section of Chapter 8\.
.P
With all this information in mind, let‚Äôs rewrite `\fIfirst_word\fR` to return aslice\. The type that signifies ‚Äústring slice‚Äù is written as `\fI&str\fR`:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn first_word(s: &String) \-> &str {
    let bytes = s\.as_bytes();

    for (i, &item) in bytes\.iter()\.enumerate() {
        if item == b' ' {
            return &s[0\.\.i];
        }
    }

    &s[\.\.]
}
# 
# fn main() {}

.EE

.RE
.P
We get the index for the end of the word in the same way as we did in Listing4\-7, by looking for the first occurrence of a space\. When we find a space, wereturn a string slice using the start of the string and the index of the spaceas the starting and ending indices\.
.P
Now when we call `\fIfirst_word\fR`, we get back a single value that is tied to theunderlying data\. The value is made up of a reference to the starting point ofthe slice and the number of elements in the slice\.
.P
Returning a slice would also work for a `\fIsecond_word\fR` function:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn second_word(s: &String) \-> &str {

.EE

.RE
.P
We now have a straightforward API that‚Äôs much harder to mess up, because thecompiler will ensure the references into the `\fIString\fR` remain valid\. Rememberthe bug in the program in Listing 4\-8, when we got the index to the end of thefirst word but then cleared the string so our index was invalid? That code waslogically incorrect but didn‚Äôt show any immediate errors\. The problems wouldshow up later if we kept trying to use the first word index with an emptiedstring\. Slices make this bug impossible and let us know we have a problem withour code much sooner\. Using the slice version of `\fIfirst_word\fR` will throw acompile\-time error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn first_word(s: &String) \-> &str {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return &s[0\.\.i];
#         }
#     }
# 
#     &s[\.\.]
# }
# 
fn main() {
    let mut s = String::from("hello world");

    let word = first_word(&s);

    s\.clear(); // error!

    println!("the first word is: {}", word);
}

.EE

.RE
.P
Here‚Äôs the compiler error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable
  \-\-> src/main\.rs:18:5
   |
16 |     let word = first_word(&s);
   |                           \-\- immutable borrow occurs here
17 | 
18 |     s\.clear(); // error!
   |     ^^^^^^^^^ mutable borrow occurs here
19 | 
20 |     println!("the first word is: {}", word);
   |                                       \-\-\-\- immutable borrow later used here

For more information about this error, try `rustc \-\-explain E0502`\.
error: could not compile `ownership` due to previous error

.EE

.RE
.P
Recall from the borrowing rules that if we have an immutable reference tosomething, we cannot also take a mutable reference\. Because `\fIclear\fR` needs totruncate the `\fIString\fR`, it needs to get a mutable reference\. The `\fIprintln!\fR`after the call to `\fIclear\fR` uses the reference in `\fIword\fR`, so the immutablereference must still be active at that point\. Rust disallows the mutablereference in `\fIclear\fR` and the immutable reference in `\fIword\fR` from existing at thesame time, and compilation fails\. Not only has Rust made our API easier to use,but it has also eliminated an entire class of errors at compile time!
.br

.br
\fBString Literals Are Slices\fR
.br
============================
.br

.P
Recall that we talked about string literals being stored inside the binary\. Nowthat we know about slices, we can properly understand string literals:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = "Hello, world!";

.EE

.RE
.P
The type of `\fIs\fR` here is `\fI&str\fR`: it‚Äôs a slice pointing to that specific point ofthe binary\. This is also why string literals are immutable; `\fI&str\fR` is animmutable reference\.
.br

.br
\fBString Slices as Parameters\fR
.br
=============================
.br

.P
Knowing that you can take slices of literals and `\fIString\fR` values leads us toone more improvement on `\fIfirst_word\fR`, and that‚Äôs its signature:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word(s: &String) \-> &str {

.EE

.RE
.P
A more experienced Rustacean would write the signature shown in Listing 4\-9instead because it allows us to use the same function on both `\fI&String\fR` valuesand `\fI&str\fR` values\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word(s: &str) \-> &str {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return &s[0\.\.i];
#         }
#     }
# 
#     &s[\.\.]
# }
# 
# fn main() {
#     let my_string = String::from("hello world");
# 
#     // `first_word` works on slices of `String`s, whether partial or whole
#     let word = first_word(&my_string[0\.\.6]);
#     let word = first_word(&my_string[\.\.]);
#     // `first_word` also works on references to `String`s, which are equivalent
#     // to whole slices of `String`s
#     let word = first_word(&my_string);
# 
#     let my_string_literal = "hello world";
# 
#     // `first_word` works on slices of string literals, whether partial or whole
#     let word = first_word(&my_string_literal[0\.\.6]);
#     let word = first_word(&my_string_literal[\.\.]);
# 
#     // Because string literals *are* string slices already,
#     // this works too, without the slice syntax!
#     let word = first_word(my_string_literal);
# }

.EE

.RE
Listing 4\-9: Improving the `\fIfirst_word\fR` function by usinga string slice for the type of the `\fIs\fR` parameter
.P
If we have a string slice, we can pass that directly\. If we have a `\fIString\fR`, wecan pass a slice of the `\fIString\fR` or a reference to the `\fIString\fR`\. Thisflexibility takes advantage of \fIderef coercions\fR, a feature we will cover inthe 
.UR ch15\-02\-deref\.html#implicit\-deref\-coercions\-with\-functions\-and\-methods
.UE
‚ÄúImplicit Deref Coercions with Functions andMethods‚Äù section of Chapter 15\. Defining afunction to take a string slice instead of a reference to a `\fIString\fR` makes ourAPI more general and useful without losing any functionality:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn first_word(s: &str) \-> &str {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return &s[0\.\.i];
#         }
#     }
# 
#     &s[\.\.]
# }
# 
fn main() {
    let my_string = String::from("hello world");

    // `first_word` works on slices of `String`s, whether partial or whole
    let word = first_word(&my_string[0\.\.6]);
    let word = first_word(&my_string[\.\.]);
    // `first_word` also works on references to `String`s, which are equivalent
    // to whole slices of `String`s
    let word = first_word(&my_string);

    let my_string_literal = "hello world";

    // `first_word` works on slices of string literals, whether partial or whole
    let word = first_word(&my_string_literal[0\.\.6]);
    let word = first_word(&my_string_literal[\.\.]);

    // Because string literals *are* string slices already,
    // this works too, without the slice syntax!
    let word = first_word(my_string_literal);
}

.EE

.RE

.br

.br
\fBOther Slices\fR
.br
==============
.br

.P
String slices, as you might imagine, are specific to strings\. But there‚Äôs amore general slice type, too\. Consider this array:
.RS
.IP \fBrust\fR 2

.br
.EX
let a = [1, 2, 3, 4, 5];

.EE

.RE
.P
Just as we might want to refer to a part of a string, we might want to referto part of an array\. We‚Äôd do so like this:
.RS
.IP \fBrust\fR 2

.br
.EX
let a = [1, 2, 3, 4, 5];

let slice = &a[1\.\.3];

assert_eq!(slice, &[2, 3]);

.EE

.RE
.P
This slice has the type `\fI&[i32]\fR`\. It works the same way as string slices do, bystoring a reference to the first element and a length\. You‚Äôll use this kind ofslice for all sorts of other collections\. We‚Äôll discuss these collections indetail when we talk about vectors in Chapter 8\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
The concepts of ownership, borrowing, and slices ensure memory safety in Rustprograms at compile time\. The Rust language gives you control over your memoryusage in the same way as other systems programming languages, but having theowner of data automatically clean up that data when the owner goes out of scopemeans you don‚Äôt have to write and debug extra code to get this control\.
.P
Ownership affects how lots of other parts of Rust work, so we‚Äôll talk aboutthese concepts further throughout the rest of the book\. Let‚Äôs move on toChapter 5 and look at grouping pieces of data together in a `\fIstruct\fR`\.
.SH "Using Structs to Structure Related Data"

.br

.br
\fBUsing Structs to Structure Related Data\fR
.br
=========================================
.br

.P
A \fIstruct\fR, or \fIstructure\fR, is a custom data type that lets you packagetogether and name multiple related values that make up a meaningful group\. Ifyou‚Äôre familiar with an object\-oriented language, a \fIstruct\fR is like anobject‚Äôs data attributes\. In this chapter, we‚Äôll compare and contrast tupleswith structs to build on what you already know and demonstrate when structs area better way to group data\.
.P
We‚Äôll demonstrate how to define and instantiate structs\. We‚Äôll discuss how todefine associated functions, especially the kind of associated functions called\fImethods\fR, to specify behavior associated with a struct type\. Structs and enums(discussed in Chapter 6) are the building blocks for creating new types in yourprogram‚Äôs domain to take full advantage of Rust‚Äôs compile time type checking\.
.SH "Defining and Instantiating Structs"

.br

.br
\fBDefining and Instantiating Structs\fR
.br
====================================
.br

.P
Structs are similar to tuples, discussed in 
.UR ch03\-02\-data\-types\.html#the\-tuple\-type
.UE
‚ÄúThe Tuple Type‚Äù section, in that both hold multiple related values\. Like tuples, thepieces of a struct can be different types\. Unlike with tuples, in a structyou‚Äôll name each piece of data so it‚Äôs clear what the values mean\. Adding thesenames means that structs are more flexible than tuples: you don‚Äôt have to relyon the order of the data to specify or access the values of an instance\.
.P
To define a struct, we enter the keyword `\fIstruct\fR` and name the entire struct\. Astruct‚Äôs name should describe the significance of the pieces of data beinggrouped together\. Then, inside curly brackets, we define the names and types ofthe pieces of data, which we call \fIfields\fR\. For example, Listing 5\-1 shows astruct that stores information about a user account\.
.RS
.IP \fBrust\fR 2

.br
.EX
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}
# 
# fn main() {}

.EE

.RE
Listing 5\-1: A `\fIUser\fR` struct definition
.P
To use a struct after we‚Äôve defined it, we create an \fIinstance\fR of that structby specifying concrete values for each of the fields\. We create an instance bystating the name of the struct and then add curly brackets containing `\fIkey: value\fR` pairs, where the keys are the names of the fields and the values are thedata we want to store in those fields\. We don‚Äôt have to specify the fields inthe same order in which we declared them in the struct\. In other words, thestruct definition is like a general template for the type, and instances fillin that template with particular data to create values of the type\. Forexample, we can declare a particular user as shown in Listing 5\-2\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
fn main() {
    let user1 = User {
        email: String::from("someone@example\.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };
}

.EE

.RE
Listing 5\-2: Creating an instance of the `\fIUser\fR`struct
.P
To get a specific value from a struct, we use dot notation\. For example, toaccess this user‚Äôs email address, we use `\fIuser1\.email\fR`\. If the instance ismutable, we can change a value by using the dot notation and assigning into aparticular field\. Listing 5\-3 shows how to change the value in the `\fIemail\fR`field of a mutable `\fIUser\fR` instance\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
fn main() {
    let mut user1 = User {
        email: String::from("someone@example\.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };

    user1\.email = String::from("anotheremail@example\.com");
}

.EE

.RE
Listing 5\-3: Changing the value in the `\fIemail\fR` field of a`\fIUser\fR` instance
.P
Note that the entire instance must be mutable; Rust doesn‚Äôt allow us to markonly certain fields as mutable\. As with any expression, we can construct a newinstance of the struct as the last expression in the function body toimplicitly return that new instance\.
.P
Listing 5\-4 shows a `\fIbuild_user\fR` function that returns a `\fIUser\fR` instance withthe given email and username\. The `\fIactive\fR` field gets the value of `\fItrue\fR`, andthe `\fIsign_in_count\fR` gets a value of `\fI1\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
fn build_user(email: String, username: String) \-> User {
    User {
        email: email,
        username: username,
        active: true,
        sign_in_count: 1,
    }
}
# 
# fn main() {
#     let user1 = build_user(
#         String::from("someone@example\.com"),
#         String::from("someusername123"),
#     );
# }

.EE

.RE
Listing 5\-4: A `\fIbuild_user\fR` function that takes an emailand username and returns a `\fIUser\fR` instance
.P
It makes sense to name the function parameters with the same name as the structfields, but having to repeat the `\fIemail\fR` and `\fIusername\fR` field names andvariables is a bit tedious\. If the struct had more fields, repeating each namewould get even more annoying\. Luckily, there‚Äôs a convenient shorthand!
.br

.br
\fBUsing the Field Init Shorthand\fR
.br
================================
.br

.P
Because the parameter names and the struct field names are exactly the same inListing 5\-4, we can use the \fIfield init shorthand\fR syntax to rewrite`\fIbuild_user\fR` so that it behaves exactly the same but doesn‚Äôt have therepetition of `\fIemail\fR` and `\fIusername\fR`, as shown in Listing 5\-5\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
fn build_user(email: String, username: String) \-> User {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}
# 
# fn main() {
#     let user1 = build_user(
#         String::from("someone@example\.com"),
#         String::from("someusername123"),
#     );
# }

.EE

.RE
Listing 5\-5: A `\fIbuild_user\fR` function that uses field initshorthand because the `\fIemail\fR` and `\fIusername\fR` parameters have the same name asstruct fields
.P
Here, we‚Äôre creating a new instance of the `\fIUser\fR` struct, which has a fieldnamed `\fIemail\fR`\. We want to set the `\fIemail\fR` field‚Äôs value to the value in the`\fIemail\fR` parameter of the `\fIbuild_user\fR` function\. Because the `\fIemail\fR` field andthe `\fIemail\fR` parameter have the same name, we only need to write `\fIemail\fR` ratherthan `\fIemail: email\fR`\.
.br

.br
\fBCreating Instances From Other Instances With Struct Update Syntax\fR
.br
===================================================================
.br

.P
It‚Äôs often useful to create a new instance of a struct that includes most ofthe values from another instance, but changes some\. You can do this using\fIstruct update syntax\fR\.
.P
First, in Listing 5\-6 we show how to create a new `\fIUser\fR` instance in `\fIuser2\fR`regularly, without the update syntax\. We set a new value for `\fIemail\fR` butotherwise use the same values from `\fIuser1\fR` that we created in Listing 5\-2\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
fn main() {
    // \-\-snip\-\-
# 
#     let user1 = User {
#         email: String::from("someone@example\.com"),
#         username: String::from("someusername123"),
#         active: true,
#         sign_in_count: 1,
#     };

    let user2 = User {
        active: user1\.active,
        username: user1\.username,
        email: String::from("another@example\.com"),
        sign_in_count: user1\.sign_in_count,
    };
}

.EE

.RE
Listing 5\-6: Creating a new `\fIUser\fR` instance using one ofthe values from `\fIuser1\fR`
.P
Using struct update syntax, we can achieve the same effect with less code, asshown in Listing 5\-7\. The syntax `\fI\.\.\fR` specifies that the remaining fields notexplicitly set should have the same value as the fields in the given instance\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
fn main() {
    // \-\-snip\-\-
# 
#     let user1 = User {
#         email: String::from("someone@example\.com"),
#         username: String::from("someusername123"),
#         active: true,
#         sign_in_count: 1,
#     };

    let user2 = User {
        email: String::from("another@example\.com"),
        \.\.user1
    };
}

.EE

.RE
Listing 5\-7: Using struct update syntax to set a new`\fIemail\fR` value for a `\fIUser\fR` instance but use the rest of the values from`\fIuser1\fR`
.P
The code in Listing 5\-7 also creates an instance in `\fIuser2\fR` that has adifferent value for `\fIemail\fR` but has the same values for the `\fIusername\fR`,`\fIactive\fR`, and `\fIsign_in_count\fR` fields from `\fIuser1\fR`\. The `\fI\.\.user1\fR` must come lastto specify that any remaining fields should get their values from thecorresponding fields in `\fIuser1\fR`, but we can choose to specify values for asmany fields as we want in any order, regardless of the order of the fields inthe struct‚Äôs definition\.
.P
Note that the struct update syntax uses `\fI=\fR` like an assignment; this isbecause it moves the data, just as we saw in the 
.UR ch04\-01\-what\-is\-ownership\.html#ways\-variables\-and\-data\-interact\-move
.UE
‚ÄúWays Variables and DataInteract: Move‚Äù section\. In this example, we can nolonger use `\fIuser1\fR` after creating `\fIuser2\fR` because the `\fIString\fR` in the`\fIusername\fR` field of `\fIuser1\fR` was moved into `\fIuser2\fR`\. If we had given `\fIuser2\fR` new`\fIString\fR` values for both `\fIemail\fR` and `\fIusername\fR`, and thus only used the`\fIactive\fR` and `\fIsign_in_count\fR` values from `\fIuser1\fR`, then `\fIuser1\fR` would still bevalid after creating `\fIuser2\fR`\. The types of `\fIactive\fR` and `\fIsign_in_count\fR` aretypes that implement the `\fICopy\fR` trait, so the behavior we discussed in the
.UR ch04\-01\-what\-is\-ownership\.html#stack\-only\-data\-copy
.UE
‚ÄúStack\-Only Data: Copy‚Äù section would apply\.
.br

.br
\fBUsing Tuple Structs without Named Fields to Create Different Types\fR
.br
====================================================================
.br

.P
Rust also supports structs that look similar to tuples, called \fItuple\fRstructs\. Tuple structs have the added meaning the struct name provides butdon‚Äôt have names associated with their fields; rather, they just have the typesof the fields\. Tuple structs are useful when you want to give the whole tuple aname and make the tuple a different type from other tuples, and when naming eachfield as in a regular struct would be verbose or redundant\.
.P
To define a tuple struct, start with the `\fIstruct\fR` keyword and the struct namefollowed by the types in the tuple\. For example, here we define and usetwo tuple structs named `\fIColor\fR` and `\fIPoint\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
struct Color(i32, i32, i32);
struct Point(i32, i32, i32);

fn main() {
    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
}

.EE

.RE
.P
Note that the `\fIblack\fR` and `\fIorigin\fR` values are different types, because they‚Äôreinstances of different tuple structs\. Each struct you define is its own type,even though the fields within the struct might have the same types\. Forexample, a function that takes a parameter of type `\fIColor\fR` cannot take a`\fIPoint\fR` as an argument, even though both types are made up of three `\fIi32\fR`values\. Otherwise, tuple struct instances are similar to tuples in that you candestructure them into their individual pieces, and you can use a `\fI\.\fR` followedby the index to access an individual value\.
.br

.br
\fBUnit\-Like Structs Without Any Fields\fR
.br
======================================
.br

.P
You can also define structs that don‚Äôt have any fields! These are called\fIunit\-like structs\fR because they behave similarly to `\fI()\fR`, the unit type thatwe mentioned in 
.UR ch03\-02\-data\-types\.html#the\-tuple\-type
.UE
‚ÄúThe Tuple Type‚Äù section\. Unit\-likestructs can be useful when you need to implement a trait on some type but don‚Äôthave any data that you want to store in the type itself\. We‚Äôll discuss traitsin Chapter 10\. Here‚Äôs an example of declaring and instantiating a unit structnamed `\fIAlwaysEqual\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
struct AlwaysEqual;

fn main() {
    let subject = AlwaysEqual;
}

.EE

.RE
.P
To define `\fIAlwaysEqual\fR`, we use the `\fIstruct\fR` keyword, the name we want, then asemicolon\. No need for curly brackets or parentheses! Then we can get aninstance of `\fIAlwaysEqual\fR` in the `\fIsubject\fR` variable in a similar way: using thename we defined, without any curly brackets or parentheses\. Imagine that laterwe‚Äôll implement behavior for this type such that every instance of`\fIAlwaysEqual\fR` is always equal to every instance of any other type, perhaps tohave a known result for testing purposes\. We wouldn‚Äôt need any data toimplement that behavior! You‚Äôll see in Chapter 10 how to define traits andimplement them on any type, including unit\-like structs\.
.br

.br
\fBOwnership of Struct Data\fR
.br
==========================
.br

.P
In the `\fIUser\fR` struct definition in Listing 5\-1, we used the owned `\fIString\fR`type rather than the `\fI&str\fR` string slice type\. This is a deliberate choicebecause we want each instance of this struct to own all of its data and forthat data to be valid for as long as the entire struct is valid\.
.P
It‚Äôs also possible for structs to store references to data owned by somethingelse, but to do so requires the use of \fIlifetimes\fR, a Rust feature that we‚Äôlldiscuss in Chapter 10\. Lifetimes ensure that the data referenced by a structis valid for as long as the struct is\. Let‚Äôs say you try to store a referencein a struct without specifying lifetimes, like the following; this won‚Äôt work:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
struct User {
    active: bool,
    username: &str,
    email: &str,
    sign_in_count: u64,
}

fn main() {
    let user1 = User {
        email: "someone@example\.com",
        username: "someusername123",
        active: true,
        sign_in_count: 1,
    };
}

.EE

.RE
.P
The compiler will complain that it needs lifetime specifiers:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling structs v0\.1\.0 (file:///projects/structs)
error[E0106]: missing lifetime specifier
 \-\-> src/main\.rs:3:15
  |
3 |     username: &str,
  |               ^ expected named lifetime parameter
  |
help: consider introducing a named lifetime parameter
  |
1 ~ struct User<'a> {
2 |     active: bool,
3 ~     username: &'a str,
  |

error[E0106]: missing lifetime specifier
 \-\-> src/main\.rs:4:12
  |
4 |     email: &str,
  |            ^ expected named lifetime parameter
  |
help: consider introducing a named lifetime parameter
  |
1 ~ struct User<'a> {
2 |     active: bool,
3 |     username: &str,
4 ~     email: &'a str,
  |

For more information about this error, try `rustc \-\-explain E0106`\.
error: could not compile `structs` due to 2 previous errors

.EE

.RE
.P
In Chapter 10, we‚Äôll discuss how to fix these errors so you can storereferences in structs, but for now, we‚Äôll fix errors like these using ownedtypes like `\fIString\fR` instead of references like `\fI&str\fR`\.
.SH "An Example Program Using Structs"

.br

.br
\fBAn Example Program Using Structs\fR
.br
==================================
.br

.P
To understand when we might want to use structs, let‚Äôs write a program thatcalculates the area of a rectangle\. We‚Äôll start by using single variables, andthen refactor the program until we‚Äôre using structs instead\.
.P
Let‚Äôs make a new binary project with Cargo called \fIrectangles\fR that will takethe width and height of a rectangle specified in pixels and calculate the areaof the rectangle\. Listing 5\-8 shows a short program with one way of doingexactly that in our project‚Äôs \fIsrc/main\.rs\fR\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let width1 = 30;
    let height1 = 50;

    println!(
        "The area of the rectangle is {} square pixels\.",
        area(width1, height1)
    );
}

fn area(width: u32, height: u32) \-> u32 {
    width * height
}

.EE

.RE
Listing 5\-8: Calculating the area of a rectanglespecified by separate width and height variables
.P
Now, run this program using `\fIcargo run\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.42s
     Running `target/debug/rectangles`
The area of the rectangle is 1500 square pixels\.

.EE

.RE
.P
This code succeeds in figuring out the area of the rectangle by calling the`\fIarea\fR` function with each dimension, but we can do more to make this code clearand readable\.
.P
The issue with this code is evident in the signature of `\fIarea\fR`:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
#     let width1 = 30;
#     let height1 = 50;
# 
#     println!(
#         "The area of the rectangle is {} square pixels\.",
#         area(width1, height1)
#     );
# }
# 
fn area(width: u32, height: u32) \-> u32 {
#     width * height
# }

.EE

.RE
.P
The `\fIarea\fR` function is supposed to calculate the area of one rectangle, but thefunction we wrote has two parameters, and it‚Äôs not clear anywhere in ourprogram that the parameters are related\. It would be more readable and moremanageable to group width and height together\. We‚Äôve already discussed one waywe might do that in 
.UR ch03\-02\-data\-types\.html#the\-tuple\-type
.UE
‚ÄúThe Tuple Type‚Äù sectionof Chapter 3: by using tuples\.
.br

.br
\fBRefactoring with Tuples\fR
.br
=========================
.br

.P
Listing 5\-9 shows another version of our program that uses tuples\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let rect1 = (30, 50);

    println!(
        "The area of the rectangle is {} square pixels\.",
        area(rect1)
    );
}

fn area(dimensions: (u32, u32)) \-> u32 {
    dimensions\.0 * dimensions\.1
}

.EE

.RE
Listing 5\-9: Specifying the width and height of therectangle with a tuple
.P
In one way, this program is better\. Tuples let us add a bit of structure, andwe‚Äôre now passing just one argument\. But in another way, this version is lessclear: tuples don‚Äôt name their elements, so we have to index into the parts ofthe tuple, making our calculation less obvious\.
.P
Mixing up the width and height wouldn‚Äôt matter for the area calculation, but ifwe want to draw the rectangle on the screen, it would matter! We would have tokeep in mind that `\fIwidth\fR` is the tuple index `\fI0\fR` and `\fIheight\fR` is the tupleindex `\fI1\fR`\. This would be even harder for someone else to figure out and keep inmind if they were to use our code\. Because we haven‚Äôt conveyed the meaning ofour data in our code, it‚Äôs now easier to introduce errors\.
.br

.br
\fBRefactoring with Structs: Adding More Meaning\fR
.br
===============================================
.br

.P
We use structs to add meaning by labeling the data\. We can transform the tuplewe‚Äôre using into a struct with a name for the whole as well as names for theparts, as shown in Listing 5\-10\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels\.",
        area(&rect1)
    );
}

fn area(rectangle: &Rectangle) \-> u32 {
    rectangle\.width * rectangle\.height
}

.EE

.RE
Listing 5\-10: Defining a `\fIRectangle\fR` struct
.P
Here we‚Äôve defined a struct and named it `\fIRectangle\fR`\. Inside the curlybrackets, we defined the fields as `\fIwidth\fR` and `\fIheight\fR`, both of which havetype `\fIu32\fR`\. Then in `\fImain\fR`, we created a particular instance of `\fIRectangle\fR`that has a width of 30 and a height of 50\.
.P
Our `\fIarea\fR` function is now defined with one parameter, which we‚Äôve named`\fIrectangle\fR`, whose type is an immutable borrow of a struct `\fIRectangle\fR`instance\. As mentioned in Chapter 4, we want to borrow the struct rather thantake ownership of it\. This way, `\fImain\fR` retains its ownership and can continueusing `\fIrect1\fR`, which is the reason we use the `\fI&\fR` in the function signature andwhere we call the function\.
.P
The `\fIarea\fR` function accesses the `\fIwidth\fR` and `\fIheight\fR` fields of the `\fIRectangle\fR`instance (note that accessing fields of a borrowed struct instance does notmove the field values, which is why you often see borrows of structs)\. Ourfunction signature for `\fIarea\fR` now says exactly what we mean: calculate the areaof `\fIRectangle\fR`, using its `\fIwidth\fR` and `\fIheight\fR` fields\. This conveys that thewidth and height are related to each other, and it gives descriptive names tothe values rather than using the tuple index values of `\fI0\fR` and `\fI1\fR`\. This is awin for clarity\.
.br

.br
\fBAdding Useful Functionality with Derived Traits\fR
.br
=================================================
.br

.P
It‚Äôd be useful to be able to print an instance of `\fIRectangle\fR` while we‚Äôredebugging our program and see the values for all its fields\. Listing 5\-11 triesusing the 
.UR \.\./std/macro\.println\.html
.UE
`\fIprintln!\fR` macro as we have used inprevious chapters\. This won‚Äôt work, however\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!("rect1 is {}", rect1);
}

.EE

.RE
Listing 5\-11: Attempting to print a `\fIRectangle\fR`instance
.P
When we compile this code, we get an error with this core message:
.RS
.IP \fBtext\fR 2

.br
.EX
error[E0277]: `Rectangle` doesn't implement `std::fmt::Display`

.EE

.RE
.P
The `\fIprintln!\fR` macro can do many kinds of formatting, and by default, the curlybrackets tell `\fIprintln!\fR` to use formatting known as `\fIDisplay\fR`: output intendedfor direct end user consumption\. The primitive types we‚Äôve seen so farimplement `\fIDisplay\fR` by default, because there‚Äôs only one way you‚Äôd want to showa `\fI1\fR` or any other primitive type to a user\. But with structs, the way`\fIprintln!\fR` should format the output is less clear because there are moredisplay possibilities: Do you want commas or not? Do you want to print thecurly brackets? Should all the fields be shown? Due to this ambiguity, Rustdoesn‚Äôt try to guess what we want, and structs don‚Äôt have a providedimplementation of `\fIDisplay\fR` to use with `\fIprintln!\fR` and the `\fI{}\fR` placeholder\.
.P
If we continue reading the errors, we‚Äôll find this helpful note:
.RS
.IP \fBtext\fR 2

.br
.EX
   = help: the trait `std::fmt::Display` is not implemented for `Rectangle`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty\-print) instead

.EE

.RE
.P
Let‚Äôs try it! The `\fIprintln!\fR` macro call will now look like `\fIprintln!("rect1 is {:?}", rect1);\fR`\. Putting the specifier `\fI:?\fR` inside the curly brackets tells`\fIprintln!\fR` we want to use an output format called `\fIDebug\fR`\. The `\fIDebug\fR` traitenables us to print our struct in a way that is useful for developers so we cansee its value while we‚Äôre debugging our code\.
.P
Compile the code with this change\. Drat! We still get an error:
.RS
.IP \fBtext\fR 2

.br
.EX
error[E0277]: `Rectangle` doesn't implement `Debug`

.EE

.RE
.P
But again, the compiler gives us a helpful note:
.RS
.IP \fBtext\fR 2

.br
.EX
   = help: the trait `Debug` is not implemented for `Rectangle`
   = note: add `#[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle`

.EE

.RE
.P
Rust \fIdoes\fR include functionality to print out debugging information, but wehave to explicitly opt in to make that functionality available for our struct\.To do that, we add the outer attribute `\fI#[derive(Debug)]\fR` just before thestruct definition, as shown in Listing 5\-12\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!("rect1 is {:?}", rect1);
}

.EE

.RE
Listing 5\-12: Adding the attribute to derive the `\fIDebug\fR`trait and printing the `\fIRectangle\fR` instance using debug formatting
.P
Now when we run the program, we won‚Äôt get any errors, and we‚Äôll see thefollowing output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.48s
     Running `target/debug/rectangles`
rect1 is Rectangle { width: 30, height: 50 }

.EE

.RE
.P
Nice! It‚Äôs not the prettiest output, but it shows the values of all the fieldsfor this instance, which would definitely help during debugging\. When we havelarger structs, it‚Äôs useful to have output that‚Äôs a bit easier to read; inthose cases, we can use `\fI{:#?}\fR` instead of `\fI{:?}\fR` in the `\fIprintln!\fR` string\.In this example, using the `\fI{:#?}\fR` style will output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.48s
     Running `target/debug/rectangles`
rect1 is Rectangle {
    width: 30,
    height: 50,
}

.EE

.RE
.P
Another way to print out a value using the `\fIDebug\fR` format is to use the 
.UR \.\./std/macro\.dbg\.html
.UE
`\fIdbg!\fR`macro, which takes ownership of an expression (as opposedto `\fIprintln!\fR` that takes a reference), prints the file and line number of wherethat `\fIdbg!\fR` macro call occurs in your code along with the resulting value ofthat expression, and returns ownership of the value\.
.P
Note: Calling the `\fIdbg!\fR` macro prints to the standard error console stream(`\fIstderr\fR`), as opposed to `\fIprintln!\fR` which prints to the standard outputconsole stream (`\fIstdout\fR`)\. We‚Äôll talk more about `\fIstderr\fR` and `\fIstdout\fR` in the
.UR ch12\-06\-writing\-to\-stderr\-instead\-of\-stdout\.html
.UE
‚ÄúWriting Error Messages to Standard Error Instead of StandardOutput‚Äù section in Chapter 12\.
.P
Here‚Äôs an example where we‚Äôre interested in the value that gets assigned to the`\fIwidth\fR` field, as well as the value of the whole struct in `\fIrect1\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30 * scale),
        height: 50,
    };

    dbg!(&rect1);
}

.EE

.RE
.P
We can put `\fIdbg!\fR` around the expression `\fI30 * scale\fR` and, because `\fIdbg!\fR`returns ownership of the expression‚Äôs value, the `\fIwidth\fR` field will get thesame value as if we didn‚Äôt have the `\fIdbg!\fR` call there\. We don‚Äôt want `\fIdbg!\fR` totake ownership of `\fIrect1\fR`, so we use a reference to `\fIrect1\fR` in the next call\.Here‚Äôs what the output of this example looks like:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.61s
     Running `target/debug/rectangles`
[src/main\.rs:10] 30 * scale = 60
[src/main\.rs:14] &rect1 = Rectangle {
    width: 60,
    height: 50,
}

.EE

.RE
.P
We can see the first bit of output came from \fIsrc/main\.rs\fR line 10, where we‚Äôredebugging the expression `\fI30 * scale\fR`, and its resulting value is 60 (the`\fIDebug\fR` formatting implemented for integers is to print only their value)\. The`\fIdbg!\fR` call on line 14 of \fIsrc/main\.rs\fR outputs the value of `\fI&rect1\fR`, which isthe `\fIRectangle\fR` struct\. This output uses the pretty `\fIDebug\fR` formatting of the`\fIRectangle\fR` type\. The `\fIdbg!\fR` macro can be really helpful when you‚Äôre trying tofigure out what your code is doing!
.P
In addition to the `\fIDebug\fR` trait, Rust has provided a number of traits for usto use with the `\fIderive\fR` attribute that can add useful behavior to our customtypes\. Those traits and their behaviors are listed in 
.UR appendix\-03\-derivable\-traits\.md
.UE
Appendix C\. We‚Äôll cover how to implement these traits with custom behavior aswell as how to create your own traits in Chapter 10\. There are also manyattributes other than `\fIderive\fR`; for more information, see 
.UR \.\./reference/attributes\.html
.UE
the ‚ÄúAttributes‚Äùsection of the Rust Reference\.
.P
Our `\fIarea\fR` function is very specific: it only computes the area of rectangles\.It would be helpful to tie this behavior more closely to our `\fIRectangle\fR`struct, because it won‚Äôt work with any other type\. Let‚Äôs look at how we cancontinue to refactor this code by turning the `\fIarea\fR` function into an `\fIarea\fR`\fImethod\fR defined on our `\fIRectangle\fR` type\.
.SH "Method Syntax"

.br

.br
\fBMethod Syntax\fR
.br
===============
.br
\fIMethods\fR are similar to functions: we declare them with the `\fIfn\fR` keyword and aname, they can have parameters and a return value, and they contain some codethat‚Äôs run when the method is called from somewhere else\. Unlike functions,methods are defined within the context of a struct (or an enum or a traitobject, which we cover in Chapters 6 and 17, respectively), and their firstparameter is always `\fIself\fR`, which represents the instance of the struct themethod is being called on\.
.br

.br
\fBDefining Methods\fR
.br
==================
.br

.P
Let‚Äôs change the `\fIarea\fR` function that has a `\fIRectangle\fR` instance as a parameterand instead make an `\fIarea\fR` method defined on the `\fIRectangle\fR` struct, as shownin Listing 5\-13\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) \-> u32 {
        self\.width * self\.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels\.",
        rect1\.area()
    );
}

.EE

.RE
Listing 5\-13: Defining an `\fIarea\fR` method on the`\fIRectangle\fR` struct
.P
To define the function within the context of `\fIRectangle\fR`, we start an `\fIimpl\fR`(implementation) block for `\fIRectangle\fR`\. Everything within this `\fIimpl\fR` blockwill be associated with the `\fIRectangle\fR` type\. Then we move the `\fIarea\fR` functionwithin the `\fIimpl\fR` curly brackets and change the first (and in this case, only)parameter to be `\fIself\fR` in the signature and everywhere within the body\. In`\fImain\fR`, where we called the `\fIarea\fR` function and passed `\fIrect1\fR` as an argument,we can instead use \fImethod syntax\fR to call the `\fIarea\fR` method on our `\fIRectangle\fR`instance\. The method syntax goes after an instance: we add a dot followed bythe method name, parentheses, and any arguments\.
.P
In the signature for `\fIarea\fR`, we use `\fI&self\fR` instead of `\fIrectangle: &Rectangle\fR`\.The `\fI&self\fR` is actually short for `\fIself: &Self\fR`\. Within an `\fIimpl\fR` block, thetype `\fISelf\fR` is an alias for the type that the `\fIimpl\fR` block is for\. Methods musthave a parameter named `\fIself\fR` of type `\fISelf\fR` for their first parameter, so Rustlets you abbreviate this with only the name `\fIself\fR` in the first parameter spot\.Note that we still need to use the `\fI&\fR` in front of the `\fIself\fR` shorthand toindicate this method borrows the `\fISelf\fR` instance, just as we did in `\fIrectangle: &Rectangle\fR`\. Methods can take ownership of `\fIself\fR`, borrow `\fIself\fR` immutably aswe‚Äôve done here, or borrow `\fIself\fR` mutably, just as they can any other parameter\.
.P
We‚Äôve chosen `\fI&self\fR` here for the same reason we used `\fI&Rectangle\fR` in thefunction version: we don‚Äôt want to take ownership, and we just want to read thedata in the struct, not write to it\. If we wanted to change the instance thatwe‚Äôve called the method on as part of what the method does, we‚Äôd use `\fI&mut self\fR` as the first parameter\. Having a method that takes ownership of theinstance by using just `\fIself\fR` as the first parameter is rare; this technique isusually used when the method transforms `\fIself\fR` into something else and you wantto prevent the caller from using the original instance after the transformation\.
.P
The main reason for using methods instead of functions, in addition to providingmethod syntax and not having to repeat the type of `\fIself\fR` in every method‚Äôssignature, is for organization\. We‚Äôve put all the things we can do with aninstance of a type in one `\fIimpl\fR` block rather than making future users of ourcode search for capabilities of `\fIRectangle\fR` in various places in the library weprovide\.
.P
Note that we can choose to give a method the same name as one of the struct‚Äôsfields\. For example, we can define a method on `\fIRectangle\fR` also named `\fIwidth\fR`:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
impl Rectangle {
    fn width(&self) \-> bool {
        self\.width > 0
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    if rect1\.width() {
        println!("The rectangle has a nonzero width; it is {}", rect1\.width);
    }
}

.EE

.RE
.P
Here, we‚Äôre choosing to make the `\fIwidth\fR` method return `\fItrue\fR` if the value inthe instance‚Äôs `\fIwidth\fR` field is greater than 0, and `\fIfalse\fR` if the value is 0:we can use a field within a method of the same name for any purpose\. In `\fImain\fR`,when we follow `\fIrect1\.width\fR` with parentheses, Rust knows we mean the method`\fIwidth\fR`\. When we don‚Äôt use parentheses, Rust knows we mean the field `\fIwidth\fR`\.
.P
Often, but not always, when we give methods with the same name as a field wewant it to only return the value in the field and do nothing else\. Methods likethis are called \fIgetters\fR, and Rust does not implement them automatically forstruct fields as some other languages do\. Getters are useful because you canmake the field private but the method public and thus enable read\-only accessto that field as part of the type‚Äôs public API\. We will be discussing whatpublic and private are and how to designate a field or method as public orprivate in Chapter 7\.
.br

.br
\fBWhere‚Äôs the \fR
.br
================
.br
`\fI\->\fR` Operator?
.P
In C and C++, two different operators are used for calling methods: you use`\fI\.\fR` if you‚Äôre calling a method on the object directly and `\fI\->\fR` if you‚Äôrecalling the method on a pointer to the object and need to dereference thepointer first\. In other words, if `\fIobject\fR` is a pointer,`\fIobject\->something()\fR` is similar to `\fI(*object)\.something()\fR`\.
.P
Rust doesn‚Äôt have an equivalent to the `\fI\->\fR` operator; instead, Rust has afeature called \fIautomatic referencing and dereferencing\fR\. Calling methods isone of the few places in Rust that has this behavior\.
.P
Here‚Äôs how it works: when you call a method with `\fIobject\.something()\fR`, Rustautomatically adds in `\fI&\fR`, `\fI&mut\fR`, or `\fI*\fR` so `\fIobject\fR` matches the signature ofthe method\. In other words, the following are the same:
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug,Copy,Clone)]
# struct Point {
#     x: f64,
#     y: f64,
# }
#
# impl Point {
#    fn distance(&self, other: &Point) \-> f64 {
#        let x_squared = f64::powi(other\.x \- self\.x, 2);
#        let y_squared = f64::powi(other\.y \- self\.y, 2);
#
#        f64::sqrt(x_squared + y_squared)
#    }
# }
# let p1 = Point { x: 0\.0, y: 0\.0 };
# let p2 = Point { x: 5\.0, y: 6\.5 };
p1\.distance(&p2);
(&p1)\.distance(&p2);

.EE

.RE
.P
The first one looks much cleaner\. This automatic referencing behavior worksbecause methods have a clear receiver‚Äîthe type of `\fIself\fR`\. Given the receiverand name of a method, Rust can figure out definitively whether the method isreading (`\fI&self\fR`), mutating (`\fI&mut self\fR`), or consuming (`\fIself\fR`)\. The factthat Rust makes borrowing implicit for method receivers is a big part ofmaking ownership ergonomic in practice\.
.br

.br
\fBMethods with More Parameters\fR
.br
==============================
.br

.P
Let‚Äôs practice using methods by implementing a second method on the `\fIRectangle\fR`struct\. This time, we want an instance of `\fIRectangle\fR` to take another instanceof `\fIRectangle\fR` and return `\fItrue\fR` if the second `\fIRectangle\fR` can fit completelywithin `\fIself\fR` (the first `\fIRectangle\fR`); otherwise it should return `\fIfalse\fR`\. Thatis, once we‚Äôve defined the `\fIcan_hold\fR` method, we want to be able to write theprogram shown in Listing 5\-14\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };
    let rect2 = Rectangle {
        width: 10,
        height: 40,
    };
    let rect3 = Rectangle {
        width: 60,
        height: 45,
    };

    println!("Can rect1 hold rect2? {}", rect1\.can_hold(&rect2));
    println!("Can rect1 hold rect3? {}", rect1\.can_hold(&rect3));
}

.EE

.RE
Listing 5\-14: Using the as\-yet\-unwritten `\fIcan_hold\fR`method
.P
And the expected output would look like the following, because both dimensionsof `\fIrect2\fR` are smaller than the dimensions of `\fIrect1\fR` but `\fIrect3\fR` is wider than`\fIrect1\fR`:
.RS
.IP \fBtext\fR 2

.br
.EX
Can rect1 hold rect2? true
Can rect1 hold rect3? false

.EE

.RE
.P
We know we want to define a method, so it will be within the `\fIimpl Rectangle\fR`block\. The method name will be `\fIcan_hold\fR`, and it will take an immutable borrowof another `\fIRectangle\fR` as a parameter\. We can tell what the type of theparameter will be by looking at the code that calls the method:`\fIrect1\.can_hold(&rect2)\fR` passes in `\fI&rect2\fR`, which is an immutable borrow to`\fIrect2\fR`, an instance of `\fIRectangle\fR`\. This makes sense because we only need toread `\fIrect2\fR` (rather than write, which would mean we‚Äôd need a mutable borrow),and we want `\fImain\fR` to retain ownership of `\fIrect2\fR` so we can use it again aftercalling the `\fIcan_hold\fR` method\. The return value of `\fIcan_hold\fR` will be aBoolean, and the implementation will check whether the width and height of`\fIself\fR` are both greater than the width and height of the other `\fIRectangle\fR`,respectively\. Let‚Äôs add the new `\fIcan_hold\fR` method to the `\fIimpl\fR` block fromListing 5\-13, shown in Listing 5\-15\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
impl Rectangle {
    fn area(&self) \-> u32 {
        self\.width * self\.height
    }

    fn can_hold(&self, other: &Rectangle) \-> bool {
        self\.width > other\.width && self\.height > other\.height
    }
}
# 
# fn main() {
#     let rect1 = Rectangle {
#         width: 30,
#         height: 50,
#     };
#     let rect2 = Rectangle {
#         width: 10,
#         height: 40,
#     };
#     let rect3 = Rectangle {
#         width: 60,
#         height: 45,
#     };
# 
#     println!("Can rect1 hold rect2? {}", rect1\.can_hold(&rect2));
#     println!("Can rect1 hold rect3? {}", rect1\.can_hold(&rect3));
# }

.EE

.RE
Listing 5\-15: Implementing the `\fIcan_hold\fR` method on`\fIRectangle\fR` that takes another `\fIRectangle\fR` instance as a parameter
.P
When we run this code with the `\fImain\fR` function in Listing 5\-14, we‚Äôll get ourdesired output\. Methods can take multiple parameters that we add to thesignature after the `\fIself\fR` parameter, and those parameters work just likeparameters in functions\.
.br

.br
\fBAssociated Functions\fR
.br
======================
.br

.P
All functions defined within an `\fIimpl\fR` block are called \fIassociated functions\fRbecause they‚Äôre associated with the type named after the `\fIimpl\fR`\. We can defineassociated functions that don‚Äôt have `\fIself\fR` as their first parameter (and thusare not methods) because they don‚Äôt need an instance of the type to work with\.We‚Äôve already used one function like this: the `\fIString::from\fR` function that‚Äôsdefined on the `\fIString\fR` type\.
.P
Associated functions that aren‚Äôt methods are often used for constructors thatwill return a new instance of the struct\. These are often called `\fInew\fR`, but`\fInew\fR` isn‚Äôt a special name and isn‚Äôt built into the language\. For example, wecould choose to provide an associated function named `\fIsquare\fR` that would haveone dimension parameter and use that as both width and height, thus making iteasier to create a square `\fIRectangle\fR` rather than having to specify the samevalue twice:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
impl Rectangle {
    fn square(size: u32) \-> Self {
        Self {
            width: size,
            height: size,
        }
    }
}
# 
# fn main() {
#     let sq = Rectangle::square(3);
# }

.EE

.RE
.P
The `\fISelf\fR` keywords in the return type and in the body of the function arealiases for the type that appears after the `\fIimpl\fR` keyword, which in this caseis `\fIRectangle\fR`\.
.P
To call this associated function, we use the `\fI::\fR` syntax with the struct name;`\fIlet sq = Rectangle::square(3);\fR` is an example\. This function is namespaced bythe struct: the `\fI::\fR` syntax is used for both associated functions andnamespaces created by modules\. We‚Äôll discuss modules in Chapter 7\.
.br

.br
\fBMultiple \fR
.br
===========
.br
`\fIimpl\fR` Blocks
.P
Each struct is allowed to have multiple `\fIimpl\fR` blocks\. For example, Listing5\-15 is equivalent to the code shown in Listing 5\-16, which has each methodin its own `\fIimpl\fR` block\.
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
impl Rectangle {
    fn area(&self) \-> u32 {
        self\.width * self\.height
    }
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) \-> bool {
        self\.width > other\.width && self\.height > other\.height
    }
}
# 
# fn main() {
#     let rect1 = Rectangle {
#         width: 30,
#         height: 50,
#     };
#     let rect2 = Rectangle {
#         width: 10,
#         height: 40,
#     };
#     let rect3 = Rectangle {
#         width: 60,
#         height: 45,
#     };
# 
#     println!("Can rect1 hold rect2? {}", rect1\.can_hold(&rect2));
#     println!("Can rect1 hold rect3? {}", rect1\.can_hold(&rect3));
# }

.EE

.RE
Listing 5\-16: Rewriting Listing 5\-15 using multiple `\fIimpl\fR`blocks
.P
There‚Äôs no reason to separate these methods into multiple `\fIimpl\fR` blocks here,but this is valid syntax\. We‚Äôll see a case in which multiple `\fIimpl\fR` blocks areuseful in Chapter 10, where we discuss generic types and traits\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Structs let you create custom types that are meaningful for your domain\. Byusing structs, you can keep associated pieces of data connected to each otherand name each piece to make your code clear\. In `\fIimpl\fR` blocks, you can definefunctions that are associated with your type, and methods are a kind ofassociated function that let you specify the behavior that instances of yourstructs have\.
.P
But structs aren‚Äôt the only way you can create custom types: let‚Äôs turn toRust‚Äôs enum feature to add another tool to your toolbox\.
.SH "Enums and Pattern Matching"

.br

.br
\fBEnums and Pattern Matching\fR
.br
============================
.br

.P
In this chapter we‚Äôll look at \fIenumerations\fR, also referred to as \fIenums\fR\.Enums allow you to define a type by enumerating its possible \fIvariants\fR\. First,we‚Äôll define and use an enum to show how an enum can encode meaning along withdata\. Next, we‚Äôll explore a particularly useful enum, called `\fIOption\fR`, whichexpresses that a value can be either something or nothing\. Then we‚Äôll look athow pattern matching in the `\fImatch\fR` expression makes it easy to run differentcode for different values of an enum\. Finally, we‚Äôll cover how the `\fIif let\fR`construct is another convenient and concise idiom available to handle enums inyour code\.
.SH "Defining an Enum"

.br

.br
\fBDefining an Enum\fR
.br
==================
.br

.P
Where structs give you a way of grouping together related fields and data, likea `\fIRectangle\fR` with its `\fIwidth\fR` and `\fIheight\fR`, enums give you a way of saying avalue is one of a possible set of values\. For example, we may want to say that`\fIRectangle\fR` is one of a set of possible shapes that also includes `\fICircle\fR` and`\fITriangle\fR`\. To do this, Rust allows us to encode these possibilities as an enum\.
.P
Let‚Äôs look at a situation we might want to express in code and see why enumsare useful and more appropriate than structs in this case\. Say we need to workwith IP addresses\. Currently, two major standards are used for IP addresses:version four and version six\. Because these are the only possibilities for anIP address that our program will come across, we can \fIenumerate\fR all possiblevariants, which is where enumeration gets its name\.
.P
Any IP address can be either a version four or a version six address, but notboth at the same time\. That property of IP addresses makes the enum datastructure appropriate, because an enum value can only be one of its variants\.Both version four and version six addresses are still fundamentally IPaddresses, so they should be treated as the same type when the code is handlingsituations that apply to any kind of IP address\.
.P
We can express this concept in code by defining an `\fIIpAddrKind\fR` enumeration andlisting the possible kinds an IP address can be, `\fIV4\fR` and `\fIV6\fR`\. These are thevariants of the enum:
.RS
.IP \fBrust\fR 2

.br
.EX
enum IpAddrKind {
    V4,
    V6,
}
# 
# fn main() {
#     let four = IpAddrKind::V4;
#     let six = IpAddrKind::V6;
# 
#     route(IpAddrKind::V4);
#     route(IpAddrKind::V6);
# }
# 
# fn route(ip_kind: IpAddrKind) {}

.EE

.RE
`\fIIpAddrKind\fR` is now a custom data type that we can use elsewhere in our code\.
.br

.br
\fBEnum Values\fR
.br
=============
.br

.P
We can create instances of each of the two variants of `\fIIpAddrKind\fR` like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# enum IpAddrKind {
#     V4,
#     V6,
# }
# 
# fn main() {
    let four = IpAddrKind::V4;
    let six = IpAddrKind::V6;
# 
#     route(IpAddrKind::V4);
#     route(IpAddrKind::V6);
# }
# 
# fn route(ip_kind: IpAddrKind) {}

.EE

.RE
.P
Note that the variants of the enum are namespaced under its identifier, and weuse a double colon to separate the two\. This is useful because now both values`\fIIpAddrKind::V4\fR` and `\fIIpAddrKind::V6\fR` are of the same type: `\fIIpAddrKind\fR`\. Wecan then, for instance, define a function that takes any `\fIIpAddrKind\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# enum IpAddrKind {
#     V4,
#     V6,
# }
# 
# fn main() {
#     let four = IpAddrKind::V4;
#     let six = IpAddrKind::V6;
# 
#     route(IpAddrKind::V4);
#     route(IpAddrKind::V6);
# }
# 
fn route(ip_kind: IpAddrKind) {}

.EE

.RE
.P
And we can call this function with either variant:
.RS
.IP \fBrust\fR 2

.br
.EX
# enum IpAddrKind {
#     V4,
#     V6,
# }
# 
# fn main() {
#     let four = IpAddrKind::V4;
#     let six = IpAddrKind::V6;
# 
    route(IpAddrKind::V4);
    route(IpAddrKind::V6);
# }
# 
# fn route(ip_kind: IpAddrKind) {}

.EE

.RE
.P
Using enums has even more advantages\. Thinking more about our IP address type,at the moment we don‚Äôt have a way to store the actual IP address \fIdata\fR; weonly know what \fIkind\fR it is\. Given that you just learned about structs inChapter 5, you might be tempted to tackle this problem with structs as shown inListing 6\-1\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum IpAddrKind {
        V4,
        V6,
    }

    struct IpAddr {
        kind: IpAddrKind,
        address: String,
    }

    let home = IpAddr {
        kind: IpAddrKind::V4,
        address: String::from("127\.0\.0\.1"),
    };

    let loopback = IpAddr {
        kind: IpAddrKind::V6,
        address: String::from("::1"),
    };
# }

.EE

.RE
Listing 6\-1: Storing the data and `\fIIpAddrKind\fR` variant ofan IP address using a `\fIstruct\fR`
.P
Here, we‚Äôve defined a struct `\fIIpAddr\fR` that has two fields: a `\fIkind\fR` field thatis of type `\fIIpAddrKind\fR` (the enum we defined previously) and an `\fIaddress\fR` fieldof type `\fIString\fR`\. We have two instances of this struct\. The first is `\fIhome\fR`,and it has the value `\fIIpAddrKind::V4\fR` as its `\fIkind\fR` with associated addressdata of `\fI127\.0\.0\.1\fR`\. The second instance is `\fIloopback\fR`\. It has the othervariant of `\fIIpAddrKind\fR` as its `\fIkind\fR` value, `\fIV6\fR`, and has address `\fI::1\fR`associated with it\. We‚Äôve used a struct to bundle the `\fIkind\fR` and `\fIaddress\fR`values together, so now the variant is associated with the value\.
.P
However, representing the same concept using just an enum is more concise:rather than an enum inside a struct, we can put data directly into each enumvariant\. This new definition of the `\fIIpAddr\fR` enum says that both `\fIV4\fR` and `\fIV6\fR`variants will have associated `\fIString\fR` values:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum IpAddr {
        V4(String),
        V6(String),
    }

    let home = IpAddr::V4(String::from("127\.0\.0\.1"));

    let loopback = IpAddr::V6(String::from("::1"));
# }

.EE

.RE
.P
We attach data to each variant of the enum directly, so there is no need for anextra struct\. Here it‚Äôs also easier to see another detail of how enums work:the name of each enum variant that we define also becomes a function thatconstructs an instance of the enum\. That is, `\fIIpAddr::V4()\fR` is a function callthat takes a `\fIString\fR` argument and returns an instance of the `\fIIpAddr\fR` type\. Weautomatically get this constructor function defined as a result of defining theenum\.
.P
There‚Äôs another advantage to using an enum rather than a struct: each variantcan have different types and amounts of associated data\. Version four type IPaddresses will always have four numeric components that will have valuesbetween 0 and 255\. If we wanted to store `\fIV4\fR` addresses as four `\fIu8\fR` values butstill express `\fIV6\fR` addresses as one `\fIString\fR` value, we wouldn‚Äôt be able to witha struct\. Enums handle this case with ease:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum IpAddr {
        V4(u8, u8, u8, u8),
        V6(String),
    }

    let home = IpAddr::V4(127, 0, 0, 1);

    let loopback = IpAddr::V6(String::from("::1"));
# }

.EE

.RE
.P
We‚Äôve shown several different ways to define data structures to store versionfour and version six IP addresses\. However, as it turns out, wanting to storeIP addresses and encode which kind they are is so common that 
.UR \.\./std/net/enum\.IpAddr\.html
.UE
the standardlibrary has a definition we can use! Let‚Äôs look at howthe standard library defines `\fIIpAddr\fR`: it has the exact enum and variants thatwe‚Äôve defined and used, but it embeds the address data inside the variants inthe form of two different structs, which are defined differently for eachvariant:
.RS
.IP \fBrust\fR 2

.br
.EX
struct Ipv4Addr {
    // \-\-snip\-\-
}

struct Ipv6Addr {
    // \-\-snip\-\-
}

enum IpAddr {
    V4(Ipv4Addr),
    V6(Ipv6Addr),
}

.EE

.RE
.P
This code illustrates that you can put any kind of data inside an enum variant:strings, numeric types, or structs, for example\. You can even include anotherenum! Also, standard library types are often not much more complicated thanwhat you might come up with\.
.P
Note that even though the standard library contains a definition for `\fIIpAddr\fR`,we can still create and use our own definition without conflict because wehaven‚Äôt brought the standard library‚Äôs definition into our scope\. We‚Äôll talkmore about bringing types into scope in Chapter 7\.
.P
Let‚Äôs look at another example of an enum in Listing 6\-2: this one has a widevariety of types embedded in its variants\.
.RS
.IP \fBrust\fR 2

.br
.EX
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}
# 
# fn main() {}

.EE

.RE
Listing 6\-2: A `\fIMessage\fR` enum whose variants each storedifferent amounts and types of values
.P
This enum has four variants with different types:`\fIQuit\fR` has no data associated with it at all\.`\fIMove\fR` has named fields like a struct does\.`\fIWrite\fR` includes a single `\fIString\fR`\.`\fIChangeColor\fR` includes three `\fIi32\fR` values\.
.P
Defining an enum with variants such as the ones in Listing 6\-2 is similar todefining different kinds of struct definitions, except the enum doesn‚Äôt use the`\fIstruct\fR` keyword and all the variants are grouped together under the `\fIMessage\fR`type\. The following structs could hold the same data that the preceding enumvariants hold:
.RS
.IP \fBrust\fR 2

.br
.EX
struct QuitMessage; // unit struct
struct MoveMessage {
    x: i32,
    y: i32,
}
struct WriteMessage(String); // tuple struct
struct ChangeColorMessage(i32, i32, i32); // tuple struct
# 
# fn main() {}

.EE

.RE
.P
But if we used the different structs, which each have their own type, wecouldn‚Äôt as easily define a function to take any of these kinds of messages aswe could with the `\fIMessage\fR` enum defined in Listing 6\-2, which is a single type\.
.P
There is one more similarity between enums and structs: just as we‚Äôre able todefine methods on structs using `\fIimpl\fR`, we‚Äôre also able to define methods onenums\. Here‚Äôs a method named `\fIcall\fR` that we could define on our `\fIMessage\fR` enum:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     enum Message {
#         Quit,
#         Move { x: i32, y: i32 },
#         Write(String),
#         ChangeColor(i32, i32, i32),
#     }
# 
    impl Message {
        fn call(&self) {
            // method body would be defined here
        }
    }

    let m = Message::Write(String::from("hello"));
    m\.call();
# }

.EE

.RE
.P
The body of the method would use `\fIself\fR` to get the value that we called themethod on\. In this example, we‚Äôve created a variable `\fIm\fR` that has the value`\fIMessage::Write(String::from("hello"))\fR`, and that is what `\fIself\fR` will be in thebody of the `\fIcall\fR` method when `\fIm\.call()\fR` runs\.
.P
Let‚Äôs look at another enum in the standard library that is very common anduseful: `\fIOption\fR`\.
.br

.br
\fBThe \fR
.br
======
.br
`\fIOption\fR` Enum and Its Advantages Over Null Values
.P
This section explores a case study of `\fIOption\fR`, which is another enum definedby the standard library\. The `\fIOption\fR` type encodes the very common scenario inwhich a value could be something or it could be nothing\.
.P
For example, if you request the first of a list containing items, you would geta value\. If you request the first item of an empty list, you would get nothing\.Expressing this concept in terms of the type system means the compiler cancheck whether you‚Äôve handled all the cases you should be handling; thisfunctionality can prevent bugs that are extremely common in other programminglanguages\.
.P
Programming language design is often thought of in terms of which features youinclude, but the features you exclude are important too\. Rust doesn‚Äôt have thenull feature that many other languages have\. \fINull\fR is a value that means thereis no value there\. In languages with null, variables can always be in one oftwo states: null or not\-null\.
.P
In his 2009 presentation ‚ÄúNull References: The Billion Dollar Mistake,‚Äù TonyHoare, the inventor of null, has this to say:
.P
I call it my billion\-dollar mistake\. At that time, I was designing the firstcomprehensive type system for references in an object\-oriented language\. Mygoal was to ensure that all use of references should be absolutely safe, withchecking performed automatically by the compiler\. But I couldn‚Äôt resist thetemptation to put in a null reference, simply because it was so easy toimplement\. This has led to innumerable errors, vulnerabilities, and systemcrashes, which have probably caused a billion dollars of pain and damage inthe last forty years\.
.P
The problem with null values is that if you try to use a null value as anot\-null value, you‚Äôll get an error of some kind\. Because this null or not\-nullproperty is pervasive, it‚Äôs extremely easy to make this kind of error\.
.P
However, the concept that null is trying to express is still a useful one: anull is a value that is currently invalid or absent for some reason\.
.P
The problem isn‚Äôt really with the concept but with the particularimplementation\. As such, Rust does not have nulls, but it does have an enumthat can encode the concept of a value being present or absent\. This enum is`\fIOption<T>\fR`, and it is 
.UR \.\./std/option/enum\.Option\.html
.UE
defined by the standard libraryas follows:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Option<T> {
    None,
    Some(T),
}

.EE

.RE
.P
The `\fIOption<T>\fR` enum is so useful that it‚Äôs even included in the prelude; youdon‚Äôt need to bring it into scope explicitly\. Its variants are also included inthe prelude: you can use `\fISome\fR` and `\fINone\fR` directly without the `\fIOption::\fR`prefix\. The `\fIOption<T>\fR` enum is still just a regular enum, and `\fISome(T)\fR` and`\fINone\fR` are still variants of type `\fIOption<T>\fR`\.
.P
The `\fI<T>\fR` syntax is a feature of Rust we haven‚Äôt talked about yet\. It‚Äôs ageneric type parameter, and we‚Äôll cover generics in more detail in Chapter 10\.For now, all you need to know is that `\fI<T>\fR` means the `\fISome\fR` variant of the`\fIOption\fR` enum can hold one piece of data of any type, and that each concretetype that gets used in place of `\fIT\fR` makes the overall `\fIOption<T>\fR` type adifferent type\. Here are some examples of using `\fIOption\fR` values to hold numbertypes and string types:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let some_number = Some(5);
    let some_char = Some('e');

    let absent_number: Option<i32> = None;
# }

.EE

.RE
.P
The type of `\fIsome_number\fR` is `\fIOption<i32>\fR`\. The type of `\fIsome_char\fR` is`\fIOption<char>\fR`, which is a different type\. Rust can infer these types becausewe‚Äôve specified a value inside the `\fISome\fR` variant\. For `\fIabsent_number\fR`, Rustrequires us to annotate the overall `\fIOption\fR` type: the compiler can‚Äôt infer thetype that the corresponding `\fISome\fR` variant will hold by looking only at a`\fINone\fR` value\. Here, we tell Rust that we mean for `\fIabsent_number\fR` to be of type`\fIOption<i32>\fR`\.
.P
When we have a `\fISome\fR` value, we know that a value is present and the value isheld within the `\fISome\fR`\. When we have a `\fINone\fR` value, in some sense, it meansthe same thing as null: we don‚Äôt have a valid value\. So why is having`\fIOption<T>\fR` any better than having null?
.P
In short, because `\fIOption<T>\fR` and `\fIT\fR` (where `\fIT\fR` can be any type) are differenttypes, the compiler won‚Äôt let us use an `\fIOption<T>\fR` value as if it weredefinitely a valid value\. For example, this code won‚Äôt compile because it‚Äôstrying to add an `\fIi8\fR` to an `\fIOption<i8>\fR`:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let x: i8 = 5;
    let y: Option<i8> = Some(5);

    let sum = x + y;
# }

.EE

.RE
.P
If we run this code, we get an error message like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling enums v0\.1\.0 (file:///projects/enums)
error[E0277]: cannot add `Option<i8>` to `i8`
 \-\-> src/main\.rs:5:17
  |
5 |     let sum = x + y;
  |                 ^ no implementation for `i8 + Option<i8>`
  |
  = help: the trait `Add<Option<i8>>` is not implemented for `i8`
  = help: the following other types implement trait `Add<Rhs>`:
            <&'a f32 as Add<f32>>
            <&'a f64 as Add<f64>>
            <&'a i128 as Add<i128>>
            <&'a i16 as Add<i16>>
            <&'a i32 as Add<i32>>
            <&'a i64 as Add<i64>>
            <&'a i8 as Add<i8>>
            <&'a isize as Add<isize>>
          and 48 others

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `enums` due to previous error

.EE

.RE
.P
Intense! In effect, this error message means that Rust doesn‚Äôt understand howto add an `\fIi8\fR` and an `\fIOption<i8>\fR`, because they‚Äôre different types\. When wehave a value of a type like `\fIi8\fR` in Rust, the compiler will ensure that wealways have a valid value\. We can proceed confidently without having to checkfor null before using that value\. Only when we have an `\fIOption<i8>\fR` (orwhatever type of value we‚Äôre working with) do we have to worry about possiblynot having a value, and the compiler will make sure we handle that case beforeusing the value\.
.P
In other words, you have to convert an `\fIOption<T>\fR` to a `\fIT\fR` before you canperform `\fIT\fR` operations with it\. Generally, this helps catch one of the mostcommon issues with null: assuming that something isn‚Äôt null when it actuallyis\.
.P
Eliminating the risk of incorrectly assuming a not\-null value helps you to bemore confident in your code\. In order to have a value that can possibly benull, you must explicitly opt in by making the type of that value `\fIOption<T>\fR`\.Then, when you use that value, you are required to explicitly handle the casewhen the value is null\. Everywhere that a value has a type that isn‚Äôt an`\fIOption<T>\fR`, you \fIcan\fR safely assume that the value isn‚Äôt null\. This was adeliberate design decision for Rust to limit null‚Äôs pervasiveness and increasethe safety of Rust code\.
.P
So, how do you get the `\fIT\fR` value out of a `\fISome\fR` variant when you have a valueof type `\fIOption<T>\fR` so you can use that value? The `\fIOption<T>\fR` enum has a largenumber of methods that are useful in a variety of situations; you can checkthem out in 
.UR \.\./std/option/enum\.Option\.html
.UE
its documentation\. Becoming familiar withthe methods on `\fIOption<T>\fR` will be extremely useful in your journey with Rust\.
.P
In general, in order to use an `\fIOption<T>\fR` value, you want to have code thatwill handle each variant\. You want some code that will run only when you have a`\fISome(T)\fR` value, and this code is allowed to use the inner `\fIT\fR`\. You want someother code to run if you have a `\fINone\fR` value, and that code doesn‚Äôt have a `\fIT\fR`value available\. The `\fImatch\fR` expression is a control flow construct that doesjust this when used with enums: it will run different code depending on whichvariant of the enum it has, and that code can use the data inside the matchingvalue\.
.SH "The match Control Flow Construct"

.br

.br
\fBThe \fR
.br
======
.br
`\fImatch\fR` Control Flow Construct
.P
Rust has an extremely powerful control flow construct called `\fImatch\fR` that allowsyou to compare a value against a series of patterns and then execute code basedon which pattern matches\. Patterns can be made up of literal values, variablenames, wildcards, and many other things; Chapter 18 covers all the differentkinds of patterns and what they do\. The power of `\fImatch\fR` comes from theexpressiveness of the patterns and the fact that the compiler confirms that allpossible cases are handled\.
.P
Think of a `\fImatch\fR` expression as being like a coin\-sorting machine: coins slidedown a track with variously sized holes along it, and each coin falls throughthe first hole it encounters that it fits into\. In the same way, values gothrough each pattern in a `\fImatch\fR`, and at the first pattern the value ‚Äúfits,‚Äùthe value falls into the associated code block to be used during execution\.
.P
Speaking of coins, let‚Äôs use them as an example using `\fImatch\fR`! We can write afunction that takes an unknown United States coin and, in a similar way as thecounting machine, determines which coin it is and returns its value in cents, asshown here in Listing 6\-3\.
.RS
.IP \fBrust\fR 2

.br
.EX
enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter,
}

fn value_in_cents(coin: Coin) \-> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
# 
# fn main() {}

.EE

.RE
Listing 6\-3: An enum and a `\fImatch\fR` expression that hasthe variants of the enum as its patterns
.P
Let‚Äôs break down the `\fImatch\fR` in the `\fIvalue_in_cents\fR` function\. First, we listthe `\fImatch\fR` keyword followed by an expression, which in this case is the value`\fIcoin\fR`\. This seems very similar to an expression used with `\fIif\fR`, but there‚Äôs abig difference: with `\fIif\fR`, the expression needs to return a Boolean value, buthere, it can return any type\. The type of `\fIcoin\fR` in this example is the `\fICoin\fR`enum that we defined on the first line\.
.P
Next are the `\fImatch\fR` arms\. An arm has two parts: a pattern and some code\. Thefirst arm here has a pattern that is the value `\fICoin::Penny\fR` and then the `\fI=>\fR`operator that separates the pattern and the code to run\. The code in this caseis just the value `\fI1\fR`\. Each arm is separated from the next with a comma\.
.P
When the `\fImatch\fR` expression executes, it compares the resulting value againstthe pattern of each arm, in order\. If a pattern matches the value, the codeassociated with that pattern is executed\. If that pattern doesn‚Äôt match thevalue, execution continues to the next arm, much as in a coin\-sorting machine\.We can have as many arms as we need: in Listing 6\-3, our `\fImatch\fR` has four arms\.
.P
The code associated with each arm is an expression, and the resulting value ofthe expression in the matching arm is the value that gets returned for theentire `\fImatch\fR` expression\.
.P
We don‚Äôt typically use curly brackets if the match arm code is short, as it isin Listing 6\-3 where each arm just returns a value\. If you want to run multiplelines of code in a match arm, you must use curly brackets, and the commafollowing the arm is then optional\. For example, the following code prints‚ÄúLucky penny!‚Äù every time the method is called with a `\fICoin::Penny\fR`, but stillreturns the last value of the block, `\fI1\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# enum Coin {
#     Penny,
#     Nickel,
#     Dime,
#     Quarter,
# }
# 
fn value_in_cents(coin: Coin) \-> u8 {
    match coin {
        Coin::Penny => {
            println!("Lucky penny!");
            1
        }
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
# 
# fn main() {}

.EE

.RE

.br

.br
\fBPatterns that Bind to Values\fR
.br
==============================
.br

.P
Another useful feature of match arms is that they can bind to the parts of thevalues that match the pattern\. This is how we can extract values out of enumvariants\.
.P
As an example, let‚Äôs change one of our enum variants to hold data inside it\.From 1999 through 2008, the United States minted quarters with differentdesigns for each of the 50 states on one side\. No other coins got statedesigns, so only quarters have this extra value\. We can add this information toour `\fIenum\fR` by changing the `\fIQuarter\fR` variant to include a `\fIUsState\fR` value storedinside it, which we‚Äôve done here in Listing 6\-4\.
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)] // so we can inspect the state in a minute
enum UsState {
    Alabama,
    Alaska,
    // \-\-snip\-\-
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(UsState),
}
# 
# fn main() {}

.EE

.RE
Listing 6\-4: A `\fICoin\fR` enum in which the `\fIQuarter\fR` variantalso holds a `\fIUsState\fR` value
.P
Let‚Äôs imagine that a friend is trying to collect all 50 state quarters\. Whilewe sort our loose change by coin type, we‚Äôll also call out the name of thestate associated with each quarter so if it‚Äôs one our friend doesn‚Äôt have, theycan add it to their collection\.
.P
In the match expression for this code, we add a variable called `\fIstate\fR` to thepattern that matches values of the variant `\fICoin::Quarter\fR`\. When a`\fICoin::Quarter\fR` matches, the `\fIstate\fR` variable will bind to the value of thatquarter‚Äôs state\. Then we can use `\fIstate\fR` in the code for that arm, like so:
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# enum UsState {
#     Alabama,
#     Alaska,
#     // \-\-snip\-\-
# }
# 
# enum Coin {
#     Penny,
#     Nickel,
#     Dime,
#     Quarter(UsState),
# }
# 
fn value_in_cents(coin: Coin) \-> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(state) => {
            println!("State quarter from {:?}!", state);
            25
        }
    }
}
# 
# fn main() {
#     value_in_cents(Coin::Quarter(UsState::Alaska));
# }

.EE

.RE
.P
If we were to call `\fIvalue_in_cents(Coin::Quarter(UsState::Alaska))\fR`, `\fIcoin\fR`would be `\fICoin::Quarter(UsState::Alaska)\fR`\. When we compare that value with eachof the match arms, none of them match until we reach `\fICoin::Quarter(state)\fR`\. Atthat point, the binding for `\fIstate\fR` will be the value `\fIUsState::Alaska\fR`\. We canthen use that binding in the `\fIprintln!\fR` expression, thus getting the innerstate value out of the `\fICoin\fR` enum variant for `\fIQuarter\fR`\.
.br

.br
\fBMatching with \fR
.br
================
.br
`\fIOption<T>\fR`
.P
In the previous section, we wanted to get the inner `\fIT\fR` value out of the `\fISome\fR`case when using `\fIOption<T>\fR`; we can also handle `\fIOption<T>\fR` using `\fImatch\fR` as wedid with the `\fICoin\fR` enum! Instead of comparing coins, we‚Äôll compare thevariants of `\fIOption<T>\fR`, but the way that the `\fImatch\fR` expression works remainsthe same\.
.P
Let‚Äôs say we want to write a function that takes an `\fIOption<i32>\fR` and, ifthere‚Äôs a value inside, adds 1 to that value\. If there isn‚Äôt a value inside,the function should return the `\fINone\fR` value and not attempt to perform anyoperations\.
.P
This function is very easy to write, thanks to `\fImatch\fR`, and will look likeListing 6\-5\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    fn plus_one(x: Option<i32>) \-> Option<i32> {
        match x {
            None => None,
            Some(i) => Some(i + 1),
        }
    }

    let five = Some(5);
    let six = plus_one(five);
    let none = plus_one(None);
# }

.EE

.RE
Listing 6\-5: A function that uses a `\fImatch\fR` expression onan `\fIOption<i32>\fR`
.P
Let‚Äôs examine the first execution of `\fIplus_one\fR` in more detail\. When we call`\fIplus_one(five)\fR`, the variable `\fIx\fR` in the body of `\fIplus_one\fR` will have thevalue `\fISome(5)\fR`\. We then compare that against each match arm\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
#     fn plus_one(x: Option<i32>) \-> Option<i32> {
#         match x {
            None => None,
#             Some(i) => Some(i + 1),
#         }
#     }
# 
#     let five = Some(5);
#     let six = plus_one(five);
#     let none = plus_one(None);
# }

.EE

.RE
.P
The `\fISome(5)\fR` value doesn‚Äôt match the pattern `\fINone\fR`, so we continue to thenext arm\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
#     fn plus_one(x: Option<i32>) \-> Option<i32> {
#         match x {
#             None => None,
            Some(i) => Some(i + 1),
#         }
#     }
# 
#     let five = Some(5);
#     let six = plus_one(five);
#     let none = plus_one(None);
# }

.EE

.RE
.P
Does `\fISome(5)\fR` match `\fISome(i)\fR`? Why yes it does! We have the same variant\. The`\fIi\fR` binds to the value contained in `\fISome\fR`, so `\fIi\fR` takes the value `\fI5\fR`\. Thecode in the match arm is then executed, so we add 1 to the value of `\fIi\fR` andcreate a new `\fISome\fR` value with our total `\fI6\fR` inside\.
.P
Now let‚Äôs consider the second call of `\fIplus_one\fR` in Listing 6\-5, where `\fIx\fR` is`\fINone\fR`\. We enter the `\fImatch\fR` and compare to the first arm\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
#     fn plus_one(x: Option<i32>) \-> Option<i32> {
#         match x {
            None => None,
#             Some(i) => Some(i + 1),
#         }
#     }
# 
#     let five = Some(5);
#     let six = plus_one(five);
#     let none = plus_one(None);
# }

.EE

.RE
.P
It matches! There‚Äôs no value to add to, so the program stops and returns the`\fINone\fR` value on the right side of `\fI=>\fR`\. Because the first arm matched, no otherarms are compared\.
.P
Combining `\fImatch\fR` and enums is useful in many situations\. You‚Äôll see thispattern a lot in Rust code: `\fImatch\fR` against an enum, bind a variable to thedata inside, and then execute code based on it\. It‚Äôs a bit tricky at first, butonce you get used to it, you‚Äôll wish you had it in all languages\. It‚Äôsconsistently a user favorite\.
.br

.br
\fBMatches Are Exhaustive\fR
.br
========================
.br

.P
There‚Äôs one other aspect of `\fImatch\fR` we need to discuss: the arms‚Äô patterns mustcover all possibilities\. Consider this version of our `\fIplus_one\fR` function,which has a bug and won‚Äôt compile:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    fn plus_one(x: Option<i32>) \-> Option<i32> {
        match x {
            Some(i) => Some(i + 1),
        }
    }
# 
#     let five = Some(5);
#     let six = plus_one(five);
#     let none = plus_one(None);
# }

.EE

.RE
.P
We didn‚Äôt handle the `\fINone\fR` case, so this code will cause a bug\. Luckily, it‚Äôsa bug Rust knows how to catch\. If we try to compile this code, we‚Äôll get thiserror:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling enums v0\.1\.0 (file:///projects/enums)
error[E0004]: non\-exhaustive patterns: `None` not covered
   \-\-> src/main\.rs:3:15
    |
3   |         match x {
    |               ^ pattern `None` not covered
    |
note: `Option<i32>` defined here
    = note: the matched value is of type `Option<i32>`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
    |
4   ~             Some(i) => Some(i + 1),
5   ~             None => todo!(),
    |

For more information about this error, try `rustc \-\-explain E0004`\.
error: could not compile `enums` due to previous error

.EE

.RE
.P
Rust knows that we didn‚Äôt cover every possible case and even knows whichpattern we forgot! Matches in Rust are \fIexhaustive\fR: we must exhaust every lastpossibility in order for the code to be valid\. Especially in the case of`\fIOption<T>\fR`, when Rust prevents us from forgetting to explicitly handle the`\fINone\fR` case, it protects us from assuming that we have a value when we mighthave null, thus making the billion\-dollar mistake discussed earlier impossible\.
.br

.br
\fBCatch\-all Patterns and the \fR
.br
=============================
.br
`\fI_\fR` Placeholder
.P
Using enums, we can also take special actions for a few particular values, butfor all other values take one default action\. Imagine we‚Äôre implementing a gamewhere, if you roll a 3 on a dice roll, your player doesn‚Äôt move, but insteadgets a new fancy hat\. If you roll a 7, your player loses a fancy hat\. For allother values, your player moves that number of spaces on the game board\. Here‚Äôsa `\fImatch\fR` that implements that logic, with the result of the dice rollhardcoded rather than a random value, and all other logic represented byfunctions without bodies because actually implementing them is out of scope forthis example:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let dice_roll = 9;
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        other => move_player(other),
    }

    fn add_fancy_hat() {}
    fn remove_fancy_hat() {}
    fn move_player(num_spaces: u8) {}
# }

.EE

.RE
.P
For the first two arms, the patterns are the literal values 3 and 7\. For thelast arm that covers every other possible value, the pattern is the variablewe‚Äôve chosen to name `\fIother\fR`\. The code that runs for the `\fIother\fR` arm uses thevariable by passing it to the `\fImove_player\fR` function\.
.P
This code compiles, even though we haven‚Äôt listed all the possible values a`\fIu8\fR` can have, because the last pattern will match all values not specificallylisted\. This catch\-all pattern meets the requirement that `\fImatch\fR` must beexhaustive\. Note that we have to put the catch\-all arm last because thepatterns are evaluated in order\. If we put the catch\-all arm earlier, the otherarms would never run, so Rust will warn us if we add arms after a catch\-all!
.P
Rust also has a pattern we can use when we want a catch\-all but don‚Äôt want to\fIuse\fR the value in the catch\-all pattern: `\fI_\fR` is a special pattern that matchesany value and does not bind to that value\. This tells Rust we aren‚Äôt going touse the value, so Rust won‚Äôt warn us about an unused variable\.
.P
Let‚Äôs change the rules of the game: now, if you roll anything other than a 3 ora 7, you must roll again\. We no longer need to use the catch\-all value, so wecan change our code to use `\fI_\fR` instead of the variable named `\fIother\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let dice_roll = 9;
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        _ => reroll(),
    }

    fn add_fancy_hat() {}
    fn remove_fancy_hat() {}
    fn reroll() {}
# }

.EE

.RE
.P
This example also meets the exhaustiveness requirement because we‚Äôre explicitlyignoring all other values in the last arm; we haven‚Äôt forgotten anything\.
.P
Finally, we‚Äôll change the rules of the game one more time, so that nothing elsehappens on your turn if you roll anything other than a 3 or a 7\. We can expressthat by using the unit value (the empty tuple type we mentioned in 
.UR ch03\-02\-data\-types\.html#the\-tuple\-type
.UE
‚ÄúThe TupleType‚Äù section) as the code that goes with the `\fI_\fR` arm:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let dice_roll = 9;
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        _ => (),
    }

    fn add_fancy_hat() {}
    fn remove_fancy_hat() {}
# }

.EE

.RE
.P
Here, we‚Äôre telling Rust explicitly that we aren‚Äôt going to use any other valuethat doesn‚Äôt match a pattern in an earlier arm, and we don‚Äôt want to run anycode in this case\.
.P
There‚Äôs more about patterns and matching that we‚Äôll cover in 
.UR ch18\-00\-patterns\.html
.UE
Chapter18\. For now, we‚Äôre going to move on to the`\fIif let\fR` syntax, which can be useful in situations where the `\fImatch\fR` expressionis a bit wordy\.
.SH "Concise Control Flow with if let"

.br

.br
\fBConcise Control Flow with \fR
.br
============================
.br
`\fIif let\fR`
.P
The `\fIif let\fR` syntax lets you combine `\fIif\fR` and `\fIlet\fR` into a less verbose way tohandle values that match one pattern while ignoring the rest\. Consider theprogram in Listing 6\-6 that matches on an `\fIOption<u8>\fR` value in the `\fIconfig_max\fR`variable but only wants to execute code if the value is the `\fISome\fR` variant\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let config_max = Some(3u8);
    match config_max {
        Some(max) => println!("The maximum is configured to be {}", max),
        _ => (),
    }
# }

.EE

.RE
Listing 6\-6: A `\fImatch\fR` that only cares about executingcode when the value is `\fISome\fR`
.P
If the value is `\fISome\fR`, we print out the value in the `\fISome\fR` variant by bindingthe value to the variable `\fImax\fR` in the pattern\. We don‚Äôt want to do anythingwith the `\fINone\fR` value\. To satisfy the `\fImatch\fR` expression, we have to add `\fI_ => ()\fR` after processing just one variant, which is annoying boilerplate code toadd\.
.P
Instead, we could write this in a shorter way using `\fIif let\fR`\. The followingcode behaves the same as the `\fImatch\fR` in Listing 6\-6:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let config_max = Some(3u8);
    if let Some(max) = config_max {
        println!("The maximum is configured to be {}", max);
    }
# }

.EE

.RE
.P
The syntax `\fIif let\fR` takes a pattern and an expression separated by an equalsign\. It works the same way as a `\fImatch\fR`, where the expression is given to the`\fImatch\fR` and the pattern is its first arm\. In this case, the pattern is`\fISome(max)\fR`, and the `\fImax\fR` binds to the value inside the `\fISome\fR`\. We can thenuse `\fImax\fR` in the body of the `\fIif let\fR` block in the same way as we used `\fImax\fR` inthe corresponding `\fImatch\fR` arm\. The code in the `\fIif let\fR` block isn‚Äôt run if thevalue doesn‚Äôt match the pattern\.
.P
Using `\fIif let\fR` means less typing, less indentation, and less boilerplate code\.However, you lose the exhaustive checking that `\fImatch\fR` enforces\. Choosingbetween `\fImatch\fR` and `\fIif let\fR` depends on what you‚Äôre doing in your particularsituation and whether gaining conciseness is an appropriate trade\-off forlosing exhaustive checking\.
.P
In other words, you can think of `\fIif let\fR` as syntax sugar for a `\fImatch\fR` thatruns code when the value matches one pattern and then ignores all other values\.
.P
We can include an `\fIelse\fR` with an `\fIif let\fR`\. The block of code that goes with the`\fIelse\fR` is the same as the block of code that would go with the `\fI_\fR` case in the`\fImatch\fR` expression that is equivalent to the `\fIif let\fR` and `\fIelse\fR`\. Recall the`\fICoin\fR` enum definition in Listing 6\-4, where the `\fIQuarter\fR` variant also held a`\fIUsState\fR` value\. If we wanted to count all non\-quarter coins we see while alsoannouncing the state of the quarters, we could do that with a `\fImatch\fR`expression like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# enum UsState {
#     Alabama,
#     Alaska,
#     // \-\-snip\-\-
# }
# 
# enum Coin {
#     Penny,
#     Nickel,
#     Dime,
#     Quarter(UsState),
# }
# 
# fn main() {
#     let coin = Coin::Penny;
    let mut count = 0;
    match coin {
        Coin::Quarter(state) => println!("State quarter from {:?}!", state),
        _ => count += 1,
    }
# }

.EE

.RE
.P
Or we could use an `\fIif let\fR` and `\fIelse\fR` expression like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# enum UsState {
#     Alabama,
#     Alaska,
#     // \-\-snip\-\-
# }
# 
# enum Coin {
#     Penny,
#     Nickel,
#     Dime,
#     Quarter(UsState),
# }
# 
# fn main() {
#     let coin = Coin::Penny;
    let mut count = 0;
    if let Coin::Quarter(state) = coin {
        println!("State quarter from {:?}!", state);
    } else {
        count += 1;
    }
# }

.EE

.RE
.P
If you have a situation in which your program has logic that is too verbose toexpress using a `\fImatch\fR`, remember that `\fIif let\fR` is in your Rust toolbox as well\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
We‚Äôve now covered how to use enums to create custom types that can be one of aset of enumerated values\. We‚Äôve shown how the standard library‚Äôs `\fIOption<T>\fR`type helps you use the type system to prevent errors\. When enum values havedata inside them, you can use `\fImatch\fR` or `\fIif let\fR` to extract and use thosevalues, depending on how many cases you need to handle\.
.P
Your Rust programs can now express concepts in your domain using structs andenums\. Creating custom types to use in your API ensures type safety: thecompiler will make certain your functions get only values of the type eachfunction expects\.
.P
In order to provide a well\-organized API to your users that is straightforwardto use and only exposes exactly what your users will need, let‚Äôs now turn toRust‚Äôs modules\.
.SH "Managing Growing Projects with Packages, Crates, and Modules"

.br

.br
\fBManaging Growing Projects with Packages, Crates, and Modules\fR
.br
==============================================================
.br

.P
As you write large programs, organizing your code will become increasinglyimportant\. By grouping related functionality and separating code with distinctfeatures, you‚Äôll clarify where to find code that implements a particularfeature and where to go to change how a feature works\.
.P
The programs we‚Äôve written so far have been in one module in one file\. As aproject grows, you should organize code by splitting it into multiple modulesand then multiple files\. A package can contain multiple binary crates andoptionally one library crate\. As a package grows, you can extract parts intoseparate crates that become external dependencies\. This chapter covers allthese techniques\. For very large projects comprising a set of interrelatedpackages that evolve together, Cargo provides \fIworkspaces\fR, which we‚Äôll coverin the 
.UR ch14\-03\-cargo\-workspaces\.html
.UE
‚ÄúCargo Workspaces‚Äù section in Chapter 14\.
.P
We‚Äôll also discuss encapsulating implementation details, which lets you reusecode at a higher level: once you‚Äôve implemented an operation, other code cancall your code via its public interface without having to know how theimplementation works\. The way you write code defines which parts are public forother code to use and which parts are private implementation details that youreserve the right to change\. This is another way to limit the amount of detailyou have to keep in your head\.
.P
A related concept is scope: the nested context in which code is written has aset of names that are defined as ‚Äúin scope\.‚Äù When reading, writing, andcompiling code, programmers and compilers need to know whether a particularname at a particular spot refers to a variable, function, struct, enum, module,constant, or other item and what that item means\. You can create scopes andchange which names are in or out of scope\. You can‚Äôt have two items with thesame name in the same scope; tools are available to resolve name conflicts\.
.P
Rust has a number of features that allow you to manage your code‚Äôsorganization, including which details are exposed, which details are private,and what names are in each scope in your programs\. These features, sometimescollectively referred to as the \fImodule system\fR, include:\fBPackages:\fR A Cargo feature that lets you build, test, and share crates\fBCrates:\fR A tree of modules that produces a library or executable\fBModules\fR and \fBuse:\fR Let you control the organization, scope, andprivacy of paths\fBPaths:\fR A way of naming an item, such as a struct, function, or module
.P
In this chapter, we‚Äôll cover all these features, discuss how they interact, andexplain how to use them to manage scope\. By the end, you should have a solidunderstanding of the module system and be able to work with scopes like a pro!
.SH "Packages and Crates"

.br

.br
\fBPackages and Crates\fR
.br
=====================
.br

.P
The first parts of the module system we‚Äôll cover are packages and crates\.
.P
A \fIcrate\fR is the smallest amount of code that the Rust compiler considers at atime\. Even if you run `\fIrustc\fR` rather than `\fIcargo\fR` and pass a single source codefile (as we did all the way back in the ‚ÄúWriting and Running a Rust Program‚Äùsection of Chapter 1), the compiler considers that file to be a crate\. Cratescan contain modules, and the modules may be defined in other files that getcompiled with the crate, as we‚Äôll see in the coming sections\.
.P
A crate can come in one of two forms: a binary crate or a library crate\.\fIBinary crates\fR are programs you can compile to an executable that you can run,such as a command\-line program or a server\. Each must have a function called`\fImain\fR` that defines what happens when the executable runs\. All the crates we‚Äôvecreated so far have been binary crates\.\fILibrary crates\fR don‚Äôt have a `\fImain\fR` function, and they don‚Äôt compile to anexecutable\. Instead, they define functionality intended to be shared withmultiple projects\. For example, the `\fIrand\fR` crate we used in 
.UR ch02\-00\-guessing\-game\-tutorial\.html#generating\-a\-random\-number
.UE
Chapter2 provides functionality that generates random numbers\.Most of the time when Rustaceans say ‚Äúcrate‚Äù, they mean library crate, and theyuse ‚Äúcrate‚Äù interchangeably with the general programming concept of a ‚Äúlibrary"\.
.P
The \fIcrate root\fR is a source file that the Rust compiler starts from and makesup the root module of your crate (we‚Äôll explain modules in depth in the
.UR ch07\-02\-defining\-modules\-to\-control\-scope\-and\-privacy\.html
.UE
‚ÄúDefining Modules to Control Scope and Privacy‚Äùsection)\.
.P
A \fIpackage\fR is a bundle of one or more crates that provides a set offunctionality\. A package contains a \fICargo\.toml\fR file that describes how tobuild those crates\. Cargo is actually a package that contains the binary cratefor the command\-line tool you‚Äôve been using to build your code\. The Cargopackage also contains a library crate that the binary crate depends on\. Otherprojects can depend on the Cargo library crate to use the same logic the Cargocommand\-line tool uses\.
.P
A package can contain as many binary crates as you like, but at most only onelibrary crate\. A package must contain at least one crate, whether that‚Äôs alibrary or binary crate\.
.P
Let‚Äôs walk through what happens when we create a package\. First, we enter thecommand `\fIcargo new\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new my\-project
     Created binary (application) `my\-project` package
$ ls my\-project
Cargo\.toml
src
$ ls my\-project/src
main\.rs

.EE

.RE
.P
After we run `\fIcargo new\fR`, we use `\fIls\fR` to see what Cargo creates\. In the projectdirectory, there‚Äôs a \fICargo\.toml\fR file, giving us a package\. There‚Äôs also a\fIsrc\fR directory that contains \fImain\.rs\fR\. Open \fICargo\.toml\fR in your text editor,and note there‚Äôs no mention of \fIsrc/main\.rs\fR\. Cargo follows a convention that\fIsrc/main\.rs\fR is the crate root of a binary crate with the same name as thepackage\. Likewise, Cargo knows that if the package directory contains\fIsrc/lib\.rs\fR, the package contains a library crate with the same name as thepackage, and \fIsrc/lib\.rs\fR is its crate root\. Cargo passes the crate root filesto `\fIrustc\fR` to build the library or binary\.
.P
Here, we have a package that only contains \fIsrc/main\.rs\fR, meaning it onlycontains a binary crate named `\fImy\-project\fR`\. If a package contains \fIsrc/main\.rs\fRand \fIsrc/lib\.rs\fR, it has two crates: a binary and a library, both with the samename as the package\. A package can have multiple binary crates by placing filesin the \fIsrc/bin\fR directory: each file will be a separate binary crate\.
.SH "Defining Modules to Control Scope and Privacy"

.br

.br
\fBDefining Modules to Control Scope and Privacy\fR
.br
===============================================
.br

.P
In this section, we‚Äôll talk about modules and other parts of the module system,namely \fIpaths\fR that allow you to name items; the `\fIuse\fR` keyword that brings apath into scope; and the `\fIpub\fR` keyword to make items public\. We‚Äôll also discussthe `\fIas\fR` keyword, external packages, and the glob operator\.
.P
First, we‚Äôre going to start with a list of rules for easy reference when you‚Äôreorganizing your code in the future\. Then we‚Äôll explain each of the rules indetail\.
.br

.br
\fBModules Cheat Sheet\fR
.br
=====================
.br

.P
Here we provide a quick reference on how modules, paths, the `\fIuse\fR` keyword, andthe `\fIpub\fR` keyword work in the compiler, and how most developers organize theircode\. We‚Äôll be going through examples of each of these rules throughout thischapter, but this is a great place to refer to as a reminder of how moduleswork\.\fBStart from the crate root\fR: When compiling a crate, the compiler firstlooks in the crate root file (usually \fIsrc/lib\.rs\fR for a library crate or\fIsrc/main\.rs\fR for a binary crate) for code to compile\.\fBDeclaring modules\fR: In the crate root file, you can declare new modules;say, you declare a ‚Äúgarden‚Äù module with `\fImod garden;\fR`\. The compiler will lookfor the module‚Äôs code in these places:
.P
Inline, within curly brackets that replace the semicolon following `\fImod garden\fR`
.P
In the file \fIsrc/garden\.rs\fR
.P
In the file \fIsrc/garden/mod\.rs\fR\fBDeclaring submodules\fR: In any file other than the crate root, you candeclare submodules\. For example, you might declare `\fImod vegetables;\fR` in\fIsrc/garden\.rs\fR\. The compiler will look for the submodule‚Äôs code within thedirectory named for the parent module in these places:
.P
Inline, directly following `\fImod vegetables\fR`, within curly brackets insteadof the semicolon
.P
In the file \fIsrc/garden/vegetables\.rs\fR
.P
In the file \fIsrc/garden/vegetables/mod\.rs\fR\fBPaths to code in modules\fR: Once a module is part of your crate, you canrefer to code in that module from anywhere else in that same crate, as longas the privacy rules allow, using the path to the code\. For example, an`\fIAsparagus\fR` type in the garden vegetables module would be found at`\fIcrate::garden::vegetables::Asparagus\fR`\.\fBPrivate vs public\fR: Code within a module is private from its parentmodules by default\. To make a module public, declare it with `\fIpub mod\fR`instead of `\fImod\fR`\. To make items within a public module public as well, use`\fIpub\fR` before their declarations\.\fBThe \fR`\fIuse\fR` keyword: Within a scope, the `\fIuse\fR` keyword creates shortcuts toitems to reduce repetition of long paths\. In any scope that can refer to`\fIcrate::garden::vegetables::Asparagus\fR`, you can create a shortcut with `\fIuse crate::garden::vegetables::Asparagus;\fR` and from then on you only need towrite `\fIAsparagus\fR` to make use of that type in the scope\.
.P
Here we create a binary crate named `\fIbackyard\fR` that illustrates these rules\. Thecrate‚Äôs directory, also named `\fIbackyard\fR`, contains these files and directories:
.RS
.IP \fBtext\fR 2

.br
.EX
backyard
‚îú‚îÄ‚îÄ Cargo\.lock
‚îú‚îÄ‚îÄ Cargo\.toml
‚îî‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ garden
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vegetables\.rs
    ‚îú‚îÄ‚îÄ garden\.rs
    ‚îî‚îÄ‚îÄ main\.rs

.EE

.RE
.P
The crate root file in this case is \fIsrc/main\.rs\fR, and it contains:Filename: src/main\.rs
.RS
.IP \fBrust,noplayground,ignore\fR 2

.br
.EX
use crate::garden::vegetables::Asparagus;

pub mod garden;

fn main() {
    let plant = Asparagus {};
    println!("I'm growing {:?}!", plant);
}

.EE

.RE
.P
The `\fIpub mod garden;\fR` line tells the compiler to include the code it finds in\fIsrc/garden\.rs\fR, which is:Filename: src/garden\.rs
.RS
.IP \fBrust,noplayground,ignore\fR 2

.br
.EX
pub mod vegetables;

.EE

.RE
.P
Here, `\fIpub mod vegetables;\fR` means the code in \fIsrc/garden/vegetables\.rs\fR isincluded too\. That code is:
.RS
.IP \fBrust,noplayground,ignore\fR 2

.br
.EX
#[derive(Debug)]
pub struct Asparagus {}

.EE

.RE
.P
Now let‚Äôs get into the details of these rules and demonstrate them in action!
.br

.br
\fBGrouping Related Code in Modules\fR
.br
==================================
.br
\fIModules\fR let us organize code within a crate for readability and easy reuse\.Modules also allow us to control the \fIprivacy\fR of items, because code within amodule is private by default\. Private items are internal implementation detailsnot available for outside use\. We can choose to make modules and the itemswithin them public, which exposes them to allow external code to use and dependon them\.
.P
As an example, let‚Äôs write a library crate that provides the functionality of arestaurant\. We‚Äôll define the signatures of functions but leave their bodiesempty to concentrate on the organization of the code, rather than theimplementation of a restaurant\.
.P
In the restaurant industry, some parts of a restaurant are referred to as\fIfront of house\fR and others as \fIback of house\fR\. Front of house is wherecustomers are; this encompasses where the hosts seat customers, servers takeorders and payment, and bartenders make drinks\. Back of house is where thechefs and cooks work in the kitchen, dishwashers clean up, and managers doadministrative work\.
.P
To structure our crate in this way, we can organize its functions into nestedmodules\. Create a new library named `\fIrestaurant\fR` by running `\fIcargo new restaurant \-\-lib\fR`; then enter the code in Listing 7\-1 into \fIsrc/lib\.rs\fR todefine some modules and function signatures\. Here‚Äôs the front of house section:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}

        fn seat_at_table() {}
    }

    mod serving {
        fn take_order() {}

        fn serve_order() {}

        fn take_payment() {}
    }
}

.EE

.RE
Listing 7\-1: A `\fIfront_of_house\fR` module containing othermodules that then contain functions
.P
We define a module with the `\fImod\fR` keyword followed by the name of the module(in this case, `\fIfront_of_house\fR`)\. The body of the module then goes inside curlybrackets\. Inside modules, we can place other modules, as in this case with themodules `\fIhosting\fR` and `\fIserving\fR`\. Modules can also hold definitions for otheritems, such as structs, enums, constants, traits, and‚Äîas in Listing7\-1‚Äîfunctions\.
.P
By using modules, we can group related definitions together and name whythey‚Äôre related\. Programmers using this code can navigate the code based on thegroups rather than having to read through all the definitions, making it easierto find the definitions relevant to them\. Programmers adding new functionalityto this code would know where to place the code to keep the program organized\.
.P
Earlier, we mentioned that \fIsrc/main\.rs\fR and \fIsrc/lib\.rs\fR are called crateroots\. The reason for their name is that the contents of either of these twofiles form a module named `\fIcrate\fR` at the root of the crate‚Äôs module structure,known as the \fImodule tree\fR\.
.P
Listing 7\-2 shows the module tree for the structure in Listing 7\-1\.
.RS
.IP \fBtext\fR 2

.br
.EX
crate
 ‚îî‚îÄ‚îÄ front_of_house
     ‚îú‚îÄ‚îÄ hosting
     ‚îÇ   ‚îú‚îÄ‚îÄ add_to_waitlist
     ‚îÇ   ‚îî‚îÄ‚îÄ seat_at_table
     ‚îî‚îÄ‚îÄ serving
         ‚îú‚îÄ‚îÄ take_order
         ‚îú‚îÄ‚îÄ serve_order
         ‚îî‚îÄ‚îÄ take_payment

.EE

.RE
Listing 7\-2: The module tree for the code in Listing7\-1
.P
This tree shows how some of the modules nest inside one another; for example,`\fIhosting\fR` nests inside `\fIfront_of_house\fR`\. The tree also shows that some modulesare \fIsiblings\fR to each other, meaning they‚Äôre defined in the same module;`\fIhosting\fR` and `\fIserving\fR` are siblings defined within `\fIfront_of_house\fR`\. If moduleA is contained inside module B, we say that module A is the \fIchild\fR of module Band that module B is the \fIparent\fR of module A\. Notice that the entire moduletree is rooted under the implicit module named `\fIcrate\fR`\.
.P
The module tree might remind you of the filesystem‚Äôs directory tree on yourcomputer; this is a very apt comparison! Just like directories in a filesystem,you use modules to organize your code\. And just like files in a directory, weneed a way to find our modules\.
.SH "Paths for Referring to an Item in the Module Tree"

.br

.br
\fBPaths for Referring to an Item in the Module Tree\fR
.br
===================================================
.br

.P
To show Rust where to find an item in a module tree, we use a path in the sameway we use a path when navigating a filesystem\. To call a function, we need toknow its path\.
.P
A path can take two forms:
.P
An \fIabsolute path\fR is the full path starting from a crate root; for codefrom an external crate, the absolute path begins with the crate name, and forcode from the current crate, it starts with the literal `\fIcrate\fR`\.
.P
A \fIrelative path\fR starts from the current module and uses `\fIself\fR`, `\fIsuper\fR`, oran identifier in the current module\.
.P
Both absolute and relative paths are followed by one or more identifiersseparated by double colons (`\fI::\fR`)\.
.P
Returning to Listing 7\-1, say we want to call the `\fIadd_to_waitlist\fR` function\.This is the same as asking: what‚Äôs the path of the `\fIadd_to_waitlist\fR` function?Listing 7\-3 contains Listing 7\-1 with some of the modules and functionsremoved\.
.P
We‚Äôll show two ways to call the `\fIadd_to_waitlist\fR` function from a new function`\fIeat_at_restaurant\fR` defined in the crate root\. These paths are correct, butthere‚Äôs another problem remaining that will prevent this example from compilingas\-is\. We‚Äôll explain why in a bit\.
.P
The `\fIeat_at_restaurant\fR` function is part of our library crate‚Äôs public API, sowe mark it with the `\fIpub\fR` keyword\. In the 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html#exposing\-paths\-with\-the\-pub\-keyword
.UE
‚ÄúExposing Paths with the `\fIpub\fR`Keyword‚Äù section, we‚Äôll go into more detail about `\fIpub\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-3: Calling the `\fIadd_to_waitlist\fR` function usingabsolute and relative paths
.P
The first time we call the `\fIadd_to_waitlist\fR` function in `\fIeat_at_restaurant\fR`,we use an absolute path\. The `\fIadd_to_waitlist\fR` function is defined in the samecrate as `\fIeat_at_restaurant\fR`, which means we can use the `\fIcrate\fR` keyword tostart an absolute path\. We then include each of the successive modules until wemake our way to `\fIadd_to_waitlist\fR`\. You can imagine a filesystem with the samestructure: we‚Äôd specify the path `\fI/front_of_house/hosting/add_to_waitlist\fR` torun the `\fIadd_to_waitlist\fR` program; using the `\fIcrate\fR` name to start from thecrate root is like using `\fI/\fR` to start from the filesystem root in your shell\.
.P
The second time we call `\fIadd_to_waitlist\fR` in `\fIeat_at_restaurant\fR`, we use arelative path\. The path starts with `\fIfront_of_house\fR`, the name of the moduledefined at the same level of the module tree as `\fIeat_at_restaurant\fR`\. Here thefilesystem equivalent would be using the path`\fIfront_of_house/hosting/add_to_waitlist\fR`\. Starting with a module name meansthat the path is relative\.
.P
Choosing whether to use a relative or absolute path is a decision you‚Äôll makebased on your project, and depends on whether you‚Äôre more likely to move itemdefinition code separately from or together with the code that uses the item\.For example, if we move the `\fIfront_of_house\fR` module and the `\fIeat_at_restaurant\fR`function into a module named `\fIcustomer_experience\fR`, we‚Äôd need to update theabsolute path to `\fIadd_to_waitlist\fR`, but the relative path would still be valid\.However, if we moved the `\fIeat_at_restaurant\fR` function separately into a modulenamed `\fIdining\fR`, the absolute path to the `\fIadd_to_waitlist\fR` call would stay thesame, but the relative path would need to be updated\. Our preference in generalis to specify absolute paths because it‚Äôs more likely we‚Äôll want to move codedefinitions and item calls independently of each other\.
.P
Let‚Äôs try to compile Listing 7\-3 and find out why it won‚Äôt compile yet! Theerror we get is shown in Listing 7\-4\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling restaurant v0\.1\.0 (file:///projects/restaurant)
error[E0603]: module `hosting` is private
 \-\-> src/lib\.rs:9:28
  |
9 |     crate::front_of_house::hosting::add_to_waitlist();
  |                            ^^^^^^^ private module
  |
note: the module `hosting` is defined here
 \-\-> src/lib\.rs:2:5
  |
2 |     mod hosting {
  |     ^^^^^^^^^^^

error[E0603]: module `hosting` is private
  \-\-> src/lib\.rs:12:21
   |
12 |     front_of_house::hosting::add_to_waitlist();
   |                     ^^^^^^^ private module
   |
note: the module `hosting` is defined here
  \-\-> src/lib\.rs:2:5
   |
2  |     mod hosting {
   |     ^^^^^^^^^^^

For more information about this error, try `rustc \-\-explain E0603`\.
error: could not compile `restaurant` due to 2 previous errors

.EE

.RE
Listing 7\-4: Compiler errors from building the code inListing 7\-3
.P
The error messages say that module `\fIhosting\fR` is private\. In other words, wehave the correct paths for the `\fIhosting\fR` module and the `\fIadd_to_waitlist\fR`function, but Rust won‚Äôt let us use them because it doesn‚Äôt have access to theprivate sections\. In Rust, all items (functions, methods, structs, enums,modules, and constants) are private to parent modules by default\. If you wantto make an item like a function or struct private, you put it in a module\.
.P
Items in a parent module can‚Äôt use the private items inside child modules, butitems in child modules can use the items in their ancestor modules\. This isbecause child modules wrap and hide their implementation details, but the childmodules can see the context in which they‚Äôre defined\. To continue with ourmetaphor, think of the privacy rules as being like the back office of arestaurant: what goes on in there is private to restaurant customers, butoffice managers can see and do everything in the restaurant they operate\.
.P
Rust chose to have the module system function this way so that hiding innerimplementation details is the default\. That way, you know which parts of theinner code you can change without breaking outer code\. However, Rust does giveyou the option to expose inner parts of child modules‚Äô code to outer ancestormodules by using the `\fIpub\fR` keyword to make an item public\.
.br

.br
\fBExposing Paths with the \fR
.br
==========================
.br
`\fIpub\fR` Keyword
.P
Let‚Äôs return to the error in Listing 7\-4 that told us the `\fIhosting\fR` module isprivate\. We want the `\fIeat_at_restaurant\fR` function in the parent module to haveaccess to the `\fIadd_to_waitlist\fR` function in the child module, so we mark the`\fIhosting\fR` module with the `\fIpub\fR` keyword, as shown in Listing 7\-5\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-5: Declaring the `\fIhosting\fR` module as `\fIpub\fR` touse it from `\fIeat_at_restaurant\fR`
.P
Unfortunately, the code in Listing 7\-5 still results in an error, as shown inListing 7\-6\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling restaurant v0\.1\.0 (file:///projects/restaurant)
error[E0603]: function `add_to_waitlist` is private
 \-\-> src/lib\.rs:9:37
  |
9 |     crate::front_of_house::hosting::add_to_waitlist();
  |                                     ^^^^^^^^^^^^^^^ private function
  |
note: the function `add_to_waitlist` is defined here
 \-\-> src/lib\.rs:3:9
  |
3 |         fn add_to_waitlist() {}
  |         ^^^^^^^^^^^^^^^^^^^^

error[E0603]: function `add_to_waitlist` is private
  \-\-> src/lib\.rs:12:30
   |
12 |     front_of_house::hosting::add_to_waitlist();
   |                              ^^^^^^^^^^^^^^^ private function
   |
note: the function `add_to_waitlist` is defined here
  \-\-> src/lib\.rs:3:9
   |
3  |         fn add_to_waitlist() {}
   |         ^^^^^^^^^^^^^^^^^^^^

For more information about this error, try `rustc \-\-explain E0603`\.
error: could not compile `restaurant` due to 2 previous errors

.EE

.RE
Listing 7\-6: Compiler errors from building the code inListing 7\-5
.P
What happened? Adding the `\fIpub\fR` keyword in front of `\fImod hosting\fR` makes themodule public\. With this change, if we can access `\fIfront_of_house\fR`, we canaccess `\fIhosting\fR`\. But the \fIcontents\fR of `\fIhosting\fR` are still private; making themodule public doesn‚Äôt make its contents public\. The `\fIpub\fR` keyword on a moduleonly lets code in its ancestor modules refer to it, not access its inner code\.Because modules are containers, there‚Äôs not much we can do by only making themodule public; we need to go further and choose to make one or more of theitems within the module public as well\.
.P
The errors in Listing 7\-6 say that the `\fIadd_to_waitlist\fR` function is private\.The privacy rules apply to structs, enums, functions, and methods as well asmodules\.
.P
Let‚Äôs also make the `\fIadd_to_waitlist\fR` function public by adding the `\fIpub\fR`keyword before its definition, as in Listing 7\-7\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-7: Adding the `\fIpub\fR` keyword to `\fImod hosting\fR`and `\fIfn add_to_waitlist\fR` lets us call the function from`\fIeat_at_restaurant\fR`
.P
Now the code will compile! To see why adding the `\fIpub\fR` keyword lets us usethese paths in `\fIadd_to_waitlist\fR` with respect to the privacy rules, let‚Äôs lookat the absolute and the relative paths\.
.P
In the absolute path, we start with `\fIcrate\fR`, the root of our crate‚Äôs moduletree\. The `\fIfront_of_house\fR` module is defined in the crate root\. While`\fIfront_of_house\fR` isn‚Äôt public, because the `\fIeat_at_restaurant\fR` function isdefined in the same module as `\fIfront_of_house\fR` (that is, `\fIeat_at_restaurant\fR`and `\fIfront_of_house\fR` are siblings), we can refer to `\fIfront_of_house\fR` from`\fIeat_at_restaurant\fR`\. Next is the `\fIhosting\fR` module marked with `\fIpub\fR`\. We canaccess the parent module of `\fIhosting\fR`, so we can access `\fIhosting\fR`\. Finally, the`\fIadd_to_waitlist\fR` function is marked with `\fIpub\fR` and we can access its parentmodule, so this function call works!
.P
In the relative path, the logic is the same as the absolute path except for thefirst step: rather than starting from the crate root, the path starts from`\fIfront_of_house\fR`\. The `\fIfront_of_house\fR` module is defined within the same moduleas `\fIeat_at_restaurant\fR`, so the relative path starting from the module in which`\fIeat_at_restaurant\fR` is defined works\. Then, because `\fIhosting\fR` and`\fIadd_to_waitlist\fR` are marked with `\fIpub\fR`, the rest of the path works, and thisfunction call is valid!
.P
If you plan on sharing your library crate so other projects can use your code,your public API is your contract with users of your crate that determines howthey can interact with your code\. There are many considerations around managingchanges to your public API to make it easier for people to depend on yourcrate\. These considerations are out of the scope of this book; if you‚Äôreinterested in this topic, see 
.UR https://rust\-lang\.github\.io/api\-guidelines/
.UE
The Rust API Guidelines\.
.br

.br
\fBBest Practices for Packages with a Binary and a Library\fR
.br
=========================================================
.br

.P
We mentioned a package can contain both a \fIsrc/main\.rs\fR binary crate root aswell as a \fIsrc/lib\.rs\fR library crate root, and both crates will have thepackage name by default\. Typically, packages with this pattern of containingboth a library and a binary crate will have just enough code in the binarycrate to start an executable that calls code with the library crate\. Thislets other projects benefit from the most functionality that the packageprovides, because the library crate‚Äôs code can be shared\.
.P
The module tree should be defined in \fIsrc/lib\.rs\fR\. Then, any public items canbe used in the binary crate by starting paths with the name of the package\.The binary crate becomes a user of the library crate just like a completelyexternal crate would use the library crate: it can only use the public API\.This helps you design a good API; not only are you the author, you‚Äôre also aclient!
.P
In 
.UR ch12\-00\-an\-io\-project\.html
.UE
Chapter 12, we‚Äôll demonstrate this organizationalpractice with a command\-line program that will contain both a binary crateand a library crate\.
.br

.br
\fBStarting Relative Paths with \fR
.br
===============================
.br
`\fIsuper\fR`
.P
We can construct relative paths that begin in the parent module, rather thanthe current module or the crate root, by using `\fIsuper\fR` at the start of thepath\. This is like starting a filesystem path with the `\fI\.\.\fR` syntax\. Using`\fIsuper\fR` allows us to reference an item that we know is in the parent module,which can make rearranging the module tree easier when the module is closelyrelated to the parent, but the parent might be moved elsewhere in the moduletree someday\.
.P
Consider the code in Listing 7\-8 that models the situation in which a cheffixes an incorrect order and personally brings it out to the customer\. Thefunction `\fIfix_incorrect_order\fR` defined in the `\fIback_of_house\fR` module calls thefunction `\fIdeliver_order\fR` defined in the parent module by specifying the path to`\fIdeliver_order\fR` starting with `\fIsuper\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
fn deliver_order() {}

mod back_of_house {
    fn fix_incorrect_order() {
        cook_order();
        super::deliver_order();
    }

    fn cook_order() {}
}

.EE

.RE
Listing 7\-8: Calling a function using a relative pathstarting with `\fIsuper\fR`
.P
The `\fIfix_incorrect_order\fR` function is in the `\fIback_of_house\fR` module, so we canuse `\fIsuper\fR` to go to the parent module of `\fIback_of_house\fR`, which in this caseis `\fIcrate\fR`, the root\. From there, we look for `\fIdeliver_order\fR` and find it\.Success! We think the `\fIback_of_house\fR` module and the `\fIdeliver_order\fR` functionare likely to stay in the same relationship to each other and get movedtogether should we decide to reorganize the crate‚Äôs module tree\. Therefore, weused `\fIsuper\fR` so we‚Äôll have fewer places to update code in the future if thiscode gets moved to a different module\.
.br

.br
\fBMaking Structs and Enums Public\fR
.br
=================================
.br

.P
We can also use `\fIpub\fR` to designate structs and enums as public, but there are afew details extra to the usage of `\fIpub\fR` with structs and enums\. If we use `\fIpub\fR`before a struct definition, we make the struct public, but the struct‚Äôs fieldswill still be private\. We can make each field public or not on a case\-by\-casebasis\. In Listing 7\-9, we‚Äôve defined a public `\fIback_of_house::Breakfast\fR` structwith a public `\fItoast\fR` field but a private `\fIseasonal_fruit\fR` field\. This modelsthe case in a restaurant where the customer can pick the type of bread thatcomes with a meal, but the chef decides which fruit accompanies the meal basedon what‚Äôs in season and in stock\. The available fruit changes quickly, socustomers can‚Äôt choose the fruit or even see which fruit they‚Äôll get\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
mod back_of_house {
    pub struct Breakfast {
        pub toast: String,
        seasonal_fruit: String,
    }

    impl Breakfast {
        pub fn summer(toast: &str) \-> Breakfast {
            Breakfast {
                toast: String::from(toast),
                seasonal_fruit: String::from("peaches"),
            }
        }
    }
}

pub fn eat_at_restaurant() {
    // Order a breakfast in the summer with Rye toast
    let mut meal = back_of_house::Breakfast::summer("Rye");
    // Change our mind about what bread we'd like
    meal\.toast = String::from("Wheat");
    println!("I'd like {} toast please", meal\.toast);

    // The next line won't compile if we uncomment it; we're not allowed
    // to see or modify the seasonal fruit that comes with the meal
    // meal\.seasonal_fruit = String::from("blueberries");
}

.EE

.RE
Listing 7\-9: A struct with some public fields and someprivate fields
.P
Because the `\fItoast\fR` field in the `\fIback_of_house::Breakfast\fR` struct is public,in `\fIeat_at_restaurant\fR` we can write and read to the `\fItoast\fR` field using dotnotation\. Notice that we can‚Äôt use the `\fIseasonal_fruit\fR` field in`\fIeat_at_restaurant\fR` because `\fIseasonal_fruit\fR` is private\. Try uncommenting theline modifying the `\fIseasonal_fruit\fR` field value to see what error you get!
.P
Also, note that because `\fIback_of_house::Breakfast\fR` has a private field, thestruct needs to provide a public associated function that constructs aninstance of `\fIBreakfast\fR` (we‚Äôve named it `\fIsummer\fR` here)\. If `\fIBreakfast\fR` didn‚Äôthave such a function, we couldn‚Äôt create an instance of `\fIBreakfast\fR` in`\fIeat_at_restaurant\fR` because we couldn‚Äôt set the value of the private`\fIseasonal_fruit\fR` field in `\fIeat_at_restaurant\fR`\.
.P
In contrast, if we make an enum public, all of its variants are then public\. Weonly need the `\fIpub\fR` before the `\fIenum\fR` keyword, as shown in Listing 7\-10\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
mod back_of_house {
    pub enum Appetizer {
        Soup,
        Salad,
    }
}

pub fn eat_at_restaurant() {
    let order1 = back_of_house::Appetizer::Soup;
    let order2 = back_of_house::Appetizer::Salad;
}

.EE

.RE
Listing 7\-10: Designating an enum as public makes all itsvariants public
.P
Because we made the `\fIAppetizer\fR` enum public, we can use the `\fISoup\fR` and `\fISalad\fR`variants in `\fIeat_at_restaurant\fR`\.
.P
Enums aren‚Äôt very useful unless their variants are public; it would be annoyingto have to annotate all enum variants with `\fIpub\fR` in every case, so the defaultfor enum variants is to be public\. Structs are often useful without theirfields being public, so struct fields follow the general rule of everythingbeing private by default unless annotated with `\fIpub\fR`\.
.P
There‚Äôs one more situation involving `\fIpub\fR` that we haven‚Äôt covered, and that isour last module system feature: the `\fIuse\fR` keyword\. We‚Äôll cover `\fIuse\fR` by itselffirst, and then we‚Äôll show how to combine `\fIpub\fR` and `\fIuse\fR`\.
.SH "Bringing Paths Into Scope with the use Keyword"

.br

.br
\fBBringing Paths into Scope with the \fR
.br
=====================================
.br
`\fIuse\fR` Keyword
.P
Having to write out the paths to call functions can feel inconvenient andrepetitive\. In Listing 7\-7, whether we chose the absolute or relative path tothe `\fIadd_to_waitlist\fR` function, every time we wanted to call `\fIadd_to_waitlist\fR`we had to specify `\fIfront_of_house\fR` and `\fIhosting\fR` too\. Fortunately, there‚Äôs away to simplify this process: we can create a shortcut to a path with the `\fIuse\fR`keyword once, and then use the shorter name everywhere else in the scope\.
.P
In Listing 7\-11, we bring the `\fIcrate::front_of_house::hosting\fR` module into thescope of the `\fIeat_at_restaurant\fR` function so we only have to specify`\fIhosting::add_to_waitlist\fR` to call the `\fIadd_to_waitlist\fR` function in`\fIeat_at_restaurant\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-11: Bringing a module into scope with`\fIuse\fR`
.P
Adding `\fIuse\fR` and a path in a scope is similar to creating a symbolic link inthe filesystem\. By adding `\fIuse crate::front_of_house::hosting\fR` in the crateroot, `\fIhosting\fR` is now a valid name in that scope, just as though the `\fIhosting\fR`module had been defined in the crate root\. Paths brought into scope with `\fIuse\fR`also check privacy, like any other paths\.
.P
Note that `\fIuse\fR` only creates the shortcut for the particular scope in which the`\fIuse\fR` occurs\. Listing 7\-12 moves the `\fIeat_at_restaurant\fR` function into a newchild module named `\fIcustomer\fR`, which is then a different scope than the `\fIuse\fR`statement, so the function body won‚Äôt compile:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness,does_not_compile,ignore\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting;

mod customer {
    pub fn eat_at_restaurant() {
        hosting::add_to_waitlist();
    }
}

.EE

.RE
Listing 7\-12: A `\fIuse\fR` statement only applies in the scopeit‚Äôs in
.P
The compiler error shows that the shortcut no longer applies within the`\fIcustomer\fR` module:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling restaurant v0\.1\.0 (file:///projects/restaurant)
error[E0433]: failed to resolve: use of undeclared crate or module `hosting`
  \-\-> src/lib\.rs:11:9
   |
11 |         hosting::add_to_waitlist();
   |         ^^^^^^^ use of undeclared crate or module `hosting`

warning: unused import: `crate::front_of_house::hosting`
 \-\-> src/lib\.rs:7:5
  |
7 | use crate::front_of_house::hosting;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

For more information about this error, try `rustc \-\-explain E0433`\.
warning: `restaurant` (lib) generated 1 warning
error: could not compile `restaurant` due to previous error; 1 warning emitted

.EE

.RE
.P
Notice there‚Äôs also a warning that the `\fIuse\fR` is no longer used in its scope! Tofix this problem, move the `\fIuse\fR` within the `\fIcustomer\fR` module too, or referencethe shortcut in the parent module with `\fIsuper::hosting\fR` within the child`\fIcustomer\fR` module\.
.br

.br
\fBCreating Idiomatic \fR
.br
=====================
.br
`\fIuse\fR` Paths
.P
In Listing 7\-11, you might have wondered why we specified `\fIuse crate::front_of_house::hosting\fR` and then called `\fIhosting::add_to_waitlist\fR` in`\fIeat_at_restaurant\fR` rather than specifying the `\fIuse\fR` path all the way out tothe `\fIadd_to_waitlist\fR` function to achieve the same result, as in Listing 7\-13\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting::add_to_waitlist;

pub fn eat_at_restaurant() {
    add_to_waitlist();
}

.EE

.RE
Listing 7\-13: Bringing the `\fIadd_to_waitlist\fR` functioninto scope with `\fIuse\fR`, which is unidiomatic
.P
Although both Listing 7\-11 and 7\-13 accomplish the same task, Listing 7\-11 isthe idiomatic way to bring a function into scope with `\fIuse\fR`\. Bringing thefunction‚Äôs parent module into scope with `\fIuse\fR` means we have to specify theparent module when calling the function\. Specifying the parent module whencalling the function makes it clear that the function isn‚Äôt locally definedwhile still minimizing repetition of the full path\. The code in Listing 7\-13 isunclear as to where `\fIadd_to_waitlist\fR` is defined\.
.P
On the other hand, when bringing in structs, enums, and other items with `\fIuse\fR`,it‚Äôs idiomatic to specify the full path\. Listing 7\-14 shows the idiomatic wayto bring the standard library‚Äôs `\fIHashMap\fR` struct into the scope of a binarycrate\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::collections::HashMap;

fn main() {
    let mut map = HashMap::new();
    map\.insert(1, 2);
}

.EE

.RE
Listing 7\-14: Bringing `\fIHashMap\fR` into scope in anidiomatic way
.P
There‚Äôs no strong reason behind this idiom: it‚Äôs just the convention that hasemerged, and folks have gotten used to reading and writing Rust code this way\.
.P
The exception to this idiom is if we‚Äôre bringing two items with the same nameinto scope with `\fIuse\fR` statements, because Rust doesn‚Äôt allow that\. Listing 7\-15shows how to bring two `\fIResult\fR` types into scope that have the same name butdifferent parent modules and how to refer to them\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::fmt;
use std::io;

fn function1() \-> fmt::Result {
    // \-\-snip\-\-
#     Ok(())
}

fn function2() \-> io::Result<()> {
    // \-\-snip\-\-
#     Ok(())
}

.EE

.RE
Listing 7\-15: Bringing two types with the same name intothe same scope requires using their parent modules\.
.P
As you can see, using the parent modules distinguishes the two `\fIResult\fR` types\.If instead we specified `\fIuse std::fmt::Result\fR` and `\fIuse std::io::Result\fR`, we‚Äôdhave two `\fIResult\fR` types in the same scope and Rust wouldn‚Äôt know which one wemeant when we used `\fIResult\fR`\.
.br

.br
\fBProviding New Names with the \fR
.br
===============================
.br
`\fIas\fR` Keyword
.P
There‚Äôs another solution to the problem of bringing two types of the same nameinto the same scope with `\fIuse\fR`: after the path, we can specify `\fIas\fR` and a newlocal name, or \fIalias\fR, for the type\. Listing 7\-16 shows another way to writethe code in Listing 7\-15 by renaming one of the two `\fIResult\fR` types using `\fIas\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::fmt::Result;
use std::io::Result as IoResult;

fn function1() \-> Result {
    // \-\-snip\-\-
#     Ok(())
}

fn function2() \-> IoResult<()> {
    // \-\-snip\-\-
#     Ok(())
}

.EE

.RE
Listing 7\-16: Renaming a type when it‚Äôs brought intoscope with the `\fIas\fR` keyword
.P
In the second `\fIuse\fR` statement, we chose the new name `\fIIoResult\fR` for the`\fIstd::io::Result\fR` type, which won‚Äôt conflict with the `\fIResult\fR` from `\fIstd::fmt\fR`that we‚Äôve also brought into scope\. Listing 7\-15 and Listing 7\-16 areconsidered idiomatic, so the choice is up to you!
.br

.br
\fBRe\-exporting Names with \fR
.br
==========================
.br
`\fIpub use\fR`
.P
When we bring a name into scope with the `\fIuse\fR` keyword, the name available inthe new scope is private\. To enable the code that calls our code to refer tothat name as if it had been defined in that code‚Äôs scope, we can combine `\fIpub\fR`and `\fIuse\fR`\. This technique is called \fIre\-exporting\fR because we‚Äôre bringingan item into scope but also making that item available for others to bring intotheir scope\.
.P
Listing 7\-17 shows the code in Listing 7\-11 with `\fIuse\fR` in the root modulechanged to `\fIpub use\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-17: Making a name available for any code to usefrom a new scope with `\fIpub use\fR`
.P
Before this change, external code would have to call the `\fIadd_to_waitlist\fR`function by using the path`\fIrestaurant::front_of_house::hosting::add_to_waitlist()\fR`\. Now that this `\fIpub use\fR` has re\-exported the `\fIhosting\fR` module from the root module, external codecan now use the path `\fIrestaurant::hosting::add_to_waitlist()\fR` instead\.
.P
Re\-exporting is useful when the internal structure of your code is differentfrom how programmers calling your code would think about the domain\. Forexample, in this restaurant metaphor, the people running the restaurant thinkabout ‚Äúfront of house‚Äù and ‚Äúback of house\.‚Äù But customers visiting a restaurantprobably won‚Äôt think about the parts of the restaurant in those terms\. With`\fIpub use\fR`, we can write our code with one structure but expose a differentstructure\. Doing so makes our library well organized for programmers working onthe library and programmers calling the library\. We‚Äôll look at another exampleof `\fIpub use\fR` and how it affects your crate‚Äôs documentation in the 
.UR ch14\-02\-publishing\-to\-crates\-io\.html#exporting\-a\-convenient\-public\-api\-with\-pub\-use
.UE
‚ÄúExporting aConvenient Public API with `\fIpub use\fR`‚Äù section ofChapter 14\.
.br

.br
\fBUsing External Packages\fR
.br
=========================
.br

.P
In Chapter 2, we programmed a guessing game project that used an externalpackage called `\fIrand\fR` to get random numbers\. To use `\fIrand\fR` in our project, weadded this line to \fICargo\.toml\fR:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
rand = "0\.8\.3"

.EE

.RE
.P
Adding `\fIrand\fR` as a dependency in \fICargo\.toml\fR tells Cargo to download the`\fIrand\fR` package and any dependencies from 
.UR https://crates\.io/
.UE
crates\.io andmake `\fIrand\fR` available to our project\.
.P
Then, to bring `\fIrand\fR` definitions into the scope of our package, we added a`\fIuse\fR` line starting with the name of the crate, `\fIrand\fR`, and listed the itemswe wanted to bring into scope\. Recall that in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#generating\-a\-random\-number
.UE
‚ÄúGenerating a RandomNumber‚Äù section in Chapter 2, we brought the `\fIRng\fR` traitinto scope and called the `\fIrand::thread_rng\fR` function:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
use rand::Rng;

fn main() {
#     println!("Guess the number!");
# 
    let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
#     println!("The secret number is: {secret_number}");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {guess}");
}

.EE

.RE
.P
Members of the Rust community have made many packages available at
.UR https://crates\.io/
.UE
crates\.io, and pulling any of them into your packageinvolves these same steps: listing them in your package‚Äôs \fICargo\.toml\fR file andusing `\fIuse\fR` to bring items from their crates into scope\.
.P
Note that the standard `\fIstd\fR` library is also a crate that‚Äôs external to ourpackage\. Because the standard library is shipped with the Rust language, wedon‚Äôt need to change \fICargo\.toml\fR to include `\fIstd\fR`\. But we do need to refer toit with `\fIuse\fR` to bring items from there into our package‚Äôs scope\. For example,with `\fIHashMap\fR` we would use this line:
.RS
.IP \fBrust\fR 2

.br
.EX
use std::collections::HashMap;

.EE

.RE
.P
This is an absolute path starting with `\fIstd\fR`, the name of the standard librarycrate\.
.br

.br
\fBUsing Nested Paths to Clean Up Large \fR
.br
=======================================
.br
`\fIuse\fR` Lists
.P
If we‚Äôre using multiple items defined in the same crate or same module,listing each item on its own line can take up a lot of vertical space in ourfiles\. For example, these two `\fIuse\fR` statements we had in the Guessing Game inListing 2\-4 bring items from `\fIstd\fR` into scope:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
// \-\-snip\-\-
use std::cmp::Ordering;
use std::io;
// \-\-snip\-\-
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
#     println!("The secret number is: {secret_number}");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {guess}");
# 
#     match guess\.cmp(&secret_number) {
#         Ordering::Less => println!("Too small!"),
#         Ordering::Greater => println!("Too big!"),
#         Ordering::Equal => println!("You win!"),
#     }
# }

.EE

.RE
.P
Instead, we can use nested paths to bring the same items into scope in oneline\. We do this by specifying the common part of the path, followed by twocolons, and then curly brackets around a list of the parts of the paths thatdiffer, as shown in Listing 7\-18\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
// \-\-snip\-\-
use std::{cmp::Ordering, io};
// \-\-snip\-\-
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
#     println!("The secret number is: {secret_number}");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");
# 
#     println!("You guessed: {guess}");
# 
#     match guess\.cmp(&secret_number) {
#         Ordering::Less => println!("Too small!"),
#         Ordering::Greater => println!("Too big!"),
#         Ordering::Equal => println!("You win!"),
#     }
# }

.EE

.RE
Listing 7\-18: Specifying a nested path to bring multipleitems with the same prefix into scope
.P
In bigger programs, bringing many items into scope from the same crate ormodule using nested paths can reduce the number of separate `\fIuse\fR` statementsneeded by a lot!
.P
We can use a nested path at any level in a path, which is useful when combiningtwo `\fIuse\fR` statements that share a subpath\. For example, Listing 7\-19 shows two`\fIuse\fR` statements: one that brings `\fIstd::io\fR` into scope and one that brings`\fIstd::io::Write\fR` into scope\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::io;
use std::io::Write;

.EE

.RE
Listing 7\-19: Two `\fIuse\fR` statements where one is a subpathof the other
.P
The common part of these two paths is `\fIstd::io\fR`, and that‚Äôs the complete firstpath\. To merge these two paths into one `\fIuse\fR` statement, we can use `\fIself\fR` inthe nested path, as shown in Listing 7\-20\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::io::{self, Write};

.EE

.RE
Listing 7\-20: Combining the paths in Listing 7\-19 intoone `\fIuse\fR` statement
.P
This line brings `\fIstd::io\fR` and `\fIstd::io::Write\fR` into scope\.
.br

.br
\fBThe Glob Operator\fR
.br
===================
.br

.P
If we want to bring \fIall\fR public items defined in a path into scope, we canspecify that path followed by the `\fI*\fR` glob operator:
.RS
.IP \fBrust\fR 2

.br
.EX
use std::collections::*;

.EE

.RE
.P
This `\fIuse\fR` statement brings all public items defined in `\fIstd::collections\fR` intothe current scope\. Be careful when using the glob operator! Glob can make itharder to tell what names are in scope and where a name used in your programwas defined\.
.P
The glob operator is often used when testing to bring everything under testinto the `\fItests\fR` module; we‚Äôll talk about that in the 
.UR ch11\-01\-writing\-tests\.html#how\-to\-write\-tests
.UE
‚ÄúHow to WriteTests‚Äù section in Chapter 11\. The glob operatoris also sometimes used as part of the prelude pattern: see 
.UR \.\./std/prelude/index\.html#other\-preludes
.UE
the standardlibrary documentationfor more information on that pattern\.
.SH "Separating Modules into Different Files"

.br

.br
\fBSeparating Modules into Different Files\fR
.br
=========================================
.br

.P
So far, all the examples in this chapter defined multiple modules in one file\.When modules get large, you might want to move their definitions to a separatefile to make the code easier to navigate\.
.P
For example, let‚Äôs start from the code in Listing 7\-17 that had multiplerestaurant modules\. We‚Äôll extract modules into files instead of having all themodules defined in the crate root file\. In this case, the crate root file is\fIsrc/lib\.rs\fR, but this procedure also works with binary crates whose crate rootfile is \fIsrc/main\.rs\fR\.
.P
First, we‚Äôll extract the `\fIfront_of_house\fR` module to its own file\. Remove thecode inside the curly brackets for the `\fIfront_of_house\fR` module, leaving onlythe `\fImod front_of_house;\fR` declaration, so that \fIsrc/lib\.rs\fR contains the codeshown in Listing 7\-21\. Note that this won‚Äôt compile until we create the\fIsrc/front_of_house\.rs\fR file in Listing 7\-22\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
mod front_of_house;

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-21: Declaring the `\fIfront_of_house\fR` module whosebody will be in \fIsrc/front_of_house\.rs\fR
.P
Next, place the code that was in the curly brackets into a new file named\fIsrc/front_of_house\.rs\fR, as shown in Listing 7\-22\. The compiler knows to lookin this file because it came across the module declaration in the crate rootwith the name `\fIfront_of_house\fR`\.Filename: src/front_of_house\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub mod hosting {
    pub fn add_to_waitlist() {}
}

.EE

.RE
Listing 7\-22: Definitions inside the `\fIfront_of_house\fR`module in \fIsrc/front_of_house\.rs\fR
.P
Note that you only need to load a file using a `\fImod\fR` declaration \fIonce\fR in yourmodule tree\. Once the compiler knows the file is part of the project (and knowswhere in the module tree the code resides because of where you‚Äôve put the `\fImod\fR`statement), other files in your project should refer to the loaded file‚Äôs codeusing a path to where it was declared, as covered in the 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html
.UE
‚ÄúPaths for Referringto an Item in the Module Tree‚Äù section\. In other words,`\fImod\fR` is \fInot\fR an ‚Äúinclude‚Äù operation that you may have seen in otherprogramming languages\.
.P
Next, we‚Äôll extract the `\fIhosting\fR` module to its own file\. The process is a bitdifferent because `\fIhosting\fR` is a child module of `\fIfront_of_house\fR`, not of theroot module\. We‚Äôll place the file for `\fIhosting\fR` in a new directory that will benamed for its ancestors in the module tree, in this case \fIsrc/front_of_house/\fR\.
.P
To start moving `\fIhosting\fR`, we change \fIsrc/front_of_house\.rs\fR to contain only thedeclaration of the `\fIhosting\fR` module:Filename: src/front_of_house\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub mod hosting;

.EE

.RE
.P
Then we create a \fIsrc/front_of_house\fR directory and a file \fIhosting\.rs\fR tocontain the definitions made in the `\fIhosting\fR` module:Filename: src/front_of_house/hosting\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn add_to_waitlist() {}

.EE

.RE
.P
If we instead put \fIhosting\.rs\fR in the \fIsrc\fR directory, the compiler wouldexpect the \fIhosting\.rs\fR code to be in a `\fIhosting\fR` module declared in the crateroot, and not declared as a child of the `\fIfront_of_house\fR` module\. Thecompiler‚Äôs rules for which files to check for which modules‚Äô code means thedirectories and files more closely match the module tree\.
.br

.br
\fBAlternate File Paths\fR
.br
======================
.br

.P
So far we‚Äôve covered the most idiomatic file paths the Rust compiler uses,but Rust also supports an older style of file path\. For a module named`\fIfront_of_house\fR` declared in the crate root, the compiler will look for themodule‚Äôs code in:\fIsrc/front_of_house\.rs\fR (what we covered)\fIsrc/front_of_house/mod\.rs\fR (older style, still supported path)
.P
For a module named `\fIhosting\fR` that is a submodule of `\fIfront_of_house\fR`, thecompiler will look for the module‚Äôs code in:\fIsrc/front_of_house/hosting\.rs\fR (what we covered)\fIsrc/front_of_house/hosting/mod\.rs\fR (older style, still supported path)
.P
If you use both styles for the same module, you‚Äôll get a compiler error\. Usinga mix of both styles for different modules in the same project is allowed, butmight be confusing for people navigating your project\.
.P
The main downside to the style that uses files named \fImod\.rs\fR is that yourproject can end up with many files named \fImod\.rs\fR, which can get confusingwhen you have them open in your editor at the same time\.
.P
We‚Äôve moved each module‚Äôs code to a separate file, and the module tree remainsthe same\. The function calls in `\fIeat_at_restaurant\fR` will work without anymodification, even though the definitions live in different files\. Thistechnique lets you move modules to new files as they grow in size\.
.P
Note that the `\fIpub use crate::front_of_house::hosting\fR` statement in\fIsrc/lib\.rs\fR also hasn‚Äôt changed, nor does `\fIuse\fR` have any impact on what filesare compiled as part of the crate\. The `\fImod\fR` keyword declares modules, and Rustlooks in a file with the same name as the module for the code that goes intothat module\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Rust lets you split a package into multiple crates and a crate into modulesso you can refer to items defined in one module from another module\. You can dothis by specifying absolute or relative paths\. These paths can be brought intoscope with a `\fIuse\fR` statement so you can use a shorter path for multiple uses ofthe item in that scope\. Module code is private by default, but you can makedefinitions public by adding the `\fIpub\fR` keyword\.
.P
In the next chapter, we‚Äôll look at some collection data structures in thestandard library that you can use in your neatly organized code\.
.SH "Common Collections"

.br

.br
\fBCommon Collections\fR
.br
====================
.br

.P
Rust‚Äôs standard library includes a number of very useful data structures called\fIcollections\fR\. Most other data types represent one specific value, butcollections can contain multiple values\. Unlike the built\-in array and tupletypes, the data these collections point to is stored on the heap, which meansthe amount of data does not need to be known at compile time and can grow orshrink as the program runs\. Each kind of collection has different capabilitiesand costs, and choosing an appropriate one for your current situation is askill you‚Äôll develop over time\. In this chapter, we‚Äôll discuss threecollections that are used very often in Rust programs:
.P
A \fIvector\fR allows you to store a variable number of values next to each other\.
.P
A \fIstring\fR is a collection of characters\. We‚Äôve mentioned the `\fIString\fR` typepreviously, but in this chapter we‚Äôll talk about it in depth\.
.P
A \fIhash map\fR allows you to associate a value with a particular key\. It‚Äôs aparticular implementation of the more general data structure called a \fImap\fR\.
.P
To learn about the other kinds of collections provided by the standard library,see 
.UR \.\./std/collections/index\.html
.UE
the documentation\.
.P
We‚Äôll discuss how to create and update vectors, strings, and hash maps, as wellas what makes each special\.
.SH "Storing Lists of Values with Vectors"

.br

.br
\fBStoring Lists of Values with Vectors\fR
.br
======================================
.br

.P
The first collection type we‚Äôll look at is `\fIVec<T>\fR`, also known as a \fIvector\fR\.Vectors allow you to store more than one value in a single data structure thatputs all the values next to each other in memory\. Vectors can only store valuesof the same type\. They are useful when you have a list of items, such as thelines of text in a file or the prices of items in a shopping cart\.
.br

.br
\fBCreating a New Vector\fR
.br
=======================
.br

.P
To create a new empty vector, we call the `\fIVec::new\fR` function, as shown inListing 8\-1\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v: Vec<i32> = Vec::new();
# }

.EE

.RE
Listing 8\-1: Creating a new, empty vector to hold valuesof type `\fIi32\fR`
.P
Note that we added a type annotation here\. Because we aren‚Äôt inserting anyvalues into this vector, Rust doesn‚Äôt know what kind of elements we intend tostore\. This is an important point\. Vectors are implemented using generics;we‚Äôll cover how to use generics with your own types in Chapter 10\. For now,know that the `\fIVec<T>\fR` type provided by the standard library can hold any type\.When we create a vector to hold a specific type, we can specify the type withinangle brackets\. In Listing 8\-1, we‚Äôve told Rust that the `\fIVec<T>\fR` in `\fIv\fR` willhold elements of the `\fIi32\fR` type\.
.P
More often, you‚Äôll create a `\fIVec<T>\fR` with initial values and Rust will inferthe type of value you want to store, so you rarely need to do this typeannotation\. Rust conveniently provides the `\fIvec!\fR` macro, which will create anew vector that holds the values you give it\. Listing 8\-2 creates a new`\fIVec<i32>\fR` that holds the values `\fI1\fR`, `\fI2\fR`, and `\fI3\fR`\. The integer type is `\fIi32\fR`because that‚Äôs the default integer type, as we discussed in the 
.UR ch03\-02\-data\-types\.html#data\-types
.UE
‚ÄúDataTypes‚Äù section of Chapter 3\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v = vec![1, 2, 3];
# }

.EE

.RE
Listing 8\-2: Creating a new vector containingvalues
.P
Because we‚Äôve given initial `\fIi32\fR` values, Rust can infer that the type of `\fIv\fR`is `\fIVec<i32>\fR`, and the type annotation isn‚Äôt necessary\. Next, we‚Äôll look at howto modify a vector\.
.br

.br
\fBUpdating a Vector\fR
.br
===================
.br

.P
To create a vector and then add elements to it, we can use the `\fIpush\fR` method,as shown in Listing 8\-3\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut v = Vec::new();

    v\.push(5);
    v\.push(6);
    v\.push(7);
    v\.push(8);
# }

.EE

.RE
Listing 8\-3: Using the `\fIpush\fR` method to add values to avector
.P
As with any variable, if we want to be able to change its value, we need tomake it mutable using the `\fImut\fR` keyword, as discussed in Chapter 3\. The numberswe place inside are all of type `\fIi32\fR`, and Rust infers this from the data, sowe don‚Äôt need the `\fIVec<i32>\fR` annotation\.
.br

.br
\fBReading Elements of Vectors\fR
.br
=============================
.br

.P
There are two ways to reference a value stored in a vector: via indexing orusing the `\fIget\fR` method\. In the following examples, we‚Äôve annotated the types ofthe values that are returned from these functions for extra clarity\.
.P
Listing 8\-4 shows both methods of accessing a value in a vector, with indexingsyntax and the `\fIget\fR` method\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v = vec![1, 2, 3, 4, 5];

    let third: &i32 = &v[2];
    println!("The third element is {}", third);

    let third: Option<&i32> = v\.get(2);
    match third {
        Some(third) => println!("The third element is {}", third),
        None => println!("There is no third element\."),
    }
# }

.EE

.RE
Listing 8\-4: Using indexing syntax or the `\fIget\fR` method toaccess an item in a vector
.P
Note a few details here\. We use the index value of `\fI2\fR` to get the third elementbecause vectors are indexed by number, starting at zero\. Using `\fI&\fR` and `\fI[]\fR`gives us a reference to the element at the index value\. When we use the `\fIget\fR`method with the index passed as an argument, we get an `\fIOption<&T>\fR` that we canuse with `\fImatch\fR`\.
.P
The reason Rust provides these two ways to reference an element is so you canchoose how the program behaves when you try to use an index value outside therange of existing elements\. As an example, let‚Äôs see what happens when we havea vector of five elements and then we try to access an element at index 100with each technique, as shown in Listing 8\-5\.
.RS
.IP \fBrust,should_panic,panics\fR 2

.br
.EX
# fn main() {
    let v = vec![1, 2, 3, 4, 5];

    let does_not_exist = &v[100];
    let does_not_exist = v\.get(100);
# }

.EE

.RE
Listing 8\-5: Attempting to access the element at index100 in a vector containing five elements
.P
When we run this code, the first `\fI[]\fR` method will cause the program to panicbecause it references a nonexistent element\. This method is best used when youwant your program to crash if there‚Äôs an attempt to access an element past theend of the vector\.
.P
When the `\fIget\fR` method is passed an index that is outside the vector, it returns`\fINone\fR` without panicking\. You would use this method if accessing an elementbeyond the range of the vector may happen occasionally under normalcircumstances\. Your code will then have logic to handle having either`\fISome(&element)\fR` or `\fINone\fR`, as discussed in Chapter 6\. For example, the indexcould be coming from a person entering a number\. If they accidentally enter anumber that‚Äôs too large and the program gets a `\fINone\fR` value, you could tell theuser how many items are in the current vector and give them another chance toenter a valid value\. That would be more user\-friendly than crashing the programdue to a typo!
.P
When the program has a valid reference, the borrow checker enforces theownership and borrowing rules (covered in Chapter 4) to ensure this referenceand any other references to the contents of the vector remain valid\. Recall therule that states you can‚Äôt have mutable and immutable references in the samescope\. That rule applies in Listing 8\-6, where we hold an immutable referenceto the first element in a vector and try to add an element to the end\. Thisprogram won‚Äôt work if we also try to refer to that element later in thefunction:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let mut v = vec![1, 2, 3, 4, 5];

    let first = &v[0];

    v\.push(6);

    println!("The first element is: {}", first);
# }

.EE

.RE
Listing 8\-6: Attempting to add an element to a vectorwhile holding a reference to an item
.P
Compiling this code will result in this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling collections v0\.1\.0 (file:///projects/collections)
error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable
 \-\-> src/main\.rs:6:5
  |
4 |     let first = &v[0];
  |                  \- immutable borrow occurs here
5 | 
6 |     v\.push(6);
  |     ^^^^^^^^^ mutable borrow occurs here
7 | 
8 |     println!("The first element is: {}", first);
  |                                          \-\-\-\-\- immutable borrow later used here

For more information about this error, try `rustc \-\-explain E0502`\.
error: could not compile `collections` due to previous error

.EE

.RE
.P
The code in Listing 8\-6 might look like it should work: why should a referenceto the first element care about changes at the end of the vector? This error isdue to the way vectors work: because vectors put the values next to each otherin memory, adding a new element onto the end of the vector might requireallocating new memory and copying the old elements to the new space, if thereisn‚Äôt enough room to put all the elements next to each other where the vectoris currently stored\. In that case, the reference to the first element would bepointing to deallocated memory\. The borrowing rules prevent programs fromending up in that situation\.
.P
Note: For more on the implementation details of the `\fIVec<T>\fR` type, see 
.UR \.\./nomicon/vec/vec\.html
.UE
‚ÄúTheRustonomicon‚Äù\.
.br

.br
\fBIterating over the Values in a Vector\fR
.br
=======================================
.br

.P
To access each element in a vector in turn, we would iterate through all of theelements rather than use indices to access one at a time\. Listing 8\-7 shows howto use a `\fIfor\fR` loop to get immutable references to each element in a vector of`\fIi32\fR` values and print them\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v = vec![100, 32, 57];
    for i in &v {
        println!("{}", i);
    }
# }

.EE

.RE
Listing 8\-7: Printing each element in a vector byiterating over the elements using a `\fIfor\fR` loop
.P
We can also iterate over mutable references to each element in a mutable vectorin order to make changes to all the elements\. The `\fIfor\fR` loop in Listing 8\-8will add `\fI50\fR` to each element\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut v = vec![100, 32, 57];
    for i in &mut v {
        *i += 50;
    }
# }

.EE

.RE
Listing 8\-8: Iterating over mutable references toelements in a vector
.P
To change the value that the mutable reference refers to, we have to use the`\fI*\fR` dereference operator to get to the value in `\fIi\fR` before we can use the `\fI+=\fR`operator\. We‚Äôll talk more about the dereference operator in the 
.UR ch15\-02\-deref\.html#following\-the\-pointer\-to\-the\-value\-with\-the\-dereference\-operator
.UE
‚ÄúFollowing thePointer to the Value with the Dereference Operator‚Äùsection of Chapter 15\.
.P
Iterating over a vector, whether immutably or mutably, is safe because of theborrow checker's rules\. If we attempted to insert or remove items in the `\fIfor\fR`loop bodies in Listing 8\-7 and Listing 8\-8, we would get a compiler errorsimilar to the one we got with the code in Listing 8\-6\. The reference to thevector that the `\fIfor\fR` loop holds prevents simultaneous modification of thewhole vector\.
.br

.br
\fBUsing an Enum to Store Multiple Types\fR
.br
=======================================
.br

.P
Vectors can only store values that are the same type\. This can be inconvenient;there are definitely use cases for needing to store a list of items ofdifferent types\. Fortunately, the variants of an enum are defined under thesame enum type, so when we need one type to represent elements of differenttypes, we can define and use an enum!
.P
For example, say we want to get values from a row in a spreadsheet in whichsome of the columns in the row contain integers, some floating\-point numbers,and some strings\. We can define an enum whose variants will hold the differentvalue types, and all the enum variants will be considered the same type: thatof the enum\. Then we can create a vector to hold that enum and so, ultimately,holds different types\. We‚Äôve demonstrated this in Listing 8\-9\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum SpreadsheetCell {
        Int(i32),
        Float(f64),
        Text(String),
    }

    let row = vec![
        SpreadsheetCell::Int(3),
        SpreadsheetCell::Text(String::from("blue")),
        SpreadsheetCell::Float(10\.12),
    ];
# }

.EE

.RE
Listing 8\-9: Defining an `\fIenum\fR` to store values ofdifferent types in one vector
.P
Rust needs to know what types will be in the vector at compile time so it knowsexactly how much memory on the heap will be needed to store each element\. Wemust also be explicit about what types are allowed in this vector\. If Rustallowed a vector to hold any type, there would be a chance that one or more ofthe types would cause errors with the operations performed on the elements ofthe vector\. Using an enum plus a `\fImatch\fR` expression means that Rust will ensureat compile time that every possible case is handled, as discussed in Chapter 6\.
.P
If you don‚Äôt know the exhaustive set of types a program will get at runtime tostore in a vector, the enum technique won‚Äôt work\. Instead, you can use a traitobject, which we‚Äôll cover in Chapter 17\.
.P
Now that we‚Äôve discussed some of the most common ways to use vectors, be sureto review 
.UR \.\./std/vec/struct\.Vec\.html
.UE
the API documentation for all the manyuseful methods defined on `\fIVec<T>\fR` by the standard library\. For example, inaddition to `\fIpush\fR`, a `\fIpop\fR` method removes and returns the last element\.
.br

.br
\fBDropping a Vector Drops Its Elements\fR
.br
======================================
.br

.P
Like any other `\fIstruct\fR`, a vector is freed when it goes out of scope, asannotated in Listing 8\-10\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    {
        let v = vec![1, 2, 3, 4];

        // do stuff with v
    } // <\- v goes out of scope and is freed here
# }

.EE

.RE
Listing 8\-10: Showing where the vector and its elementsare dropped
.P
When the vector gets dropped, all of its contents are also dropped, meaning theintegers it holds will be cleaned up\. The borrow checker ensures that anyreferences to contents of a vector are only used while the vector itself isvalid\.
.P
Let‚Äôs move on to the next collection type: `\fIString\fR`!
.SH "Storing UTF\-8 Encoded Text with Strings"

.br

.br
\fBStoring UTF\-8 Encoded Text with Strings\fR
.br
=========================================
.br

.P
We talked about strings in Chapter 4, but we‚Äôll look at them in more depth now\.New Rustaceans commonly get stuck on strings for a combination of threereasons: Rust‚Äôs propensity for exposing possible errors, strings being a morecomplicated data structure than many programmers give them credit for, andUTF\-8\. These factors combine in a way that can seem difficult when you‚Äôrecoming from other programming languages\.
.P
We discuss strings in the context of collections because strings areimplemented as a collection of bytes, plus some methods to provide usefulfunctionality when those bytes are interpreted as text\. In this section, we‚Äôlltalk about the operations on `\fIString\fR` that every collection type has, such ascreating, updating, and reading\. We‚Äôll also discuss the ways in which `\fIString\fR`is different from the other collections, namely how indexing into a `\fIString\fR` iscomplicated by the differences between how people and computers interpret`\fIString\fR` data\.
.br

.br
\fBWhat Is a String?\fR
.br
===================
.br

.P
We‚Äôll first define what we mean by the term \fIstring\fR\. Rust has only one stringtype in the core language, which is the string slice `\fIstr\fR` that is usually seenin its borrowed form `\fI&str\fR`\. In Chapter 4, we talked about \fIstring slices\fR,which are references to some UTF\-8 encoded string data stored elsewhere\. Stringliterals, for example, are stored in the program‚Äôs binary and are thereforestring slices\.
.P
The `\fIString\fR` type, which is provided by Rust‚Äôs standard library rather thancoded into the core language, is a growable, mutable, owned, UTF\-8 encodedstring type\. When Rustaceans refer to ‚Äústrings‚Äù in Rust, they might bereferring to either the `\fIString\fR` or the string slice `\fI&str\fR` types, not just oneof those types\. Although this section is largely about `\fIString\fR`, both types areused heavily in Rust‚Äôs standard library, and both `\fIString\fR` and string slicesare UTF\-8 encoded\.
.br

.br
\fBCreating a New String\fR
.br
=======================
.br

.P
Many of the same operations available with `\fIVec<T>\fR` are available with `\fIString\fR`as well, because `\fIString\fR` is actually implemented as a wrapper around a vectorof bytes with some extra guarantees, restrictions, and capabilities\. An exampleof a function that works the same way with `\fIVec<T>\fR` and `\fIString\fR` is the `\fInew\fR`function to create an instance, shown in Listing 8\-11\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::new();
# }

.EE

.RE
Listing 8\-11: Creating a new, empty `\fIString\fR`
.P
This line creates a new empty string called `\fIs\fR`, which we can then load datainto\. Often, we‚Äôll have some initial data that we want to start the stringwith\. For that, we use the `\fIto_string\fR` method, which is available on any typethat implements the `\fIDisplay\fR` trait, as string literals do\. Listing 8\-12 showstwo examples\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let data = "initial contents";

    let s = data\.to_string();

    // the method also works on a literal directly:
    let s = "initial contents"\.to_string();
# }

.EE

.RE
Listing 8\-12: Using the `\fIto_string\fR` method to create a`\fIString\fR` from a string literal
.P
This code creates a string containing `\fIinitial contents\fR`\.
.P
We can also use the function `\fIString::from\fR` to create a `\fIString\fR` from a stringliteral\. The code in Listing 8\-13 is equivalent to the code from Listing 8\-12that uses `\fIto_string\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s = String::from("initial contents");
# }

.EE

.RE
Listing 8\-13: Using the `\fIString::from\fR` function to createa `\fIString\fR` from a string literal
.P
Because strings are used for so many things, we can use many different genericAPIs for strings, providing us with a lot of options\. Some of them can seemredundant, but they all have their place! In this case, `\fIString::from\fR` and`\fIto_string\fR` do the same thing, so which you choose is a matter of style andreadability\.
.P
Remember that strings are UTF\-8 encoded, so we can include any properly encodeddata in them, as shown in Listing 8\-14\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let hello = String::from("ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ");
    let hello = String::from("Dobr√Ω den");
    let hello = String::from("Hello");
    let hello = String::from("◊©÷∏◊Å◊ú◊ï÷π◊ù");
    let hello = String::from("‡§®‡§Æ‡§∏‡•ç‡§§‡•á");
    let hello = String::from("„Åì„Çì„Å´„Å°„ÅØ");
    let hello = String::from("ÏïàÎÖïÌïòÏÑ∏Ïöî");
    let hello = String::from("‰Ω†Â•Ω");
    let hello = String::from("Ol√°");
    let hello = String::from("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ");
    let hello = String::from("Hola");
# }

.EE

.RE
Listing 8\-14: Storing greetings in different languages instrings
.P
All of these are valid `\fIString\fR` values\.
.br

.br
\fBUpdating a String\fR
.br
===================
.br

.P
A `\fIString\fR` can grow in size and its contents can change, just like the contentsof a `\fIVec<T>\fR`, if you push more data into it\. In addition, you can convenientlyuse the `\fI+\fR` operator or the `\fIformat!\fR` macro to concatenate `\fIString\fR` values\.
.br

.br
\fBAppending to a String with \fR
.br
=============================
.br
`\fIpush_str\fR` and `\fIpush\fR`
.P
We can grow a `\fIString\fR` by using the `\fIpush_str\fR` method to append a string slice,as shown in Listing 8\-15\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("foo");
    s\.push_str("bar");
# }

.EE

.RE
Listing 8\-15: Appending a string slice to a `\fIString\fR`using the `\fIpush_str\fR` method
.P
After these two lines, `\fIs\fR` will contain `\fIfoobar\fR`\. The `\fIpush_str\fR` method takes astring slice because we don‚Äôt necessarily want to take ownership of theparameter\. For example, in the code in Listing 8\-16, we want to be able to use`\fIs2\fR` after appending its contents to `\fIs1\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s1 = String::from("foo");
    let s2 = "bar";
    s1\.push_str(s2);
    println!("s2 is {}", s2);
# }

.EE

.RE
Listing 8\-16: Using a string slice after appending itscontents to a `\fIString\fR`
.P
If the `\fIpush_str\fR` method took ownership of `\fIs2\fR`, we wouldn‚Äôt be able to printits value on the last line\. However, this code works as we‚Äôd expect!
.P
The `\fIpush\fR` method takes a single character as a parameter and adds it to the`\fIString\fR`\. Listing 8\-17 adds the letter ‚Äúl‚Äù to a `\fIString\fR` using the `\fIpush\fR`method\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("lo");
    s\.push('l');
# }

.EE

.RE
Listing 8\-17: Adding one character to a `\fIString\fR` valueusing `\fIpush\fR`
.P
As a result, `\fIs\fR` will contain `\fIlol\fR`\.
.br

.br
\fBConcatenation with the \fR
.br
=========================
.br
`\fI+\fR` Operator or the `\fIformat!\fR` Macro
.P
Often, you‚Äôll want to combine two existing strings\. One way to do so is to usethe `\fI+\fR` operator, as shown in Listing 8\-18\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used
# }

.EE

.RE
Listing 8\-18: Using the `\fI+\fR` operator to combine two`\fIString\fR` values into a new `\fIString\fR` value
.P
The string `\fIs3\fR` will contain `\fIHello, world!\fR`\. The reason `\fIs1\fR` is no longervalid after the addition, and the reason we used a reference to `\fIs2\fR`, has to dowith the signature of the method that‚Äôs called when we use the `\fI+\fR` operator\.The `\fI+\fR` operator uses the `\fIadd\fR` method, whose signature looks something likethis:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn add(self, s: &str) \-> String {

.EE

.RE
.P
In the standard library, you'll see `\fIadd\fR` defined using generics and associatedtypes\. Here, we‚Äôve substituted in concrete types, which is what happens when wecall this method with `\fIString\fR` values\. We‚Äôll discuss generics in Chapter 10\.This signature gives us the clues we need to understand the tricky bits of the`\fI+\fR` operator\.
.P
First, `\fIs2\fR` has an `\fI&\fR`, meaning that we‚Äôre adding a \fIreference\fR of the secondstring to the first string\. This is because of the `\fIs\fR` parameter in the `\fIadd\fR`function: we can only add a `\fI&str\fR` to a `\fIString\fR`; we can‚Äôt add two `\fIString\fR`values together\. But wait‚Äîthe type of `\fI&s2\fR` is `\fI&String\fR`, not `\fI&str\fR`, asspecified in the second parameter to `\fIadd\fR`\. So why does Listing 8\-18 compile?
.P
The reason we‚Äôre able to use `\fI&s2\fR` in the call to `\fIadd\fR` is that the compilercan \fIcoerce\fR the `\fI&String\fR` argument into a `\fI&str\fR`\. When we call the `\fIadd\fR`method, Rust uses a \fIderef coercion\fR, which here turns `\fI&s2\fR` into `\fI&s2[\.\.]\fR`\.We‚Äôll discuss deref coercion in more depth in Chapter 15\. Because `\fIadd\fR` doesnot take ownership of the `\fIs\fR` parameter, `\fIs2\fR` will still be a valid `\fIString\fR`after this operation\.
.P
Second, we can see in the signature that `\fIadd\fR` takes ownership of `\fIself\fR`,because `\fIself\fR` does \fInot\fR have an `\fI&\fR`\. This means `\fIs1\fR` in Listing 8\-18 will bemoved into the `\fIadd\fR` call and will no longer be valid after that\. So although`\fIlet s3 = s1 + &s2;\fR` looks like it will copy both strings and create a new one,this statement actually takes ownership of `\fIs1\fR`, appends a copy of the contentsof `\fIs2\fR`, and then returns ownership of the result\. In other words, it lookslike it‚Äôs making a lot of copies but isn‚Äôt; the implementation is moreefficient than copying\.
.P
If we need to concatenate multiple strings, the behavior of the `\fI+\fR` operatorgets unwieldy:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = s1 + "\-" + &s2 + "\-" + &s3;
# }

.EE

.RE
.P
At this point, `\fIs\fR` will be `\fItic\-tac\-toe\fR`\. With all of the `\fI+\fR` and `\fI"\fR`characters, it‚Äôs difficult to see what‚Äôs going on\. For more complicated stringcombining, we can instead use the `\fIformat!\fR` macro:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = format!("{}\-{}\-{}", s1, s2, s3);
# }

.EE

.RE
.P
This code also sets `\fIs\fR` to `\fItic\-tac\-toe\fR`\. The `\fIformat!\fR` macro works like`\fIprintln!\fR`, but instead of printing the output to the screen, it returns a`\fIString\fR` with the contents\. The version of the code using `\fIformat!\fR` is mucheasier to read, and the code generated by the `\fIformat!\fR` macro uses referencesso that this call doesn‚Äôt take ownership of any of its parameters\.
.br

.br
\fBIndexing into Strings\fR
.br
=======================
.br

.P
In many other programming languages, accessing individual characters in astring by referencing them by index is a valid and common operation\. However,if you try to access parts of a `\fIString\fR` using indexing syntax in Rust, you‚Äôllget an error\. Consider the invalid code in Listing 8\-19\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");
    let h = s1[0];
# }

.EE

.RE
Listing 8\-19: Attempting to use indexing syntax with aString
.P
This code will result in the following error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling collections v0\.1\.0 (file:///projects/collections)
error[E0277]: the type `String` cannot be indexed by `{integer}`
 \-\-> src/main\.rs:3:13
  |
3 |     let h = s1[0];
  |             ^^^^^ `String` cannot be indexed by `{integer}`
  |
  = help: the trait `Index<{integer}>` is not implemented for `String`
  = help: the following other types implement trait `Index<Idx>`:
            <String as Index<RangeFrom<usize>>>
            <String as Index<RangeFull>>
            <String as Index<RangeInclusive<usize>>>
            <String as Index<RangeTo<usize>>>
            <String as Index<RangeToInclusive<usize>>>
            <String as Index<std::ops::Range<usize>>>
            <str as Index<I>>

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `collections` due to previous error

.EE

.RE
.P
The error and the note tell the story: Rust strings don‚Äôt support indexing\. Butwhy not? To answer that question, we need to discuss how Rust stores strings inmemory\.
.br

.br
\fBInternal Representation\fR
.br
=========================
.br

.P
A `\fIString\fR` is a wrapper over a `\fIVec<u8>\fR`\. Let‚Äôs look at some of our properlyencoded UTF\-8 example strings from Listing 8\-14\. First, this one:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let hello = String::from("ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ");
#     let hello = String::from("Dobr√Ω den");
#     let hello = String::from("Hello");
#     let hello = String::from("◊©÷∏◊Å◊ú◊ï÷π◊ù");
#     let hello = String::from("‡§®‡§Æ‡§∏‡•ç‡§§‡•á");
#     let hello = String::from("„Åì„Çì„Å´„Å°„ÅØ");
#     let hello = String::from("ÏïàÎÖïÌïòÏÑ∏Ïöî");
#     let hello = String::from("‰Ω†Â•Ω");
#     let hello = String::from("Ol√°");
#     let hello = String::from("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ");
    let hello = String::from("Hola");
# }

.EE

.RE
.P
In this case, `\fIlen\fR` will be 4, which means the vector storing the string ‚ÄúHola‚Äùis 4 bytes long\. Each of these letters takes 1 byte when encoded in UTF\-8\. Thefollowing line, however, may surprise you\. (Note that this string begins withthe capital Cyrillic letter Ze, not the Arabic number 3\.)
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let hello = String::from("ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ");
#     let hello = String::from("Dobr√Ω den");
#     let hello = String::from("Hello");
#     let hello = String::from("◊©÷∏◊Å◊ú◊ï÷π◊ù");
#     let hello = String::from("‡§®‡§Æ‡§∏‡•ç‡§§‡•á");
#     let hello = String::from("„Åì„Çì„Å´„Å°„ÅØ");
#     let hello = String::from("ÏïàÎÖïÌïòÏÑ∏Ïöî");
#     let hello = String::from("‰Ω†Â•Ω");
#     let hello = String::from("Ol√°");
    let hello = String::from("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ");
#     let hello = String::from("Hola");
# }

.EE

.RE
.P
Asked how long the string is, you might say 12\. In fact, Rust‚Äôs answer is 24:that‚Äôs the number of bytes it takes to encode ‚Äú–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ‚Äù in UTF\-8, becauseeach Unicode scalar value in that string takes 2 bytes of storage\. Therefore,an index into the string‚Äôs bytes will not always correlate to a valid Unicodescalar value\. To demonstrate, consider this invalid Rust code:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
let hello = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ";
let answer = &hello[0];

.EE

.RE
.P
You already know that `\fIanswer\fR` will not be `\fI–ó\fR`, the first letter\. When encodedin UTF\-8, the first byte of `\fI–ó\fR` is `\fI208\fR` and the second is `\fI151\fR`, so it wouldseem that `\fIanswer\fR` should in fact be `\fI208\fR`, but `\fI208\fR` is not a valid characteron its own\. Returning `\fI208\fR` is likely not what a user would want if they askedfor the first letter of this string; however, that‚Äôs the only data that Rusthas at byte index 0\. Users generally don‚Äôt want the byte value returned, evenif the string contains only Latin letters: if `\fI&"hello"[0]\fR` were valid codethat returned the byte value, it would return `\fI104\fR`, not `\fIh\fR`\.
.P
The answer, then, is that to avoid returning an unexpected value and causingbugs that might not be discovered immediately, Rust doesn‚Äôt compile this codeat all and prevents misunderstandings early in the development process\.
.br

.br
\fBBytes and Scalar Values and Grapheme Clusters! Oh My!\fR
.br
=======================================================
.br

.P
Another point about UTF\-8 is that there are actually three relevant ways tolook at strings from Rust‚Äôs perspective: as bytes, scalar values, and graphemeclusters (the closest thing to what we would call \fIletters\fR)\.
.P
If we look at the Hindi word ‚Äú‡§®‡§Æ‡§∏‡•ç‡§§‡•á‚Äù written in the Devanagari script, it isstored as a vector of `\fIu8\fR` values that looks like this:
.RS
.IP \fBtext\fR 2

.br
.EX
[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,
224, 165, 135]

.EE

.RE
.P
That‚Äôs 18 bytes and is how computers ultimately store this data\. If we look atthem as Unicode scalar values, which are what Rust‚Äôs `\fIchar\fR` type is, thosebytes look like this:
.RS
.IP \fBtext\fR 2

.br
.EX
['‡§®', '‡§Æ', '‡§∏', '‡•ç', '‡§§', '‡•á']

.EE

.RE
.P
There are six `\fIchar\fR` values here, but the fourth and sixth are not letters:they‚Äôre diacritics that don‚Äôt make sense on their own\. Finally, if we look atthem as grapheme clusters, we‚Äôd get what a person would call the four lettersthat make up the Hindi word:
.RS
.IP \fBtext\fR 2

.br
.EX
["‡§®", "‡§Æ", "‡§∏‡•ç", "‡§§‡•á"]

.EE

.RE
.P
Rust provides different ways of interpreting the raw string data that computersstore so that each program can choose the interpretation it needs, no matterwhat human language the data is in\.
.P
A final reason Rust doesn‚Äôt allow us to index into a `\fIString\fR` to get acharacter is that indexing operations are expected to always take constant time(O(1))\. But it isn‚Äôt possible to guarantee that performance with a `\fIString\fR`,because Rust would have to walk through the contents from the beginning to theindex to determine how many valid characters there were\.
.br

.br
\fBSlicing Strings\fR
.br
=================
.br

.P
Indexing into a string is often a bad idea because it‚Äôs not clear what thereturn type of the string\-indexing operation should be: a byte value, acharacter, a grapheme cluster, or a string slice\. If you really need to useindices to create string slices, therefore, Rust asks you to be more specific\.
.P
Rather than indexing using `\fI[]\fR` with a single number, you can use `\fI[]\fR` with arange to create a string slice containing particular bytes:
.RS
.IP \fBrust\fR 2

.br
.EX
let hello = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ";

let s = &hello[0\.\.4];

.EE

.RE
.P
Here, `\fIs\fR` will be a `\fI&str\fR` that contains the first 4 bytes of the string\.Earlier, we mentioned that each of these characters was 2 bytes, which means`\fIs\fR` will be `\fI–ó–¥\fR`\.
.P
If we were to try to slice only part of a character‚Äôs bytes with something like`\fI&hello[0\.\.1]\fR`, Rust would panic at runtime in the same way as if an invalidindex were accessed in a vector:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling collections v0\.1\.0 (file:///projects/collections)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.43s
     Running `target/debug/collections`
thread 'main' panicked at 'byte index 1 is not a char boundary; it is inside '–ó' (bytes 0\.\.2) of `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ`', library/core/src/str/mod\.rs:127:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
You should use ranges to create string slices with caution, because doing socan crash your program\.
.br

.br
\fBMethods for Iterating Over Strings\fR
.br
====================================
.br

.P
The best way to operate on pieces of strings is to be explicit about whetheryou want characters or bytes\. For individual Unicode scalar values, use the`\fIchars\fR` method\. Calling `\fIchars\fR` on ‚Äú–ó–¥‚Äù separates out and returns two valuesof type `\fIchar\fR`, and you can iterate over the result to access each element:
.RS
.IP \fBrust\fR 2

.br
.EX
for c in "–ó–¥"\.chars() {
    println!("{}", c);
}

.EE

.RE
.P
This code will print the following:
.RS
.IP \fBtext\fR 2

.br
.EX
–ó
–¥

.EE

.RE
.P
Alternatively, the `\fIbytes\fR` method returns each raw byte, which might beappropriate for your domain:
.RS
.IP \fBrust\fR 2

.br
.EX
for b in "–ó–¥"\.bytes() {
    println!("{}", b);
}

.EE

.RE
.P
This code will print the four bytes that make up this string:
.RS
.IP \fBtext\fR 2

.br
.EX
208
151
208
180

.EE

.RE
.P
But be sure to remember that valid Unicode scalar values may be made up of morethan 1 byte\.
.P
Getting grapheme clusters from strings as with the Devanagari script iscomplex, so this functionality is not provided by the standard library\. Cratesare available on 
.UR https://crates\.io/
.UE
crates\.io if this is thefunctionality you need\.
.br

.br
\fBStrings Are Not So Simple\fR
.br
===========================
.br

.P
To summarize, strings are complicated\. Different programming languages makedifferent choices about how to present this complexity to the programmer\. Rusthas chosen to make the correct handling of `\fIString\fR` data the default behaviorfor all Rust programs, which means programmers have to put more thought intohandling UTF\-8 data upfront\. This trade\-off exposes more of the complexity ofstrings than is apparent in other programming languages, but it prevents youfrom having to handle errors involving non\-ASCII characters later in yourdevelopment life cycle\.
.P
The good news is that the standard library offers a lot of functionality builtoff the `\fIString\fR` and `\fI&str\fR` types to help handle these complex situationscorrectly\. Be sure to check out the documentation for useful methods like`\fIcontains\fR` for searching in a string and `\fIreplace\fR` for substituting parts of astring with another string\.
.P
Let‚Äôs switch to something a bit less complex: hash maps!
.SH "Storing Keys with Associated Values in Hash Maps"

.br

.br
\fBStoring Keys with Associated Values in Hash Maps\fR
.br
==================================================
.br

.P
The last of our common collections is the \fIhash map\fR\. The type `\fIHashMap<K, V>\fR`stores a mapping of keys of type `\fIK\fR` to values of type `\fIV\fR` using a\fIhashing function\fR, which determines how it places these keys and values intomemory\. Many programming languages support this kind of data structure, butthey often use a different name, such as hash, map, object, hash table,dictionary, or associative array, just to name a few\.
.P
Hash maps are useful when you want to look up data not by using an index, asyou can with vectors, but by using a key that can be of any type\. For example,in a game, you could keep track of each team‚Äôs score in a hash map in whicheach key is a team‚Äôs name and the values are each team‚Äôs score\. Given a teamname, you can retrieve its score\.
.P
We‚Äôll go over the basic API of hash maps in this section, but many more goodiesare hiding in the functions defined on `\fIHashMap<K, V>\fR` by the standard library\.As always, check the standard library documentation for more information\.
.br

.br
\fBCreating a New Hash Map\fR
.br
=========================
.br

.P
One way to create an empty hash map is using `\fInew\fR` and adding elements with`\fIinsert\fR`\. In Listing 8\-20, we‚Äôre keeping track of the scores of two teams whosenames are \fIBlue\fR and \fIYellow\fR\. The Blue team starts with 10 points, and theYellow team starts with 50\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores\.insert(String::from("Blue"), 10);
    scores\.insert(String::from("Yellow"), 50);
# }

.EE

.RE
Listing 8\-20: Creating a new hash map and inserting somekeys and values
.P
Note that we need to first `\fIuse\fR` the `\fIHashMap\fR` from the collections portion ofthe standard library\. Of our three common collections, this one is the leastoften used, so it‚Äôs not included in the features brought into scopeautomatically in the prelude\. Hash maps also have less support from thestandard library; there‚Äôs no built\-in macro to construct them, for example\.
.P
Just like vectors, hash maps store their data on the heap\. This `\fIHashMap\fR` haskeys of type `\fIString\fR` and values of type `\fIi32\fR`\. Like vectors, hash maps arehomogeneous: all of the keys must have the same type as each other, and all ofthe values must have the same type\.
.br

.br
\fBAccessing Values in a Hash Map\fR
.br
================================
.br

.P
We can get a value out of the hash map by providing its key to the `\fIget\fR`method, as shown in Listing 8\-21\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores\.insert(String::from("Blue"), 10);
    scores\.insert(String::from("Yellow"), 50);

    let team_name = String::from("Blue");
    let score = scores\.get(&team_name)\.copied()\.unwrap_or(0);
# }

.EE

.RE
Listing 8\-21: Accessing the score for the Blue teamstored in the hash map
.P
Here, `\fIscore\fR` will have the value that‚Äôs associated with the Blue team, and theresult will be `\fI10\fR`\. The `\fIget\fR` method returns an `\fIOption<&V>\fR`; if there‚Äôs novalue for that key in the hash map, `\fIget\fR` will return `\fINone\fR`\. This programhandles the `\fIOption\fR` by calling `\fIcopied\fR` to get an `\fIOption<i32>\fR` rather than an`\fIOption<&i32>\fR`, then `\fIunwrap_or\fR` to set `\fIscore\fR` to zero if `\fIscores\fR` doesn'thave an entry for the key\.
.P
We can iterate over each key/value pair in a hash map in a similar manner as wedo with vectors, using a `\fIfor\fR` loop:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores\.insert(String::from("Blue"), 10);
    scores\.insert(String::from("Yellow"), 50);

    for (key, value) in &scores {
        println!("{}: {}", key, value);
    }
# }

.EE

.RE
.P
This code will print each pair in an arbitrary order:
.RS
.IP \fBtext\fR 2

.br
.EX
Yellow: 50
Blue: 10

.EE

.RE

.br

.br
\fBHash Maps and Ownership\fR
.br
=========================
.br

.P
For types that implement the `\fICopy\fR` trait, like `\fIi32\fR`, the values are copiedinto the hash map\. For owned values like `\fIString\fR`, the values will be moved andthe hash map will be the owner of those values, as demonstrated in Listing 8\-22\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let field_name = String::from("Favorite color");
    let field_value = String::from("Blue");

    let mut map = HashMap::new();
    map\.insert(field_name, field_value);
    // field_name and field_value are invalid at this point, try using them and
    // see what compiler error you get!
# }

.EE

.RE
Listing 8\-22: Showing that keys and values are owned bythe hash map once they‚Äôre inserted
.P
We aren‚Äôt able to use the variables `\fIfield_name\fR` and `\fIfield_value\fR` afterthey‚Äôve been moved into the hash map with the call to `\fIinsert\fR`\.
.P
If we insert references to values into the hash map, the values won‚Äôt be movedinto the hash map\. The values that the references point to must be valid for atleast as long as the hash map is valid\. We‚Äôll talk more about these issues inthe 
.UR ch10\-03\-lifetime\-syntax\.html#validating\-references\-with\-lifetimes
.UE
‚ÄúValidating References withLifetimes‚Äù section inChapter 10\.
.br

.br
\fBUpdating a Hash Map\fR
.br
=====================
.br

.P
Although the number of key and value pairs is growable, each unique key canonly have one value associated with it at a time (but not vice versa: forexample, both the Blue team and the Yellow team could have value 10 stored inthe `\fIscores\fR` hash map)\.
.P
When you want to change the data in a hash map, you have to decide how tohandle the case when a key already has a value assigned\. You could replace theold value with the new value, completely disregarding the old value\. You couldkeep the old value and ignore the new value, only adding the new value if thekey \fIdoesn‚Äôt\fR already have a value\. Or you could combine the old value and thenew value\. Let‚Äôs look at how to do each of these!
.br

.br
\fBOverwriting a Value\fR
.br
=====================
.br

.P
If we insert a key and a value into a hash map and then insert that same keywith a different value, the value associated with that key will be replaced\.Even though the code in Listing 8\-23 calls `\fIinsert\fR` twice, the hash map willonly contain one key/value pair because we‚Äôre inserting the value for the Blueteam‚Äôs key both times\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores\.insert(String::from("Blue"), 10);
    scores\.insert(String::from("Blue"), 25);

    println!("{:?}", scores);
# }

.EE

.RE
Listing 8\-23: Replacing a value stored with a particularkey
.P
This code will print `\fI{"Blue": 25}\fR`\. The original value of `\fI10\fR` has beenoverwritten\.
.br

.br
\fBAdding a Key and Value Only If a Key Isn‚Äôt Present\fR
.br
======================================================
.br

.P
It‚Äôs common to check whether a particular key already exists in the hash mapwith a value then take the following actions: if the key does exist in the hashmap, the existing value should remain the way it is\. If the key doesn‚Äôt exist,insert it and a value for it\.
.P
Hash maps have a special API for this called `\fIentry\fR` that takes the key youwant to check as a parameter\. The return value of the `\fIentry\fR` method is an enumcalled `\fIEntry\fR` that represents a value that might or might not exist\. Let‚Äôs saywe want to check whether the key for the Yellow team has a value associatedwith it\. If it doesn‚Äôt, we want to insert the value 50, and the same for theBlue team\. Using the `\fIentry\fR` API, the code looks like Listing 8\-24\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();
    scores\.insert(String::from("Blue"), 10);

    scores\.entry(String::from("Yellow"))\.or_insert(50);
    scores\.entry(String::from("Blue"))\.or_insert(50);

    println!("{:?}", scores);
# }

.EE

.RE
Listing 8\-24: Using the `\fIentry\fR` method to only insert ifthe key does not already have a value
.P
The `\fIor_insert\fR` method on `\fIEntry\fR` is defined to return a mutable reference tothe value for the corresponding `\fIEntry\fR` key if that key exists, and if not,inserts the parameter as the new value for this key and returns a mutablereference to the new value\. This technique is much cleaner than writing thelogic ourselves and, in addition, plays more nicely with the borrow checker\.
.P
Running the code in Listing 8\-24 will print `\fI{"Yellow": 50, "Blue": 10}\fR`\. Thefirst call to `\fIentry\fR` will insert the key for the Yellow team with the value50 because the Yellow team doesn‚Äôt have a value already\. The second call to`\fIentry\fR` will not change the hash map because the Blue team already has thevalue 10\.
.br

.br
\fBUpdating a Value Based on the Old Value\fR
.br
=========================================
.br

.P
Another common use case for hash maps is to look up a key‚Äôs value and thenupdate it based on the old value\. For instance, Listing 8\-25 shows code thatcounts how many times each word appears in some text\. We use a hash map withthe words as keys and increment the value to keep track of how many times we‚Äôveseen that word\. If it‚Äôs the first time we‚Äôve seen a word, we‚Äôll first insertthe value 0\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let text = "hello world wonderful world";

    let mut map = HashMap::new();

    for word in text\.split_whitespace() {
        let count = map\.entry(word)\.or_insert(0);
        *count += 1;
    }

    println!("{:?}", map);
# }

.EE

.RE
Listing 8\-25: Counting occurrences of words using a hashmap that stores words and counts
.P
This code will print `\fI{"world": 2, "hello": 1, "wonderful": 1}\fR`\. You might seethe same key/value pairs printed in a different order: recall from the
.UR #accessing\-values\-in\-a\-hash\-map
.UE
‚ÄúAccessing Values in a Hash Map‚Äù section thatiterating over a hash map happens in an arbitrary order\.
.P
The `\fIsplit_whitespace\fR` method returns an iterator over sub\-slices, separated bywhitespace, of the value in `\fItext\fR`\. The `\fIor_insert\fR` method returns a mutablereference (`\fI&mut V\fR`) to the value for the specified key\. Here we store thatmutable reference in the `\fIcount\fR` variable, so in order to assign to that value,we must first dereference `\fIcount\fR` using the asterisk (`\fI*\fR`)\. The mutablereference goes out of scope at the end of the `\fIfor\fR` loop, so all of thesechanges are safe and allowed by the borrowing rules\.
.br

.br
\fBHashing Functions\fR
.br
===================
.br

.P
By default, `\fIHashMap\fR` uses a hashing function called \fISipHash\fR that can provideresistance to Denial of Service (DoS) attacks involving hashtables
.UR [https://en\.wikipedia\.org/wiki/SipHash](https://en\.wikipedia\.org/wiki/SipHash)
.UE
^siphash\. This is not the fastest hashing algorithmavailable, but the trade\-off for better security that comes with the drop inperformance is worth it\. If you profile your code and find that the defaulthash function is too slow for your purposes, you can switch to another functionby specifying a different hasher\. A \fIhasher\fR is a type that implements the`\fIBuildHasher\fR` trait\. We‚Äôll talk about traits and how to implement them inChapter 10\. You don‚Äôt necessarily have to implement your own hasher fromscratch; 
.UR https://crates\.io/
.UE
crates\.io has libraries shared byother Rust users that provide hashers implementing many common hashingalgorithms\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Vectors, strings, and hash maps will provide a large amount of functionalitynecessary in programs when you need to store, access, and modify data\. Here aresome exercises you should now be equipped to solve:
.P
Given a list of integers, use a vector and return the median (when sorted,the value in the middle position) and mode (the value that occurs most often;a hash map will be helpful here) of the list\.
.P
Convert strings to pig latin\. The first consonant of each word is moved tothe end of the word and ‚Äúay‚Äù is added, so ‚Äúfirst‚Äù becomes ‚Äúirst\-fay\.‚Äù Wordsthat start with a vowel have ‚Äúhay‚Äù added to the end instead (‚Äúapple‚Äù becomes‚Äúapple\-hay‚Äù)\. Keep in mind the details about UTF\-8 encoding!
.P
Using a hash map and vectors, create a text interface to allow a user to addemployee names to a department in a company\. For example, ‚ÄúAdd Sally toEngineering‚Äù or ‚ÄúAdd Amir to Sales\.‚Äù Then let the user retrieve a list of allpeople in a department or all people in the company by department, sortedalphabetically\.
.P
The standard library API documentation describes methods that vectors, strings,and hash maps have that will be helpful for these exercises!
.P
We‚Äôre getting into more complex programs in which operations can fail, so, it‚Äôsa perfect time to discuss error handling\. We‚Äôll do that next!
.SH "Error Handling"

.br

.br
\fBError Handling\fR
.br
================
.br

.P
Errors are a fact of life in software, so Rust has a number of features forhandling situations in which something goes wrong\. In many cases, Rust requiresyou to acknowledge the possibility of an error and take some action before yourcode will compile\. This requirement makes your program more robust by ensuringthat you‚Äôll discover errors and handle them appropriately before you‚Äôvedeployed your code to production!
.P
Rust groups errors into two major categories: \fIrecoverable\fR and \fIunrecoverable\fRerrors\. For a recoverable error, such as a \fIfile not found\fR error, we mostlikely just want to report the problem to the user and retry the operation\.Unrecoverable errors are always symptoms of bugs, like trying to access alocation beyond the end of an array, and so we want to immediately stop theprogram\.
.P
Most languages don‚Äôt distinguish between these two kinds of errors and handleboth in the same way, using mechanisms such as exceptions\. Rust doesn‚Äôt haveexceptions\. Instead, it has the type `\fIResult<T, E>\fR` for recoverable errors andthe `\fIpanic!\fR` macro that stops execution when the program encounters anunrecoverable error\. This chapter covers calling `\fIpanic!\fR` first and then talksabout returning `\fIResult<T, E>\fR` values\. Additionally, we‚Äôll exploreconsiderations when deciding whether to try to recover from an error or to stopexecution\.
.SH "Unrecoverable Errors with panic!"

.br

.br
\fBUnrecoverable Errors with \fR
.br
============================
.br
`\fIpanic!\fR`
.P
Sometimes, bad things happen in your code, and there‚Äôs nothing you can do aboutit\. In these cases, Rust has the `\fIpanic!\fR` macro\. There are two ways to cause apanic in practice: by taking an action that causes our code to panic (such asaccessing an array past the end) or by explicitly calling the `\fIpanic!\fR` macro\.In both cases, we cause a panic in our program\. By default, these panics willprint a failure message, unwind, clean up the stack, and quit\. Via anenvironment variable, you can also have Rust display the call stack when apanic occurs to make it easier to track down the source of the panic\.
.br

.br
\fBUnwinding the Stack or Aborting in Response to a Panic\fR
.br
========================================================
.br

.P
By default, when a panic occurs, the program starts \fIunwinding\fR, whichmeans Rust walks back up the stack and cleans up the data from each functionit encounters\. However, this walking back and cleanup is a lot of work\. Rust,therefore, allows you to choose the alternative of immediately \fIaborting\fR,which ends the program without cleaning up\.
.P
Memory that the program was using will then need to be cleanedup by the operating system\. If in your project you need to make the resultingbinary as small as possible, you can switch from unwinding to aborting upon apanic by adding `\fIpanic = 'abort'\fR` to the appropriate `\fI[profile]\fR` sections inyour \fICargo\.toml\fR file\. For example, if you want to abort on panic in releasemode, add this:
.RS
.IP \fBtoml\fR 2

.br
.EX
[profile\.release]
panic = 'abort'

.EE

.RE
.P
Let‚Äôs try calling `\fIpanic!\fR` in a simple program:Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,panics\fR 2

.br
.EX
fn main() {
    panic!("crash and burn");
}

.EE

.RE
.P
When you run the program, you‚Äôll see something like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling panic v0\.1\.0 (file:///projects/panic)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.25s
     Running `target/debug/panic`
thread 'main' panicked at 'crash and burn', src/main\.rs:2:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
The call to `\fIpanic!\fR` causes the error message contained in the last two lines\.The first line shows our panic message and the place in our source code wherethe panic occurred: \fIsrc/main\.rs:2:5\fR indicates that it‚Äôs the second line,fifth character of our \fIsrc/main\.rs\fR file\.
.P
In this case, the line indicated is part of our code, and if we go to thatline, we see the `\fIpanic!\fR` macro call\. In other cases, the `\fIpanic!\fR` call mightbe in code that our code calls, and the filename and line number reported bythe error message will be someone else‚Äôs code where the `\fIpanic!\fR` macro iscalled, not the line of our code that eventually led to the `\fIpanic!\fR` call\. Wecan use the backtrace of the functions the `\fIpanic!\fR` call came from to figureout the part of our code that is causing the problem\. We‚Äôll discuss backtracesin more detail next\.
.br

.br
\fBUsing a \fR
.br
==========
.br
`\fIpanic!\fR` Backtrace
.P
Let‚Äôs look at another example to see what it‚Äôs like when a `\fIpanic!\fR` call comesfrom a library because of a bug in our code instead of from our code callingthe macro directly\. Listing 9\-1 has some code that attempts to access anindex in a vector beyond the range of valid indexes\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,panics\fR 2

.br
.EX
fn main() {
    let v = vec![1, 2, 3];

    v[99];
}

.EE

.RE
Listing 9\-1: Attempting to access an element beyond theend of a vector, which will cause a call to `\fIpanic!\fR`
.P
Here, we‚Äôre attempting to access the 100th element of our vector (which is atindex 99 because indexing starts at zero), but the vector has only 3 elements\.In this situation, Rust will panic\. Using `\fI[]\fR` is supposed to return anelement, but if you pass an invalid index, there‚Äôs no element that Rust couldreturn here that would be correct\.
.P
In C, attempting to read beyond the end of a data structure is undefinedbehavior\. You might get whatever is at the location in memory that wouldcorrespond to that element in the data structure, even though the memorydoesn‚Äôt belong to that structure\. This is called a \fIbuffer overread\fR and canlead to security vulnerabilities if an attacker is able to manipulate the indexin such a way as to read data they shouldn‚Äôt be allowed to that is stored afterthe data structure\.
.P
To protect your program from this sort of vulnerability, if you try to read anelement at an index that doesn‚Äôt exist, Rust will stop execution and refuse tocontinue\. Let‚Äôs try it and see:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling panic v0\.1\.0 (file:///projects/panic)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.27s
     Running `target/debug/panic`
thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', src/main\.rs:4:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
This error points at line 4 of our `\fImain\.rs\fR` where we attempt to access index99\. The next note line tells us that we can set the `\fIRUST_BACKTRACE\fR`environment variable to get a backtrace of exactly what happened to cause theerror\. A \fIbacktrace\fR is a list of all the functions that have been called toget to this point\. Backtraces in Rust work as they do in other languages: thekey to reading the backtrace is to start from the top and read until you seefiles you wrote\. That‚Äôs the spot where the problem originated\. The lines abovethat spot are code that your code has called; the lines below are code thatcalled your code\. These before\-and\-after lines might include core Rust code,standard library code, or crates that you‚Äôre using\. Let‚Äôs try getting abacktrace by setting the `\fIRUST_BACKTRACE\fR` environment variable to any valueexcept 0\. Listing 9\-2 shows output similar to what you‚Äôll see\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ RUST_BACKTRACE=1 cargo run
thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', src/main\.rs:4:5
stack backtrace:
   0: rust_begin_unwind
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/std/src/panicking\.rs:483
   1: core::panicking::panic_fmt
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking\.rs:85
   2: core::panicking::panic_bounds_check
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking\.rs:62
   3: <usize as core::slice::index::SliceIndex<[T]>>::index
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/slice/index\.rs:255
   4: core::slice::index::<impl core::ops::index::Index<I> for [T]>::index
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/slice/index\.rs:15
   5: <alloc::vec::Vec<T> as core::ops::index::Index<I>>::index
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/alloc/src/vec\.rs:1982
   6: panic::main
             at \./src/main\.rs:4
   7: core::ops::function::FnOnce::call_once
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ops/function\.rs:227
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace\.

.EE

.RE
Listing 9\-2: The backtrace generated by a call to`\fIpanic!\fR` displayed when the environment variable `\fIRUST_BACKTRACE\fR` is set
.P
That‚Äôs a lot of output! The exact output you see might be different dependingon your operating system and Rust version\. In order to get backtraces with thisinformation, debug symbols must be enabled\. Debug symbols are enabled bydefault when using `\fIcargo build\fR` or `\fIcargo run\fR` without the `\fI\-\-release\fR` flag,as we have here\.
.P
In the output in Listing 9\-2, line 6 of the backtrace points to the line in ourproject that‚Äôs causing the problem: line 4 of \fIsrc/main\.rs\fR\. If we don‚Äôt wantour program to panic, we should start our investigation at the location pointedto by the first line mentioning a file we wrote\. In Listing 9\-1, where wedeliberately wrote code that would panic, the way to fix the panic is to notrequest an element beyond the range of the vector indexes\. When your codepanics in the future, you‚Äôll need to figure out what action the code is takingwith what values to cause the panic and what the code should do instead\.
.P
We‚Äôll come back to `\fIpanic!\fR` and when we should and should not use `\fIpanic!\fR` tohandle error conditions in the 
.UR ch09\-03\-to\-panic\-or\-not\-to\-panic\.html#to\-panic\-or\-not\-to\-panic
.UE
‚ÄúTo `\fIpanic!\fR` or Not to`\fIpanic!\fR`‚Äù section later in thischapter\. Next, we‚Äôll look at how to recover from an error using `\fIResult\fR`\.
.SH "Recoverable Errors with Result"

.br

.br
\fBRecoverable Errors with \fR
.br
==========================
.br
`\fIResult\fR`
.P
Most errors aren‚Äôt serious enough to require the program to stop entirely\.Sometimes, when a function fails, it‚Äôs for a reason that you can easilyinterpret and respond to\. For example, if you try to open a file and thatoperation fails because the file doesn‚Äôt exist, you might want to create thefile instead of terminating the process\.
.P
Recall from 
.UR ch02\-00\-guessing\-game\-tutorial\.html#handling\-potential\-failure\-with\-the\-result\-type
.UE
‚ÄúHandling Potential Failure with the `\fIResult\fR`Type‚Äù in Chapter 2 that the `\fIResult\fR` enum isdefined as having two variants, `\fIOk\fR` and `\fIErr\fR`, as follows:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Result<T, E> {
    Ok(T),
    Err(E),
}

.EE

.RE
.P
The `\fIT\fR` and `\fIE\fR` are generic type parameters: we‚Äôll discuss generics in moredetail in Chapter 10\. What you need to know right now is that `\fIT\fR` representsthe type of the value that will be returned in a success case within the `\fIOk\fR`variant, and `\fIE\fR` represents the type of the error that will be returned in afailure case within the `\fIErr\fR` variant\. Because `\fIResult\fR` has these generic typeparameters, we can use the `\fIResult\fR` type and the functions defined on it inmany different situations where the successful value and error value we want toreturn may differ\.
.P
Let‚Äôs call a function that returns a `\fIResult\fR` value because the function couldfail\. In Listing 9\-3 we try to open a file\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let greeting_file_result = File::open("hello\.txt");
}

.EE

.RE
Listing 9\-3: Opening a file
.P
The return type of `\fIFile::open\fR` is a `\fIResult<T, E>\fR`\. The generic parameter `\fIT\fR`has been filled in by the implementation of `\fIFile::open\fR` with the type of thesuccess value, `\fIstd::fs::File\fR`, which is a file handle\. The type of `\fIE\fR` used inthe error value is `\fIstd::io::Error\fR`\. This return type means the call to`\fIFile::open\fR` might succeed and return a file handle that we can read from orwrite to\. The function call also might fail: for example, the file might notexist, or we might not have permission to access the file\. The `\fIFile::open\fR`function needs to have a way to tell us whether it succeeded or failed and atthe same time give us either the file handle or error information\. Thisinformation is exactly what the `\fIResult\fR` enum conveys\.
.P
In the case where `\fIFile::open\fR` succeeds, the value in the variable`\fIgreeting_file_result\fR` will be an instance of `\fIOk\fR` that contains a file handle\.In the case where it fails, the value in `\fIgreeting_file_result\fR` will be aninstance of `\fIErr\fR` that contains more information about the kind of error thathappened\.
.P
We need to add to the code in Listing 9\-3 to take different actions dependingon the value `\fIFile::open\fR` returns\. Listing 9\-4 shows one way to handle the`\fIResult\fR` using a basic tool, the `\fImatch\fR` expression that we discussed inChapter 6\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let greeting_file_result = File::open("hello\.txt");

    let greeting_file = match greeting_file_result {
        Ok(file) => file,
        Err(error) => panic!("Problem opening the file: {:?}", error),
    };
}

.EE

.RE
Listing 9\-4: Using a `\fImatch\fR` expression to handle the`\fIResult\fR` variants that might be returned
.P
Note that, like the `\fIOption\fR` enum, the `\fIResult\fR` enum and its variants have beenbrought into scope by the prelude, so we don‚Äôt need to specify `\fIResult::\fR`before the `\fIOk\fR` and `\fIErr\fR` variants in the `\fImatch\fR` arms\.
.P
When the result is `\fIOk\fR`, this code will return the inner `\fIfile\fR` value out ofthe `\fIOk\fR` variant, and we then assign that file handle value to the variable`\fIgreeting_file\fR`\. After the `\fImatch\fR`, we can use the file handle for reading orwriting\.
.P
The other arm of the `\fImatch\fR` handles the case where we get an `\fIErr\fR` value from`\fIFile::open\fR`\. In this example, we‚Äôve chosen to call the `\fIpanic!\fR` macro\. Ifthere‚Äôs no file named \fIhello\.txt\fR in our current directory and we run thiscode, we‚Äôll see the following output from the `\fIpanic!\fR` macro:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling error\-handling v0\.1\.0 (file:///projects/error\-handling)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.73s
     Running `target/debug/error\-handling`
thread 'main' panicked at 'Problem opening the file: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main\.rs:8:23
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
As usual, this output tells us exactly what has gone wrong\.
.br

.br
\fBMatching on Different Errors\fR
.br
==============================
.br

.P
The code in Listing 9\-4 will `\fIpanic!\fR` no matter why `\fIFile::open\fR` failed\.However, we want to take different actions for different failure reasons: if`\fIFile::open\fR` failed because the file doesn‚Äôt exist, we want to create the fileand return the handle to the new file\. If `\fIFile::open\fR` failed for any otherreason‚Äîfor example, because we didn‚Äôt have permission to open the file‚Äîwe stillwant the code to `\fIpanic!\fR` in the same way as it did in Listing 9\-4\. For this weadd an inner `\fImatch\fR` expression, shown in Listing 9\-5\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let greeting_file_result = File::open("hello\.txt");

    let greeting_file = match greeting_file_result {
        Ok(file) => file,
        Err(error) => match error\.kind() {
            ErrorKind::NotFound => match File::create("hello\.txt") {
                Ok(fc) => fc,
                Err(e) => panic!("Problem creating the file: {:?}", e),
            },
            other_error => {
                panic!("Problem opening the file: {:?}", other_error);
            }
        },
    };
}

.EE

.RE
Listing 9\-5: Handling different kinds of errors indifferent ways
.P
The type of the value that `\fIFile::open\fR` returns inside the `\fIErr\fR` variant is`\fIio::Error\fR`, which is a struct provided by the standard library\. This structhas a method `\fIkind\fR` that we can call to get an `\fIio::ErrorKind\fR` value\. The enum`\fIio::ErrorKind\fR` is provided by the standard library and has variantsrepresenting the different kinds of errors that might result from an `\fIio\fR`operation\. The variant we want to use is `\fIErrorKind::NotFound\fR`, which indicatesthe file we‚Äôre trying to open doesn‚Äôt exist yet\. So we match on`\fIgreeting_file_result\fR`, but we also have an inner match on `\fIerror\.kind()\fR`\.
.P
The condition we want to check in the inner match is whether the value returnedby `\fIerror\.kind()\fR` is the `\fINotFound\fR` variant of the `\fIErrorKind\fR` enum\. If it is,we try to create the file with `\fIFile::create\fR`\. However, because `\fIFile::create\fR`could also fail, we need a second arm in the inner `\fImatch\fR` expression\. When thefile can‚Äôt be created, a different error message is printed\. The second arm ofthe outer `\fImatch\fR` stays the same, so the program panics on any error besidesthe missing file error\.
.br

.br
\fBAlternatives to Using \fR
.br
========================
.br
`\fImatch\fR` with `\fIResult<T, E>\fR`
.P
That‚Äôs a lot of `\fImatch\fR`! The `\fImatch\fR` expression is very useful but also verymuch a primitive\. In Chapter 13, you‚Äôll learn about closures, which are usedwith many of the methods defined on `\fIResult<T, E>\fR`\. These methods can be moreconcise than using `\fImatch\fR` when handling `\fIResult<T, E>\fR` values in your code\.
.P
For example, here‚Äôs another way to write the same logic as shown in Listing9\-5, this time using closures and the `\fIunwrap_or_else\fR` method:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let greeting_file = File::open("hello\.txt")\.unwrap_or_else(|error| {
        if error\.kind() == ErrorKind::NotFound {
            File::create("hello\.txt")\.unwrap_or_else(|error| {
                panic!("Problem creating the file: {:?}", error);
            })
        } else {
            panic!("Problem opening the file: {:?}", error);
        }
    });
}

.EE

.RE
.P
Although this code has the same behavior as Listing 9\-5, it doesn‚Äôt containany `\fImatch\fR` expressions and is cleaner to read\. Come back to this exampleafter you‚Äôve read Chapter 13, and look up the `\fIunwrap_or_else\fR` method in thestandard library documentation\. Many more of these methods can clean up hugenested `\fImatch\fR` expressions when you‚Äôre dealing with errors\.
.br

.br
\fBShortcuts for Panic on Error: \fR
.br
================================
.br
`\fIunwrap\fR` and `\fIexpect\fR`
.P
Using `\fImatch\fR` works well enough, but it can be a bit verbose and doesn‚Äôt alwayscommunicate intent well\. The `\fIResult<T, E>\fR` type has many helper methodsdefined on it to do various, more specific tasks\. The `\fIunwrap\fR` method is ashortcut method implemented just like the `\fImatch\fR` expression we wrote inListing 9\-4\. If the `\fIResult\fR` value is the `\fIOk\fR` variant, `\fIunwrap\fR` will returnthe value inside the `\fIOk\fR`\. If the `\fIResult\fR` is the `\fIErr\fR` variant, `\fIunwrap\fR` willcall the `\fIpanic!\fR` macro for us\. Here is an example of `\fIunwrap\fR` in action:Filename: src/main\.rs
.RS
.IP \fBrust,should_panic\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let greeting_file = File::open("hello\.txt")\.unwrap();
}

.EE

.RE
.P
If we run this code without a \fIhello\.txt\fR file, we‚Äôll see an error message fromthe `\fIpanic!\fR` call that the `\fIunwrap\fR` method makes:
.RS
.IP \fBtext\fR 2

.br
.EX
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os {
code: 2, kind: NotFound, message: "No such file or directory" }',
src/main\.rs:4:49

.EE

.RE
.P
Similarly, the `\fIexpect\fR` method lets us also choose the `\fIpanic!\fR` error message\.Using `\fIexpect\fR` instead of `\fIunwrap\fR` and providing good error messages can conveyyour intent and make tracking down the source of a panic easier\. The syntax of`\fIexpect\fR` looks like this:Filename: src/main\.rs
.RS
.IP \fBrust,should_panic\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let greeting_file = File::open("hello\.txt")
        \.expect("hello\.txt should be included in this project");
}

.EE

.RE
.P
We use `\fIexpect\fR` in the same way as `\fIunwrap\fR`: to return the file handle or callthe `\fIpanic!\fR` macro\. The error message used by `\fIexpect\fR` in its call to `\fIpanic!\fR`will be the parameter that we pass to `\fIexpect\fR`, rather than the default`\fIpanic!\fR` message that `\fIunwrap\fR` uses\. Here‚Äôs what it looks like:
.RS
.IP \fBtext\fR 2

.br
.EX
thread 'main' panicked at 'hello\.txt should be included in this project: Os {
code: 2, kind: NotFound, message: "No such file or directory" }',
src/main\.rs:5:10

.EE

.RE
.P
In production\-quality code, most Rustaceans choose `\fIexpect\fR` rather than`\fIunwrap\fR` and give more context about why the operation is expected to alwayssucceed\. That way, if your assumptions are ever proven wrong, you have moreinformation to use in debugging\.
.br

.br
\fBPropagating Errors\fR
.br
====================
.br

.P
When a function‚Äôs implementation calls something that might fail, instead ofhandling the error within the function itself, you can return the error to thecalling code so that it can decide what to do\. This is known as \fIpropagating\fRthe error and gives more control to the calling code, where there might be moreinformation or logic that dictates how the error should be handled than whatyou have available in the context of your code\.
.P
For example, Listing 9\-6 shows a function that reads a username from a file\. Ifthe file doesn‚Äôt exist or can‚Äôt be read, this function will return those errorsto the code that called the function\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs::File;
use std::io::{self, Read};

fn read_username_from_file() \-> Result<String, io::Error> {
    let username_file_result = File::open("hello\.txt");

    let mut username_file = match username_file_result {
        Ok(file) => file,
        Err(e) => return Err(e),
    };

    let mut username = String::new();

    match username_file\.read_to_string(&mut username) {
        Ok(_) => Ok(username),
        Err(e) => Err(e),
    }
}

.EE

.RE
Listing 9\-6: A function that returns errors to thecalling code using `\fImatch\fR`
.P
This function can be written in a much shorter way, but we‚Äôre going to start bydoing a lot of it manually in order to explore error handling; at the end,we‚Äôll show the shorter way\. Let‚Äôs look at the return type of the functionfirst: `\fIResult<String, io::Error>\fR`\. This means the function is returning avalue of the type `\fIResult<T, E>\fR` where the generic parameter `\fIT\fR` has beenfilled in with the concrete type `\fIString\fR`, and the generic type `\fIE\fR` has beenfilled in with the concrete type `\fIio::Error\fR`\.
.P
If this function succeeds without any problems, the code that calls thisfunction will receive an `\fIOk\fR` value that holds a `\fIString\fR`‚Äîthe username thatthis function read from the file\. If this function encounters any problems, thecalling code will receive an `\fIErr\fR` value that holds an instance of `\fIio::Error\fR`that contains more information about what the problems were\. We chose`\fIio::Error\fR` as the return type of this function because that happens to be thetype of the error value returned from both of the operations we‚Äôre calling inthis function‚Äôs body that might fail: the `\fIFile::open\fR` function and the`\fIread_to_string\fR` method\.
.P
The body of the function starts by calling the `\fIFile::open\fR` function\. Then wehandle the `\fIResult\fR` value with a `\fImatch\fR` similar to the `\fImatch\fR` in Listing 9\-4\.If `\fIFile::open\fR` succeeds, the file handle in the pattern variable `\fIfile\fR`becomes the value in the mutable variable `\fIusername_file\fR` and the functioncontinues\. In the `\fIErr\fR` case, instead of calling `\fIpanic!\fR`, we use the `\fIreturn\fR`keyword to return early out of the function entirely and pass the error valuefrom `\fIFile::open\fR`, now in the pattern variable `\fIe\fR`, back to the calling code asthis function‚Äôs error value\.
.P
So if we have a file handle in `\fIusername_file\fR`, the function then creates a new`\fIString\fR` in variable `\fIusername\fR` and calls the `\fIread_to_string\fR` method onthe file handle in `\fIusername_file\fR` to read the contents of the file into`\fIusername\fR`\. The `\fIread_to_string\fR` method also returns a `\fIResult\fR` because itmight fail, even though `\fIFile::open\fR` succeeded\. So we need another `\fImatch\fR` tohandle that `\fIResult\fR`: if `\fIread_to_string\fR` succeeds, then our function hassucceeded, and we return the username from the file that‚Äôs now in `\fIusername\fR`wrapped in an `\fIOk\fR`\. If `\fIread_to_string\fR` fails, we return the error value in thesame way that we returned the error value in the `\fImatch\fR` that handled thereturn value of `\fIFile::open\fR`\. However, we don‚Äôt need to explicitly say`\fIreturn\fR`, because this is the last expression in the function\.
.P
The code that calls this code will then handle getting either an `\fIOk\fR` valuethat contains a username or an `\fIErr\fR` value that contains an `\fIio::Error\fR`\. It‚Äôsup to the calling code to decide what to do with those values\. If the callingcode gets an `\fIErr\fR` value, it could call `\fIpanic!\fR` and crash the program, use adefault username, or look up the username from somewhere other than a file, forexample\. We don‚Äôt have enough information on what the calling code is actuallytrying to do, so we propagate all the success or error information upward forit to handle appropriately\.
.P
This pattern of propagating errors is so common in Rust that Rust provides thequestion mark operator `\fI?\fR` to make this easier\.
.br

.br
\fBA Shortcut for Propagating Errors: the \fR
.br
=========================================
.br
`\fI?\fR` Operator
.P
Listing 9\-7 shows an implementation of `\fIread_username_from_file\fR` that has thesame functionality as in Listing 9\-6, but this implementation uses the`\fI?\fR` operator\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() \-> Result<String, io::Error> {
    let mut username_file = File::open("hello\.txt")?;
    let mut username = String::new();
    username_file\.read_to_string(&mut username)?;
    Ok(username)
}

.EE

.RE
Listing 9\-7: A function that returns errors to thecalling code using the `\fI?\fR` operator
.P
The `\fI?\fR` placed after a `\fIResult\fR` value is defined to work in almost the same wayas the `\fImatch\fR` expressions we defined to handle the `\fIResult\fR` values in Listing9\-6\. If the value of the `\fIResult\fR` is an `\fIOk\fR`, the value inside the `\fIOk\fR` willget returned from this expression, and the program will continue\. If the valueis an `\fIErr\fR`, the `\fIErr\fR` will be returned from the whole function as if we hadused the `\fIreturn\fR` keyword so the error value gets propagated to the callingcode\.
.P
There is a difference between what the `\fImatch\fR` expression from Listing 9\-6 doesand what the `\fI?\fR` operator does: error values that have the `\fI?\fR` operator calledon them go through the `\fIfrom\fR` function, defined in the `\fIFrom\fR` trait in thestandard library, which is used to convert values from one type into another\.When the `\fI?\fR` operator calls the `\fIfrom\fR` function, the error type received isconverted into the error type defined in the return type of the currentfunction\. This is useful when a function returns one error type to representall the ways a function might fail, even if parts might fail for many differentreasons\.
.P
For example, we could change the `\fIread_username_from_file\fR` function in Listing9\-7 to return a custom error type named `\fIOurError\fR` that we define\. If we alsodefine `\fIimpl From<io::Error> for OurError\fR` to construct an instance of`\fIOurError\fR` from an `\fIio::Error\fR`, then the `\fI?\fR` operator calls in the body of`\fIread_username_from_file\fR` will call `\fIfrom\fR` and convert the error types withoutneeding to add any more code to the function\.
.P
In the context of Listing 9\-7, the `\fI?\fR` at the end of the `\fIFile::open\fR` call willreturn the value inside an `\fIOk\fR` to the variable `\fIusername_file\fR`\. If an erroroccurs, the `\fI?\fR` operator will return early out of the whole function and giveany `\fIErr\fR` value to the calling code\. The same thing applies to the `\fI?\fR` at theend of the `\fIread_to_string\fR` call\.
.P
The `\fI?\fR` operator eliminates a lot of boilerplate and makes this function‚Äôsimplementation simpler\. We could even shorten this code further by chainingmethod calls immediately after the `\fI?\fR`, as shown in Listing 9\-8\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() \-> Result<String, io::Error> {
    let mut username = String::new();

    File::open("hello\.txt")?\.read_to_string(&mut username)?;

    Ok(username)
}

.EE

.RE
Listing 9\-8: Chaining method calls after the `\fI?\fR`operator
.P
We‚Äôve moved the creation of the new `\fIString\fR` in `\fIusername\fR` to the beginning ofthe function; that part hasn‚Äôt changed\. Instead of creating a variable`\fIusername_file\fR`, we‚Äôve chained the call to `\fIread_to_string\fR` directly onto theresult of `\fIFile::open("hello\.txt")?\fR`\. We still have a `\fI?\fR` at the end of the`\fIread_to_string\fR` call, and we still return an `\fIOk\fR` value containing `\fIusername\fR`when both `\fIFile::open\fR` and `\fIread_to_string\fR` succeed rather than returningerrors\. The functionality is again the same as in Listing 9\-6 and Listing 9\-7;this is just a different, more ergonomic way to write it\.
.P
Listing 9\-9 shows a way to make this even shorter using `\fIfs::read_to_string\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs;
use std::io;

fn read_username_from_file() \-> Result<String, io::Error> {
    fs::read_to_string("hello\.txt")
}

.EE

.RE
Listing 9\-9: Using `\fIfs::read_to_string\fR` instead ofopening and then reading the file
.P
Reading a file into a string is a fairly common operation, so the standardlibrary provides the convenient `\fIfs::read_to_string\fR` function that opens thefile, creates a new `\fIString\fR`, reads the contents of the file, puts the contentsinto that `\fIString\fR`, and returns it\. Of course, using `\fIfs::read_to_string\fR`doesn‚Äôt give us the opportunity to explain all the error handling, so we did itthe longer way first\.
.br

.br
\fBWhere The \fR
.br
============
.br
`\fI?\fR` Operator Can Be Used
.P
The `\fI?\fR` operator can only be used in functions whose return type is compatiblewith the value the `\fI?\fR` is used on\. This is because the `\fI?\fR` operator is definedto perform an early return of a value out of the function, in the same manneras the `\fImatch\fR` expression we defined in Listing 9\-6\. In Listing 9\-6, the`\fImatch\fR` was using a `\fIResult\fR` value, and the early return arm returned an`\fIErr(e)\fR` value\. The return type of the function has to be a `\fIResult\fR` so thatit‚Äôs compatible with this `\fIreturn\fR`\.
.P
In Listing 9\-10, let‚Äôs look at the error we‚Äôll get if we use the `\fI?\fR` operatorin a `\fImain\fR` function with a return type incompatible with the type of the valuewe use `\fI?\fR` on:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let greeting_file = File::open("hello\.txt")?;
}

.EE

.RE
Listing 9\-10: Attempting to use the `\fI?\fR` in the `\fImain\fR`function that returns `\fI()\fR` won‚Äôt compile
.P
This code opens a file, which might fail\. The `\fI?\fR` operator follows the `\fIResult\fR`value returned by `\fIFile::open\fR`, but this `\fImain\fR` function has the return type of`\fI()\fR`, not `\fIResult\fR`\. When we compile this code, we get the following errormessage:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling error\-handling v0\.1\.0 (file:///projects/error\-handling)
error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)
 \-\-> src/main\.rs:4:48
  |
3 | / fn main() {
4 | |     let greeting_file = File::open("hello\.txt")?;
  | |                                                ^ cannot use the `?` operator in a function that returns `()`
5 | | }
  | |_\- this function should return `Result` or `Option` to accept `?`
  |
  = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `error\-handling` due to previous error

.EE

.RE
.P
This error points out that we‚Äôre only allowed to use the `\fI?\fR` operator in afunction that returns `\fIResult\fR`, `\fIOption\fR`, or another type that implements`\fIFromResidual\fR`\.
.P
To fix the error, you have two choices\. One choice is to change the return typeof your function to be compatible with the value you‚Äôre using the `\fI?\fR` operatoron as long as you have no restrictions preventing that\. The other technique isto use a `\fImatch\fR` or one of the `\fIResult<T, E>\fR` methods to handle the `\fIResult<T, E>\fR` in whatever way is appropriate\.
.P
The error message also mentioned that `\fI?\fR` can be used with `\fIOption<T>\fR` valuesas well\. As with using `\fI?\fR` on `\fIResult\fR`, you can only use `\fI?\fR` on `\fIOption\fR` in afunction that returns an `\fIOption\fR`\. The behavior of the `\fI?\fR` operator when calledon an `\fIOption<T>\fR` is similar to its behavior when called on a `\fIResult<T, E>\fR`:if the value is `\fINone\fR`, the `\fINone\fR` will be returned early from the function atthat point\. If the value is `\fISome\fR`, the value inside the `\fISome\fR` is theresulting value of the expression and the function continues\. Listing 9\-11 hasan example of a function that finds the last character of the first line in thegiven text:
.RS
.IP \fBrust\fR 2

.br
.EX
fn last_char_of_first_line(text: &str) \-> Option<char> {
    text\.lines()\.next()?\.chars()\.last()
}
# 
# fn main() {
#     assert_eq!(
#         last_char_of_first_line("Hello, world\nHow are you today?"),
#         Some('d')
#     );
# 
#     assert_eq!(last_char_of_first_line(""), None);
#     assert_eq!(last_char_of_first_line("\nhi"), None);
# }

.EE

.RE
Listing 9\-11: Using the `\fI?\fR` operator on an `\fIOption<T>\fR`value
.P
This function returns `\fIOption<char>\fR` because it‚Äôs possible that there is acharacter there, but it‚Äôs also possible that there isn‚Äôt\. This code takes the`\fItext\fR` string slice argument and calls the `\fIlines\fR` method on it, which returnsan iterator over the lines in the string\. Because this function wants toexamine the first line, it calls `\fInext\fR` on the iterator to get the first valuefrom the iterator\. If `\fItext\fR` is the empty string, this call to `\fInext\fR` willreturn `\fINone\fR`, in which case we use `\fI?\fR` to stop and return `\fINone\fR` from`\fIlast_char_of_first_line\fR`\. If `\fItext\fR` is not the empty string, `\fInext\fR` willreturn a `\fISome\fR` value containing a string slice of the first line in `\fItext\fR`\.
.P
The `\fI?\fR` extracts the string slice, and we can call `\fIchars\fR` on that string sliceto get an iterator of its characters\. We‚Äôre interested in the last character inthis first line, so we call `\fIlast\fR` to return the last item in the iterator\.This is an `\fIOption\fR` because it‚Äôs possible that the first line is the emptystring, for example if `\fItext\fR` starts with a blank line but has characters onother lines, as in `\fI"\nhi"\fR`\. However, if there is a last character on the firstline, it will be returned in the `\fISome\fR` variant\. The `\fI?\fR` operator in the middlegives us a concise way to express this logic, allowing us to implement thefunction in one line\. If we couldn‚Äôt use the `\fI?\fR` operator on `\fIOption\fR`, we‚Äôdhave to implement this logic using more method calls or a `\fImatch\fR` expression\.
.P
Note that you can use the `\fI?\fR` operator on a `\fIResult\fR` in a function that returns`\fIResult\fR`, and you can use the `\fI?\fR` operator on an `\fIOption\fR` in a function thatreturns `\fIOption\fR`, but you can‚Äôt mix and match\. The `\fI?\fR` operator won‚Äôtautomatically convert a `\fIResult\fR` to an `\fIOption\fR` or vice versa; in those cases,you can use methods like the `\fIok\fR` method on `\fIResult\fR` or the `\fIok_or\fR` method on`\fIOption\fR` to do the conversion explicitly\.
.P
So far, all the `\fImain\fR` functions we‚Äôve used return `\fI()\fR`\. The `\fImain\fR` function isspecial because it‚Äôs the entry and exit point of executable programs, and thereare restrictions on what its return type can be for the programs to behave asexpected\.
.P
Luckily, `\fImain\fR` can also return a `\fIResult<(), E>\fR`\. Listing 9\-12 has thecode from Listing 9\-10 but we‚Äôve changed the return type of `\fImain\fR` to be`\fIResult<(), Box<dyn Error>>\fR` and added a return value `\fIOk(())\fR` to the end\. Thiscode will now compile:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::error::Error;
use std::fs::File;

fn main() \-> Result<(), Box<dyn Error>> {
    let greeting_file = File::open("hello\.txt")?;

    Ok(())
}

.EE

.RE
Listing 9\-12: Changing `\fImain\fR` to return `\fIResult<(), E>\fR`allows the use of the `\fI?\fR` operator on `\fIResult\fR` values
.P
The `\fIBox<dyn Error>\fR` type is a \fItrait object\fR, which we‚Äôll talk about in the
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
‚ÄúUsing Trait Objects that Allow for Values of DifferentTypes‚Äù section in Chapter 17\. For now, you canread `\fIBox<dyn Error>\fR` to mean ‚Äúany kind of error\.‚Äù Using `\fI?\fR` on a `\fIResult\fR`value in a `\fImain\fR` function with the error type `\fIBox<dyn Error>\fR` is allowed,because it allows any `\fIErr\fR` value to be returned early\. Even though the body ofthis `\fImain\fR` function will only ever return errors of type `\fIstd::io::Error\fR`, byspecifying `\fIBox<dyn Error>\fR`, this signature will continue to be correct even ifmore code that returns other errors is added to the body of `\fImain\fR`\.
.P
When a `\fImain\fR` function returns a `\fIResult<(), E>\fR`, the executable willexit with a value of `\fI0\fR` if `\fImain\fR` returns `\fIOk(())\fR` and will exit with anonzero value if `\fImain\fR` returns an `\fIErr\fR` value\. Executables written in C returnintegers when they exit: programs that exit successfully return the integer`\fI0\fR`, and programs that error return some integer other than `\fI0\fR`\. Rust alsoreturns integers from executables to be compatible with this convention\.
.P
The `\fImain\fR` function may return any types that implement 
.UR \.\./std/process/trait\.Termination\.html
.UE
the`\fIstd::process::Termination\fR` trait, which containsa function `\fIreport\fR` that returns an `\fIExitCode\fR`\. Consult the standard librarydocumentation for more information on implementing the `\fITermination\fR` trait foryour own types\.
.P
Now that we‚Äôve discussed the details of calling `\fIpanic!\fR` or returning `\fIResult\fR`,let‚Äôs return to the topic of how to decide which is appropriate to use in whichcases\.
.SH "To panic! or Not to panic!"

.br

.br
\fBTo \fR
.br
=====
.br
`\fIpanic!\fR` or Not to `\fIpanic!\fR`
.P
So how do you decide when you should call `\fIpanic!\fR` and when you should return`\fIResult\fR`? When code panics, there‚Äôs no way to recover\. You could call `\fIpanic!\fR`for any error situation, whether there‚Äôs a possible way to recover or not, butthen you‚Äôre making the decision that a situation is unrecoverable on behalf ofthe calling code\. When you choose to return a `\fIResult\fR` value, you give thecalling code options\. The calling code could choose to attempt to recover in away that‚Äôs appropriate for its situation, or it could decide that an `\fIErr\fR`value in this case is unrecoverable, so it can call `\fIpanic!\fR` and turn yourrecoverable error into an unrecoverable one\. Therefore, returning `\fIResult\fR` is agood default choice when you‚Äôre defining a function that might fail\.
.P
In situations such as examples, prototype code, and tests, it‚Äôs moreappropriate to write code that panics instead of returning a `\fIResult\fR`\. Let‚Äôsexplore why, then discuss situations in which the compiler can‚Äôt tell thatfailure is impossible, but you as a human can\. The chapter will conclude withsome general guidelines on how to decide whether to panic in library code\.
.br

.br
\fBExamples, Prototype Code, and Tests\fR
.br
=====================================
.br

.P
When you‚Äôre writing an example to illustrate some concept, also including robusterror\-handling code can make the example less clear\. Inexamples, it‚Äôs understood that a call to a method like `\fIunwrap\fR` that couldpanic is meant as a placeholder for the way you‚Äôd want your application tohandle errors, which can differ based on what the rest of your code is doing\.
.P
Similarly, the `\fIunwrap\fR` and `\fIexpect\fR` methods are very handy when prototyping,before you‚Äôre ready to decide how to handle errors\. They leave clear markers inyour code for when you‚Äôre ready to make your program more robust\.
.P
If a method call fails in a test, you‚Äôd want the whole test to fail, even ifthat method isn‚Äôt the functionality under test\. Because `\fIpanic!\fR` is how a testis marked as a failure, calling `\fIunwrap\fR` or `\fIexpect\fR` is exactly what shouldhappen\.
.br

.br
\fBCases in Which You Have More Information Than the Compiler\fR
.br
============================================================
.br

.P
It would also be appropriate to call `\fIunwrap\fR` or `\fIexpect\fR` when you have someother logic that ensures the `\fIResult\fR` will have an `\fIOk\fR` value, but the logicisn‚Äôt something the compiler understands\. You‚Äôll still have a `\fIResult\fR` valuethat you need to handle: whatever operation you‚Äôre calling still has thepossibility of failing in general, even though it‚Äôs logically impossible inyour particular situation\. If you can ensure by manually inspecting the codethat you‚Äôll never have an `\fIErr\fR` variant, it‚Äôs perfectly acceptable to call`\fIunwrap\fR`, and even better to document the reason you think you‚Äôll never have an`\fIErr\fR` variant in the `\fIexpect\fR` text\. Here‚Äôs an example:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::net::IpAddr;

    let home: IpAddr = "127\.0\.0\.1"
        \.parse()
        \.expect("Hardcoded IP address should be valid");
# }

.EE

.RE
.P
We‚Äôre creating an `\fIIpAddr\fR` instance by parsing a hardcoded string\. We can seethat `\fI127\.0\.0\.1\fR` is a valid IP address, so it‚Äôs acceptable to use `\fIexpect\fR`here\. However, having a hardcoded, valid string doesn‚Äôt change the return typeof the `\fIparse\fR` method: we still get a `\fIResult\fR` value, and the compiler willstill make us handle the `\fIResult\fR` as if the `\fIErr\fR` variant is a possibilitybecause the compiler isn‚Äôt smart enough to see that this string is always avalid IP address\. If the IP address string came from a user rather than beinghardcoded into the program and therefore \fIdid\fR have a possibility of failure,we‚Äôd definitely want to handle the `\fIResult\fR` in a more robust way instead\.Mentioning the assumption that this IP address is hardcoded will prompt us tochange `\fIexpect\fR` to better error handling code if in the future, we need to getthe IP address from some other source instead\.
.br

.br
\fBGuidelines for Error Handling\fR
.br
===============================
.br

.P
It‚Äôs advisable to have your code panic when it‚Äôs possible that your codecould end up in a bad state\. In this context, a \fIbad state\fR is when someassumption, guarantee, contract, or invariant has been broken, such as wheninvalid values, contradictory values, or missing values are passed to yourcode‚Äîplus one or more of the following:
.P
The bad state is something that is unexpected, as opposed to something thatwill likely happen occasionally, like a user entering data in the wrongformat\.
.P
Your code after this point needs to rely on not being in this bad state,rather than checking for the problem at every step\.
.P
There‚Äôs not a good way to encode this information in the types you use\. We‚Äôllwork through an example of what we mean in the 
.UR ch17\-03\-oo\-design\-patterns\.html#encoding\-states\-and\-behavior\-as\-types
.UE
‚ÄúEncoding States and Behavioras Types‚Äù section of Chapter 17\.
.P
If someone calls your code and passes in values that don‚Äôt make sense, it‚Äôsbest to return an error if you can so the user of the library can decide whatthey want to do in that case\. However, in cases where continuing could beinsecure or harmful, the best choice might be to call `\fIpanic!\fR` and alert theperson using your library to the bug in their code so they can fix it duringdevelopment\. Similarly, `\fIpanic!\fR` is often appropriate if you‚Äôre callingexternal code that is out of your control and it returns an invalid state thatyou have no way of fixing\.
.P
However, when failure is expected, it‚Äôs more appropriate to return a `\fIResult\fR`than to make a `\fIpanic!\fR` call\. Examples include a parser being given malformeddata or an HTTP request returning a status that indicates you have hit a ratelimit\. In these cases, returning a `\fIResult\fR` indicates that failure is anexpected possibility that the calling code must decide how to handle\.
.P
When your code performs an operation that could put a user at risk if it‚Äôscalled using invalid values, your code should verify the values are valid firstand panic if the values aren‚Äôt valid\. This is mostly for safety reasons:attempting to operate on invalid data can expose your code to vulnerabilities\.This is the main reason the standard library will call `\fIpanic!\fR` if you attemptan out\-of\-bounds memory access: trying to access memory that doesn‚Äôt belong tothe current data structure is a common security problem\. Functions often have\fIcontracts\fR: their behavior is only guaranteed if the inputs meet particularrequirements\. Panicking when the contract is violated makes sense because acontract violation always indicates a caller\-side bug and it‚Äôs not a kind oferror you want the calling code to have to explicitly handle\. In fact, there‚Äôsno reasonable way for calling code to recover; the calling \fIprogrammers\fR needto fix the code\. Contracts for a function, especially when a violation willcause a panic, should be explained in the API documentation for the function\.
.P
However, having lots of error checks in all of your functions would be verboseand annoying\. Fortunately, you can use Rust‚Äôs type system (and thus the typechecking done by the compiler) to do many of the checks for you\. If yourfunction has a particular type as a parameter, you can proceed with your code‚Äôslogic knowing that the compiler has already ensured you have a valid value\. Forexample, if you have a type rather than an `\fIOption\fR`, your program expects tohave \fIsomething\fR rather than \fInothing\fR\. Your code then doesn‚Äôt have to handletwo cases for the `\fISome\fR` and `\fINone\fR` variants: it will only have one case fordefinitely having a value\. Code trying to pass nothing to your function won‚Äôteven compile, so your function doesn‚Äôt have to check for that case at runtime\.Another example is using an unsigned integer type such as `\fIu32\fR`, which ensuresthe parameter is never negative\.
.br

.br
\fBCreating Custom Types for Validation\fR
.br
======================================
.br

.P
Let‚Äôs take the idea of using Rust‚Äôs type system to ensure we have a valid valueone step further and look at creating a custom type for validation\. Recall theguessing game in Chapter 2 in which our code asked the user to guess a numberbetween 1 and 100\. We never validated that the user‚Äôs guess was between thosenumbers before checking it against our secret number; we only validated thatthe guess was positive\. In this case, the consequences were not very dire: ouroutput of ‚ÄúToo high‚Äù or ‚ÄúToo low‚Äù would still be correct\. But it would be auseful enhancement to guide the user toward valid guesses and have differentbehavior when a user guesses a number that‚Äôs out of range versus when a usertypes, for example, letters instead\.
.P
One way to do this would be to parse the guess as an `\fIi32\fR` instead of only a`\fIu32\fR` to allow potentially negative numbers, and then add a check for thenumber being in range, like so:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
    loop {
        // \-\-snip\-\-

#         println!("Please input your guess\.");
# 
#         let mut guess = String::new();
# 
#         io::stdin()
#             \.read_line(&mut guess)
#             \.expect("Failed to read line");
# 
        let guess: i32 = match guess\.trim()\.parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        if guess < 1 || guess > 100 {
            println!("The secret number will be between 1 and 100\.");
            continue;
        }

        match guess\.cmp(&secret_number) {
            // \-\-snip\-\-
#             Ordering::Less => println!("Too small!"),
#             Ordering::Greater => println!("Too big!"),
#             Ordering::Equal => {
#                 println!("You win!");
#                 break;
#             }
#         }
    }
# }

.EE

.RE
.P
The `\fIif\fR` expression checks whether our value is out of range, tells the userabout the problem, and calls `\fIcontinue\fR` to start the next iteration of the loopand ask for another guess\. After the `\fIif\fR` expression, we can proceed with thecomparisons between `\fIguess\fR` and the secret number knowing that `\fIguess\fR` isbetween 1 and 100\.
.P
However, this is not an ideal solution: if it was absolutely critical that theprogram only operated on values between 1 and 100, and it had many functionswith this requirement, having a check like this in every function would betedious (and might impact performance)\.
.P
Instead, we can make a new type and put the validations in a function to createan instance of the type rather than repeating the validations everywhere\. Thatway, it‚Äôs safe for functions to use the new type in their signatures andconfidently use the values they receive\. Listing 9\-13 shows one way to define a`\fIGuess\fR` type that will only create an instance of `\fIGuess\fR` if the `\fInew\fR` functionreceives a value between 1 and 100\.
.RS
.IP \fBrust\fR 2

.br
.EX
pub struct Guess {
    value: i32,
}

impl Guess {
    pub fn new(value: i32) \-> Guess {
        if value < 1 || value > 100 {
            panic!("Guess value must be between 1 and 100, got {}\.", value);
        }

        Guess { value }
    }

    pub fn value(&self) \-> i32 {
        self\.value
    }
}

.EE

.RE
Listing 9\-13: A `\fIGuess\fR` type that will only continue withvalues between 1 and 100
.P
First, we define a struct named `\fIGuess\fR` that has a field named `\fIvalue\fR` thatholds an `\fIi32\fR`\. This is where the number will be stored\.
.P
Then we implement an associated function named `\fInew\fR` on `\fIGuess\fR` that createsinstances of `\fIGuess\fR` values\. The `\fInew\fR` function is defined to have oneparameter named `\fIvalue\fR` of type `\fIi32\fR` and to return a `\fIGuess\fR`\. The code in thebody of the `\fInew\fR` function tests `\fIvalue\fR` to make sure it‚Äôs between 1 and 100\.If `\fIvalue\fR` doesn‚Äôt pass this test, we make a `\fIpanic!\fR` call, which will alertthe programmer who is writing the calling code that they have a bug they needto fix, because creating a `\fIGuess\fR` with a `\fIvalue\fR` outside this range wouldviolate the contract that `\fIGuess::new\fR` is relying on\. The conditions in which`\fIGuess::new\fR` might panic should be discussed in its public\-facing APIdocumentation; we‚Äôll cover documentation conventions indicating the possibilityof a `\fIpanic!\fR` in the API documentation that you create in Chapter 14\. If`\fIvalue\fR` does pass the test, we create a new `\fIGuess\fR` with its `\fIvalue\fR` field setto the `\fIvalue\fR` parameter and return the `\fIGuess\fR`\.
.P
Next, we implement a method named `\fIvalue\fR` that borrows `\fIself\fR`, doesn‚Äôt have anyother parameters, and returns an `\fIi32\fR`\. This kind of method is sometimes calleda \fIgetter\fR, because its purpose is to get some data from its fields and returnit\. This public method is necessary because the `\fIvalue\fR` field of the `\fIGuess\fR`struct is private\. It‚Äôs important that the `\fIvalue\fR` field be private so codeusing the `\fIGuess\fR` struct is not allowed to set `\fIvalue\fR` directly: code outsidethe module \fImust\fR use the `\fIGuess::new\fR` function to create an instance of`\fIGuess\fR`, thereby ensuring there‚Äôs no way for a `\fIGuess\fR` to have a `\fIvalue\fR` thathasn‚Äôt been checked by the conditions in the `\fIGuess::new\fR` function\.
.P
A function that has a parameter or returns only numbers between 1 and 100 couldthen declare in its signature that it takes or returns a `\fIGuess\fR` rather than an`\fIi32\fR` and wouldn‚Äôt need to do any additional checks in its body\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Rust‚Äôs error handling features are designed to help you write more robust code\.The `\fIpanic!\fR` macro signals that your program is in a state it can‚Äôt handle andlets you tell the process to stop instead of trying to proceed with invalid orincorrect values\. The `\fIResult\fR` enum uses Rust‚Äôs type system to indicate thatoperations might fail in a way that your code could recover from\. You can use`\fIResult\fR` to tell code that calls your code that it needs to handle potentialsuccess or failure as well\. Using `\fIpanic!\fR` and `\fIResult\fR` in the appropriatesituations will make your code more reliable in the face of inevitable problems\.
.P
Now that you‚Äôve seen useful ways that the standard library uses generics withthe `\fIOption\fR` and `\fIResult\fR` enums, we‚Äôll talk about how generics work and how youcan use them in your code\.
.SH "Generic Types, Traits, and Lifetimes"

.br

.br
\fBGeneric Types, Traits, and Lifetimes\fR
.br
======================================
.br

.P
Every programming language has tools for effectively handling the duplicationof concepts\. In Rust, one such tool is \fIgenerics\fR: abstract stand\-ins forconcrete types or other properties\. We can express the behavior of generics orhow they relate to other generics without knowing what will be in their placewhen compiling and running the code\.
.P
Functions can take parameters of some generic type, instead of a concrete typelike `\fIi32\fR` or `\fIString\fR`, in the same way a function takes parameters withunknown values to run the same code on multiple concrete values\. In fact, we‚Äôvealready used generics in Chapter 6 with `\fIOption<T>\fR`, Chapter 8 with `\fIVec<T>\fR`and `\fIHashMap<K, V>\fR`, and Chapter 9 with `\fIResult<T, E>\fR`\. In this chapter, you‚Äôllexplore how to define your own types, functions, and methods with generics!
.P
First, we‚Äôll review how to extract a function to reduce code duplication\. We‚Äôllthen use the same technique to make a generic function from two functions thatdiffer only in the types of their parameters\. We‚Äôll also explain how to usegeneric types in struct and enum definitions\.
.P
Then you‚Äôll learn how to use \fItraits\fR to define behavior in a generic way\. Youcan combine traits with generic types to constrain a generic type to acceptonly those types that have a particular behavior, as opposed to just any type\.
.P
Finally, we‚Äôll discuss \fIlifetimes\fR: a variety of generics that give thecompiler information about how references relate to each other\. Lifetimes allowus to give the compiler enough information about borrowed values so that it canensure references will be valid in more situations than it could without ourhelp\.
.br

.br
\fBRemoving Duplication by Extracting a Function\fR
.br
===============================================
.br

.P
Generics allow us to replace specific types with a placeholder that representsmultiple types to remove code duplication\. Before diving into generics syntax,then, let‚Äôs first look at how to remove duplication in a way that doesn‚Äôtinvolve generic types by extracting a function that replaces specific valueswith a placeholder that represents multiple values\. Then we‚Äôll apply the sametechnique to extract a generic function! By looking at how to recognizeduplicated code you can extract into a function, you‚Äôll start to recognizeduplicated code that can use generics\.
.P
We begin with the short program in Listing 10\-1 that finds the largest numberin a list\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let mut largest = &number_list[0];

    for number in &number_list {
        if number > largest {
            largest = number;
        }
    }

    println!("The largest number is {}", largest);
#     assert_eq!(*largest, 100);
}

.EE

.RE
Listing 10\-1: Finding the largest number in a list ofnumbers
.P
We store a list of integers in the variable `\fInumber_list\fR` and place a referenceto the first number in the list in a variable named `\fIlargest\fR`\. We then iteratethrough all the numbers in the list, and if the current number is greater thanthe number stored in `\fIlargest\fR`, replace the reference in that variable\.However, if the current number is less than or equal to the largest number seenso far, the variable doesn‚Äôt change, and the code moves on to the next numberin the list\. After considering all the numbers in the list, `\fIlargest\fR` shouldrefer to the largest number, which in this case is 100\.
.P
We've now been tasked with finding the largest number in two different lists ofnumbers\. To do so, we can choose to duplicate the code in Listing 10\-1 and usethe same logic at two different places in the program, as shown in Listing 10\-2\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let mut largest = &number_list[0];

    for number in &number_list {
        if number > largest {
            largest = number;
        }
    }

    println!("The largest number is {}", largest);

    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];

    let mut largest = &number_list[0];

    for number in &number_list {
        if number > largest {
            largest = number;
        }
    }

    println!("The largest number is {}", largest);
}

.EE

.RE
Listing 10\-2: Code to find the largest number in \fItwo\fRlists of numbers
.P
Although this code works, duplicating code is tedious and error prone\. We alsohave to remember to update the code in multiple places when we want to changeit\.
.P
To eliminate this duplication, we‚Äôll create an abstraction by defining afunction that operates on any list of integers passed in a parameter\. Thissolution makes our code clearer and lets us express the concept of finding thelargest number in a list abstractly\.
.P
In Listing 10\-3, we extract the code that finds the largest number into afunction named `\fIlargest\fR`\. Then we call the function to find the largest numberin the two lists from Listing 10\-2\. We could also use the function on any otherlist of `\fIi32\fR` values we might have in the future\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn largest(list: &[i32]) \-> &i32 {
    let mut largest = &list[0];

    for item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);
#     assert_eq!(*result, 100);

    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];

    let result = largest(&number_list);
    println!("The largest number is {}", result);
#     assert_eq!(*result, 6000);
}

.EE

.RE
Listing 10\-3: Abstracted code to find the largest numberin two lists
.P
The `\fIlargest\fR` function has a parameter called `\fIlist\fR`, which represents anyconcrete slice of `\fIi32\fR` values we might pass into the function\. As a result,when we call the function, the code runs on the specific values that we passin\.
.P
In summary, here are the steps we took to change the code from Listing 10\-2 toListing 10\-3:
.P
Identify duplicate code\.
.P
Extract the duplicate code into the body of the function and specify theinputs and return values of that code in the function signature\.
.P
Update the two instances of duplicated code to call the function instead\.
.P
Next, we‚Äôll use these same steps with generics to reduce code duplication\. Inthe same way that the function body can operate on an abstract `\fIlist\fR` insteadof specific values, generics allow code to operate on abstract types\.
.P
For example, say we had two functions: one that finds the largest item in aslice of `\fIi32\fR` values and one that finds the largest item in a slice of `\fIchar\fR`values\. How would we eliminate that duplication? Let‚Äôs find out!
.SH "Generic Data Types"

.br

.br
\fBGeneric Data Types\fR
.br
====================
.br

.P
We use generics to create definitions for items like function signatures orstructs, which we can then use with many different concrete data types\. Let‚Äôsfirst look at how to define functions, structs, enums, and methods usinggenerics\. Then we‚Äôll discuss how generics affect code performance\.
.br

.br
\fBIn Function Definitions\fR
.br
=========================
.br

.P
When defining a function that uses generics, we place the generics in thesignature of the function where we would usually specify the data types of theparameters and return value\. Doing so makes our code more flexible and providesmore functionality to callers of our function while preventing code duplication\.
.P
Continuing with our `\fIlargest\fR` function, Listing 10\-4 shows two functions thatboth find the largest value in a slice\. We'll then combine these into a singlefunction that uses generics\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn largest_i32(list: &[i32]) \-> &i32 {
    let mut largest = &list[0];

    for item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn largest_char(list: &[char]) \-> &char {
    let mut largest = &list[0];

    for item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest_i32(&number_list);
    println!("The largest number is {}", result);
#     assert_eq!(*result, 100);

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest_char(&char_list);
    println!("The largest char is {}", result);
#     assert_eq!(*result, 'y');
}

.EE

.RE
Listing 10\-4: Two functions that differ only in theirnames and the types in their signatures
.P
The `\fIlargest_i32\fR` function is the one we extracted in Listing 10\-3 that findsthe largest `\fIi32\fR` in a slice\. The `\fIlargest_char\fR` function finds the largest`\fIchar\fR` in a slice\. The function bodies have the same code, so let‚Äôs eliminatethe duplication by introducing a generic type parameter in a single function\.
.P
To parameterize the types in a new single function, we need to name the typeparameter, just as we do for the value parameters to a function\. You can useany identifier as a type parameter name\. But we‚Äôll use `\fIT\fR` because, byconvention, type parameter names in Rust are short, often just a letter, and Rust‚Äôstype\-naming convention is CamelCase\. Short for ‚Äútype,‚Äù `\fIT\fR` is the defaultchoice of most Rust programmers\.
.P
When we use a parameter in the body of the function, we have to declare theparameter name in the signature so the compiler knows what that name means\.Similarly, when we use a type parameter name in a function signature, we haveto declare the type parameter name before we use it\. To define the generic`\fIlargest\fR` function, place type name declarations inside angle brackets, `\fI<>\fR`,between the name of the function and the parameter list, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn largest<T>(list: &[T]) \-> &T {

.EE

.RE
.P
We read this definition as: the function `\fIlargest\fR` is generic over some type`\fIT\fR`\. This function has one parameter named `\fIlist\fR`, which is a slice of valuesof type `\fIT\fR`\. The `\fIlargest\fR` function will return a reference to a value of thesame type `\fIT\fR`\.
.P
Listing 10\-5 shows the combined `\fIlargest\fR` function definition using the genericdata type in its signature\. The listing also shows how we can call the functionwith either a slice of `\fIi32\fR` values or `\fIchar\fR` values\. Note that this code won‚Äôtcompile yet, but we‚Äôll fix it later in this chapter\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn largest<T>(list: &[T]) \-> &T {
    let mut largest = &list[0];

    for item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest(&char_list);
    println!("The largest char is {}", result);
}

.EE

.RE
Listing 10\-5: The `\fIlargest\fR` function using generic typeparameters; this doesn‚Äôt yet compile
.P
If we compile this code right now, we‚Äôll get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0369]: binary operation `>` cannot be applied to type `&T`
 \-\-> src/main\.rs:5:17
  |
5 |         if item > largest {
  |            \-\-\-\- ^ \-\-\-\-\-\-\- &T
  |            |
  |            &T
  |
help: consider restricting type parameter `T`
  |
1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) \-> &T {
  |             ++++++++++++++++++++++

For more information about this error, try `rustc \-\-explain E0369`\.
error: could not compile `chapter10` due to previous error

.EE

.RE
.P
The help text mentions `\fIstd::cmp::PartialOrd\fR`, which is a \fItrait\fR, and we‚Äôregoing to talk about traits in the next section\. For now, know that this errorstates that the body of `\fIlargest\fR` won‚Äôt work for all possible types that `\fIT\fR`could be\. Because we want to compare values of type `\fIT\fR` in the body, we canonly use types whose values can be ordered\. To enable comparisons, the standardlibrary has the `\fIstd::cmp::PartialOrd\fR` trait that you can implement on types(see Appendix C for more on this trait)\. By following the help text'ssuggestion, we restrict the types valid for `\fIT\fR` to only those that implement`\fIPartialOrd\fR` and this example will compile, because the standard libraryimplements `\fIPartialOrd\fR` on both `\fIi32\fR` and `\fIchar\fR`\.
.br

.br
\fBIn Struct Definitions\fR
.br
=======================
.br

.P
We can also define structs to use a generic type parameter in one or morefields using the `\fI<>\fR` syntax\. Listing 10\-6 defines a `\fIPoint<T>\fR` struct to hold`\fIx\fR` and `\fIy\fR` coordinate values of any type\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let integer = Point { x: 5, y: 10 };
    let float = Point { x: 1\.0, y: 4\.0 };
}

.EE

.RE
Listing 10\-6: A `\fIPoint<T>\fR` struct that holds `\fIx\fR` and `\fIy\fR`values of type `\fIT\fR`
.P
The syntax for using generics in struct definitions is similar to that used infunction definitions\. First, we declare the name of the type parameter insideangle brackets just after the name of the struct\. Then we use the generic typein the struct definition where we would otherwise specify concrete data types\.
.P
Note that because we‚Äôve used only one generic type to define `\fIPoint<T>\fR`, thisdefinition says that the `\fIPoint<T>\fR` struct is generic over some type `\fIT\fR`, andthe fields `\fIx\fR` and `\fIy\fR` are \fIboth\fR that same type, whatever that type may be\. Ifwe create an instance of a `\fIPoint<T>\fR` that has values of different types, as inListing 10\-7, our code won‚Äôt compile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let wont_work = Point { x: 5, y: 4\.0 };
}

.EE

.RE
Listing 10\-7: The fields `\fIx\fR` and `\fIy\fR` must be the sametype because both have the same generic data type `\fIT\fR`\.
.P
In this example, when we assign the integer value 5 to `\fIx\fR`, we let the compilerknow that the generic type `\fIT\fR` will be an integer for this instance of`\fIPoint<T>\fR`\. Then when we specify 4\.0 for `\fIy\fR`, which we‚Äôve defined to have thesame type as `\fIx\fR`, we‚Äôll get a type mismatch error like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0308]: mismatched types
 \-\-> src/main\.rs:7:38
  |
7 |     let wont_work = Point { x: 5, y: 4\.0 };
  |                                      ^^^ expected integer, found floating\-point number

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `chapter10` due to previous error

.EE

.RE
.P
To define a `\fIPoint\fR` struct where `\fIx\fR` and `\fIy\fR` are both generics but could havedifferent types, we can use multiple generic type parameters\. For example, inListing 10\-8, we change the definition of `\fIPoint\fR` to be generic over types `\fIT\fR`and `\fIU\fR` where `\fIx\fR` is of type `\fIT\fR` and `\fIy\fR` is of type `\fIU\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point<T, U> {
    x: T,
    y: U,
}

fn main() {
    let both_integer = Point { x: 5, y: 10 };
    let both_float = Point { x: 1\.0, y: 4\.0 };
    let integer_and_float = Point { x: 5, y: 4\.0 };
}

.EE

.RE
Listing 10\-8: A `\fIPoint<T, U>\fR` generic over two types sothat `\fIx\fR` and `\fIy\fR` can be values of different types
.P
Now all the instances of `\fIPoint\fR` shown are allowed! You can use as many generictype parameters in a definition as you want, but using more than a few makesyour code hard to read\. If you're finding you need lots of generic types inyour code, it could indicate that your code needs restructuring into smallerpieces\.
.br

.br
\fBIn Enum Definitions\fR
.br
=====================
.br

.P
As we did with structs, we can define enums to hold generic data types in theirvariants\. Let‚Äôs take another look at the `\fIOption<T>\fR` enum that the standardlibrary provides, which we used in Chapter 6:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Option<T> {
    Some(T),
    None,
}

.EE

.RE
.P
This definition should now make more sense to you\. As you can see, the`\fIOption<T>\fR` enum is generic over type `\fIT\fR` and has two variants: `\fISome\fR`, whichholds one value of type `\fIT\fR`, and a `\fINone\fR` variant that doesn‚Äôt hold any value\.By using the `\fIOption<T>\fR` enum, we can express the abstract concept of anoptional value, and because `\fIOption<T>\fR` is generic, we can use this abstractionno matter what the type of the optional value is\.
.P
Enums can use multiple generic types as well\. The definition of the `\fIResult\fR`enum that we used in Chapter 9 is one example:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Result<T, E> {
    Ok(T),
    Err(E),
}

.EE

.RE
.P
The `\fIResult\fR` enum is generic over two types, `\fIT\fR` and `\fIE\fR`, and has two variants:`\fIOk\fR`, which holds a value of type `\fIT\fR`, and `\fIErr\fR`, which holds a value of type`\fIE\fR`\. This definition makes it convenient to use the `\fIResult\fR` enum anywhere wehave an operation that might succeed (return a value of some type `\fIT\fR`) or fail(return an error of some type `\fIE\fR`)\. In fact, this is what we used to open afile in Listing 9\-3, where `\fIT\fR` was filled in with the type `\fIstd::fs::File\fR` whenthe file was opened successfully and `\fIE\fR` was filled in with the type`\fIstd::io::Error\fR` when there were problems opening the file\.
.P
When you recognize situations in your code with multiple struct or enumdefinitions that differ only in the types of the values they hold, you canavoid duplication by using generic types instead\.
.br

.br
\fBIn Method Definitions\fR
.br
=======================
.br

.P
We can implement methods on structs and enums (as we did in Chapter 5) and usegeneric types in their definitions, too\. Listing 10\-9 shows the `\fIPoint<T>\fR`struct we defined in Listing 10\-6 with a method named `\fIx\fR` implemented on it\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point<T> {
    x: T,
    y: T,
}

impl<T> Point<T> {
    fn x(&self) \-> &T {
        &self\.x
    }
}

fn main() {
    let p = Point { x: 5, y: 10 };

    println!("p\.x = {}", p\.x());
}

.EE

.RE
Listing 10\-9: Implementing a method named `\fIx\fR` on the`\fIPoint<T>\fR` struct that will return a reference to the `\fIx\fR` field of type`\fIT\fR`
.P
Here, we‚Äôve defined a method named `\fIx\fR` on `\fIPoint<T>\fR` that returns a referenceto the data in the field `\fIx\fR`\.
.P
Note that we have to declare `\fIT\fR` just after `\fIimpl\fR` so we can use `\fIT\fR` to specifythat we‚Äôre implementing methods on the type `\fIPoint<T>\fR`\. By declaring `\fIT\fR` as ageneric type after `\fIimpl\fR`, Rust can identify that the type in the anglebrackets in `\fIPoint\fR` is a generic type rather than a concrete type\. We couldhave chosen a different name for this generic parameter than the genericparameter declared in the struct definition, but using the same name isconventional\. Methods written within an `\fIimpl\fR` that declares the generic typewill be defined on any instance of the type, no matter what concrete type endsup substituting for the generic type\.
.P
We can also specify constraints on generic types when defining methods on thetype\. We could, for example, implement methods only on `\fIPoint<f32>\fR` instancesrather than on `\fIPoint<T>\fR` instances with any generic type\. In Listing 10\-10 weuse the concrete type `\fIf32\fR`, meaning we don‚Äôt declare any types after `\fIimpl\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# struct Point<T> {
#     x: T,
#     y: T,
# }
# 
# impl<T> Point<T> {
#     fn x(&self) \-> &T {
#         &self\.x
#     }
# }
# 
impl Point<f32> {
    fn distance_from_origin(&self) \-> f32 {
        (self\.x\.powi(2) + self\.y\.powi(2))\.sqrt()
    }
}
# 
# fn main() {
#     let p = Point { x: 5, y: 10 };
# 
#     println!("p\.x = {}", p\.x());
# }

.EE

.RE
Listing 10\-10: An `\fIimpl\fR` block that only applies to astruct with a particular concrete type for the generic type parameter `\fIT\fR`
.P
This code means the type `\fIPoint<f32>\fR` will have a `\fIdistance_from_origin\fR`method; other instances of `\fIPoint<T>\fR` where `\fIT\fR` is not of type `\fIf32\fR` will nothave this method defined\. The method measures how far our point is from thepoint at coordinates (0\.0, 0\.0) and uses mathematical operations that areavailable only for floating point types\.
.P
Generic type parameters in a struct definition aren‚Äôt always the same as thoseyou use in that same struct‚Äôs method signatures\. Listing 10\-11 uses the generictypes `\fIX1\fR` and `\fIY1\fR` for the `\fIPoint\fR` struct and `\fIX2\fR` `\fIY2\fR` for the `\fImixup\fR` methodsignature to make the example clearer\. The method creates a new `\fIPoint\fR`instance with the `\fIx\fR` value from the `\fIself\fR` `\fIPoint\fR` (of type `\fIX1\fR`) and the `\fIy\fR`value from the passed\-in `\fIPoint\fR` (of type `\fIY2\fR`)\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point<X1, Y1> {
    x: X1,
    y: Y1,
}

impl<X1, Y1> Point<X1, Y1> {
    fn mixup<X2, Y2>(self, other: Point<X2, Y2>) \-> Point<X1, Y2> {
        Point {
            x: self\.x,
            y: other\.y,
        }
    }
}

fn main() {
    let p1 = Point { x: 5, y: 10\.4 };
    let p2 = Point { x: "Hello", y: 'c' };

    let p3 = p1\.mixup(p2);

    println!("p3\.x = {}, p3\.y = {}", p3\.x, p3\.y);
}

.EE

.RE
Listing 10\-11: A method that uses generic types differentfrom its struct‚Äôs definition
.P
In `\fImain\fR`, we‚Äôve defined a `\fIPoint\fR` that has an `\fIi32\fR` for `\fIx\fR` (with value `\fI5\fR`)and an `\fIf64\fR` for `\fIy\fR` (with value `\fI10\.4\fR`)\. The `\fIp2\fR` variable is a `\fIPoint\fR` structthat has a string slice for `\fIx\fR` (with value `\fI"Hello"\fR`) and a `\fIchar\fR` for `\fIy\fR`(with value `\fIc\fR`)\. Calling `\fImixup\fR` on `\fIp1\fR` with the argument `\fIp2\fR` gives us `\fIp3\fR`,which will have an `\fIi32\fR` for `\fIx\fR`, because `\fIx\fR` came from `\fIp1\fR`\. The `\fIp3\fR` variablewill have a `\fIchar\fR` for `\fIy\fR`, because `\fIy\fR` came from `\fIp2\fR`\. The `\fIprintln!\fR` macrocall will print `\fIp3\.x = 5, p3\.y = c\fR`\.
.P
The purpose of this example is to demonstrate a situation in which some genericparameters are declared with `\fIimpl\fR` and some are declared with the methoddefinition\. Here, the generic parameters `\fIX1\fR` and `\fIY1\fR` are declared after`\fIimpl\fR` because they go with the struct definition\. The generic parameters `\fIX2\fR`and `\fIY2\fR` are declared after `\fIfn mixup\fR`, because they‚Äôre only relevant to themethod\.
.br

.br
\fBPerformance of Code Using Generics\fR
.br
====================================
.br

.P
You might be wondering whether there is a runtime cost when using generic typeparameters\. The good news is that using generic types won't make your program runany slower than it would with concrete types\.
.P
Rust accomplishes this by performing monomorphization of the code usinggenerics at compile time\. \fIMonomorphization\fR is the process of turning genericcode into specific code by filling in the concrete types that are used whencompiled\. In this process, the compiler does the opposite of the steps we usedto create the generic function in Listing 10\-5: the compiler looks at all theplaces where generic code is called and generates code for the concrete typesthe generic code is called with\.
.P
Let‚Äôs look at how this works by using the standard library‚Äôs generic`\fIOption<T>\fR` enum:
.RS
.IP \fBrust\fR 2

.br
.EX
let integer = Some(5);
let float = Some(5\.0);

.EE

.RE
.P
When Rust compiles this code, it performs monomorphization\. During thatprocess, the compiler reads the values that have been used in `\fIOption<T>\fR`instances and identifies two kinds of `\fIOption<T>\fR`: one is `\fIi32\fR` and the otheris `\fIf64\fR`\. As such, it expands the generic definition of `\fIOption<T>\fR` into twodefinitions specialized to `\fIi32\fR` and `\fIf64\fR`, thereby replacing the genericdefinition with the specific ones\.
.P
The monomorphized version of the code looks similar to the following (thecompiler uses different names than what we‚Äôre using here for illustration):Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
enum Option_i32 {
    Some(i32),
    None,
}

enum Option_f64 {
    Some(f64),
    None,
}

fn main() {
    let integer = Option_i32::Some(5);
    let float = Option_f64::Some(5\.0);
}

.EE

.RE
.P
The generic `\fIOption<T>\fR` is replaced with the specific definitions created bythe compiler\. Because Rust compiles generic code into code that specifies thetype in each instance, we pay no runtime cost for using generics\. When the coderuns, it performs just as it would if we had duplicated each definition byhand\. The process of monomorphization makes Rust‚Äôs generics extremely efficientat runtime\.
.SH "Traits: Defining Shared Behavior"

.br

.br
\fBTraits: Defining Shared Behavior\fR
.br
==================================
.br

.P
A \fItrait\fR defines functionality a particular type has and can share with othertypes\. We can use traits to define shared behavior in an abstract way\. We canuse \fItrait bounds\fR to specify that a generic type can be any type that hascertain behavior\.
.P
Note: Traits are similar to a feature often called \fIinterfaces\fR in otherlanguages, although with some differences\.
.br

.br
\fBDefining a Trait\fR
.br
==================
.br

.P
A type‚Äôs behavior consists of the methods we can call on that type\. Differenttypes share the same behavior if we can call the same methods on all of thosetypes\. Trait definitions are a way to group method signatures together todefine a set of behaviors necessary to accomplish some purpose\.
.P
For example, let‚Äôs say we have multiple structs that hold various kinds andamounts of text: a `\fINewsArticle\fR` struct that holds a news story filed in aparticular location and a `\fITweet\fR` that can have at most 280 characters alongwith metadata that indicates whether it was a new tweet, a retweet, or a replyto another tweet\.
.P
We want to make a media aggregator library crate named `\fIaggregator\fR` that candisplay summaries of data that might be stored in a `\fINewsArticle\fR` or `\fITweet\fR`instance\. To do this, we need a summary from each type, and we‚Äôll requestthat summary by calling a `\fIsummarize\fR` method on an instance\. Listing 10\-12shows the definition of a public `\fISummary\fR` trait that expresses this behavior\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Summary {
    fn summarize(&self) \-> String;
}

.EE

.RE
Listing 10\-12: A `\fISummary\fR` trait that consists of thebehavior provided by a `\fIsummarize\fR` method
.P
Here, we declare a trait using the `\fItrait\fR` keyword and then the trait‚Äôs name,which is `\fISummary\fR` in this case\. We‚Äôve also declared the trait as `\fIpub\fR` so thatcrates depending on this crate can make use of this trait too, as we‚Äôll see ina few examples\. Inside the curly brackets, we declare the method signaturesthat describe the behaviors of the types that implement this trait, which inthis case is `\fIfn summarize(&self) \-> String\fR`\.
.P
After the method signature, instead of providing an implementation within curlybrackets, we use a semicolon\. Each type implementing this trait must provideits own custom behavior for the body of the method\. The compiler will enforcethat any type that has the `\fISummary\fR` trait will have the method `\fIsummarize\fR`defined with this signature exactly\.
.P
A trait can have multiple methods in its body: the method signatures are listedone per line and each line ends in a semicolon\.
.br

.br
\fBImplementing a Trait on a Type\fR
.br
================================
.br

.P
Now that we‚Äôve defined the desired signatures of the `\fISummary\fR` trait‚Äôs methods,we can implement it on the types in our media aggregator\. Listing 10\-13 showsan implementation of the `\fISummary\fR` trait on the `\fINewsArticle\fR` struct that usesthe headline, the author, and the location to create the return value of`\fIsummarize\fR`\. For the `\fITweet\fR` struct, we define `\fIsummarize\fR` as the usernamefollowed by the entire text of the tweet, assuming that tweet content isalready limited to 280 characters\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize(&self) \-> String;
# }
# 
pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

impl Summary for NewsArticle {
    fn summarize(&self) \-> String {
        format!("{}, by {} ({})", self\.headline, self\.author, self\.location)
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) \-> String {
        format!("{}: {}", self\.username, self\.content)
    }
}

.EE

.RE
Listing 10\-13: Implementing the `\fISummary\fR` trait on the`\fINewsArticle\fR` and `\fITweet\fR` types
.P
Implementing a trait on a type is similar to implementing regular methods\. Thedifference is that after `\fIimpl\fR`, we put the trait name we want to implement,then use the `\fIfor\fR` keyword, and then specify the name of the type we want toimplement the trait for\. Within the `\fIimpl\fR` block, we put the method signaturesthat the trait definition has defined\. Instead of adding a semicolon after eachsignature, we use curly brackets and fill in the method body with the specificbehavior that we want the methods of the trait to have for the particular type\.
.P
Now that the library has implemented the `\fISummary\fR` trait on `\fINewsArticle\fR` and`\fITweet\fR`, users of the crate can call the trait methods on instances of`\fINewsArticle\fR` and `\fITweet\fR` in the same way we call regular methods\. The onlydifference is that the user must bring the trait into scope as well as thetypes\. Here‚Äôs an example of how a binary crate could use our `\fIaggregator\fR`library crate:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use aggregator::{Summary, Tweet};

fn main() {
    let tweet = Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    };

    println!("1 new tweet: {}", tweet\.summarize());
}

.EE

.RE
.P
This code prints `\fI1 new tweet: horse_ebooks: of course, as you probably already know, people\fR`\.
.P
Other crates that depend on the `\fIaggregator\fR` crate can also bring the `\fISummary\fR`trait into scope to implement `\fISummary\fR` on their own types\. One restriction tonote is that we can implement a trait on a type only if at least one of thetrait or the type is local to our crate\. For example, we can implement standardlibrary traits like `\fIDisplay\fR` on a custom type like `\fITweet\fR` as part of our`\fIaggregator\fR` crate functionality, because the type `\fITweet\fR` is local to our`\fIaggregator\fR` crate\. We can also implement `\fISummary\fR` on `\fIVec<T>\fR` in our`\fIaggregator\fR` crate, because the trait `\fISummary\fR` is local to our `\fIaggregator\fR`crate\.
.P
But we can‚Äôt implement external traits on external types\. For example, we can‚Äôtimplement the `\fIDisplay\fR` trait on `\fIVec<T>\fR` within our `\fIaggregator\fR` crate,because `\fIDisplay\fR` and `\fIVec<T>\fR` are both defined in the standard library andaren‚Äôt local to our `\fIaggregator\fR` crate\. This restriction is part of a propertycalled \fIcoherence\fR, and more specifically the \fIorphan rule\fR, so named becausethe parent type is not present\. This rule ensures that other people‚Äôs codecan‚Äôt break your code and vice versa\. Without the rule, two crates couldimplement the same trait for the same type, and Rust wouldn‚Äôt know whichimplementation to use\.
.br

.br
\fBDefault Implementations\fR
.br
=========================
.br

.P
Sometimes it‚Äôs useful to have default behavior for some or all of the methodsin a trait instead of requiring implementations for all methods on every type\.Then, as we implement the trait on a particular type, we can keep or overrideeach method‚Äôs default behavior\.
.P
In Listing 10\-14 we specify a default string for the `\fIsummarize\fR` method of the`\fISummary\fR` trait instead of only defining the method signature, as we did inListing 10\-12\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Summary {
    fn summarize(&self) \-> String {
        String::from("(Read more\.\.\.)")
    }
}
# 
# pub struct NewsArticle {
#     pub headline: String,
#     pub location: String,
#     pub author: String,
#     pub content: String,
# }
# 
# impl Summary for NewsArticle {}
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize(&self) \-> String {
#         format!("{}: {}", self\.username, self\.content)
#     }
# }

.EE

.RE
Listing 10\-14: Defining a `\fISummary\fR` trait with a defaultimplementation of the `\fIsummarize\fR` method
.P
To use a default implementation to summarize instances of `\fINewsArticle\fR`, wespecify an empty `\fIimpl\fR` block with `\fIimpl Summary for NewsArticle {}\fR`\.
.P
Even though we‚Äôre no longer defining the `\fIsummarize\fR` method on `\fINewsArticle\fR`directly, we‚Äôve provided a default implementation and specified that`\fINewsArticle\fR` implements the `\fISummary\fR` trait\. As a result, we can still callthe `\fIsummarize\fR` method on an instance of `\fINewsArticle\fR`, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use aggregator::{self, NewsArticle, Summary};
# 
# fn main() {
    let article = NewsArticle {
        headline: String::from("Penguins win the Stanley Cup Championship!"),
        location: String::from("Pittsburgh, PA, USA"),
        author: String::from("Iceburgh"),
        content: String::from(
            "The Pittsburgh Penguins once again are the best \
             hockey team in the NHL\.",
        ),
    };

    println!("New article available! {}", article\.summarize());
# }

.EE

.RE
.P
This code prints `\fINew article available! (Read more\.\.\.)\fR`\.
.P
Creating a default implementation doesn‚Äôt require us to change anything aboutthe implementation of `\fISummary\fR` on `\fITweet\fR` in Listing 10\-13\. The reason is thatthe syntax for overriding a default implementation is the same as the syntaxfor implementing a trait method that doesn‚Äôt have a default implementation\.
.P
Default implementations can call other methods in the same trait, even if thoseother methods don‚Äôt have a default implementation\. In this way, a trait canprovide a lot of useful functionality and only require implementors to specifya small part of it\. For example, we could define the `\fISummary\fR` trait to have a`\fIsummarize_author\fR` method whose implementation is required, and then define a`\fIsummarize\fR` method that has a default implementation that calls the`\fIsummarize_author\fR` method:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Summary {
    fn summarize_author(&self) \-> String;

    fn summarize(&self) \-> String {
        format!("(Read more from {}\.\.\.)", self\.summarize_author())
    }
}
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize_author(&self) \-> String {
#         format!("@{}", self\.username)
#     }
# }

.EE

.RE
.P
To use this version of `\fISummary\fR`, we only need to define `\fIsummarize_author\fR`when we implement the trait on a type:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize_author(&self) \-> String;
# 
#     fn summarize(&self) \-> String {
#         format!("(Read more from {}\.\.\.)", self\.summarize_author())
#     }
# }
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
impl Summary for Tweet {
    fn summarize_author(&self) \-> String {
        format!("@{}", self\.username)
    }
}

.EE

.RE
.P
After we define `\fIsummarize_author\fR`, we can call `\fIsummarize\fR` on instances of the`\fITweet\fR` struct, and the default implementation of `\fIsummarize\fR` will call thedefinition of `\fIsummarize_author\fR` that we‚Äôve provided\. Because we‚Äôve implemented`\fIsummarize_author\fR`, the `\fISummary\fR` trait has given us the behavior of the`\fIsummarize\fR` method without requiring us to write any more code\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use aggregator::{self, Summary, Tweet};
# 
# fn main() {
    let tweet = Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    };

    println!("1 new tweet: {}", tweet\.summarize());
# }

.EE

.RE
.P
This code prints `\fI1 new tweet: (Read more from @horse_ebooks\.\.\.)\fR`\.
.P
Note that it isn‚Äôt possible to call the default implementation from anoverriding implementation of that same method\.
.br

.br
\fBTraits as Parameters\fR
.br
======================
.br

.P
Now that you know how to define and implement traits, we can explore how to usetraits to define functions that accept many different types\. We'll use the`\fISummary\fR` trait we implemented on the `\fINewsArticle\fR` and `\fITweet\fR` types inListing 10\-13 to define a `\fInotify\fR` function that calls the `\fIsummarize\fR` methodon its `\fIitem\fR` parameter, which is of some type that implements the `\fISummary\fR`trait\. To do this, we use the `\fIimpl Trait\fR` syntax, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize(&self) \-> String;
# }
# 
# pub struct NewsArticle {
#     pub headline: String,
#     pub location: String,
#     pub author: String,
#     pub content: String,
# }
# 
# impl Summary for NewsArticle {
#     fn summarize(&self) \-> String {
#         format!("{}, by {} ({})", self\.headline, self\.author, self\.location)
#     }
# }
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize(&self) \-> String {
#         format!("{}: {}", self\.username, self\.content)
#     }
# }
# 
pub fn notify(item: &impl Summary) {
    println!("Breaking news! {}", item\.summarize());
}

.EE

.RE
.P
Instead of a concrete type for the `\fIitem\fR` parameter, we specify the `\fIimpl\fR`keyword and the trait name\. This parameter accepts any type that implements thespecified trait\. In the body of `\fInotify\fR`, we can call any methods on `\fIitem\fR`that come from the `\fISummary\fR` trait, such as `\fIsummarize\fR`\. We can call `\fInotify\fR`and pass in any instance of `\fINewsArticle\fR` or `\fITweet\fR`\. Code that calls thefunction with any other type, such as a `\fIString\fR` or an `\fIi32\fR`, won‚Äôt compilebecause those types don‚Äôt implement `\fISummary\fR`\.
.br

.br
\fBTrait Bound Syntax\fR
.br
====================
.br

.P
The `\fIimpl Trait\fR` syntax works for straightforward cases but is actually syntaxsugar for a longer form known as a \fItrait bound\fR; it looks like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify<T: Summary>(item: &T) {
    println!("Breaking news! {}", item\.summarize());
}

.EE

.RE
.P
This longer form is equivalent to the example in the previous section but ismore verbose\. We place trait bounds with the declaration of the generic typeparameter after a colon and inside angle brackets\.
.P
The `\fIimpl Trait\fR` syntax is convenient and makes for more concise code in simplecases, while the fuller trait bound syntax can express more complexity in othercases\. For example, we can have two parameters that implement `\fISummary\fR`\. Doingso with the `\fIimpl Trait\fR` syntax looks like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify(item1: &impl Summary, item2: &impl Summary) {

.EE

.RE
.P
Using `\fIimpl Trait\fR` is appropriate if we want this function to allow `\fIitem1\fR` and`\fIitem2\fR` to have different types (as long as both types implement `\fISummary\fR`)\. Ifwe want to force both parameters to have the same type, however, we must use atrait bound, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify<T: Summary>(item1: &T, item2: &T) {

.EE

.RE
.P
The generic type `\fIT\fR` specified as the type of the `\fIitem1\fR` and `\fIitem2\fR`parameters constrains the function such that the concrete type of the valuepassed as an argument for `\fIitem1\fR` and `\fIitem2\fR` must be the same\.
.br

.br
\fBSpecifying Multiple Trait Bounds with the \fR
.br
============================================
.br
`\fI+\fR` Syntax
.P
We can also specify more than one trait bound\. Say we wanted `\fInotify\fR` to usedisplay formatting as well as `\fIsummarize\fR` on `\fIitem\fR`: we specify in the `\fInotify\fR`definition that `\fIitem\fR` must implement both `\fIDisplay\fR` and `\fISummary\fR`\. We can doso using the `\fI+\fR` syntax:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify(item: &(impl Summary + Display)) {

.EE

.RE
.P
The `\fI+\fR` syntax is also valid with trait bounds on generic types:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify<T: Summary + Display>(item: &T) {

.EE

.RE
.P
With the two trait bounds specified, the body of `\fInotify\fR` can call `\fIsummarize\fR`and use `\fI{}\fR` to format `\fIitem\fR`\.
.br

.br
\fBClearer Trait Bounds with \fR
.br
============================
.br
`\fIwhere\fR` Clauses
.P
Using too many trait bounds has its downsides\. Each generic has its own traitbounds, so functions with multiple generic type parameters can contain lots oftrait bound information between the function‚Äôs name and its parameter list,making the function signature hard to read\. For this reason, Rust has alternatesyntax for specifying trait bounds inside a `\fIwhere\fR` clause after the functionsignature\. So instead of writing this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) \-> i32 {

.EE

.RE
.P
we can use a `\fIwhere\fR` clause, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn some_function<T, U>(t: &T, u: &U) \-> i32
where
    T: Display + Clone,
    U: Clone + Debug,
{
#     unimplemented!()
# }

.EE

.RE
.P
This function‚Äôs signature is less cluttered: the function name, parameter list,and return type are close together, similar to a function without lots of traitbounds\.
.br

.br
\fBReturning Types that Implement Traits\fR
.br
=======================================
.br

.P
We can also use the `\fIimpl Trait\fR` syntax in the return position to return avalue of some type that implements a trait, as shown here:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize(&self) \-> String;
# }
# 
# pub struct NewsArticle {
#     pub headline: String,
#     pub location: String,
#     pub author: String,
#     pub content: String,
# }
# 
# impl Summary for NewsArticle {
#     fn summarize(&self) \-> String {
#         format!("{}, by {} ({})", self\.headline, self\.author, self\.location)
#     }
# }
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize(&self) \-> String {
#         format!("{}: {}", self\.username, self\.content)
#     }
# }
# 
fn returns_summarizable() \-> impl Summary {
    Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    }
}

.EE

.RE
.P
By using `\fIimpl Summary\fR` for the return type, we specify that the`\fIreturns_summarizable\fR` function returns some type that implements the `\fISummary\fR`trait without naming the concrete type\. In this case, `\fIreturns_summarizable\fR`returns a `\fITweet\fR`, but the code calling this function doesn‚Äôt need to know that\.
.P
The ability to specify a return type only by the trait it implements isespecially useful in the context of closures and iterators, which we cover inChapter 13\. Closures and iterators create types that only the compiler knows ortypes that are very long to specify\. The `\fIimpl Trait\fR` syntax lets you conciselyspecify that a function returns some type that implements the `\fIIterator\fR` traitwithout needing to write out a very long type\.
.P
However, you can only use `\fIimpl Trait\fR` if you‚Äôre returning a single type\. Forexample, this code that returns either a `\fINewsArticle\fR` or a `\fITweet\fR` with thereturn type specified as `\fIimpl Summary\fR` wouldn‚Äôt work:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize(&self) \-> String;
# }
# 
# pub struct NewsArticle {
#     pub headline: String,
#     pub location: String,
#     pub author: String,
#     pub content: String,
# }
# 
# impl Summary for NewsArticle {
#     fn summarize(&self) \-> String {
#         format!("{}, by {} ({})", self\.headline, self\.author, self\.location)
#     }
# }
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize(&self) \-> String {
#         format!("{}: {}", self\.username, self\.content)
#     }
# }
# 
fn returns_summarizable(switch: bool) \-> impl Summary {
    if switch {
        NewsArticle {
            headline: String::from(
                "Penguins win the Stanley Cup Championship!",
            ),
            location: String::from("Pittsburgh, PA, USA"),
            author: String::from("Iceburgh"),
            content: String::from(
                "The Pittsburgh Penguins once again are the best \
                 hockey team in the NHL\.",
            ),
        }
    } else {
        Tweet {
            username: String::from("horse_ebooks"),
            content: String::from(
                "of course, as you probably already know, people",
            ),
            reply: false,
            retweet: false,
        }
    }
}

.EE

.RE
.P
Returning either a `\fINewsArticle\fR` or a `\fITweet\fR` isn‚Äôt allowed due to restrictionsaround how the `\fIimpl Trait\fR` syntax is implemented in the compiler\. We‚Äôll coverhow to write a function with this behavior in the 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
‚ÄúUsing Trait Objects ThatAllow for Values of DifferentTypes‚Äù section of Chapter 17\.
.br

.br
\fBUsing Trait Bounds to Conditionally Implement Methods\fR
.br
=======================================================
.br

.P
By using a trait bound with an `\fIimpl\fR` block that uses generic type parameters,we can implement methods conditionally for types that implement the specifiedtraits\. For example, the type `\fIPair<T>\fR` in Listing 10\-15 always implements the`\fInew\fR` function to return a new instance of `\fIPair<T>\fR` (recall from the
.UR ch05\-03\-method\-syntax\.html#defining\-methods
.UE
‚ÄúDefining Methods‚Äù section of Chapter 5 that `\fISelf\fR`is a type alias for the type of the `\fIimpl\fR` block, which in this case is`\fIPair<T>\fR`)\. But in the next `\fIimpl\fR` block, `\fIPair<T>\fR` only implements the`\fIcmp_display\fR` method if its inner type `\fIT\fR` implements the `\fIPartialOrd\fR` traitthat enables comparison \fIand\fR the `\fIDisplay\fR` trait that enables printing\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::fmt::Display;

struct Pair<T> {
    x: T,
    y: T,
}

impl<T> Pair<T> {
    fn new(x: T, y: T) \-> Self {
        Self { x, y }
    }
}

impl<T: Display + PartialOrd> Pair<T> {
    fn cmp_display(&self) {
        if self\.x >= self\.y {
            println!("The largest member is x = {}", self\.x);
        } else {
            println!("The largest member is y = {}", self\.y);
        }
    }
}

.EE

.RE
Listing 10\-15: Conditionally implementing methods on ageneric type depending on trait bounds
.P
We can also conditionally implement a trait for any type that implementsanother trait\. Implementations of a trait on any type that satisfies the traitbounds are called \fIblanket implementations\fR and are extensively used in theRust standard library\. For example, the standard library implements the`\fIToString\fR` trait on any type that implements the `\fIDisplay\fR` trait\. The `\fIimpl\fR`block in the standard library looks similar to this code:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
impl<T: Display> ToString for T {
    // \-\-snip\-\-
}

.EE

.RE
.P
Because the standard library has this blanket implementation, we can call the`\fIto_string\fR` method defined by the `\fIToString\fR` trait on any type that implementsthe `\fIDisplay\fR` trait\. For example, we can turn integers into their corresponding`\fIString\fR` values like this because integers implement `\fIDisplay\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = 3\.to_string();

.EE

.RE
.P
Blanket implementations appear in the documentation for the trait in the‚ÄúImplementors‚Äù section\.
.P
Traits and trait bounds let us write code that uses generic type parameters toreduce duplication but also specify to the compiler that we want the generictype to have particular behavior\. The compiler can then use the trait boundinformation to check that all the concrete types used with our code provide thecorrect behavior\. In dynamically typed languages, we would get an error atruntime if we called a method on a type which didn‚Äôt define the method\. But Rustmoves these errors to compile time so we‚Äôre forced to fix the problems beforeour code is even able to run\. Additionally, we don‚Äôt have to write code thatchecks for behavior at runtime because we‚Äôve already checked at compile time\.Doing so improves performance without having to give up the flexibility ofgenerics\.
.SH "Validating References with Lifetimes"

.br

.br
\fBValidating References with Lifetimes\fR
.br
======================================
.br

.P
Lifetimes are another kind of generic that we‚Äôve already been using\. Ratherthan ensuring that a type has the behavior we want, lifetimes ensure thatreferences are valid as long as we need them to be\.
.P
One detail we didn‚Äôt discuss in the 
.UR ch04\-02\-references\-and\-borrowing\.html#references\-and\-borrowing
.UE
‚ÄúReferences andBorrowing‚Äù section in Chapter 4 isthat every reference in Rust has a \fIlifetime\fR, which is the scope for whichthat reference is valid\. Most of the time, lifetimes are implicit and inferred,just like most of the time, types are inferred\. We only must annotate typeswhen multiple types are possible\. In a similar way, we must annotate lifetimeswhen the lifetimes of references could be related in a few different ways\. Rustrequires us to annotate the relationships using generic lifetime parameters toensure the actual references used at runtime will definitely be valid\.
.P
Annotating lifetimes is not even a concept most other programming languageshave, so this is going to feel unfamiliar\. Although we won‚Äôt cover lifetimes intheir entirety in this chapter, we‚Äôll discuss common ways you might encounterlifetime syntax so you can get comfortable with the concept\.
.br

.br
\fBPreventing Dangling References with Lifetimes\fR
.br
===============================================
.br

.P
The main aim of lifetimes is to prevent \fIdangling references\fR, which cause aprogram to reference data other than the data it‚Äôs intended to reference\.Consider the program in Listing 10\-16, which has an outer scope and an innerscope\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let r;

    {
        let x = 5;
        r = &x;
    }

    println!("r: {}", r);
}

.EE

.RE
Listing 10\-16: An attempt to use a reference whose valuehas gone out of scope
.P
Note: The examples in Listings 10\-16, 10\-17, and 10\-23 declare variableswithout giving them an initial value, so the variable name exists in theouter scope\. At first glance, this might appear to be in conflict with Rust‚Äôshaving no null values\. However, if we try to use a variable before giving ita value, we‚Äôll get a compile\-time error, which shows that Rust indeed doesnot allow null values\.
.P
The outer scope declares a variable named `\fIr\fR` with no initial value, and theinner scope declares a variable named `\fIx\fR` with the initial value of 5\. Insidethe inner scope, we attempt to set the value of `\fIr\fR` as a reference to `\fIx\fR`\. Thenthe inner scope ends, and we attempt to print the value in `\fIr\fR`\. This code won‚Äôtcompile because the value `\fIr\fR` is referring to has gone out of scope before wetry to use it\. Here is the error message:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0597]: `x` does not live long enough
 \-\-> src/main\.rs:6:13
  |
6 |         r = &x;
  |             ^^ borrowed value does not live long enough
7 |     }
  |     \- `x` dropped here while still borrowed
8 | 
9 |     println!("r: {}", r);
  |                       \- borrow later used here

For more information about this error, try `rustc \-\-explain E0597`\.
error: could not compile `chapter10` due to previous error

.EE

.RE
.P
The variable `\fIx\fR` doesn‚Äôt ‚Äúlive long enough\.‚Äù The reason is that `\fIx\fR` will be outof scope when the inner scope ends on line 7\. But `\fIr\fR` is still valid for theouter scope; because its scope is larger, we say that it ‚Äúlives longer\.‚Äù IfRust allowed this code to work, `\fIr\fR` would be referencing memory that wasdeallocated when `\fIx\fR` went out of scope, and anything we tried to do with `\fIr\fR`wouldn‚Äôt work correctly\. So how does Rust determine that this code is invalid?It uses a borrow checker\.
.br

.br
\fBThe Borrow Checker\fR
.br
====================
.br

.P
The Rust compiler has a \fIborrow checker\fR that compares scopes to determinewhether all borrows are valid\. Listing 10\-17 shows the same code as Listing10\-16 but with annotations showing the lifetimes of the variables\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let r;                // \-\-\-\-\-\-\-\-\-+\-\- 'a
                          //          |
    {                     //          |
        let x = 5;        // \-+\-\- 'b  |
        r = &x;           //  |       |
    }                     // \-+       |
                          //          |
    println!("r: {}", r); //          |
}                         // \-\-\-\-\-\-\-\-\-+

.EE

.RE
Listing 10\-17: Annotations of the lifetimes of `\fIr\fR` and`\fIx\fR`, named `\fI'a\fR` and `\fI'b\fR`, respectively
.P
Here, we‚Äôve annotated the lifetime of `\fIr\fR` with `\fI'a\fR` and the lifetime of `\fIx\fR`with `\fI'b\fR`\. As you can see, the inner `\fI'b\fR` block is much smaller than the outer`\fI'a\fR` lifetime block\. At compile time, Rust compares the size of the twolifetimes and sees that `\fIr\fR` has a lifetime of `\fI'a\fR` but that it refers to memorywith a lifetime of `\fI'b\fR`\. The program is rejected because `\fI'b\fR` is shorter than`\fI'a\fR`: the subject of the reference doesn‚Äôt live as long as the reference\.
.P
Listing 10\-18 fixes the code so it doesn‚Äôt have a dangling reference andcompiles without any errors\.
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 5;            // \-\-\-\-\-\-\-\-\-\-+\-\- 'b
                          //           |
    let r = &x;           // \-\-+\-\- 'a  |
                          //   |       |
    println!("r: {}", r); //   |       |
                          // \-\-+       |
}                         // \-\-\-\-\-\-\-\-\-\-+

.EE

.RE
Listing 10\-18: A valid reference because the data has alonger lifetime than the reference
.P
Here, `\fIx\fR` has the lifetime `\fI'b\fR`, which in this case is larger than `\fI'a\fR`\. Thismeans `\fIr\fR` can reference `\fIx\fR` because Rust knows that the reference in `\fIr\fR` willalways be valid while `\fIx\fR` is valid\.
.P
Now that you know where the lifetimes of references are and how Rust analyzeslifetimes to ensure references will always be valid, let‚Äôs explore genericlifetimes of parameters and return values in the context of functions\.
.br

.br
\fBGeneric Lifetimes in Functions\fR
.br
================================
.br

.P
We‚Äôll write a function that returns the longer of two string slices\. Thisfunction will take two string slices and return a single string slice\. Afterwe‚Äôve implemented the `\fIlongest\fR` function, the code in Listing 10\-19 shouldprint `\fIThe longest string is abcd\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn main() {
    let string1 = String::from("abcd");
    let string2 = "xyz";

    let result = longest(string1\.as_str(), string2);
    println!("The longest string is {}", result);
}

.EE

.RE
Listing 10\-19: A `\fImain\fR` function that calls the `\fIlongest\fR`function to find the longer of two string slices
.P
Note that we want the function to take string slices, which are references,rather than strings, because we don‚Äôt want the `\fIlongest\fR` function to takeownership of its parameters\. Refer to the 
.UR ch04\-03\-slices\.html#string\-slices\-as\-parameters
.UE
‚ÄúString Slices asParameters‚Äù section in Chapter 4for more discussion about why the parameters we use in Listing 10\-19 are theones we want\.
.P
If we try to implement the `\fIlongest\fR` function as shown in Listing 10\-20, itwon‚Äôt compile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "xyz";
# 
#     let result = longest(string1\.as_str(), string2);
#     println!("The longest string is {}", result);
# }
# 
fn longest(x: &str, y: &str) \-> &str {
    if x\.len() > y\.len() {
        x
    } else {
        y
    }
}

.EE

.RE
Listing 10\-20: An implementation of the `\fIlongest\fR`function that returns the longer of two string slices but does not yetcompile
.P
Instead, we get the following error that talks about lifetimes:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0106]: missing lifetime specifier
 \-\-> src/main\.rs:9:33
  |
9 | fn longest(x: &str, y: &str) \-> &str {
  |               \-\-\-\-     \-\-\-\-     ^ expected named lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`
help: consider introducing a named lifetime parameter
  |
9 | fn longest<'a>(x: &'a str, y: &'a str) \-> &'a str {
  |           ++++     ++          ++          ++

For more information about this error, try `rustc \-\-explain E0106`\.
error: could not compile `chapter10` due to previous error

.EE

.RE
.P
The help text reveals that the return type needs a generic lifetime parameteron it because Rust can‚Äôt tell whether the reference being returned refers to`\fIx\fR` or `\fIy\fR`\. Actually, we don‚Äôt know either, because the `\fIif\fR` block in the bodyof this function returns a reference to `\fIx\fR` and the `\fIelse\fR` block returns areference to `\fIy\fR`!
.P
When we‚Äôre defining this function, we don‚Äôt know the concrete values that willbe passed into this function, so we don‚Äôt know whether the `\fIif\fR` case or the`\fIelse\fR` case will execute\. We also don‚Äôt know the concrete lifetimes of thereferences that will be passed in, so we can‚Äôt look at the scopes as we did inListings 10\-17 and 10\-18 to determine whether the reference we return willalways be valid\. The borrow checker can‚Äôt determine this either, because itdoesn‚Äôt know how the lifetimes of `\fIx\fR` and `\fIy\fR` relate to the lifetime of thereturn value\. To fix this error, we‚Äôll add generic lifetime parameters thatdefine the relationship between the references so the borrow checker canperform its analysis\.
.br

.br
\fBLifetime Annotation Syntax\fR
.br
============================
.br

.P
Lifetime annotations don‚Äôt change how long any of the references live\. Rather,they describe the relationships of the lifetimes of multiple references to eachother without affecting the lifetimes\. Just as functions can accept any typewhen the signature specifies a generic type parameter, functions can acceptreferences with any lifetime by specifying a generic lifetime parameter\.
.P
Lifetime annotations have a slightly unusual syntax: the names of lifetimeparameters must start with an apostrophe (`\fI'\fR`) and are usually all lowercaseand very short, like generic types\. Most people use the name `\fI'a\fR` for the firstlifetime annotation\. We place lifetime parameter annotations after the `\fI&\fR` of areference, using a space to separate the annotation from the reference‚Äôs type\.
.P
Here are some examples: a reference to an `\fIi32\fR` without a lifetime parameter, areference to an `\fIi32\fR` that has a lifetime parameter named `\fI'a\fR`, and a mutablereference to an `\fIi32\fR` that also has the lifetime `\fI'a\fR`\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
&i32        // a reference
&'a i32     // a reference with an explicit lifetime
&'a mut i32 // a mutable reference with an explicit lifetime

.EE

.RE
.P
One lifetime annotation by itself doesn‚Äôt have much meaning, because theannotations are meant to tell Rust how generic lifetime parameters of multiplereferences relate to each other\. Let‚Äôs examine how the lifetime annotationsrelate to each other in the context of the `\fIlongest\fR` function\.
.br

.br
\fBLifetime Annotations in Function Signatures\fR
.br
=============================================
.br

.P
To use lifetime annotations in function signatures, we need to declare thegeneric \fIlifetime\fR parameters inside angle brackets between the function nameand the parameter list, just as we did with generic \fItype\fR parameters\.
.P
We want the signature to express the following constraint: the returnedreference will be valid as long as both the parameters are valid\. This is therelationship between lifetimes of the parameters and the return value\. We‚Äôllname the lifetime `\fI'a\fR` and then add it to each reference, as shown in Listing10\-21\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "xyz";
# 
#     let result = longest(string1\.as_str(), string2);
#     println!("The longest string is {}", result);
# }
# 
fn longest<'a>(x: &'a str, y: &'a str) \-> &'a str {
    if x\.len() > y\.len() {
        x
    } else {
        y
    }
}

.EE

.RE
Listing 10\-21: The `\fIlongest\fR` function definitionspecifying that all the references in the signature must have the same lifetime`\fI'a\fR`
.P
This code should compile and produce the result we want when we use it with the`\fImain\fR` function in Listing 10\-19\.
.P
The function signature now tells Rust that for some lifetime `\fI'a\fR`, the functiontakes two parameters, both of which are string slices that live at least aslong as lifetime `\fI'a\fR`\. The function signature also tells Rust that the stringslice returned from the function will live at least as long as lifetime `\fI'a\fR`\.In practice, it means that the lifetime of the reference returned by the`\fIlongest\fR` function is the same as the smaller of the lifetimes of the valuesreferred to by the function arguments\. These relationships are what we wantRust to use when analyzing this code\.
.P
Remember, when we specify the lifetime parameters in this function signature,we‚Äôre not changing the lifetimes of any values passed in or returned\. Rather,we‚Äôre specifying that the borrow checker should reject any values that don‚Äôtadhere to these constraints\. Note that the `\fIlongest\fR` function doesn‚Äôt need toknow exactly how long `\fIx\fR` and `\fIy\fR` will live, only that some scope can besubstituted for `\fI'a\fR` that will satisfy this signature\.
.P
When annotating lifetimes in functions, the annotations go in the functionsignature, not in the function body\. The lifetime annotations become part ofthe contract of the function, much like the types in the signature\. Havingfunction signatures contain the lifetime contract means the analysis the Rustcompiler does can be simpler\. If there‚Äôs a problem with the way a function isannotated or the way it is called, the compiler errors can point to the part ofour code and the constraints more precisely\. If, instead, the Rust compilermade more inferences about what we intended the relationships of the lifetimesto be, the compiler might only be able to point to a use of our code many stepsaway from the cause of the problem\.
.P
When we pass concrete references to `\fIlongest\fR`, the concrete lifetime that issubstituted for `\fI'a\fR` is the part of the scope of `\fIx\fR` that overlaps with thescope of `\fIy\fR`\. In other words, the generic lifetime `\fI'a\fR` will get the concretelifetime that is equal to the smaller of the lifetimes of `\fIx\fR` and `\fIy\fR`\. Becausewe‚Äôve annotated the returned reference with the same lifetime parameter `\fI'a\fR`,the returned reference will also be valid for the length of the smaller of thelifetimes of `\fIx\fR` and `\fIy\fR`\.
.P
Let‚Äôs look at how the lifetime annotations restrict the `\fIlongest\fR` function bypassing in references that have different concrete lifetimes\. Listing 10\-22 isa straightforward example\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let string1 = String::from("long string is long");

    {
        let string2 = String::from("xyz");
        let result = longest(string1\.as_str(), string2\.as_str());
        println!("The longest string is {}", result);
    }
}
# 
# fn longest<'a>(x: &'a str, y: &'a str) \-> &'a str {
#     if x\.len() > y\.len() {
#         x
#     } else {
#         y
#     }
# }

.EE

.RE
Listing 10\-22: Using the `\fIlongest\fR` function withreferences to `\fIString\fR` values that have different concrete lifetimes
.P
In this example, `\fIstring1\fR` is valid until the end of the outer scope, `\fIstring2\fR`is valid until the end of the inner scope, and `\fIresult\fR` references somethingthat is valid until the end of the inner scope\. Run this code, and you‚Äôll seethat the borrow checker approves; it will compile and print `\fIThe longest string is long string is long\fR`\.
.P
Next, let‚Äôs try an example that shows that the lifetime of the reference in`\fIresult\fR` must be the smaller lifetime of the two arguments\. We‚Äôll move thedeclaration of the `\fIresult\fR` variable outside the inner scope but leave theassignment of the value to the `\fIresult\fR` variable inside the scope with`\fIstring2\fR`\. Then we‚Äôll move the `\fIprintln!\fR` that uses `\fIresult\fR` to outside theinner scope, after the inner scope has ended\. The code in Listing 10\-23 willnot compile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let string1 = String::from("long string is long");
    let result;
    {
        let string2 = String::from("xyz");
        result = longest(string1\.as_str(), string2\.as_str());
    }
    println!("The longest string is {}", result);
}
# 
# fn longest<'a>(x: &'a str, y: &'a str) \-> &'a str {
#     if x\.len() > y\.len() {
#         x
#     } else {
#         y
#     }
# }

.EE

.RE
Listing 10\-23: Attempting to use `\fIresult\fR` after `\fIstring2\fR`has gone out of scope
.P
When we try to compile this code, we get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0597]: `string2` does not live long enough
 \-\-> src/main\.rs:6:44
  |
6 |         result = longest(string1\.as_str(), string2\.as_str());
  |                                            ^^^^^^^^^^^^^^^^ borrowed value does not live long enough
7 |     }
  |     \- `string2` dropped here while still borrowed
8 |     println!("The longest string is {}", result);
  |                                          \-\-\-\-\-\- borrow later used here

For more information about this error, try `rustc \-\-explain E0597`\.
error: could not compile `chapter10` due to previous error

.EE

.RE
.P
The error shows that for `\fIresult\fR` to be valid for the `\fIprintln!\fR` statement,`\fIstring2\fR` would need to be valid until the end of the outer scope\. Rust knowsthis because we annotated the lifetimes of the function parameters and returnvalues using the same lifetime parameter `\fI'a\fR`\.
.P
As humans, we can look at this code and see that `\fIstring1\fR` is longer than`\fIstring2\fR` and therefore `\fIresult\fR` will contain a reference to `\fIstring1\fR`\.Because `\fIstring1\fR` has not gone out of scope yet, a reference to `\fIstring1\fR` willstill be valid for the `\fIprintln!\fR` statement\. However, the compiler can‚Äôt seethat the reference is valid in this case\. We‚Äôve told Rust that the lifetime ofthe reference returned by the `\fIlongest\fR` function is the same as the smaller ofthe lifetimes of the references passed in\. Therefore, the borrow checkerdisallows the code in Listing 10\-23 as possibly having an invalid reference\.
.P
Try designing more experiments that vary the values and lifetimes of thereferences passed in to the `\fIlongest\fR` function and how the returned referenceis used\. Make hypotheses about whether or not your experiments will pass theborrow checker before you compile; then check to see if you‚Äôre right!
.br

.br
\fBThinking in Terms of Lifetimes\fR
.br
================================
.br

.P
The way in which you need to specify lifetime parameters depends on what yourfunction is doing\. For example, if we changed the implementation of the`\fIlongest\fR` function to always return the first parameter rather than the longeststring slice, we wouldn‚Äôt need to specify a lifetime on the `\fIy\fR` parameter\. Thefollowing code will compile:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "efghijklmnopqrstuvwxyz";
# 
#     let result = longest(string1\.as_str(), string2);
#     println!("The longest string is {}", result);
# }
# 
fn longest<'a>(x: &'a str, y: &str) \-> &'a str {
    x
}

.EE

.RE
.P
We‚Äôve specified a lifetime parameter `\fI'a\fR` for the parameter `\fIx\fR` and the returntype, but not for the parameter `\fIy\fR`, because the lifetime of `\fIy\fR` does not haveany relationship with the lifetime of `\fIx\fR` or the return value\.
.P
When returning a reference from a function, the lifetime parameter for thereturn type needs to match the lifetime parameter for one of the parameters\. Ifthe reference returned does \fInot\fR refer to one of the parameters, it must referto a value created within this function\. However, this would be a danglingreference because the value will go out of scope at the end of the function\.Consider this attempted implementation of the `\fIlongest\fR` function that won‚Äôtcompile:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "xyz";
# 
#     let result = longest(string1\.as_str(), string2);
#     println!("The longest string is {}", result);
# }
# 
fn longest<'a>(x: &str, y: &str) \-> &'a str {
    let result = String::from("really long string");
    result\.as_str()
}

.EE

.RE
.P
Here, even though we‚Äôve specified a lifetime parameter `\fI'a\fR` for the returntype, this implementation will fail to compile because the return valuelifetime is not related to the lifetime of the parameters at all\. Here is theerror message we get:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0515]: cannot return reference to local variable `result`
  \-\-> src/main\.rs:11:5
   |
11 |     result\.as_str()
   |     ^^^^^^^^^^^^^^^ returns a reference to data owned by the current function

For more information about this error, try `rustc \-\-explain E0515`\.
error: could not compile `chapter10` due to previous error

.EE

.RE
.P
The problem is that `\fIresult\fR` goes out of scope and gets cleaned up at the endof the `\fIlongest\fR` function\. We‚Äôre also trying to return a reference to `\fIresult\fR`from the function\. There is no way we can specify lifetime parameters thatwould change the dangling reference, and Rust won‚Äôt let us create a danglingreference\. In this case, the best fix would be to return an owned data typerather than a reference so the calling function is then responsible forcleaning up the value\.
.P
Ultimately, lifetime syntax is about connecting the lifetimes of variousparameters and return values of functions\. Once they‚Äôre connected, Rust hasenough information to allow memory\-safe operations and disallow operations thatwould create dangling pointers or otherwise violate memory safety\.
.br

.br
\fBLifetime Annotations in Struct Definitions\fR
.br
============================================
.br

.P
So far, the structs we‚Äôve defined all hold owned types\. We can define structs tohold references, but in that case we would need to add a lifetime annotation onevery reference in the struct‚Äôs definition\. Listing 10\-24 has a struct named`\fIImportantExcerpt\fR` that holds a string slice\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct ImportantExcerpt<'a> {
    part: &'a str,
}

fn main() {
    let novel = String::from("Call me Ishmael\. Some years ago\.\.\.");
    let first_sentence = novel\.split('\.')\.next()\.expect("Could not find a '\.'");
    let i = ImportantExcerpt {
        part: first_sentence,
    };
}

.EE

.RE
Listing 10\-24: A struct that holds a reference, requiringa lifetime annotation
.P
This struct has the single field `\fIpart\fR` that holds a string slice, which is areference\. As with generic data types, we declare the name of the genericlifetime parameter inside angle brackets after the name of the struct so we canuse the lifetime parameter in the body of the struct definition\. Thisannotation means an instance of `\fIImportantExcerpt\fR` can‚Äôt outlive the referenceit holds in its `\fIpart\fR` field\.
.P
The `\fImain\fR` function here creates an instance of the `\fIImportantExcerpt\fR` structthat holds a reference to the first sentence of the `\fIString\fR` owned by thevariable `\fInovel\fR`\. The data in `\fInovel\fR` exists before the `\fIImportantExcerpt\fR`instance is created\. In addition, `\fInovel\fR` doesn‚Äôt go out of scope until afterthe `\fIImportantExcerpt\fR` goes out of scope, so the reference in the`\fIImportantExcerpt\fR` instance is valid\.
.br

.br
\fBLifetime Elision\fR
.br
==================
.br

.P
You‚Äôve learned that every reference has a lifetime and that you need to specifylifetime parameters for functions or structs that use references\. However, inChapter 4 we had a function in Listing 4\-9, shown again in Listing 10\-25, thatcompiled without lifetime annotations\.Filename: src/lib\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn first_word(s: &str) \-> &str {
    let bytes = s\.as_bytes();

    for (i, &item) in bytes\.iter()\.enumerate() {
        if item == b' ' {
            return &s[0\.\.i];
        }
    }

    &s[\.\.]
}
# 
# fn main() {
#     let my_string = String::from("hello world");
# 
#     // first_word works on slices of `String`s
#     let word = first_word(&my_string[\.\.]);
# 
#     let my_string_literal = "hello world";
# 
#     // first_word works on slices of string literals
#     let word = first_word(&my_string_literal[\.\.]);
# 
#     // Because string literals *are* string slices already,
#     // this works too, without the slice syntax!
#     let word = first_word(my_string_literal);
# }

.EE

.RE
Listing 10\-25: A function we defined in Listing 4\-9 thatcompiled without lifetime annotations, even though the parameter and returntype are references
.P
The reason this function compiles without lifetime annotations is historical:in early versions (pre\-1\.0) of Rust, this code wouldn‚Äôt have compiled becauseevery reference needed an explicit lifetime\. At that time, the functionsignature would have been written like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word<'a>(s: &'a str) \-> &'a str {

.EE

.RE
.P
After writing a lot of Rust code, the Rust team found that Rust programmerswere entering the same lifetime annotations over and over in particularsituations\. These situations were predictable and followed a few deterministicpatterns\. The developers programmed these patterns into the compiler‚Äôs code sothe borrow checker could infer the lifetimes in these situations and wouldn‚Äôtneed explicit annotations\.
.P
This piece of Rust history is relevant because it‚Äôs possible that moredeterministic patterns will emerge and be added to the compiler\. In the future,even fewer lifetime annotations might be required\.
.P
The patterns programmed into Rust‚Äôs analysis of references are called the\fIlifetime elision rules\fR\. These aren‚Äôt rules for programmers to follow; they‚Äôrea set of particular cases that the compiler will consider, and if your codefits these cases, you don‚Äôt need to write the lifetimes explicitly\.
.P
The elision rules don‚Äôt provide full inference\. If Rust deterministicallyapplies the rules but there is still ambiguity as to what lifetimes thereferences have, the compiler won‚Äôt guess what the lifetime of the remainingreferences should be\. Instead of guessing, the compiler will give you an errorthat you can resolve by adding the lifetime annotations\.
.P
Lifetimes on function or method parameters are called \fIinput lifetimes\fR, andlifetimes on return values are called \fIoutput lifetimes\fR\.
.P
The compiler uses three rules to figure out the lifetimes of the referenceswhen there aren‚Äôt explicit annotations\. The first rule applies to inputlifetimes, and the second and third rules apply to output lifetimes\. If thecompiler gets to the end of the three rules and there are still references forwhich it can‚Äôt figure out lifetimes, the compiler will stop with an error\.These rules apply to `\fIfn\fR` definitions as well as `\fIimpl\fR` blocks\.
.P
The first rule is that the compiler assigns a lifetime parameter to eachparameter that‚Äôs a reference\. In other words, a function with one parameter getsone lifetime parameter: `\fIfn foo<'a>(x: &'a i32)\fR`; a function with twoparameters gets two separate lifetime parameters: `\fIfn foo<'a, 'b>(x: &'a i32, y: &'b i32)\fR`; and so on\.
.P
The second rule is that, if there is exactly one input lifetime parameter, thatlifetime is assigned to all output lifetime parameters: `\fIfn foo<'a>(x: &'a i32) \-> &'a i32\fR`\.
.P
The third rule is that, if there are multiple input lifetime parameters, butone of them is `\fI&self\fR` or `\fI&mut self\fR` because this is a method, the lifetime of`\fIself\fR` is assigned to all output lifetime parameters\. This third rule makesmethods much nicer to read and write because fewer symbols are necessary\.
.P
Let‚Äôs pretend we‚Äôre the compiler\. We‚Äôll apply these rules to figure out thelifetimes of the references in the signature of the `\fIfirst_word\fR` function inListing 10\-25\. The signature starts without any lifetimes associated with thereferences:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word(s: &str) \-> &str {

.EE

.RE
.P
Then the compiler applies the first rule, which specifies that each parametergets its own lifetime\. We‚Äôll call it `\fI'a\fR` as usual, so now the signature isthis:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word<'a>(s: &'a str) \-> &str {

.EE

.RE
.P
The second rule applies because there is exactly one input lifetime\. The secondrule specifies that the lifetime of the one input parameter gets assigned tothe output lifetime, so the signature is now this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word<'a>(s: &'a str) \-> &'a str {

.EE

.RE
.P
Now all the references in this function signature have lifetimes, and thecompiler can continue its analysis without needing the programmer to annotatethe lifetimes in this function signature\.
.P
Let‚Äôs look at another example, this time using the `\fIlongest\fR` function that hadno lifetime parameters when we started working with it in Listing 10\-20:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn longest(x: &str, y: &str) \-> &str {

.EE

.RE
.P
Let‚Äôs apply the first rule: each parameter gets its own lifetime\. This time wehave two parameters instead of one, so we have two lifetimes:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn longest<'a, 'b>(x: &'a str, y: &'b str) \-> &str {

.EE

.RE
.P
You can see that the second rule doesn‚Äôt apply because there is more than oneinput lifetime\. The third rule doesn‚Äôt apply either, because `\fIlongest\fR` is afunction rather than a method, so none of the parameters are `\fIself\fR`\. Afterworking through all three rules, we still haven‚Äôt figured out what the returntype‚Äôs lifetime is\. This is why we got an error trying to compile the code inListing 10\-20: the compiler worked through the lifetime elision rules but stillcouldn‚Äôt figure out all the lifetimes of the references in the signature\.
.P
Because the third rule really only applies in method signatures, we‚Äôll look atlifetimes in that context next to see why the third rule means we don‚Äôt have toannotate lifetimes in method signatures very often\.
.br

.br
\fBLifetime Annotations in Method Definitions\fR
.br
============================================
.br

.P
When we implement methods on a struct with lifetimes, we use the same syntax asthat of generic type parameters shown in Listing 10\-11\. Where we declare anduse the lifetime parameters depends on whether they‚Äôre related to the structfields or the method parameters and return values\.
.P
Lifetime names for struct fields always need to be declared after the `\fIimpl\fR`keyword and then used after the struct‚Äôs name, because those lifetimes are partof the struct‚Äôs type\.
.P
In method signatures inside the `\fIimpl\fR` block, references might be tied to thelifetime of references in the struct‚Äôs fields, or they might be independent\. Inaddition, the lifetime elision rules often make it so that lifetime annotationsaren‚Äôt necessary in method signatures\. Let‚Äôs look at some examples using thestruct named `\fIImportantExcerpt\fR` that we defined in Listing 10\-24\.
.P
First, we‚Äôll use a method named `\fIlevel\fR` whose only parameter is a reference to`\fIself\fR` and whose return value is an `\fIi32\fR`, which is not a reference to anything:
.RS
.IP \fBrust\fR 2

.br
.EX
# struct ImportantExcerpt<'a> {
#     part: &'a str,
# }
# 
impl<'a> ImportantExcerpt<'a> {
    fn level(&self) \-> i32 {
        3
    }
}
# 
# impl<'a> ImportantExcerpt<'a> {
#     fn announce_and_return_part(&self, announcement: &str) \-> &str {
#         println!("Attention please: {}", announcement);
#         self\.part
#     }
# }
# 
# fn main() {
#     let novel = String::from("Call me Ishmael\. Some years ago\.\.\.");
#     let first_sentence = novel\.split('\.')\.next()\.expect("Could not find a '\.'");
#     let i = ImportantExcerpt {
#         part: first_sentence,
#     };
# }

.EE

.RE
.P
The lifetime parameter declaration after `\fIimpl\fR` and its use after the type nameare required, but we‚Äôre not required to annotate the lifetime of the referenceto `\fIself\fR` because of the first elision rule\.
.P
Here is an example where the third lifetime elision rule applies:
.RS
.IP \fBrust\fR 2

.br
.EX
# struct ImportantExcerpt<'a> {
#     part: &'a str,
# }
# 
# impl<'a> ImportantExcerpt<'a> {
#     fn level(&self) \-> i32 {
#         3
#     }
# }
# 
impl<'a> ImportantExcerpt<'a> {
    fn announce_and_return_part(&self, announcement: &str) \-> &str {
        println!("Attention please: {}", announcement);
        self\.part
    }
}
# 
# fn main() {
#     let novel = String::from("Call me Ishmael\. Some years ago\.\.\.");
#     let first_sentence = novel\.split('\.')\.next()\.expect("Could not find a '\.'");
#     let i = ImportantExcerpt {
#         part: first_sentence,
#     };
# }

.EE

.RE
.P
There are two input lifetimes, so Rust applies the first lifetime elision ruleand gives both `\fI&self\fR` and `\fIannouncement\fR` their own lifetimes\. Then, becauseone of the parameters is `\fI&self\fR`, the return type gets the lifetime of `\fI&self\fR`,and all lifetimes have been accounted for\.
.br

.br
\fBThe Static Lifetime\fR
.br
=====================
.br

.P
One special lifetime we need to discuss is `\fI'static\fR`, which denotes that theaffected reference \fIcan\fR live for the entire duration of the program\. Allstring literals have the `\fI'static\fR` lifetime, which we can annotate as follows:
.RS
.IP \fBrust\fR 2

.br
.EX
let s: &'static str = "I have a static lifetime\.";

.EE

.RE
.P
The text of this string is stored directly in the program‚Äôs binary, whichis always available\. Therefore, the lifetime of all string literals is`\fI'static\fR`\.
.P
You might see suggestions to use the `\fI'static\fR` lifetime in error messages\. Butbefore specifying `\fI'static\fR` as the lifetime for a reference, think aboutwhether the reference you have actually lives the entire lifetime of yourprogram or not, and whether you want it to\. Most of the time, an error messagesuggesting the `\fI'static\fR` lifetime results from attempting to create a danglingreference or a mismatch of the available lifetimes\. In such cases, the solutionis fixing those problems, not specifying the `\fI'static\fR` lifetime\.
.br

.br
\fBGeneric Type Parameters, Trait Bounds, and Lifetimes Together\fR
.br
===============================================================
.br

.P
Let‚Äôs briefly look at the syntax of specifying generic type parameters, traitbounds, and lifetimes all in one function!
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "xyz";
# 
#     let result = longest_with_an_announcement(
#         string1\.as_str(),
#         string2,
#         "Today is someone's birthday!",
#     );
#     println!("The longest string is {}", result);
# }
# 
use std::fmt::Display;

fn longest_with_an_announcement<'a, T>(
    x: &'a str,
    y: &'a str,
    ann: T,
) \-> &'a str
where
    T: Display,
{
    println!("Announcement! {}", ann);
    if x\.len() > y\.len() {
        x
    } else {
        y
    }
}

.EE

.RE
.P
This is the `\fIlongest\fR` function from Listing 10\-21 that returns the longer oftwo string slices\. But now it has an extra parameter named `\fIann\fR` of the generictype `\fIT\fR`, which can be filled in by any type that implements the `\fIDisplay\fR`trait as specified by the `\fIwhere\fR` clause\. This extra parameter will be printedusing `\fI{}\fR`, which is why the `\fIDisplay\fR` trait bound is necessary\. Becauselifetimes are a type of generic, the declarations of the lifetime parameter`\fI'a\fR` and the generic type parameter `\fIT\fR` go in the same list inside the anglebrackets after the function name\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
We covered a lot in this chapter! Now that you know about generic typeparameters, traits and trait bounds, and generic lifetime parameters, you‚Äôreready to write code without repetition that works in many different situations\.Generic type parameters let you apply the code to different types\. Traits andtrait bounds ensure that even though the types are generic, they‚Äôll have thebehavior the code needs\. You learned how to use lifetime annotations to ensurethat this flexible code won‚Äôt have any dangling references\. And all of thisanalysis happens at compile time, which doesn‚Äôt affect runtime performance!
.P
Believe it or not, there is much more to learn on the topics we discussed inthis chapter: Chapter 17 discusses trait objects, which are another way to usetraits\. There are also more complex scenarios involving lifetime annotationsthat you will only need in very advanced scenarios; for those, you should readthe 
.UR \.\./reference/index\.html
.UE
Rust Reference\. But next, you‚Äôll learn how to write tests inRust so you can make sure your code is working the way it should\.
.SH "Writing Automated Tests"

.br

.br
\fBWriting Automated Tests\fR
.br
=========================
.br

.P
In his 1972 essay ‚ÄúThe Humble Programmer,‚Äù Edsger W\. Dijkstra said that‚ÄúProgram testing can be a very effective way to show the presence of bugs, butit is hopelessly inadequate for showing their absence\.‚Äù That doesn‚Äôt mean weshouldn‚Äôt try to test as much as we can!
.P
Correctness in our programs is the extent to which our code does what we intendit to do\. Rust is designed with a high degree of concern about the correctnessof programs, but correctness is complex and not easy to prove\. Rust‚Äôs typesystem shoulders a huge part of this burden, but the type system cannot catcheverything\. As such, Rust includes support for writing automated software tests\.
.P
Say we write a function `\fIadd_two\fR` that adds 2 to whatever number is passed toit\. This function‚Äôs signature accepts an integer as a parameter and returns aninteger as a result\. When we implement and compile that function, Rust does allthe type checking and borrow checking that you‚Äôve learned so far to ensurethat, for instance, we aren‚Äôt passing a `\fIString\fR` value or an invalid referenceto this function\. But Rust \fIcan‚Äôt\fR check that this function will do preciselywhat we intend, which is return the parameter plus 2 rather than, say, theparameter plus 10 or the parameter minus 50! That‚Äôs where tests come in\.
.P
We can write tests that assert, for example, that when we pass `\fI3\fR` to the`\fIadd_two\fR` function, the returned value is `\fI5\fR`\. We can run these tests wheneverwe make changes to our code to make sure any existing correct behavior has notchanged\.
.P
Testing is a complex skill: although we can‚Äôt cover every detail about how towrite good tests in one chapter, we‚Äôll discuss the mechanics of Rust‚Äôs testingfacilities\. We‚Äôll talk about the annotations and macros available to you whenwriting your tests, the default behavior and options provided for running yourtests, and how to organize tests into unit tests and integration tests\.
.SH "How to Write Tests"

.br

.br
\fBHow to Write Tests\fR
.br
====================
.br

.P
Tests are Rust functions that verify that the non\-test code is functioning inthe expected manner\. The bodies of test functions typically perform these threeactions:
.P
Set up any needed data or state\.
.P
Run the code you want to test\.
.P
Assert the results are what you expect\.
.P
Let‚Äôs look at the features Rust provides specifically for writing tests thattake these actions, which include the `\fItest\fR` attribute, a few macros, and the`\fIshould_panic\fR` attribute\.
.br

.br
\fBThe Anatomy of a Test Function\fR
.br
================================
.br

.P
At its simplest, a test in Rust is a function that‚Äôs annotated with the `\fItest\fR`attribute\. Attributes are metadata about pieces of Rust code; one example isthe `\fIderive\fR` attribute we used with structs in Chapter 5\. To change a functioninto a test function, add `\fI#[test]\fR` on the line before `\fIfn\fR`\. When you run yourtests with the `\fIcargo test\fR` command, Rust builds a test runner binary that runsthe annotated functions and reports on whether eachtest function passes or fails\.
.P
Whenever we make a new library project with Cargo, a test module with a testfunction in it is automatically generated for us\. This module gives you atemplate for writing your tests so you don‚Äôt have to look up the exactstructure and syntax every time you start a new project\. You can add as manyadditional test functions and as many test modules as you want!
.P
We‚Äôll explore some aspects of how tests work by experimenting with the templatetest before we actually test any code\. Then we‚Äôll write some real\-world teststhat call some code that we‚Äôve written and assert that its behavior is correct\.
.P
Let‚Äôs create a new library project called `\fIadder\fR` that will add two numbers:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new adder \-\-lib
     Created library `adder` project
$ cd adder

.EE

.RE
.P
The contents of the \fIsrc/lib\.rs\fR file in your `\fIadder\fR` library should look likeListing 11\-1\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        let result = 2 + 2;
        assert_eq!(result, 4);
    }
}

.EE

.RE
Listing 11\-1: The test module and function generatedautomatically by `\fIcargo new\fR`
.P
For now, let‚Äôs ignore the top two lines and focus on the function\. Note the`\fI#[test]\fR` annotation: this attribute indicates this is a test function, so thetest runner knows to treat this function as a test\. We might also have non\-testfunctions in the `\fItests\fR` module to help set up common scenarios or performcommon operations, so we always need to indicate which functions are tests\.
.P
The example function body uses the `\fIassert_eq!\fR` macro to assert that `\fIresult\fR`,which contains the result of adding 2 and 2, equals 4\. This assertion serves asan example of the format for a typical test\. Let‚Äôs run it to see that this testpasses\.
.P
The `\fIcargo test\fR` command runs all tests in our project, as shown in Listing11\-2\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.57s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::it_works \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
Listing 11\-2: The output from running the automaticallygenerated test
.P
Cargo compiled and ran the test\. We see the line `\fIrunning 1 test\fR`\. The nextline shows the name of the generated test function, called `\fIit_works\fR`, and thatthe result of running that test is `\fIok\fR`\. The overall summary `\fItest result: ok\.\fR`means that all the tests passed, and the portion that reads `\fI1 passed; 0 failed\fR` totals the number of tests that passed or failed\.
.P
It‚Äôs possible to mark a test as ignored so it doesn‚Äôt run in a particularinstance; we‚Äôll cover that in the 
.UR ch11\-02\-running\-tests\.html#ignoring\-some\-tests\-unless\-specifically\-requested
.UE
‚ÄúIgnoring Some Tests Unless SpecificallyRequested‚Äù section later in this chapter\. Because wehaven‚Äôt done that here, the summary shows `\fI0 ignored\fR`\. We can also pass anargument to the `\fIcargo test\fR` command to run only tests whose name matches astring; this is called \fIfiltering\fR and we‚Äôll cover that in the 
.UR ch11\-02\-running\-tests\.html#running\-a\-subset\-of\-tests\-by\-name
.UE
‚ÄúRunning aSubset of Tests by Name‚Äù section\. We also haven‚Äôtfiltered the tests being run, so the end of the summary shows `\fI0 filtered out\fR`\.
.P
The `\fI0 measured\fR` statistic is for benchmark tests that measure performance\.Benchmark tests are, as of this writing, only available in nightly Rust\. See
.UR \.\./unstable\-book/library\-features/test\.html
.UE
the documentation about benchmark tests to learn more\.
.P
The next part of the test output starting at `\fIDoc\-tests adder\fR` is for theresults of any documentation tests\. We don‚Äôt have any documentation tests yet,but Rust can compile any code examples that appear in our API documentation\.This feature helps keep your docs and your code in sync! We‚Äôll discuss how towrite documentation tests in the 
.UR ch14\-02\-publishing\-to\-crates\-io\.html#documentation\-comments\-as\-tests
.UE
‚ÄúDocumentation Comments asTests‚Äù section of Chapter 14\. For now, we‚Äôllignore the `\fIDoc\-tests\fR` output\.
.P
Let‚Äôs start to customize the test to our own needs\. First change the name ofthe `\fIit_works\fR` function to a different name, such as `\fIexploration\fR`, like so:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn exploration() {
        assert_eq!(2 + 2, 4);
    }
}

.EE

.RE
.P
Then run `\fIcargo test\fR` again\. The output now shows `\fIexploration\fR` instead of`\fIit_works\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.59s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::exploration \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Now we‚Äôll add another test, but this time we‚Äôll make a test that fails! Testsfail when something in the test function panics\. Each test is run in a newthread, and when the main thread sees that a test thread has died, the test ismarked as failed\. In Chapter 9, we talked about how the simplest way to panicis to call the `\fIpanic!\fR` macro\. Enter the new test as a function named`\fIanother\fR`, so your \fIsrc/lib\.rs\fR file looks like Listing 11\-3\.Filename: src/lib\.rs
.RS
.IP \fBrust,panics,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn exploration() {
        assert_eq!(2 + 2, 4);
    }

    #[test]
    fn another() {
        panic!("Make this test fail");
    }
}

.EE

.RE
Listing 11\-3: Adding a second test that will fail becausewe call the `\fIpanic!\fR` macro
.P
Run the tests again using `\fIcargo test\fR`\. The output should look like Listing11\-4, which shows that our `\fIexploration\fR` test passed and `\fIanother\fR` failed\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.72s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 2 tests
test tests::another \.\.\. FAILED
test tests::exploration \.\.\. ok

failures:

\-\-\-\- tests::another stdout \-\-\-\-
thread 'main' panicked at 'Make this test fail', src/lib\.rs:10:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::another

test result: FAILED\. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
Listing 11\-4: Test results when one test passes and onetest fails
.P
Instead of `\fIok\fR`, the line `\fItest tests::another\fR` shows `\fIFAILED\fR`\. Two newsections appear between the individual results and the summary: the firstdisplays the detailed reason for each test failure\. In this case, we get thedetails that `\fIanother\fR` failed because it `\fIpanicked at 'Make this test fail'\fR` online 10 in the \fIsrc/lib\.rs\fR file\. The next section lists just the names of allthe failing tests, which is useful when there are lots of tests and lots ofdetailed failing test output\. We can use the name of a failing test to run justthat test to more easily debug it; we‚Äôll talk more about ways to run tests inthe 
.UR ch11\-02\-running\-tests\.html#controlling\-how\-tests\-are\-run
.UE
‚ÄúControlling How Tests Are Run‚Äù section\.
.P
The summary line displays at the end: overall, our test result is `\fIFAILED\fR`\. Wehad one test pass and one test fail\.
.P
Now that you‚Äôve seen what the test results look like in different scenarios,let‚Äôs look at some macros other than `\fIpanic!\fR` that are useful in tests\.
.br

.br
\fBChecking Results with the \fR
.br
============================
.br
`\fIassert!\fR` Macro
.P
The `\fIassert!\fR` macro, provided by the standard library, is useful when you wantto ensure that some condition in a test evaluates to `\fItrue\fR`\. We give the`\fIassert!\fR` macro an argument that evaluates to a Boolean\. If the value is`\fItrue\fR`, nothing happens and the test passes\. If the value is `\fIfalse\fR`, the`\fIassert!\fR` macro calls `\fIpanic!\fR` to cause the test to fail\. Using the `\fIassert!\fR`macro helps us check that our code is functioning in the way we intend\.
.P
In Chapter 5, Listing 5\-15, we used a `\fIRectangle\fR` struct and a `\fIcan_hold\fR`method, which are repeated here in Listing 11\-5\. Let‚Äôs put this code in the\fIsrc/lib\.rs\fR file, then write some tests for it using the `\fIassert!\fR` macro\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) \-> bool {
        self\.width > other\.width && self\.height > other\.height
    }
}

.EE

.RE
Listing 11\-5: Using the `\fIRectangle\fR` struct and its`\fIcan_hold\fR` method from Chapter 5
.P
The `\fIcan_hold\fR` method returns a Boolean, which means it‚Äôs a perfect use casefor the `\fIassert!\fR` macro\. In Listing 11\-6, we write a test that exercises the`\fIcan_hold\fR` method by creating a `\fIRectangle\fR` instance that has a width of 8 anda height of 7 and asserting that it can hold another `\fIRectangle\fR` instance thathas a width of 5 and a height of 1\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
# impl Rectangle {
#     fn can_hold(&self, other: &Rectangle) \-> bool {
#         self\.width > other\.width && self\.height > other\.height
#     }
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn larger_can_hold_smaller() {
        let larger = Rectangle {
            width: 8,
            height: 7,
        };
        let smaller = Rectangle {
            width: 5,
            height: 1,
        };

        assert!(larger\.can_hold(&smaller));
    }
}

.EE

.RE
Listing 11\-6: A test for `\fIcan_hold\fR` that checks whether alarger rectangle can indeed hold a smaller rectangle
.P
Note that we‚Äôve added a new line inside the `\fItests\fR` module: `\fIuse super::*;\fR`\.The `\fItests\fR` module is a regular module that follows the usual visibility ruleswe covered in Chapter 7 in the 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html
.UE
‚ÄúPaths for Referring to an Item in the ModuleTree‚Äùsection\. Because the `\fItests\fR` module is an inner module, we need to bring thecode under test in the outer module into the scope of the inner module\. We usea glob here so anything we define in the outer module is available to this`\fItests\fR` module\.
.P
We‚Äôve named our test `\fIlarger_can_hold_smaller\fR`, and we‚Äôve created the two`\fIRectangle\fR` instances that we need\. Then we called the `\fIassert!\fR` macro andpassed it the result of calling `\fIlarger\.can_hold(&smaller)\fR`\. This expression issupposed to return `\fItrue\fR`, so our test should pass\. Let‚Äôs find out!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling rectangle v0\.1\.0 (file:///projects/rectangle)
    Finished test [unoptimized + debuginfo] target(s) in 0\.66s
     Running unittests src/lib\.rs (target/debug/deps/rectangle\-6584c4561e48942e)

running 1 test
test tests::larger_can_hold_smaller \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests rectangle

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
It does pass! Let‚Äôs add another test, this time asserting that a smallerrectangle cannot hold a larger rectangle:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
# impl Rectangle {
#     fn can_hold(&self, other: &Rectangle) \-> bool {
#         self\.width > other\.width && self\.height > other\.height
#     }
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn larger_can_hold_smaller() {
        // \-\-snip\-\-
#         let larger = Rectangle {
#             width: 8,
#             height: 7,
#         };
#         let smaller = Rectangle {
#             width: 5,
#             height: 1,
#         };
# 
#         assert!(larger\.can_hold(&smaller));
    }

    #[test]
    fn smaller_cannot_hold_larger() {
        let larger = Rectangle {
            width: 8,
            height: 7,
        };
        let smaller = Rectangle {
            width: 5,
            height: 1,
        };

        assert!(!smaller\.can_hold(&larger));
    }
}

.EE

.RE
.P
Because the correct result of the `\fIcan_hold\fR` function in this case is `\fIfalse\fR`,we need to negate that result before we pass it to the `\fIassert!\fR` macro\. As aresult, our test will pass if `\fIcan_hold\fR` returns `\fIfalse\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling rectangle v0\.1\.0 (file:///projects/rectangle)
    Finished test [unoptimized + debuginfo] target(s) in 0\.66s
     Running unittests src/lib\.rs (target/debug/deps/rectangle\-6584c4561e48942e)

running 2 tests
test tests::larger_can_hold_smaller \.\.\. ok
test tests::smaller_cannot_hold_larger \.\.\. ok

test result: ok\. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests rectangle

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Two tests that pass! Now let‚Äôs see what happens to our test results when weintroduce a bug in our code\. We‚Äôll change the implementation of the `\fIcan_hold\fR`method by replacing the greater\-than sign with a less\-than sign when itcompares the widths:
.RS
.IP \fBrust,not_desired_behavior,noplayground\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
// \-\-snip\-\-
impl Rectangle {
    fn can_hold(&self, other: &Rectangle) \-> bool {
        self\.width < other\.width && self\.height > other\.height
    }
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn larger_can_hold_smaller() {
#         let larger = Rectangle {
#             width: 8,
#             height: 7,
#         };
#         let smaller = Rectangle {
#             width: 5,
#             height: 1,
#         };
# 
#         assert!(larger\.can_hold(&smaller));
#     }
# 
#     #[test]
#     fn smaller_cannot_hold_larger() {
#         let larger = Rectangle {
#             width: 8,
#             height: 7,
#         };
#         let smaller = Rectangle {
#             width: 5,
#             height: 1,
#         };
# 
#         assert!(!smaller\.can_hold(&larger));
#     }
# }

.EE

.RE
.P
Running the tests now produces the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling rectangle v0\.1\.0 (file:///projects/rectangle)
    Finished test [unoptimized + debuginfo] target(s) in 0\.66s
     Running unittests src/lib\.rs (target/debug/deps/rectangle\-6584c4561e48942e)

running 2 tests
test tests::larger_can_hold_smaller \.\.\. FAILED
test tests::smaller_cannot_hold_larger \.\.\. ok

failures:

\-\-\-\- tests::larger_can_hold_smaller stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: larger\.can_hold(&smaller)', src/lib\.rs:28:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::larger_can_hold_smaller

test result: FAILED\. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Our tests caught the bug! Because `\fIlarger\.width\fR` is 8 and `\fIsmaller\.width\fR` is5, the comparison of the widths in `\fIcan_hold\fR` now returns `\fIfalse\fR`: 8 is notless than 5\.
.br

.br
\fBTesting Equality with the \fR
.br
============================
.br
`\fIassert_eq!\fR` and `\fIassert_ne!\fR` Macros
.P
A common way to verify functionality is to test for equality between the resultof the code under test and the value you expect the code to return\. You coulddo this using the `\fIassert!\fR` macro and passing it an expression using the `\fI==\fR`operator\. However, this is such a common test that the standard libraryprovides a pair of macros‚Äî`\fIassert_eq!\fR` and `\fIassert_ne!\fR`‚Äîto perform this testmore conveniently\. These macros compare two arguments for equality orinequality, respectively\. They‚Äôll also print the two values if the assertionfails, which makes it easier to see \fIwhy\fR the test failed; conversely, the`\fIassert!\fR` macro only indicates that it got a `\fIfalse\fR` value for the `\fI==\fR`expression, without printing the values that led to the `\fIfalse\fR` value\.
.P
In Listing 11\-7, we write a function named `\fIadd_two\fR` that adds `\fI2\fR` to itsparameter, then we test this function using the `\fIassert_eq!\fR` macro\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_two(a: i32) \-> i32 {
    a + 2
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_adds_two() {
        assert_eq!(4, add_two(2));
    }
}

.EE

.RE
Listing 11\-7: Testing the function `\fIadd_two\fR` using the`\fIassert_eq!\fR` macro
.P
Let‚Äôs check that it passes!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.58s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::it_adds_two \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
We pass `\fI4\fR` as the argument to `\fIassert_eq!\fR`, which is equal to the result ofcalling `\fIadd_two(2)\fR`\. The line for this test is `\fItest tests::it_adds_two \.\.\. ok\fR`, and the `\fIok\fR` text indicates that our test passed!
.P
Let‚Äôs introduce a bug into our code to see what `\fIassert_eq!\fR` looks like when itfails\. Change the implementation of the `\fIadd_two\fR` function to instead add `\fI3\fR`:
.RS
.IP \fBrust,not_desired_behavior,noplayground\fR 2

.br
.EX
pub fn add_two(a: i32) \-> i32 {
    a + 3
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn it_adds_two() {
#         assert_eq!(4, add_two(2));
#     }
# }

.EE

.RE
.P
Run the tests again:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.61s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::it_adds_two \.\.\. FAILED

failures:

\-\-\-\- tests::it_adds_two stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `4`,
 right: `5`', src/lib\.rs:11:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::it_adds_two

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Our test caught the bug! The `\fIit_adds_two\fR` test failed, and the message tellsus that the assertion that fails was `\fIassertion failed: `(left == right)`\fR`and what the `\fIleft\fR` and `\fIright\fR` values are\. This message helps us startdebugging: the `\fIleft\fR` argument was `\fI4\fR` but the `\fIright\fR` argument, where we had`\fIadd_two(2)\fR`, was `\fI5\fR`\. You can imagine that this would be especially helpfulwhen we have a lot of tests going on\.
.P
Note that in some languages and test frameworks, the parameters to equalityassertion functions are called `\fIexpected\fR` and `\fIactual\fR`, and the order in whichwe specify the arguments matters\. However, in Rust, they‚Äôre called `\fIleft\fR` and`\fIright\fR`, and the order in which we specify the value we expect and the valuethe code produces doesn‚Äôt matter\. We could write the assertion in this test as`\fIassert_eq!(add_two(2), 4)\fR`, which would result in the same failure messagethat displays `\fIassertion failed: `(left == right)`\fR`\.
.P
The `\fIassert_ne!\fR` macro will pass if the two values we give it are not equal andfail if they‚Äôre equal\. This macro is most useful for cases when we‚Äôre not surewhat a value \fIwill\fR be, but we know what the value definitely \fIshouldn‚Äôt\fR be\.For example, if we‚Äôre testing a function that is guaranteed to change its inputin some way, but the way in which the input is changed depends on the day ofthe week that we run our tests, the best thing to assert might be that theoutput of the function is not equal to the input\.
.P
Under the surface, the `\fIassert_eq!\fR` and `\fIassert_ne!\fR` macros use the operators`\fI==\fR` and `\fI!=\fR`, respectively\. When the assertions fail, these macros print theirarguments using debug formatting, which means the values being compared mustimplement the `\fIPartialEq\fR` and `\fIDebug\fR` traits\. All primitive types and most ofthe standard library types implement these traits\. For structs and enums thatyou define yourself, you‚Äôll need to implement `\fIPartialEq\fR` to assert equality ofthose types\. You‚Äôll also need to implement `\fIDebug\fR` to print the values when theassertion fails\. Because both traits are derivable traits, as mentioned inListing 5\-12 in Chapter 5, this is usually as straightforward as adding the`\fI#[derive(PartialEq, Debug)]\fR` annotation to your struct or enum definition\. SeeAppendix C, 
.UR appendix\-03\-derivable\-traits\.html
.UE
‚ÄúDerivable Traits,‚Äù for moredetails about these and other derivable traits\.
.br

.br
\fBAdding Custom Failure Messages\fR
.br
================================
.br

.P
You can also add a custom message to be printed with the failure message asoptional arguments to the `\fIassert!\fR`, `\fIassert_eq!\fR`, and `\fIassert_ne!\fR` macros\. Anyarguments specified after the required arguments are passed along to the`\fIformat!\fR` macro (discussed in Chapter 8 in the 
.UR ch08\-02\-strings\.html#concatenation\-with\-the\-\-operator\-or\-the\-format\-macro
.UE
‚ÄúConcatenation with the `\fI+\fR`Operator or the `\fIformat!\fR`Macro‚Äùsection), so you can pass a format string that contains `\fI{}\fR` placeholders andvalues to go in those placeholders\. Custom messages are useful for documentingwhat an assertion means; when a test fails, you‚Äôll have a better idea of whatthe problem is with the code\.
.P
For example, let‚Äôs say we have a function that greets people by name and wewant to test that the name we pass into the function appears in the output:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn greeting(name: &str) \-> String {
    format!("Hello {}!", name)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn greeting_contains_name() {
        let result = greeting("Carol");
        assert!(result\.contains("Carol"));
    }
}

.EE

.RE
.P
The requirements for this program haven‚Äôt been agreed upon yet, and we‚Äôrepretty sure the `\fIHello\fR` text at the beginning of the greeting will change\. Wedecided we don‚Äôt want to have to update the test when the requirements change,so instead of checking for exact equality to the value returned from the`\fIgreeting\fR` function, we‚Äôll just assert that the output contains the text of theinput parameter\.
.P
Now let‚Äôs introduce a bug into this code by changing `\fIgreeting\fR` to exclude`\fIname\fR` to see what the default test failure looks like:
.RS
.IP \fBrust,not_desired_behavior,noplayground\fR 2

.br
.EX
pub fn greeting(name: &str) \-> String {
    String::from("Hello!")
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn greeting_contains_name() {
#         let result = greeting("Carol");
#         assert!(result\.contains("Carol"));
#     }
# }

.EE

.RE
.P
Running this test produces the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling greeter v0\.1\.0 (file:///projects/greeter)
    Finished test [unoptimized + debuginfo] target(s) in 0\.91s
     Running unittests src/lib\.rs (target/debug/deps/greeter\-170b942eb5bf5e3a)

running 1 test
test tests::greeting_contains_name \.\.\. FAILED

failures:

\-\-\-\- tests::greeting_contains_name stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: result\.contains(\"Carol\")', src/lib\.rs:12:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::greeting_contains_name

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
This result just indicates that the assertion failed and which line theassertion is on\. A more useful failure message would print the value from the`\fIgreeting\fR` function\. Let‚Äôs add a custom failure message composed of a formatstring with a placeholder filled in with the actual value we got from the`\fIgreeting\fR` function:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# pub fn greeting(name: &str) \-> String {
#     String::from("Hello!")
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
    #[test]
    fn greeting_contains_name() {
        let result = greeting("Carol");
        assert!(
            result\.contains("Carol"),
            "Greeting did not contain name, value was `{}`",
            result
        );
    }
# }

.EE

.RE
.P
Now when we run the test, we‚Äôll get a more informative error message:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling greeter v0\.1\.0 (file:///projects/greeter)
    Finished test [unoptimized + debuginfo] target(s) in 0\.93s
     Running unittests src/lib\.rs (target/debug/deps/greeter\-170b942eb5bf5e3a)

running 1 test
test tests::greeting_contains_name \.\.\. FAILED

failures:

\-\-\-\- tests::greeting_contains_name stdout \-\-\-\-
thread 'main' panicked at 'Greeting did not contain name, value was `Hello!`', src/lib\.rs:12:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::greeting_contains_name

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
We can see the value we actually got in the test output, which would help usdebug what happened instead of what we were expecting to happen\.
.br

.br
\fBChecking for Panics with \fR
.br
===========================
.br
`\fIshould_panic\fR`
.P
In addition to checking return values, it‚Äôs important to check that our codehandles error conditions as we expect\. For example, consider the `\fIGuess\fR` typethat we created in Chapter 9, Listing 9\-13\. Other code that uses `\fIGuess\fR`depends on the guarantee that `\fIGuess\fR` instances will contain only valuesbetween 1 and 100\. We can write a test that ensures that attempting to create a`\fIGuess\fR` instance with a value outside that range panics\.
.P
We do this by adding the attribute `\fIshould_panic\fR` to our test function\. Thetest passes if the code inside the function panics; the test fails if the codeinside the function doesn‚Äôt panic\.
.P
Listing 11\-8 shows a test that checks that the error conditions of `\fIGuess::new\fR`happen when we expect them to\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct Guess {
    value: i32,
}

impl Guess {
    pub fn new(value: i32) \-> Guess {
        if value < 1 || value > 100 {
            panic!("Guess value must be between 1 and 100, got {}\.", value);
        }

        Guess { value }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    #[should_panic]
    fn greater_than_100() {
        Guess::new(200);
    }
}

.EE

.RE
Listing 11\-8: Testing that a condition will cause a`\fIpanic!\fR`
.P
We place the `\fI#[should_panic]\fR` attribute after the `\fI#[test]\fR` attribute andbefore the test function it applies to\. Let‚Äôs look at the result when this testpasses:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished test [unoptimized + debuginfo] target(s) in 0\.58s
     Running unittests src/lib\.rs (target/debug/deps/guessing_game\-57d70c3acb738f4d)

running 1 test
test tests::greater_than_100 \- should panic \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests guessing_game

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Looks good! Now let‚Äôs introduce a bug in our code by removing the conditionthat the `\fInew\fR` function will panic if the value is greater than 100:
.RS
.IP \fBrust,not_desired_behavior,noplayground\fR 2

.br
.EX
# pub struct Guess {
#     value: i32,
# }
# 
// \-\-snip\-\-
impl Guess {
    pub fn new(value: i32) \-> Guess {
        if value < 1 {
            panic!("Guess value must be between 1 and 100, got {}\.", value);
        }

        Guess { value }
    }
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     #[should_panic]
#     fn greater_than_100() {
#         Guess::new(200);
#     }
# }

.EE

.RE
.P
When we run the test in Listing 11\-8, it will fail:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished test [unoptimized + debuginfo] target(s) in 0\.62s
     Running unittests src/lib\.rs (target/debug/deps/guessing_game\-57d70c3acb738f4d)

running 1 test
test tests::greater_than_100 \- should panic \.\.\. FAILED

failures:

\-\-\-\- tests::greater_than_100 stdout \-\-\-\-
note: test did not panic as expected

failures:
    tests::greater_than_100

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
We don‚Äôt get a very helpful message in this case, but when we look at the testfunction, we see that it‚Äôs annotated with `\fI#[should_panic]\fR`\. The failure we gotmeans that the code in the test function did not cause a panic\.
.P
Tests that use `\fIshould_panic\fR` can be imprecise\. A `\fIshould_panic\fR` test wouldpass even if the test panics for a different reason from the one we wereexpecting\. To make `\fIshould_panic\fR` tests more precise, we can add an optional`\fIexpected\fR` parameter to the `\fIshould_panic\fR` attribute\. The test harness willmake sure that the failure message contains the provided text\. For example,consider the modified code for `\fIGuess\fR` in Listing 11\-9 where the `\fInew\fR` functionpanics with different messages depending on whether the value is too small ortoo large\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Guess {
#     value: i32,
# }
# 
// \-\-snip\-\-

impl Guess {
    pub fn new(value: i32) \-> Guess {
        if value < 1 {
            panic!(
                "Guess value must be greater than or equal to 1, got {}\.",
                value
            );
        } else if value > 100 {
            panic!(
                "Guess value must be less than or equal to 100, got {}\.",
                value
            );
        }

        Guess { value }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    #[should_panic(expected = "less than or equal to 100")]
    fn greater_than_100() {
        Guess::new(200);
    }
}

.EE

.RE
Listing 11\-9: Testing for a `\fIpanic!\fR` with a panic messagecontaining a specified substring
.P
This test will pass because the value we put in the `\fIshould_panic\fR` attribute‚Äôs`\fIexpected\fR` parameter is a substring of the message that the `\fIGuess::new\fR`function panics with\. We could have specified the entire panic message that weexpect, which in this case would be `\fIGuess value must be less than or equal to 100, got 200\.\fR` What you choose to specify depends on how much of the panicmessage is unique or dynamic and how precise you want your test to be\. In thiscase, a substring of the panic message is enough to ensure that the code in thetest function executes the `\fIelse if value > 100\fR` case\.
.P
To see what happens when a `\fIshould_panic\fR` test with an `\fIexpected\fR` messagefails, let‚Äôs again introduce a bug into our code by swapping the bodies of the`\fIif value < 1\fR` and the `\fIelse if value > 100\fR` blocks:
.RS
.IP \fBrust,ignore,not_desired_behavior\fR 2

.br
.EX
# pub struct Guess {
#     value: i32,
# }
# 
# impl Guess {
#     pub fn new(value: i32) \-> Guess {
        if value < 1 {
            panic!(
                "Guess value must be less than or equal to 100, got {}\.",
                value
            );
        } else if value > 100 {
            panic!(
                "Guess value must be greater than or equal to 1, got {}\.",
                value
            );
        }
# 
#         Guess { value }
#     }
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     #[should_panic(expected = "less than or equal to 100")]
#     fn greater_than_100() {
#         Guess::new(200);
#     }
# }

.EE

.RE
.P
This time when we run the `\fIshould_panic\fR` test, it will fail:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished test [unoptimized + debuginfo] target(s) in 0\.66s
     Running unittests src/lib\.rs (target/debug/deps/guessing_game\-57d70c3acb738f4d)

running 1 test
test tests::greater_than_100 \- should panic \.\.\. FAILED

failures:

\-\-\-\- tests::greater_than_100 stdout \-\-\-\-
thread 'main' panicked at 'Guess value must be greater than or equal to 1, got 200\.', src/lib\.rs:13:13
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
note: panic did not contain expected string
      panic message: `"Guess value must be greater than or equal to 1, got 200\."`,
 expected substring: `"less than or equal to 100"`

failures:
    tests::greater_than_100

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
The failure message indicates that this test did indeed panic as we expected,but the panic message did not include the expected string `\fI'Guess value must be less than or equal to 100'\fR`\. The panic message that we did get in this case was`\fIGuess value must be greater than or equal to 1, got 200\.\fR` Now we can startfiguring out where our bug is!
.br

.br
\fBUsing \fR
.br
========
.br
`\fIResult<T, E>\fR` in Tests
.P
Our tests so far all panic when they fail\. We can also write tests that use`\fIResult<T, E>\fR`! Here‚Äôs the test from Listing 11\-1, rewritten to use `\fIResult<T, E>\fR` and return an `\fIErr\fR` instead of panicking:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() \-> Result<(), String> {
        if 2 + 2 == 4 {
            Ok(())
        } else {
            Err(String::from("two plus two does not equal four"))
        }
    }
}

.EE

.RE
.P
The `\fIit_works\fR` function now has the `\fIResult<(), String>\fR` return type\. In thebody of the function, rather than calling the `\fIassert_eq!\fR` macro, we return`\fIOk(())\fR` when the test passes and an `\fIErr\fR` with a `\fIString\fR` inside when the testfails\.
.P
Writing tests so they return a `\fIResult<T, E>\fR` enables you to use the questionmark operator in the body of tests, which can be a convenient way to writetests that should fail if any operation within them returns an `\fIErr\fR` variant\.
.P
You can‚Äôt use the `\fI#[should_panic]\fR` annotation on tests that use `\fIResult<T, E>\fR`\. To assert that an operation returns an `\fIErr\fR` variant, \fIdon‚Äôt\fR use thequestion mark operator on the `\fIResult<T, E>\fR` value\. Instead, use`\fIassert!(value\.is_err())\fR`\.
.P
Now that you know several ways to write tests, let‚Äôs look at what is happeningwhen we run our tests and explore the different options we can use with `\fIcargo test\fR`\.
.SH "Controlling How Tests Are Run"

.br

.br
\fBControlling How Tests Are Run\fR
.br
===============================
.br

.P
Just as `\fIcargo run\fR` compiles your code and then runs the resulting binary,`\fIcargo test\fR` compiles your code in test mode and runs the resulting testbinary\. The default behavior of the binary produced by `\fIcargo test\fR` is to runall the tests in parallel and capture output generated during test runs,preventing the output from being displayed and making it easier to read theoutput related to the test results\. You can, however, specify command lineoptions to change this default behavior\.
.P
Some command line options go to `\fIcargo test\fR`, and some go to the resulting testbinary\. To separate these two types of arguments, you list the arguments thatgo to `\fIcargo test\fR` followed by the separator `\fI\-\-\fR` and then the ones that go tothe test binary\. Running `\fIcargo test \-\-help\fR` displays the options you can usewith `\fIcargo test\fR`, and running `\fIcargo test \-\- \-\-help\fR` displays the options youcan use after the separator\.
.br

.br
\fBRunning Tests in Parallel or Consecutively\fR
.br
============================================
.br

.P
When you run multiple tests, by default they run in parallel using threads,meaning they finish running faster and you get feedback quicker\. Because thetests are running at the same time, you must make sure your tests don‚Äôt dependon each other or on any shared state, including a shared environment, such asthe current working directory or environment variables\.
.P
For example, say each of your tests runs some code that creates a file on disknamed \fItest\-output\.txt\fR and writes some data to that file\. Then each test readsthe data in that file and asserts that the file contains a particular value,which is different in each test\. Because the tests run at the same time, onetest might overwrite the file in the time between another test writing andreading the file\. The second test will then fail, not because the code isincorrect but because the tests have interfered with each other while runningin parallel\. One solution is to make sure each test writes to a different file;another solution is to run the tests one at a time\.
.P
If you don‚Äôt want to run the tests in parallel or if you want more fine\-grainedcontrol over the number of threads used, you can send the `\fI\-\-test\-threads\fR` flagand the number of threads you want to use to the test binary\. Take a look atthe following example:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\- \-\-test\-threads=1

.EE

.RE
.P
We set the number of test threads to `\fI1\fR`, telling the program not to use anyparallelism\. Running the tests using one thread will take longer than runningthem in parallel, but the tests won‚Äôt interfere with each other if they sharestate\.
.br

.br
\fBShowing Function Output\fR
.br
=========================
.br

.P
By default, if a test passes, Rust‚Äôs test library captures anything printed tostandard output\. For example, if we call `\fIprintln!\fR` in a test and the testpasses, we won‚Äôt see the `\fIprintln!\fR` output in the terminal; we‚Äôll see only theline that indicates the test passed\. If a test fails, we‚Äôll see whatever wasprinted to standard output with the rest of the failure message\.
.P
As an example, Listing 11\-10 has a silly function that prints the value of itsparameter and returns 10, as well as a test that passes and a test that fails\.Filename: src/lib\.rs
.RS
.IP \fBrust,panics,noplayground\fR 2

.br
.EX
fn prints_and_returns_10(a: i32) \-> i32 {
    println!("I got the value {}", a);
    10
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn this_test_will_pass() {
        let value = prints_and_returns_10(4);
        assert_eq!(10, value);
    }

    #[test]
    fn this_test_will_fail() {
        let value = prints_and_returns_10(8);
        assert_eq!(5, value);
    }
}

.EE

.RE
Listing 11\-10: Tests for a function that calls`\fIprintln!\fR`
.P
When we run these tests with `\fIcargo test\fR`, we‚Äôll see the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling silly\-function v0\.1\.0 (file:///projects/silly\-function)
    Finished test [unoptimized + debuginfo] target(s) in 0\.58s
     Running unittests src/lib\.rs (target/debug/deps/silly_function\-160869f38cff9166)

running 2 tests
test tests::this_test_will_fail \.\.\. FAILED
test tests::this_test_will_pass \.\.\. ok

failures:

\-\-\-\- tests::this_test_will_fail stdout \-\-\-\-
I got the value 8
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `5`,
 right: `10`', src/lib\.rs:19:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::this_test_will_fail

test result: FAILED\. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Note that nowhere in this output do we see `\fII got the value 4\fR`, which is whatis printed when the test that passes runs\. That output has been captured\. Theoutput from the test that failed, `\fII got the value 8\fR`, appears in the sectionof the test summary output, which also shows the cause of the test failure\.
.P
If we want to see printed values for passing tests as well, we can tell Rustto also show the output of successful tests with `\fI\-\-show\-output\fR`\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\- \-\-show\-output

.EE

.RE
.P
When we run the tests in Listing 11\-10 again with the `\fI\-\-show\-output\fR` flag, wesee the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\- \-\-show\-output
   Compiling silly\-function v0\.1\.0 (file:///projects/silly\-function)
    Finished test [unoptimized + debuginfo] target(s) in 0\.60s
     Running unittests src/lib\.rs (target/debug/deps/silly_function\-160869f38cff9166)

running 2 tests
test tests::this_test_will_fail \.\.\. FAILED
test tests::this_test_will_pass \.\.\. ok

successes:

\-\-\-\- tests::this_test_will_pass stdout \-\-\-\-
I got the value 4


successes:
    tests::this_test_will_pass

failures:

\-\-\-\- tests::this_test_will_fail stdout \-\-\-\-
I got the value 8
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `5`,
 right: `10`', src/lib\.rs:19:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::this_test_will_fail

test result: FAILED\. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE

.br

.br
\fBRunning a Subset of Tests by Name\fR
.br
===================================
.br

.P
Sometimes, running a full test suite can take a long time\. If you‚Äôre working oncode in a particular area, you might want to run only the tests pertaining tothat code\. You can choose which tests to run by passing `\fIcargo test\fR` the nameor names of the test(s) you want to run as an argument\.
.P
To demonstrate how to run a subset of tests, we‚Äôll first create three tests forour `\fIadd_two\fR` function, as shown in Listing 11\-11, and choose which ones to run\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_two(a: i32) \-> i32 {
    a + 2
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn add_two_and_two() {
        assert_eq!(4, add_two(2));
    }

    #[test]
    fn add_three_and_two() {
        assert_eq!(5, add_two(3));
    }

    #[test]
    fn one_hundred() {
        assert_eq!(102, add_two(100));
    }
}

.EE

.RE
Listing 11\-11: Three tests with three differentnames
.P
If we run the tests without passing any arguments, as we saw earlier, all thetests will run in parallel:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.62s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 3 tests
test tests::add_three_and_two \.\.\. ok
test tests::add_two_and_two \.\.\. ok
test tests::one_hundred \.\.\. ok

test result: ok\. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE

.br

.br
\fBRunning Single Tests\fR
.br
======================
.br

.P
We can pass the name of any test function to `\fIcargo test\fR` to run only that test:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test one_hundred
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.69s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::one_hundred \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out; finished in 0\.00s


.EE

.RE
.P
Only the test with the name `\fIone_hundred\fR` ran; the other two tests didn‚Äôt matchthat name\. The test output lets us know we had more tests that didn‚Äôt run bydisplaying `\fI2 filtered out\fR` at the end\.
.P
We can‚Äôt specify the names of multiple tests in this way; only the first valuegiven to `\fIcargo test\fR` will be used\. But there is a way to run multiple tests\.
.br

.br
\fBFiltering to Run Multiple Tests\fR
.br
=================================
.br

.P
We can specify part of a test name, and any test whose name matches that valuewill be run\. For example, because two of our tests‚Äô names contain `\fIadd\fR`, we canrun those two by running `\fIcargo test add\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test add
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.61s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 2 tests
test tests::add_three_and_two \.\.\. ok
test tests::add_two_and_two \.\.\. ok

test result: ok\. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0\.00s


.EE

.RE
.P
This command ran all tests with `\fIadd\fR` in the name and filtered out the testnamed `\fIone_hundred\fR`\. Also note that the module in which a test appears becomespart of the test‚Äôs name, so we can run all the tests in a module by filteringon the module‚Äôs name\.
.br

.br
\fBIgnoring Some Tests Unless Specifically Requested\fR
.br
===================================================
.br

.P
Sometimes a few specific tests can be very time\-consuming to execute, so youmight want to exclude them during most runs of `\fIcargo test\fR`\. Rather thanlisting as arguments all tests you do want to run, you can instead annotate thetime\-consuming tests using the `\fIignore\fR` attribute to exclude them, as shownhere:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[test]
fn it_works() {
    assert_eq!(2 + 2, 4);
}

#[test]
#[ignore]
fn expensive_test() {
    // code that takes an hour to run
}

.EE

.RE
.P
After `\fI#[test]\fR` we add the `\fI#[ignore]\fR` line to the test we want to exclude\. Nowwhen we run our tests, `\fIit_works\fR` runs, but `\fIexpensive_test\fR` doesn‚Äôt:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.60s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 2 tests
test expensive_test \.\.\. ignored
test it_works \.\.\. ok

test result: ok\. 1 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
The `\fIexpensive_test\fR` function is listed as `\fIignored\fR`\. If we want to run onlythe ignored tests, we can use `\fIcargo test \-\- \-\-ignored\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\- \-\-ignored
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.61s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test expensive_test \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
By controlling which tests run, you can make sure your `\fIcargo test\fR` resultswill be fast\. When you‚Äôre at a point where it makes sense to check the resultsof the `\fIignored\fR` tests and you have time to wait for the results, you can run`\fIcargo test \-\- \-\-ignored\fR` instead\. If you want to run all tests whether they‚Äôreignored or not, you can run `\fIcargo test \-\- \-\-include\-ignored\fR`\.
.SH "Test Organization"

.br

.br
\fBTest Organization\fR
.br
===================
.br

.P
As mentioned at the start of the chapter, testing is a complex discipline, anddifferent people use different terminology and organization\. The Rust communitythinks about tests in terms of two main categories: unit tests and integrationtests\. \fIUnit tests\fR are small and more focused, testing one module in isolationat a time, and can test private interfaces\. \fIIntegration tests\fR are entirelyexternal to your library and use your code in the same way any other externalcode would, using only the public interface and potentially exercising multiplemodules per test\.
.P
Writing both kinds of tests is important to ensure that the pieces of yourlibrary are doing what you expect them to, separately and together\.
.br

.br
\fBUnit Tests\fR
.br
============
.br

.P
The purpose of unit tests is to test each unit of code in isolation from therest of the code to quickly pinpoint where code is and isn‚Äôt working asexpected\. You‚Äôll put unit tests in the \fIsrc\fR directory in each file with thecode that they‚Äôre testing\. The convention is to create a module named `\fItests\fR`in each file to contain the test functions and to annotate the module with`\fIcfg(test)\fR`\.
.br

.br
\fBThe Tests Module and \fR
.br
=======================
.br
`\fI#[cfg(test)]\fR`
.P
The `\fI#[cfg(test)]\fR` annotation on the tests module tells Rust to compile and runthe test code only when you run `\fIcargo test\fR`, not when you run `\fIcargo build\fR`\.This saves compile time when you only want to build the library and saves spacein the resulting compiled artifact because the tests are not included\. You‚Äôllsee that because integration tests go in a different directory, they don‚Äôt needthe `\fI#[cfg(test)]\fR` annotation\. However, because unit tests go in the same filesas the code, you‚Äôll use `\fI#[cfg(test)]\fR` to specify that they shouldn‚Äôt beincluded in the compiled result\.
.P
Recall that when we generated the new `\fIadder\fR` project in the first section ofthis chapter, Cargo generated this code for us:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        let result = 2 + 2;
        assert_eq!(result, 4);
    }
}

.EE

.RE
.P
This code is the automatically generated test module\. The attribute `\fIcfg\fR`stands for \fIconfiguration\fR and tells Rust that the following item should onlybe included given a certain configuration option\. In this case, theconfiguration option is `\fItest\fR`, which is provided by Rust for compiling andrunning tests\. By using the `\fIcfg\fR` attribute, Cargo compiles our test code onlyif we actively run the tests with `\fIcargo test\fR`\. This includes any helperfunctions that might be within this module, in addition to the functionsannotated with `\fI#[test]\fR`\.
.br

.br
\fBTesting Private Functions\fR
.br
===========================
.br

.P
There‚Äôs debate within the testing community about whether or not privatefunctions should be tested directly, and other languages make it difficult orimpossible to test private functions\. Regardless of which testing ideology youadhere to, Rust‚Äôs privacy rules do allow you to test private functions\.Consider the code in Listing 11\-12 with the private function `\fIinternal_adder\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_two(a: i32) \-> i32 {
    internal_adder(a, 2)
}

fn internal_adder(a: i32, b: i32) \-> i32 {
    a + b
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn internal() {
        assert_eq!(4, internal_adder(2, 2));
    }
}

.EE

.RE
Listing 11\-12: Testing a private function
.P
Note that the `\fIinternal_adder\fR` function is not marked as `\fIpub\fR`\. Tests are justRust code, and the `\fItests\fR` module is just another module\. As we discussed inthe 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html
.UE
‚ÄúPaths for Referring to an Item in the Module Tree‚Äùsection, items in child modules can use the items in their ancestor modules\. Inthis test, we bring all of the `\fItest\fR` module‚Äôs parent‚Äôs items into scope with`\fIuse super::*\fR`, and then the test can call `\fIinternal_adder\fR`\. If you don‚Äôt thinkprivate functions should be tested, there‚Äôs nothing in Rust that will compelyou to do so\.
.br

.br
\fBIntegration Tests\fR
.br
===================
.br

.P
In Rust, integration tests are entirely external to your library\. They use yourlibrary in the same way any other code would, which means they can only callfunctions that are part of your library‚Äôs public API\. Their purpose is to testwhether many parts of your library work together correctly\. Units of code thatwork correctly on their own could have problems when integrated, so testcoverage of the integrated code is important as well\. To create integrationtests, you first need a \fItests\fR directory\.
.br

.br
\fBThe \fR
.br
======
.br
\fItests\fR Directory
.P
We create a \fItests\fR directory at the top level of our project directory, nextto \fIsrc\fR\. Cargo knows to look for integration test files in this directory\. Wecan then make as many test files as we want, and Cargo will compile each of thefiles as an individual crate\.
.P
Let‚Äôs create an integration test\. With the code in Listing 11\-12 still in the\fIsrc/lib\.rs\fR file, make a \fItests\fR directory, and create a new file named\fItests/integration_test\.rs\fR\. Your directory structure should look like this:
.RS
.IP \fBtext\fR 2

.br
.EX
adder
‚îú‚îÄ‚îÄ Cargo\.lock
‚îú‚îÄ‚îÄ Cargo\.toml
‚îú‚îÄ‚îÄ src
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ lib\.rs
‚îî‚îÄ‚îÄ tests
    ‚îî‚îÄ‚îÄ integration_test\.rs

.EE

.RE
.P
Enter the code in Listing 11\-13 into the \fItests/integration_test\.rs\fR file:Filename: tests/integration_test\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use adder;

#[test]
fn it_adds_two() {
    assert_eq!(4, adder::add_two(2));
}

.EE

.RE
Listing 11\-13: An integration test of a function in the`\fIadder\fR` crate
.P
Each file in the `\fItests\fR` directory is a separate crate, so we need to bring ourlibrary into each test crate‚Äôs scope\. For that reason we add `\fIuse adder\fR` at thetop of the code, which we didn‚Äôt need in the unit tests\.
.P
We don‚Äôt need to annotate any code in \fItests/integration_test\.rs\fR with`\fI#[cfg(test)]\fR`\. Cargo treats the `\fItests\fR` directory specially and compiles filesin this directory only when we run `\fIcargo test\fR`\. Run `\fIcargo test\fR` now:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 1\.31s
     Running unittests src/lib\.rs (target/debug/deps/adder\-1082c4b063a8fbe6)

running 1 test
test tests::internal \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running tests/integration_test\.rs (target/debug/deps/integration_test\-1082c4b063a8fbe6)

running 1 test
test it_adds_two \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
The three sections of output include the unit tests, the integration test, andthe doc tests\. Note that if any test in a section fails, the following sectionswill not be run\. For example, if a unit test fails, there won‚Äôt be any outputfor integration and doc tests because those tests will only be run if all unittests are passing\.
.P
The first section for the unit tests is the same as we‚Äôve been seeing: one linefor each unit test (one named `\fIinternal\fR` that we added in Listing 11\-12) andthen a summary line for the unit tests\.
.P
The integration tests section starts with the line `\fIRunning tests/integration_test\.rs\fR`\. Next, there is a line for each test function inthat integration test and a summary line for the results of the integrationtest just before the `\fIDoc\-tests adder\fR` section starts\.
.P
Each integration test file has its own section, so if we add more files in the\fItests\fR directory, there will be more integration test sections\.
.P
We can still run a particular integration test function by specifying the testfunction‚Äôs name as an argument to `\fIcargo test\fR`\. To run all the tests in aparticular integration test file, use the `\fI\-\-test\fR` argument of `\fIcargo test\fR`followed by the name of the file:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\-test integration_test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.64s
     Running tests/integration_test\.rs (target/debug/deps/integration_test\-82e7799c1bc62298)

running 1 test
test it_adds_two \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
This command runs only the tests in the \fItests/integration_test\.rs\fR file\.
.br

.br
\fBSubmodules in Integration Tests\fR
.br
=================================
.br

.P
As you add more integration tests, you might want to make more files in the\fItests\fR directory to help organize them; for example, you can group the testfunctions by the functionality they‚Äôre testing\. As mentioned earlier, each filein the \fItests\fR directory is compiled as its own separate crate, which is usefulfor creating separate scopes to more closely imitate the way end users will beusing your crate\. However, this means files in the \fItests\fR directory don‚Äôtshare the same behavior as files in \fIsrc\fR do, as you learned in Chapter 7regarding how to separate code into modules and files\.
.P
The different behavior of \fItests\fR directory files is most noticeable when youhave a set of helper functions to use in multiple integration test files andyou try to follow the steps in the 
.UR ch07\-05\-separating\-modules\-into\-different\-files\.html
.UE
‚ÄúSeparating Modules into DifferentFiles‚Äù section of Chapter 7 toextract them into a common module\. For example, if we create \fItests/common\.rs\fRand place a function named `\fIsetup\fR` in it, we can add some code to `\fIsetup\fR` thatwe want to call from multiple test functions in multiple test files:Filename: tests/common\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn setup() {
    // setup code specific to your library's tests would go here
}

.EE

.RE
.P
When we run the tests again, we‚Äôll see a new section in the test output for the\fIcommon\.rs\fR file, even though this file doesn‚Äôt contain any test functions nordid we call the `\fIsetup\fR` function from anywhere:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.89s
     Running unittests src/lib\.rs (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::internal \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running tests/common\.rs (target/debug/deps/common\-92948b65e88960b4)

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running tests/integration_test\.rs (target/debug/deps/integration_test\-92948b65e88960b4)

running 1 test
test it_adds_two \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Having `\fIcommon\fR` appear in the test results with `\fIrunning 0 tests\fR` displayed forit is not what we wanted\. We just wanted to share some code with the otherintegration test files\.
.P
To avoid having `\fIcommon\fR` appear in the test output, instead of creating\fItests/common\.rs\fR, we‚Äôll create \fItests/common/mod\.rs\fR\. The project directorynow looks like this:
.RS
.IP \fBtext\fR 2

.br
.EX
‚îú‚îÄ‚îÄ Cargo\.lock
‚îú‚îÄ‚îÄ Cargo\.toml
‚îú‚îÄ‚îÄ src
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ lib\.rs
‚îî‚îÄ‚îÄ tests
    ‚îú‚îÄ‚îÄ common
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ mod\.rs
    ‚îî‚îÄ‚îÄ integration_test\.rs

.EE

.RE
.P
This is the older naming convention that Rust also understands that wementioned in the 
.UR ch07\-05\-separating\-modules\-into\-different\-files\.html#alternate\-file\-paths
.UE
‚ÄúAlternate File Paths‚Äù section ofChapter 7\. Naming the file this way tells Rust not to treat the `\fIcommon\fR` moduleas an integration test file\. When we move the `\fIsetup\fR` function code into\fItests/common/mod\.rs\fR and delete the \fItests/common\.rs\fR file, the section in thetest output will no longer appear\. Files in subdirectories of the \fItests\fRdirectory don‚Äôt get compiled as separate crates or have sections in the testoutput\.
.P
After we‚Äôve created \fItests/common/mod\.rs\fR, we can use it from any of theintegration test files as a module\. Here‚Äôs an example of calling the `\fIsetup\fR`function from the `\fIit_adds_two\fR` test in \fItests/integration_test\.rs\fR:Filename: tests/integration_test\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use adder;

mod common;

#[test]
fn it_adds_two() {
    common::setup();
    assert_eq!(4, adder::add_two(2));
}

.EE

.RE
.P
Note that the `\fImod common;\fR` declaration is the same as the module declarationwe demonstrated in Listing 7\-21\. Then in the test function, we can call the`\fIcommon::setup()\fR` function\.
.br

.br
\fBIntegration Tests for Binary Crates\fR
.br
=====================================
.br

.P
If our project is a binary crate that only contains a \fIsrc/main\.rs\fR file anddoesn‚Äôt have a \fIsrc/lib\.rs\fR file, we can‚Äôt create integration tests in the\fItests\fR directory and bring functions defined in the \fIsrc/main\.rs\fR file intoscope with a `\fIuse\fR` statement\. Only library crates expose functions that othercrates can use; binary crates are meant to be run on their own\.
.P
This is one of the reasons Rust projects that provide a binary have astraightforward \fIsrc/main\.rs\fR file that calls logic that lives in the\fIsrc/lib\.rs\fR file\. Using that structure, integration tests \fIcan\fR test thelibrary crate with `\fIuse\fR` to make the important functionality available\.If the important functionality works, the small amount of code in the\fIsrc/main\.rs\fR file will work as well, and that small amount of code doesn‚Äôtneed to be tested\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Rust‚Äôs testing features provide a way to specify how code should function toensure it continues to work as you expect, even as you make changes\. Unit testsexercise different parts of a library separately and can test privateimplementation details\. Integration tests check that many parts of the librarywork together correctly, and they use the library‚Äôs public API to test the codein the same way external code will use it\. Even though Rust‚Äôs type system andownership rules help prevent some kinds of bugs, tests are still important toreduce logic bugs having to do with how your code is expected to behave\.
.P
Let‚Äôs combine the knowledge you learned in this chapter and in previouschapters to work on a project!
.SH "An I/O Project: Building a Command Line Program"

.br

.br
\fBAn I/O Project: Building a Command Line Program\fR
.br
=================================================
.br

.P
This chapter is a recap of the many skills you‚Äôve learned so far and anexploration of a few more standard library features\. We‚Äôll build a command linetool that interacts with file and command line input/output to practice some ofthe Rust concepts you now have under your belt\.
.P
Rust‚Äôs speed, safety, single binary output, and cross\-platform support make itan ideal language for creating command line tools, so for our project, we‚Äôllmake our own version of the classic command line search tool `\fIgrep\fR`(\fBg\fRlobally search a \fBr\fRegular \fBe\fRxpression and \fBp\fRrint)\. In thesimplest use case, `\fIgrep\fR` searches a specified file for a specified string\. Todo so, `\fIgrep\fR` takes as its arguments a file path and a string\. Then it readsthe file, finds lines in that file that contain the string argument, and printsthose lines\.
.P
Along the way, we‚Äôll show how to make our command line tool use the terminalfeatures that many other command line tools use\. We‚Äôll read the value of anenvironment variable to allow the user to configure the behavior of our tool\.We‚Äôll also print error messages to the standard error console stream (`\fIstderr\fR`)instead of standard output (`\fIstdout\fR`), so, for example, the user can redirectsuccessful output to a file while still seeing error messages onscreen\.
.P
One Rust community member, Andrew Gallant, has already created a fullyfeatured, very fast version of `\fIgrep\fR`, called `\fIripgrep\fR`\. By comparison, ourversion will be fairly simple, but this chapter will give you some of thebackground knowledge you need to understand a real\-world project such as`\fIripgrep\fR`\.
.P
Our `\fIgrep\fR` project will combine a number of concepts you‚Äôve learned so far:
.P
Organizing code (using what you learned about modules in 
.UR ch07\-00\-managing\-growing\-projects\-with\-packages\-crates\-and\-modules\.html
.UE
Chapter 7)
.P
Using vectors and strings (collections, 
.UR ch08\-00\-common\-collections\.html
.UE
Chapter 8)
.P
Handling errors (
.UR ch09\-00\-error\-handling\.html
.UE
Chapter 9)
.P
Using traits and lifetimes where appropriate (
.UR ch10\-00\-generics\.html
.UE
Chapter 10)
.P
Writing tests (
.UR ch11\-00\-testing\.html
.UE
Chapter 11)
.P
We‚Äôll also briefly introduce closures, iterators, and trait objects, whichChapters 
.UR ch13\-00\-functional\-features\.html
.UE
13 and 
.UR ch17\-00\-oop\.html
.UE
17 will cover indetail\.
.SH "Accepting Command Line Arguments"

.br

.br
\fBAccepting Command Line Arguments\fR
.br
==================================
.br

.P
Let‚Äôs create a new project with, as always, `\fIcargo new\fR`\. We‚Äôll call our project`\fIminigrep\fR` to distinguish it from the `\fIgrep\fR` tool that you might already haveon your system\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new minigrep
     Created binary (application) `minigrep` project
$ cd minigrep

.EE

.RE
.P
The first task is to make `\fIminigrep\fR` accept its two command line arguments: thefile path and a string to search for\. That is, we want to be able to run ourprogram with `\fIcargo run\fR`, two hyphens to indicate the following arguments arefor our program rather than for `\fIcargo\fR`, a string to search for, and a path toa file to search in, like so:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- searchstring example\-filename\.txt

.EE

.RE
.P
Right now, the program generated by `\fIcargo new\fR` cannot process arguments wegive it\. Some existing libraries on 
.UR https://crates\.io/
.UE
crates\.io can helpwith writing a program that accepts command line arguments, but because you‚Äôrejust learning this concept, let‚Äôs implement this capability ourselves\.
.br

.br
\fBReading the Argument Values\fR
.br
=============================
.br

.P
To enable `\fIminigrep\fR` to read the values of command line arguments we pass toit, we‚Äôll need the `\fIstd::env::args\fR` function provided in Rust‚Äôs standardlibrary\. This function returns an iterator of the command line arguments passedto `\fIminigrep\fR`\. We‚Äôll cover iterators fully in 
.UR ch13\-00\-functional\-features\.html
.UE
Chapter 13\. For now, you only need to know two details about iterators: iteratorsproduce a series of values, and we can call the `\fIcollect\fR` method on an iteratorto turn it into a collection, such as a vector, that contains all the elementsthe iterator produces\.
.P
The code in Listing 12\-1 allows your `\fIminigrep\fR` program to read any commandline arguments passed to it and then collect the values into a vector\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::env;

fn main() {
    let args: Vec<String> = env::args()\.collect();
    dbg!(args);
}

.EE

.RE
Listing 12\-1: Collecting the command line arguments intoa vector and printing them
.P
First, we bring the `\fIstd::env\fR` module into scope with a `\fIuse\fR` statement so wecan use its `\fIargs\fR` function\. Notice that the `\fIstd::env::args\fR` function isnested in two levels of modules\. As we discussed in 
.UR ch07\-04\-bringing\-paths\-into\-scope\-with\-the\-use\-keyword\.html#creating\-idiomatic\-use\-paths
.UE
Chapter7, in cases where the desired function isnested in more than one module, we‚Äôve chosen to bring the parent module intoscope rather than the function\. By doing so, we can easily use other functionsfrom `\fIstd::env\fR`\. It‚Äôs also less ambiguous than adding `\fIuse std::env::args\fR` andthen calling the function with just `\fIargs\fR`, because `\fIargs\fR` might easily bemistaken for a function that‚Äôs defined in the current module\.
.br

.br
\fBThe \fR
.br
======
.br
`\fIargs\fR` Function and Invalid Unicode
.P
Note that `\fIstd::env::args\fR` will panic if any argument contains invalidUnicode\. If your program needs to accept arguments containing invalidUnicode, use `\fIstd::env::args_os\fR` instead\. That function returns an iteratorthat produces `\fIOsString\fR` values instead of `\fIString\fR` values\. We‚Äôve chosen touse `\fIstd::env::args\fR` here for simplicity, because `\fIOsString\fR` values differper platform and are more complex to work with than `\fIString\fR` values\.
.P
On the first line of `\fImain\fR`, we call `\fIenv::args\fR`, and we immediately use`\fIcollect\fR` to turn the iterator into a vector containing all the values producedby the iterator\. We can use the `\fIcollect\fR` function to create many kinds ofcollections, so we explicitly annotate the type of `\fIargs\fR` to specify that wewant a vector of strings\. Although we very rarely need to annotate types inRust, `\fIcollect\fR` is one function you do often need to annotate because Rustisn‚Äôt able to infer the kind of collection you want\.
.P
Finally, we print the vector using the debug macro\. Let‚Äôs try running the codefirst with no arguments and then with two arguments:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.61s
     Running `target/debug/minigrep`
[src/main\.rs:5] args = [
    "target/debug/minigrep",
]

.EE

.RE
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- needle haystack
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.57s
     Running `target/debug/minigrep needle haystack`
[src/main\.rs:5] args = [
    "target/debug/minigrep",
    "needle",
    "haystack",
]

.EE

.RE
.P
Notice that the first value in the vector is `\fI"target/debug/minigrep"\fR`, whichis the name of our binary\. This matches the behavior of the arguments list inC, letting programs use the name by which they were invoked in their execution\.It‚Äôs often convenient to have access to the program name in case you want toprint it in messages or change behavior of the program based on what commandline alias was used to invoke the program\. But for the purposes of thischapter, we‚Äôll ignore it and save only the two arguments we need\.
.br

.br
\fBSaving the Argument Values in Variables\fR
.br
=========================================
.br

.P
The program is currently able to access the values specified as command linearguments\. Now we need to save the values of the two arguments in variables sowe can use the values throughout the rest of the program\. We do that in Listing12\-2\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,noplayground\fR 2

.br
.EX
use std::env;

fn main() {
    let args: Vec<String> = env::args()\.collect();

    let query = &args[1];
    let file_path = &args[2];

    println!("Searching for {}", query);
    println!("In file {}", file_path);
}

.EE

.RE
Listing 12\-2: Creating variables to hold the queryargument and file path argument
.P
As we saw when we printed the vector, the program‚Äôs name takes up the firstvalue in the vector at `\fIargs[0]\fR`, so we‚Äôre starting arguments at index `\fI1\fR`\. Thefirst argument `\fIminigrep\fR` takes is the string we‚Äôre searching for, so we put areference to the first argument in the variable `\fIquery\fR`\. The second argumentwill be the file path, so we put a reference to the second argument in thevariable `\fIfile_path\fR`\.
.P
We temporarily print the values of these variables to prove that the code isworking as we intend\. Let‚Äôs run this program again with the arguments `\fItest\fR`and `\fIsample\.txt\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- test sample\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep test sample\.txt`
Searching for test
In file sample\.txt

.EE

.RE
.P
Great, the program is working! The values of the arguments we need are beingsaved into the right variables\. Later we‚Äôll add some error handling to dealwith certain potential erroneous situations, such as when the user provides noarguments; for now, we‚Äôll ignore that situation and work on adding file\-readingcapabilities instead\.
.SH "Reading a File"

.br

.br
\fBReading a File\fR
.br
================
.br

.P
Now we‚Äôll add functionality to read the file specified in the `\fIfile_path\fR`argument\. First, we need a sample file to test it with: we‚Äôll use a file with asmall amount of text over multiple lines with some repeated words\. Listing 12\-3has an Emily Dickinson poem that will work well! Create a file called\fIpoem\.txt\fR at the root level of your project, and enter the poem ‚ÄúI‚Äôm Nobody!Who are you?‚ÄùFilename: poem\.txt
.RS
.IP \fBtext\fR 2

.br
.EX
I'm nobody! Who are you?
Are you nobody, too?
Then there's a pair of us \- don't tell!
They'd banish us, you know\.

How dreary to be somebody!
How public, like a frog
To tell your name the livelong day
To an admiring bog!

.EE

.RE
Listing 12\-3: A poem by Emily Dickinson makes a good testcase
.P
With the text in place, edit \fIsrc/main\.rs\fR and add code to read the file, asshown in Listing 12\-4\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,noplayground\fR 2

.br
.EX
use std::env;
use std::fs;

fn main() {
    // \-\-snip\-\-
#     let args: Vec<String> = env::args()\.collect();
# 
#     let query = &args[1];
#     let file_path = &args[2];
# 
#     println!("Searching for {}", query);
    println!("In file {}", file_path);

    let contents = fs::read_to_string(file_path)
        \.expect("Should have been able to read the file");

    println!("With text:\n{contents}");
}

.EE

.RE
Listing 12\-4: Reading the contents of the file specifiedby the second argument
.P
First, we bring in a relevant part of the standard library with a `\fIuse\fR`statement: we need `\fIstd::fs\fR` to handle files\.
.P
In `\fImain\fR`, the new statement `\fIfs::read_to_string\fR` takes the `\fIfile_path\fR`, opensthat file, and returns a `\fIstd::io::Result<String>\fR` of the file‚Äôs contents\.
.P
After that, we again add a temporary `\fIprintln!\fR` statement that prints the valueof `\fIcontents\fR` after the file is read, so we can check that the program isworking so far\.
.P
Let‚Äôs run this code with any string as the first command line argument (becausewe haven‚Äôt implemented the searching part yet) and the \fIpoem\.txt\fR file as thesecond argument:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- the poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep the poem\.txt`
Searching for the
In file poem\.txt
With text:
I'm nobody! Who are you?
Are you nobody, too?
Then there's a pair of us \- don't tell!
They'd banish us, you know\.

How dreary to be somebody!
How public, like a frog
To tell your name the livelong day
To an admiring bog!


.EE

.RE
.P
Great! The code read and then printed the contents of the file\. But the codehas a few flaws\. At the moment, the `\fImain\fR` function has multipleresponsibilities: generally, functions are clearer and easier to maintain ifeach function is responsible for only one idea\. The other problem is that we‚Äôrenot handling errors as well as we could\. The program is still small, so theseflaws aren‚Äôt a big problem, but as the program grows, it will be harder to fixthem cleanly\. It‚Äôs good practice to begin refactoring early on when developinga program, because it‚Äôs much easier to refactor smaller amounts of code\. We‚Äôlldo that next\.
.SH "Refactoring to Improve Modularity and Error Handling"

.br

.br
\fBRefactoring to Improve Modularity and Error Handling\fR
.br
======================================================
.br

.P
To improve our program, we‚Äôll fix four problems that have to do with theprogram‚Äôs structure and how it‚Äôs handling potential errors\. First, our `\fImain\fR`function now performs two tasks: it parses arguments and reads files\. As ourprogram grows, the number of separate tasks the `\fImain\fR` function handles willincrease\. As a function gains responsibilities, it becomes more difficult toreason about, harder to test, and harder to change without breaking one of itsparts\. It‚Äôs best to separate functionality so each function is responsible forone task\.
.P
This issue also ties into the second problem: although `\fIquery\fR` and `\fIfile_path\fR`are configuration variables to our program, variables like `\fIcontents\fR` are usedto perform the program‚Äôs logic\. The longer `\fImain\fR` becomes, the more variableswe‚Äôll need to bring into scope; the more variables we have in scope, the harderit will be to keep track of the purpose of each\. It‚Äôs best to group theconfiguration variables into one structure to make their purpose clear\.
.P
The third problem is that we‚Äôve used `\fIexpect\fR` to print an error message whenreading the file fails, but the error message just prints `\fIShould have been able to read the file\fR`\. Reading a file can fail in a number of ways: forexample, the file could be missing, or we might not have permission to open it\.Right now, regardless of the situation, we‚Äôd print the same error message foreverything, which wouldn‚Äôt give the user any information!
.P
Fourth, we use `\fIexpect\fR` repeatedly to handle different errors, and if the userruns our program without specifying enough arguments, they‚Äôll get an `\fIindex out of bounds\fR` error from Rust that doesn‚Äôt clearly explain the problem\. It wouldbe best if all the error\-handling code were in one place so future maintainershad only one place to consult the code if the error\-handling logic needed tochange\. Having all the error\-handling code in one place will also ensure thatwe‚Äôre printing messages that will be meaningful to our end users\.
.P
Let‚Äôs address these four problems by refactoring our project\.
.br

.br
\fBSeparation of Concerns for Binary Projects\fR
.br
============================================
.br

.P
The organizational problem of allocating responsibility for multiple tasks tothe `\fImain\fR` function is common to many binary projects\. As a result, the Rustcommunity has developed guidelines for splitting the separate concerns of abinary program when `\fImain\fR` starts getting large\. This process has the followingsteps:
.P
Split your program into a \fImain\.rs\fR and a \fIlib\.rs\fR and move your program‚Äôslogic to \fIlib\.rs\fR\.
.P
As long as your command line parsing logic is small, it can remain in\fImain\.rs\fR\.
.P
When the command line parsing logic starts getting complicated, extract itfrom \fImain\.rs\fR and move it to \fIlib\.rs\fR\.
.P
The responsibilities that remain in the `\fImain\fR` function after this processshould be limited to the following:
.P
Calling the command line parsing logic with the argument values
.P
Setting up any other configuration
.P
Calling a `\fIrun\fR` function in \fIlib\.rs\fR
.P
Handling the error if `\fIrun\fR` returns an error
.P
This pattern is about separating concerns: \fImain\.rs\fR handles running theprogram, and \fIlib\.rs\fR handles all the logic of the task at hand\. Because youcan‚Äôt test the `\fImain\fR` function directly, this structure lets you test all ofyour program‚Äôs logic by moving it into functions in \fIlib\.rs\fR\. The code thatremains in \fImain\.rs\fR will be small enough to verify its correctness by readingit\. Let‚Äôs rework our program by following this process\.
.br

.br
\fBExtracting the Argument Parser\fR
.br
================================
.br

.P
We‚Äôll extract the functionality for parsing arguments into a function that`\fImain\fR` will call to prepare for moving the command line parsing logic to\fIsrc/lib\.rs\fR\. Listing 12\-5 shows the new start of `\fImain\fR` that calls a newfunction `\fIparse_config\fR`, which we‚Äôll define in \fIsrc/main\.rs\fR for the moment\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let (query, file_path) = parse_config(&args);

    // \-\-snip\-\-
# 
#     println!("Searching for {}", query);
#     println!("In file {}", file_path);
# 
#     let contents = fs::read_to_string(file_path)
#         \.expect("Should have been able to read the file");
# 
#     println!("With text:\n{contents}");
}

fn parse_config(args: &[String]) \-> (&str, &str) {
    let query = &args[1];
    let file_path = &args[2];

    (query, file_path)
}

.EE

.RE
Listing 12\-5: Extracting a `\fIparse_config\fR` function from`\fImain\fR`
.P
We‚Äôre still collecting the command line arguments into a vector, but instead ofassigning the argument value at index 1 to the variable `\fIquery\fR` and theargument value at index 2 to the variable `\fIfile_path\fR` within the `\fImain\fR`function, we pass the whole vector to the `\fIparse_config\fR` function\. The`\fIparse_config\fR` function then holds the logic that determines which argumentgoes in which variable and passes the values back to `\fImain\fR`\. We still createthe `\fIquery\fR` and `\fIfile_path\fR` variables in `\fImain\fR`, but `\fImain\fR` no longer has theresponsibility of determining how the command line arguments and variablescorrespond\.
.P
This rework may seem like overkill for our small program, but we‚Äôre refactoringin small, incremental steps\. After making this change, run the program again toverify that the argument parsing still works\. It‚Äôs good to check your progressoften, to help identify the cause of problems when they occur\.
.br

.br
\fBGrouping Configuration Values\fR
.br
===============================
.br

.P
We can take another small step to improve the `\fIparse_config\fR` function further\.At the moment, we‚Äôre returning a tuple, but then we immediately break thattuple into individual parts again\. This is a sign that perhaps we don‚Äôt havethe right abstraction yet\.
.P
Another indicator that shows there‚Äôs room for improvement is the `\fIconfig\fR` partof `\fIparse_config\fR`, which implies that the two values we return are related andare both part of one configuration value\. We‚Äôre not currently conveying thismeaning in the structure of the data other than by grouping the two values intoa tuple; we‚Äôll instead put the two values into one struct and give each of thestruct fields a meaningful name\. Doing so will make it easier for futuremaintainers of this code to understand how the different values relate to eachother and what their purpose is\.
.P
Listing 12\-6 shows the improvements to the `\fIparse_config\fR` function\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,noplayground\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = parse_config(&args);

    println!("Searching for {}", config\.query);
    println!("In file {}", config\.file_path);

    let contents = fs::read_to_string(config\.file_path)
        \.expect("Should have been able to read the file");

    // \-\-snip\-\-
# 
#     println!("With text:\n{contents}");
}

struct Config {
    query: String,
    file_path: String,
}

fn parse_config(args: &[String]) \-> Config {
    let query = args[1]\.clone();
    let file_path = args[2]\.clone();

    Config { query, file_path }
}

.EE

.RE
Listing 12\-6: Refactoring `\fIparse_config\fR` to return aninstance of a `\fIConfig\fR` struct
.P
We‚Äôve added a struct named `\fIConfig\fR` defined to have fields named `\fIquery\fR` and`\fIfile_path\fR`\. The signature of `\fIparse_config\fR` now indicates that it returns a`\fIConfig\fR` value\. In the body of `\fIparse_config\fR`, where we used to returnstring slices that reference `\fIString\fR` values in `\fIargs\fR`, we now define `\fIConfig\fR`to contain owned `\fIString\fR` values\. The `\fIargs\fR` variable in `\fImain\fR` is the owner ofthe argument values and is only letting the `\fIparse_config\fR` function borrowthem, which means we‚Äôd violate Rust‚Äôs borrowing rules if `\fIConfig\fR` tried to takeownership of the values in `\fIargs\fR`\.
.P
There are a number of ways we could manage the `\fIString\fR` data; the easiest,though somewhat inefficient, route is to call the `\fIclone\fR` method on the values\.This will make a full copy of the data for the `\fIConfig\fR` instance to own, whichtakes more time and memory than storing a reference to the string data\.However, cloning the data also makes our code very straightforward because wedon‚Äôt have to manage the lifetimes of the references; in this circumstance,giving up a little performance to gain simplicity is a worthwhile trade\-off\.
.br

.br
\fBThe Trade\-Offs of Using \fR
.br
==========================
.br
`\fIclone\fR`
.P
There‚Äôs a tendency among many Rustaceans to avoid using `\fIclone\fR` to fixownership problems because of its runtime cost\. In
.UR ch13\-00\-functional\-features\.html
.UE
Chapter 13, you‚Äôll learn how to use more efficientmethods in this type of situation\. But for now, it‚Äôs okay to copy a fewstrings to continue making progress because you‚Äôll make these copies onlyonce and your file path and query string are very small\. It‚Äôs better to havea working program that‚Äôs a bit inefficient than to try to hyperoptimize codeon your first pass\. As you become more experienced with Rust, it‚Äôll beeasier to start with the most efficient solution, but for now, it‚Äôsperfectly acceptable to call `\fIclone\fR`\.
.P
We‚Äôve updated `\fImain\fR` so it places the instance of `\fIConfig\fR` returned by`\fIparse_config\fR` into a variable named `\fIconfig\fR`, and we updated the code thatpreviously used the separate `\fIquery\fR` and `\fIfile_path\fR` variables so it now usesthe fields on the `\fIConfig\fR` struct instead\.
.P
Now our code more clearly conveys that `\fIquery\fR` and `\fIfile_path\fR` are related andthat their purpose is to configure how the program will work\. Any code thatuses these values knows to find them in the `\fIconfig\fR` instance in the fieldsnamed for their purpose\.
.br

.br
\fBCreating a Constructor for \fR
.br
=============================
.br
`\fIConfig\fR`
.P
So far, we‚Äôve extracted the logic responsible for parsing the command linearguments from `\fImain\fR` and placed it in the `\fIparse_config\fR` function\. Doing sohelped us to see that the `\fIquery\fR` and `\fIfile_path\fR` values were related and thatrelationship should be conveyed in our code\. We then added a `\fIConfig\fR` struct toname the related purpose of `\fIquery\fR` and `\fIfile_path\fR` and to be able to return thevalues‚Äô names as struct field names from the `\fIparse_config\fR` function\.
.P
So now that the purpose of the `\fIparse_config\fR` function is to create a `\fIConfig\fR`instance, we can change `\fIparse_config\fR` from a plain function to a functionnamed `\fInew\fR` that is associated with the `\fIConfig\fR` struct\. Making this changewill make the code more idiomatic\. We can create instances of types in thestandard library, such as `\fIString\fR`, by calling `\fIString::new\fR`\. Similarly, bychanging `\fIparse_config\fR` into a `\fInew\fR` function associated with `\fIConfig\fR`, we‚Äôllbe able to create instances of `\fIConfig\fR` by calling `\fIConfig::new\fR`\. Listing 12\-7shows the changes we need to make\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,noplayground\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = Config::new(&args);
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.file_path);
# 
#     let contents = fs::read_to_string(config\.file_path)
#         \.expect("Should have been able to read the file");
# 
#     println!("With text:\n{contents}");

    // \-\-snip\-\-
}

// \-\-snip\-\-

# struct Config {
#     query: String,
#     file_path: String,
# }
# 
impl Config {
    fn new(args: &[String]) \-> Config {
        let query = args[1]\.clone();
        let file_path = args[2]\.clone();

        Config { query, file_path }
    }
}

.EE

.RE
Listing 12\-7: Changing `\fIparse_config\fR` into`\fIConfig::new\fR`
.P
We‚Äôve updated `\fImain\fR` where we were calling `\fIparse_config\fR` to instead call`\fIConfig::new\fR`\. We‚Äôve changed the name of `\fIparse_config\fR` to `\fInew\fR` and moved itwithin an `\fIimpl\fR` block, which associates the `\fInew\fR` function with `\fIConfig\fR`\. Trycompiling this code again to make sure it works\.
.br

.br
\fBFixing the Error Handling\fR
.br
===========================
.br

.P
Now we‚Äôll work on fixing our error handling\. Recall that attempting to accessthe values in the `\fIargs\fR` vector at index 1 or index 2 will cause the program topanic if the vector contains fewer than three items\. Try running the programwithout any arguments; it will look like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep`
thread 'main' panicked at 'index out of bounds: the len is 1 but the index is 1', src/main\.rs:27:21
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
The line `\fIindex out of bounds: the len is 1 but the index is 1\fR` is an errormessage intended for programmers\. It won‚Äôt help our end users understand whatthey should do instead\. Let‚Äôs fix that now\.
.br

.br
\fBImproving the Error Message\fR
.br
=============================
.br

.P
In Listing 12\-8, we add a check in the `\fInew\fR` function that will verify that theslice is long enough before accessing index 1 and 2\. If the slice isn‚Äôt longenough, the program panics and displays a better error message\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
# fn main() {
#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::new(&args);
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.file_path);
# 
#     let contents = fs::read_to_string(config\.file_path)
#         \.expect("Should have been able to read the file");
# 
#     println!("With text:\n{contents}");
# }
# 
# struct Config {
#     query: String,
#     file_path: String,
# }
# 
# impl Config {
    // \-\-snip\-\-
    fn new(args: &[String]) \-> Config {
        if args\.len() < 3 {
            panic!("not enough arguments");
        }
        // \-\-snip\-\-
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Config { query, file_path }
#     }
# }

.EE

.RE
Listing 12\-8: Adding a check for the number ofarguments
.P
This code is similar to 
.UR ch09\-03\-to\-panic\-or\-not\-to\-panic\.html#creating\-custom\-types\-for\-validation
.UE
the `\fIGuess::new\fR` function we wrote in Listing9\-13, where we called `\fIpanic!\fR` when the`\fIvalue\fR` argument was out of the range of valid values\. Instead of checking fora range of values here, we‚Äôre checking that the length of `\fIargs\fR` is at least 3and the rest of the function can operate under the assumption that thiscondition has been met\. If `\fIargs\fR` has fewer than three items, this conditionwill be true, and we call the `\fIpanic!\fR` macro to end the program immediately\.
.P
With these extra few lines of code in `\fInew\fR`, let‚Äôs run the program without anyarguments again to see what the error looks like now:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep`
thread 'main' panicked at 'not enough arguments', src/main\.rs:26:13
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
This output is better: we now have a reasonable error message\. However, we alsohave extraneous information we don‚Äôt want to give to our users\. Perhaps usingthe technique we used in Listing 9\-13 isn‚Äôt the best to use here: a call to`\fIpanic!\fR` is more appropriate for a programming problem than a usage problem,
.UR ch09\-03\-to\-panic\-or\-not\-to\-panic\.html#guidelines\-for\-error\-handling
.UE
as discussed in Chapter 9\. Instead,we‚Äôll use the other technique you learned about in Chapter 9‚Äî
.UR ch09\-02\-recoverable\-errors\-with\-result\.html
.UE
returning a`\fIResult\fR` that indicates either success or an error\.
.br

.br
\fBReturning a \fR
.br
==============
.br
`\fIResult\fR` Instead of Calling `\fIpanic!\fR`
.P
We can instead return a `\fIResult\fR` value that will contain a `\fIConfig\fR` instance inthe successful case and will describe the problem in the error case\. We‚Äôre alsogoing to change the function name from `\fInew\fR` to `\fIbuild\fR` because manyprogrammers expect `\fInew\fR` functions to never fail\. When `\fIConfig::build\fR` iscommunicating to `\fImain\fR`, we can use the `\fIResult\fR` type to signal there was aproblem\. Then we can change `\fImain\fR` to convert an `\fIErr\fR` variant into a morepractical error for our users without the surrounding text about `\fIthread 'main'\fR` and `\fIRUST_BACKTRACE\fR` that a call to `\fIpanic!\fR` causes\.
.P
Listing 12\-9 shows the changes we need to make to the return value of thefunction we‚Äôre now calling `\fIConfig::build\fR` and the body of the function neededto return a `\fIResult\fR`\. Note that this won‚Äôt compile until we update `\fImain\fR` aswell, which we‚Äôll do in the next listing\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
# fn main() {
#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::new(&args);
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.file_path);
# 
#     let contents = fs::read_to_string(config\.file_path)
#         \.expect("Should have been able to read the file");
# 
#     println!("With text:\n{contents}");
# }
# 
# struct Config {
#     query: String,
#     file_path: String,
# }
# 
impl Config {
    fn build(args: &[String]) \-> Result<Config, &'static str> {
        if args\.len() < 3 {
            return Err("not enough arguments");
        }

        let query = args[1]\.clone();
        let file_path = args[2]\.clone();

        Ok(Config { query, file_path })
    }
}

.EE

.RE
Listing 12\-9: Returning a `\fIResult\fR` from`\fIConfig::build\fR`
.P
Our `\fIbuild\fR` function returns a `\fIResult\fR` with a `\fIConfig\fR` instance in the successcase and a `\fI&'static str\fR` in the error case\. Our error values will always bestring literals that have the `\fI'static\fR` lifetime\.
.P
We‚Äôve made two changes in the body of the function: instead of calling `\fIpanic!\fR`when the user doesn‚Äôt pass enough arguments, we now return an `\fIErr\fR` value, andwe‚Äôve wrapped the `\fIConfig\fR` return value in an `\fIOk\fR`\. These changes make thefunction conform to its new type signature\.
.P
Returning an `\fIErr\fR` value from `\fIConfig::build\fR` allows the `\fImain\fR` function tohandle the `\fIResult\fR` value returned from the `\fIbuild\fR` function and exit theprocess more cleanly in the error case\.
.br

.br
\fBCalling \fR
.br
==========
.br
`\fIConfig::build\fR` and Handling Errors
.P
To handle the error case and print a user\-friendly message, we need to update`\fImain\fR` to handle the `\fIResult\fR` being returned by `\fIConfig::build\fR`, as shown inListing 12\-10\. We‚Äôll also take the responsibility of exiting the command linetool with a nonzero error code away from `\fIpanic!\fR` and instead implement it byhand\. A nonzero exit status is a convention to signal to the process thatcalled our program that the program exited with an error state\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
use std::process;

fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = Config::build(&args)\.unwrap_or_else(|err| {
        println!("Problem parsing arguments: {err}");
        process::exit(1);
    });

    // \-\-snip\-\-
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.file_path);
# 
#     let contents = fs::read_to_string(config\.file_path)
#         \.expect("Should have been able to read the file");
# 
#     println!("With text:\n{contents}");
# }
# 
# struct Config {
#     query: String,
#     file_path: String,
# }
# 
# impl Config {
#     fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }

.EE

.RE
Listing 12\-10: Exiting with an error code if building a`\fIConfig\fR` fails
.P
In this listing, we‚Äôve used a method we haven‚Äôt covered in detail yet:`\fIunwrap_or_else\fR`, which is defined on `\fIResult<T, E>\fR` by the standard library\.Using `\fIunwrap_or_else\fR` allows us to define some custom, non\-`\fIpanic!\fR` errorhandling\. If the `\fIResult\fR` is an `\fIOk\fR` value, this method‚Äôs behavior is similarto `\fIunwrap\fR`: it returns the inner value `\fIOk\fR` is wrapping\. However, if the valueis an `\fIErr\fR` value, this method calls the code in the \fIclosure\fR, which is ananonymous function we define and pass as an argument to `\fIunwrap_or_else\fR`\. We‚Äôllcover closures in more detail in 
.UR ch13\-00\-functional\-features\.html
.UE
Chapter 13\. For now,you just need to know that `\fIunwrap_or_else\fR` will pass the inner value of the`\fIErr\fR`, which in this case is the static string `\fI"not enough arguments"\fR` that weadded in Listing 12\-9, to our closure in the argument `\fIerr\fR` that appearsbetween the vertical pipes\. The code in the closure can then use the `\fIerr\fR`value when it runs\.
.P
We‚Äôve added a new `\fIuse\fR` line to bring `\fIprocess\fR` from the standard library intoscope\. The code in the closure that will be run in the error case is only twolines: we print the `\fIerr\fR` value and then call `\fIprocess::exit\fR`\. The`\fIprocess::exit\fR` function will stop the program immediately and return thenumber that was passed as the exit status code\. This is similar to the`\fIpanic!\fR`\-based handling we used in Listing 12\-8, but we no longer get all theextra output\. Let‚Äôs try it:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.48s
     Running `target/debug/minigrep`
Problem parsing arguments: not enough arguments

.EE

.RE
.P
Great! This output is much friendlier for our users\.
.br

.br
\fBExtracting Logic from \fR
.br
========================
.br
`\fImain\fR`
.P
Now that we‚Äôve finished refactoring the configuration parsing, let‚Äôs turn tothe program‚Äôs logic\. As we stated in 
.UR #separation\-of\-concerns\-for\-binary\-projects
.UE
‚ÄúSeparation of Concerns for BinaryProjects‚Äù, we‚Äôllextract a function named `\fIrun\fR` that will hold all the logic currently in the`\fImain\fR` function that isn‚Äôt involved with setting up configuration or handlingerrors\. When we‚Äôre done, `\fImain\fR` will be concise and easy to verify byinspection, and we‚Äôll be able to write tests for all the other logic\.
.P
Listing 12\-11 shows the extracted `\fIrun\fR` function\. For now, we‚Äôre just makingthe small, incremental improvement of extracting the function\. We‚Äôre stilldefining the function in \fIsrc/main\.rs\fR\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# use std::process;
# 
fn main() {
    // \-\-snip\-\-

#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::build(&args)\.unwrap_or_else(|err| {
#         println!("Problem parsing arguments: {err}");
#         process::exit(1);
#     });
# 
    println!("Searching for {}", config\.query);
    println!("In file {}", config\.file_path);

    run(config);
}

fn run(config: Config) {
    let contents = fs::read_to_string(config\.file_path)
        \.expect("Should have been able to read the file");

    println!("With text:\n{contents}");
}

// \-\-snip\-\-
# 
# struct Config {
#     query: String,
#     file_path: String,
# }
# 
# impl Config {
#     fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }

.EE

.RE
Listing 12\-11: Extracting a `\fIrun\fR` function containing therest of the program logic
.P
The `\fIrun\fR` function now contains all the remaining logic from `\fImain\fR`, startingfrom reading the file\. The `\fIrun\fR` function takes the `\fIConfig\fR` instance as anargument\.
.br

.br
\fBReturning Errors from the \fR
.br
============================
.br
`\fIrun\fR` Function
.P
With the remaining program logic separated into the `\fIrun\fR` function, we canimprove the error handling, as we did with `\fIConfig::build\fR` in Listing 12\-9\.Instead of allowing the program to panic by calling `\fIexpect\fR`, the `\fIrun\fR`function will return a `\fIResult<T, E>\fR` when something goes wrong\. This will letus further consolidate the logic around handling errors into `\fImain\fR` in auser\-friendly way\. Listing 12\-12 shows the changes we need to make to thesignature and body of `\fIrun\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# use std::process;
use std::error::Error;

// \-\-snip\-\-

# 
# fn main() {
#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::build(&args)\.unwrap_or_else(|err| {
#         println!("Problem parsing arguments: {err}");
#         process::exit(1);
#     });
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.file_path);
# 
#     run(config);
# }
# 
fn run(config: Config) \-> Result<(), Box<dyn Error>> {
    let contents = fs::read_to_string(config\.file_path)?;

    println!("With text:\n{contents}");

    Ok(())
}
# 
# struct Config {
#     query: String,
#     file_path: String,
# }
# 
# impl Config {
#     fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }

.EE

.RE
Listing 12\-12: Changing the `\fIrun\fR` function to return`\fIResult\fR`
.P
We‚Äôve made three significant changes here\. First, we changed the return type ofthe `\fIrun\fR` function to `\fIResult<(), Box<dyn Error>>\fR`\. This function previouslyreturned the unit type, `\fI()\fR`, and we keep that as the value returned in the`\fIOk\fR` case\.
.P
For the error type, we used the \fItrait object\fR `\fIBox<dyn Error>\fR` (and we‚Äôvebrought `\fIstd::error::Error\fR` into scope with a `\fIuse\fR` statement at the top)\.We‚Äôll cover trait objects in 
.UR ch17\-00\-oop\.html
.UE
Chapter 17\. For now, justknow that `\fIBox<dyn Error>\fR` means the function will return a type thatimplements the `\fIError\fR` trait, but we don‚Äôt have to specify what particular typethe return value will be\. This gives us flexibility to return error values thatmay be of different types in different error cases\. The `\fIdyn\fR` keyword is shortfor ‚Äúdynamic\.‚Äù
.P
Second, we‚Äôve removed the call to `\fIexpect\fR` in favor of the `\fI?\fR` operator, as wetalked about in 
.UR ch09\-02\-recoverable\-errors\-with\-result\.html#a\-shortcut\-for\-propagating\-errors\-the\-\-operator
.UE
Chapter 9\. Rather than`\fIpanic!\fR` on an error, `\fI?\fR` will return the error value from the current functionfor the caller to handle\.
.P
Third, the `\fIrun\fR` function now returns an `\fIOk\fR` value in the success case\.We‚Äôve declared the `\fIrun\fR` function‚Äôs success type as `\fI()\fR` in the signature,which means we need to wrap the unit type value in the `\fIOk\fR` value\. This`\fIOk(())\fR` syntax might look a bit strange at first, but using `\fI()\fR` like this isthe idiomatic way to indicate that we‚Äôre calling `\fIrun\fR` for its side effectsonly; it doesn‚Äôt return a value we need\.
.P
When you run this code, it will compile but will display a warning:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run the poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
warning: unused `Result` that must be used
  \-\-> src/main\.rs:19:5
   |
19 |     run(config);
   |     ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: `minigrep` (bin "minigrep") generated 1 warning
    Finished dev [unoptimized + debuginfo] target(s) in 0\.71s
     Running `target/debug/minigrep the poem\.txt`
Searching for the
In file poem\.txt
With text:
I'm nobody! Who are you?
Are you nobody, too?
Then there's a pair of us \- don't tell!
They'd banish us, you know\.

How dreary to be somebody!
How public, like a frog
To tell your name the livelong day
To an admiring bog!


.EE

.RE
.P
Rust tells us that our code ignored the `\fIResult\fR` value and the `\fIResult\fR` valuemight indicate that an error occurred\. But we‚Äôre not checking to see whether ornot there was an error, and the compiler reminds us that we probably meant tohave some error\-handling code here! Let‚Äôs rectify that problem now\.
.br

.br
\fBHandling Errors Returned from \fR
.br
================================
.br
`\fIrun\fR` in `\fImain\fR`
.P
We‚Äôll check for errors and handle them using a technique similar to one we usedwith `\fIConfig::build\fR` in Listing 12\-10, but with a slight difference:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# use std::process;
# 
fn main() {
    // \-\-snip\-\-

#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::build(&args)\.unwrap_or_else(|err| {
#         println!("Problem parsing arguments: {err}");
#         process::exit(1);
#     });
# 
    println!("Searching for {}", config\.query);
    println!("In file {}", config\.file_path);

    if let Err(e) = run(config) {
        println!("Application error: {e}");
        process::exit(1);
    }
}
# 
# fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     println!("With text:\n{contents}");
# 
#     Ok(())
# }
# 
# struct Config {
#     query: String,
#     file_path: String,
# }
# 
# impl Config {
#     fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }

.EE

.RE
.P
We use `\fIif let\fR` rather than `\fIunwrap_or_else\fR` to check whether `\fIrun\fR` returns an`\fIErr\fR` value and call `\fIprocess::exit(1)\fR` if it does\. The `\fIrun\fR` function doesn‚Äôtreturn a value that we want to `\fIunwrap\fR` in the same way that `\fIConfig::build\fR`returns the `\fIConfig\fR` instance\. Because `\fIrun\fR` returns `\fI()\fR` in the success case,we only care about detecting an error, so we don‚Äôt need `\fIunwrap_or_else\fR` toreturn the unwrapped value, which would only be `\fI()\fR`\.
.P
The bodies of the `\fIif let\fR` and the `\fIunwrap_or_else\fR` functions are the same inboth cases: we print the error and exit\.
.br

.br
\fBSplitting Code into a Library Crate\fR
.br
=====================================
.br

.P
Our `\fIminigrep\fR` project is looking good so far! Now we‚Äôll split the\fIsrc/main\.rs\fR file and put some code into the \fIsrc/lib\.rs\fR file\. That way wecan test the code and have a \fIsrc/main\.rs\fR file with fewer responsibilities\.
.P
Let‚Äôs move all the code that isn‚Äôt the `\fImain\fR` function from \fIsrc/main\.rs\fR to\fIsrc/lib\.rs\fR:
.P
The `\fIrun\fR` function definition
.P
The relevant `\fIuse\fR` statements
.P
The definition of `\fIConfig\fR`
.P
The `\fIConfig::build\fR` function definition
.P
The contents of \fIsrc/lib\.rs\fR should have the signatures shown in Listing 12\-13(we‚Äôve omitted the bodies of the functions for brevity)\. Note that this won‚Äôtcompile until we modify \fIsrc/main\.rs\fR in Listing 12\-14\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::error::Error;
use std::fs;

pub struct Config {
    pub query: String,
    pub file_path: String,
}

impl Config {
    pub fn build(args: &[String]) \-> Result<Config, &'static str> {
        // \-\-snip\-\-
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
    }
}

pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
    // \-\-snip\-\-
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     println!("With text:\n{contents}");
# 
#     Ok(())
}

.EE

.RE
Listing 12\-13: Moving `\fIConfig\fR` and `\fIrun\fR` into\fIsrc/lib\.rs\fR
.P
We‚Äôve made liberal use of the `\fIpub\fR` keyword: on `\fIConfig\fR`, on its fields and its`\fIbuild\fR` method, and on the `\fIrun\fR` function\. We now have a library crate that hasa public API we can test!
.P
Now we need to bring the code we moved to \fIsrc/lib\.rs\fR into the scope of thebinary crate in \fIsrc/main\.rs\fR, as shown in Listing 12\-14\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::env;
use std::process;

use minigrep::Config;

fn main() {
    // \-\-snip\-\-
#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::build(&args)\.unwrap_or_else(|err| {
#         println!("Problem parsing arguments: {err}");
#         process::exit(1);
#     });
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.file_path);
# 
    if let Err(e) = minigrep::run(config) {
        // \-\-snip\-\-
#         println!("Application error: {e}");
#         process::exit(1);
    }
}

.EE

.RE
Listing 12\-14: Using the `\fIminigrep\fR` library crate in\fIsrc/main\.rs\fR
.P
We add a `\fIuse minigrep::Config\fR` line to bring the `\fIConfig\fR` type from thelibrary crate into the binary crate‚Äôs scope, and we prefix the `\fIrun\fR` functionwith our crate name\. Now all the functionality should be connected and shouldwork\. Run the program with `\fIcargo run\fR` and make sure everything workscorrectly\.
.P
Whew! That was a lot of work, but we‚Äôve set ourselves up for success in thefuture\. Now it‚Äôs much easier to handle errors, and we‚Äôve made the code moremodular\. Almost all of our work will be done in \fIsrc/lib\.rs\fR from here on out\.
.P
Let‚Äôs take advantage of this newfound modularity by doing something that wouldhave been difficult with the old code but is easy with the new code: we‚Äôllwrite some tests!
.SH "Developing the Library‚Äôs Functionality with Test Driven Development"

.br

.br
\fBDeveloping the Library‚Äôs Functionality with Test\-Driven Development\fR
.br
=======================================================================
.br

.P
Now that we‚Äôve extracted the logic into \fIsrc/lib\.rs\fR and left the argumentcollecting and error handling in \fIsrc/main\.rs\fR, it‚Äôs much easier to write testsfor the core functionality of our code\. We can call functions directly withvarious arguments and check return values without having to call our binaryfrom the command line\.
.P
In this section, we‚Äôll add the searching logic to the `\fIminigrep\fR` programusing the test\-driven development (TDD) process with the following steps:
.P
Write a test that fails and run it to make sure it fails for the reason youexpect\.
.P
Write or modify just enough code to make the new test pass\.
.P
Refactor the code you just added or changed and make sure the testscontinue to pass\.
.P
Repeat from step 1!
.P
Though it‚Äôs just one of many ways to write software, TDD can help drive codedesign\. Writing the test before you write the code that makes the test passhelps to maintain high test coverage throughout the process\.
.P
We‚Äôll test drive the implementation of the functionality that will actually dothe searching for the query string in the file contents and produce a list oflines that match the query\. We‚Äôll add this functionality in a function called`\fIsearch\fR`\.
.br

.br
\fBWriting a Failing Test\fR
.br
========================
.br

.P
Because we don‚Äôt need them anymore, let‚Äôs remove the `\fIprintln!\fR` statements from\fIsrc/lib\.rs\fR and \fIsrc/main\.rs\fR that we used to check the program‚Äôs behavior\.Then, in \fIsrc/lib\.rs\fR, add a `\fItests\fR` module with a test function, as we did in
.UR ch11\-01\-writing\-tests\.html#the\-anatomy\-of\-a\-test\-function
.UE
Chapter 11\. The test function specifies thebehavior we want the `\fIsearch\fR` function to have: it will take a query and thetext to search, and it will return only the lines from the text that containthe query\. Listing 12\-15 shows this test, which won‚Äôt compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     Ok(())
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn one_result() {
        let query = "duct";
        let contents = "\
Rust:
safe, fast, productive\.
Pick three\.";

        assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
    }
}

.EE

.RE
Listing 12\-15: Creating a failing test for the `\fIsearch\fR`function we wish we had
.P
This test searches for the string `\fI"duct"\fR`\. The text we‚Äôre searching is threelines, only one of which contains `\fI"duct"\fR` (Note that the backslash after theopening double quote tells Rust not to put a newline character at the beginningof the contents of this string literal)\. We assert that the value returned fromthe `\fIsearch\fR` function contains only the line we expect\.
.P
We aren‚Äôt yet able to run this test and watch it fail because the test doesn‚Äôteven compile: the `\fIsearch\fR` function doesn‚Äôt exist yet! In accordance with TDDprinciples, we‚Äôll add just enough code to get the test to compile and run byadding a definition of the `\fIsearch\fR` function that always returns an emptyvector, as shown in Listing 12\-16\. Then the test should compile and failbecause an empty vector doesn‚Äôt match a vector containing the line `\fI"safe, fast, productive\."\fR`Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    vec![]
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 12\-16: Defining just enough of the `\fIsearch\fR`function so our test will compile
.P
Notice that we need to define an explicit lifetime `\fI'a\fR` in the signature of`\fIsearch\fR` and use that lifetime with the `\fIcontents\fR` argument and the returnvalue\. Recall in 
.UR ch10\-03\-lifetime\-syntax\.html
.UE
Chapter 10 that the lifetimeparameters specify which argument lifetime is connected to the lifetime of thereturn value\. In this case, we indicate that the returned vector should containstring slices that reference slices of the argument `\fIcontents\fR` (rather than theargument `\fIquery\fR`)\.
.P
In other words, we tell Rust that the data returned by the `\fIsearch\fR` functionwill live as long as the data passed into the `\fIsearch\fR` function in the`\fIcontents\fR` argument\. This is important! The data referenced \fIby\fR a slice needsto be valid for the reference to be valid; if the compiler assumes we‚Äôre makingstring slices of `\fIquery\fR` rather than `\fIcontents\fR`, it will do its safety checkingincorrectly\.
.P
If we forget the lifetime annotations and try to compile this function, we‚Äôllget this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
error[E0106]: missing lifetime specifier
  \-\-> src/lib\.rs:28:51
   |
28 | pub fn search(query: &str, contents: &str) \-> Vec<&str> {
   |                      \-\-\-\-            \-\-\-\-         ^ expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `query` or `contents`
help: consider introducing a named lifetime parameter
   |
28 | pub fn search<'a>(query: &'a str, contents: &'a str) \-> Vec<&'a str> {
   |              ++++         ++                 ++              ++

For more information about this error, try `rustc \-\-explain E0106`\.
error: could not compile `minigrep` due to previous error

.EE

.RE
.P
Rust can‚Äôt possibly know which of the two arguments we need, so we need to tellit explicitly\. Because `\fIcontents\fR` is the argument that contains all of our textand we want to return the parts of that text that match, we know `\fIcontents\fR` isthe argument that should be connected to the return value using the lifetimesyntax\.
.P
Other programming languages don‚Äôt require you to connect arguments to returnvalues in the signature, but this practice will get easier over time\. You mightwant to compare this example with the 
.UR ch10\-03\-lifetime\-syntax\.html#validating\-references\-with\-lifetimes
.UE
‚ÄúValidating References withLifetimes‚Äù section inChapter 10\.
.P
Now let‚Äôs run the test:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished test [unoptimized + debuginfo] target(s) in 0\.97s
     Running unittests src/lib\.rs (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 1 test
test tests::one_result \.\.\. FAILED

failures:

\-\-\-\- tests::one_result stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `["safe, fast, productive\."]`,
 right: `[]`', src/lib\.rs:44:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::one_result

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Great, the test fails, exactly as we expected\. Let‚Äôs get the test to pass!
.br

.br
\fBWriting Code to Pass the Test\fR
.br
===============================
.br

.P
Currently, our test is failing because we always return an empty vector\. To fixthat and implement `\fIsearch\fR`, our program needs to follow these steps:
.P
Iterate through each line of the contents\.
.P
Check whether the line contains our query string\.
.P
If it does, add it to the list of values we‚Äôre returning\.
.P
If it doesn‚Äôt, do nothing\.
.P
Return the list of results that match\.
.P
Let‚Äôs work through each step, starting with iterating through lines\.
.br

.br
\fBIterating Through Lines with the \fR
.br
===================================
.br
`\fIlines\fR` Method
.P
Rust has a helpful method to handle line\-by\-line iteration of strings,conveniently named `\fIlines\fR`, that works as shown in Listing 12\-17\. Note thiswon‚Äôt compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    for line in contents\.lines() {
        // do something with line
    }
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 12\-17: Iterating through each line in `\fIcontents\fR`
.P
The `\fIlines\fR` method returns an iterator\. We‚Äôll talk about iterators in depth in
.UR ch13\-02\-iterators\.html
.UE
Chapter 13, but recall that you saw this wayof using an iterator in 
.UR ch03\-05\-control\-flow\.html#looping\-through\-a\-collection\-with\-for
.UE
Listing 3\-5, where we used a`\fIfor\fR` loop with an iterator to run some code on each item in a collection\.
.br

.br
\fBSearching Each Line for the Query\fR
.br
===================================
.br

.P
Next, we‚Äôll check whether the current line contains our query string\.Fortunately, strings have a helpful method named `\fIcontains\fR` that does this forus! Add a call to the `\fIcontains\fR` method in the `\fIsearch\fR` function, as shown inListing 12\-18\. Note this still won‚Äôt compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    for line in contents\.lines() {
        if line\.contains(query) {
            // do something with line
        }
    }
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 12\-18: Adding functionality to see whether theline contains the string in `\fIquery\fR`
.P
At the moment, we‚Äôre building up functionality\. To get it to compile, we needto return a value from the body as we indicated we would in the functionsignature\.
.br

.br
\fBStoring Matching Lines\fR
.br
========================
.br

.P
To finish this function, we need a way to store the matching lines that we wantto return\. For that, we can make a mutable vector before the `\fIfor\fR` loop andcall the `\fIpush\fR` method to store a `\fIline\fR` in the vector\. After the `\fIfor\fR` loop,we return the vector, as shown in Listing 12\-19\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    let mut results = Vec::new();

    for line in contents\.lines() {
        if line\.contains(query) {
            results\.push(line);
        }
    }

    results
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 12\-19: Storing the lines that match so we canreturn them
.P
Now the `\fIsearch\fR` function should return only the lines that contain `\fIquery\fR`,and our test should pass\. Let‚Äôs run the test:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished test [unoptimized + debuginfo] target(s) in 1\.22s
     Running unittests src/lib\.rs (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 1 test
test tests::one_result \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running unittests src/main\.rs (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests minigrep

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Our test passed, so we know it works!
.P
At this point, we could consider opportunities for refactoring theimplementation of the search function while keeping the tests passing tomaintain the same functionality\. The code in the search function isn‚Äôt too bad,but it doesn‚Äôt take advantage of some useful features of iterators\. We‚Äôllreturn to this example in 
.UR ch13\-02\-iterators\.html
.UE
Chapter 13, wherewe‚Äôll explore iterators in detail, and look at how to improve it\.
.br

.br
\fBUsing the \fR
.br
============
.br
`\fIsearch\fR` Function in the `\fIrun\fR` Function
.P
Now that the `\fIsearch\fR` function is working and tested, we need to call `\fIsearch\fR`from our `\fIrun\fR` function\. We need to pass the `\fIconfig\.query\fR` value and the`\fIcontents\fR` that `\fIrun\fR` reads from the file to the `\fIsearch\fR` function\. Then `\fIrun\fR`will print each line returned from `\fIsearch\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
    let contents = fs::read_to_string(config\.file_path)?;

    for line in search(&config\.query, &contents) {
        println!("{line}");
    }

    Ok(())
}
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
.P
We‚Äôre still using a `\fIfor\fR` loop to return each line from `\fIsearch\fR` and print it\.
.P
Now the entire program should work! Let‚Äôs try it out, first with a word thatshould return exactly one line from the Emily Dickinson poem, ‚Äúfrog‚Äù:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- frog poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.38s
     Running `target/debug/minigrep frog poem\.txt`
How public, like a frog

.EE

.RE
.P
Cool! Now let‚Äôs try a word that will match multiple lines, like ‚Äúbody‚Äù:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- body poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep body poem\.txt`
I'm nobody! Who are you?
Are you nobody, too?
How dreary to be somebody!

.EE

.RE
.P
And finally, let‚Äôs make sure that we don‚Äôt get any lines when we search for aword that isn‚Äôt anywhere in the poem, such as ‚Äúmonomorphization‚Äù:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- monomorphization poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep monomorphization poem\.txt`

.EE

.RE
.P
Excellent! We‚Äôve built our own mini version of a classic tool and learned a lotabout how to structure applications\. We‚Äôve also learned a bit about file inputand output, lifetimes, testing, and command line parsing\.
.P
To round out this project, we‚Äôll briefly demonstrate how to work withenvironment variables and how to print to standard error, both of which areuseful when you‚Äôre writing command line programs\.
.SH "Working with Environment Variables"

.br

.br
\fBWorking with Environment Variables\fR
.br
====================================
.br

.P
We‚Äôll improve `\fIminigrep\fR` by adding an extra feature: an option forcase\-insensitive searching that the user can turn on via an environmentvariable\. We could make this feature a command line option and require thatusers enter it each time they want it to apply, but by instead making it anenvironment variable, we allow our users to set the environment variable onceand have all their searches be case insensitive in that terminal session\.
.br

.br
\fBWriting a Failing Test for the Case\-Insensitive \fR
.br
==================================================
.br
`\fIsearch\fR` Function
.P
We first add a new `\fIsearch_case_insensitive\fR` function that will be called whenthe environment variable has a value\. We‚Äôll continue to follow the TDD process,so the first step is again to write a failing test\. We‚Äôll add a new test forthe new `\fIsearch_case_insensitive\fR` function and rename our old test from`\fIone_result\fR` to `\fIcase_sensitive\fR` to clarify the differences between the twotests, as shown in Listing 12\-20\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     for line in search(&config\.query, &contents) {
#         println!("{line}");
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn case_sensitive() {
        let query = "duct";
        let contents = "\
Rust:
safe, fast, productive\.
Pick three\.
Duct tape\.";

        assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
    }

    #[test]
    fn case_insensitive() {
        let query = "rUsT";
        let contents = "\
Rust:
safe, fast, productive\.
Pick three\.
Trust me\.";

        assert_eq!(
            vec!["Rust:", "Trust me\."],
            search_case_insensitive(query, contents)
        );
    }
}

.EE

.RE
Listing 12\-20: Adding a new failing test for thecase\-insensitive function we‚Äôre about to add
.P
Note that we‚Äôve edited the old test‚Äôs `\fIcontents\fR` too\. We‚Äôve added a new linewith the text `\fI"Duct tape\."\fR` using a capital D that shouldn‚Äôt match the query`\fI"duct"\fR` when we‚Äôre searching in a case\-sensitive manner\. Changing the old testin this way helps ensure that we don‚Äôt accidentally break the case\-sensitivesearch functionality that we‚Äôve already implemented\. This test should pass nowand should continue to pass as we work on the case\-insensitive search\.
.P
The new test for the case\-\fIinsensitive\fR search uses `\fI"rUsT"\fR` as its query\. Inthe `\fIsearch_case_insensitive\fR` function we‚Äôre about to add, the query `\fI"rUsT"\fR`should match the line containing `\fI"Rust:"\fR` with a capital R and match the line`\fI"Trust me\."\fR` even though both have different casing from the query\. This isour failing test, and it will fail to compile because we haven‚Äôt yet definedthe `\fIsearch_case_insensitive\fR` function\. Feel free to add a skeletonimplementation that always returns an empty vector, similar to the way we didfor the `\fIsearch\fR` function in Listing 12\-16 to see the test compile and fail\.
.br

.br
\fBImplementing the \fR
.br
===================
.br
`\fIsearch_case_insensitive\fR` Function
.P
The `\fIsearch_case_insensitive\fR` function, shown in Listing 12\-21, will be almostthe same as the `\fIsearch\fR` function\. The only difference is that we‚Äôll lowercasethe `\fIquery\fR` and each `\fIline\fR` so whatever the case of the input arguments,they‚Äôll be the same case when we check whether the line contains the query\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     for line in search(&config\.query, &contents) {
#         println!("{line}");
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
pub fn search_case_insensitive<'a>(
    query: &str,
    contents: &'a str,
) \-> Vec<&'a str> {
    let query = query\.to_lowercase();
    let mut results = Vec::new();

    for line in contents\.lines() {
        if line\.to_lowercase()\.contains(&query) {
            results\.push(line);
        }
    }

    results
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 12\-21: Defining the `\fIsearch_case_insensitive\fR`function to lowercase the query and the line before comparing them
.P
First, we lowercase the `\fIquery\fR` string and store it in a shadowed variable withthe same name\. Calling `\fIto_lowercase\fR` on the query is necessary so nomatter whether the user‚Äôs query is `\fI"rust"\fR`, `\fI"RUST"\fR`, `\fI"Rust"\fR`, or `\fI"rUsT"\fR`,we‚Äôll treat the query as if it were `\fI"rust"\fR` and be insensitive to the case\.While `\fIto_lowercase\fR` will handle basic Unicode, it won‚Äôt be 100% accurate\. Ifwe were writing a real application, we‚Äôd want to do a bit more work here, butthis section is about environment variables, not Unicode, so we‚Äôll leave it atthat here\.
.P
Note that `\fIquery\fR` is now a `\fIString\fR` rather than a string slice, because calling`\fIto_lowercase\fR` creates new data rather than referencing existing data\. Say thequery is `\fI"rUsT"\fR`, as an example: that string slice doesn‚Äôt contain a lowercase`\fIu\fR` or `\fIt\fR` for us to use, so we have to allocate a new `\fIString\fR` containing`\fI"rust"\fR`\. When we pass `\fIquery\fR` as an argument to the `\fIcontains\fR` method now, weneed to add an ampersand because the signature of `\fIcontains\fR` is defined to takea string slice\.
.P
Next, we add a call to `\fIto_lowercase\fR` on each `\fIline\fR` to lowercase allcharacters\. Now that we‚Äôve converted `\fIline\fR` and `\fIquery\fR` to lowercase, we‚Äôllfind matches no matter what the case of the query is\.
.P
Let‚Äôs see if this implementation passes the tests:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished test [unoptimized + debuginfo] target(s) in 1\.33s
     Running unittests src/lib\.rs (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 2 tests
test tests::case_insensitive \.\.\. ok
test tests::case_sensitive \.\.\. ok

test result: ok\. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running unittests src/main\.rs (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests minigrep

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Great! They passed\. Now, let‚Äôs call the new `\fIsearch_case_insensitive\fR` functionfrom the `\fIrun\fR` function\. First, we‚Äôll add a configuration option to the`\fIConfig\fR` struct to switch between case\-sensitive and case\-insensitive search\.Adding this field will cause compiler errors because we aren‚Äôt initializingthis field anywhere yet:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
pub struct Config {
    pub query: String,
    pub file_path: String,
    pub ignore_case: bool,
}
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     let results = if config\.ignore_case {
#         search_case_insensitive(&config\.query, &contents)
#     } else {
#         search(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{line}");
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
.P
We added the `\fIignore_case\fR` field that holds a Boolean\. Next, we need the `\fIrun\fR`function to check the `\fIignore_case\fR` field‚Äôs value and use that to decidewhether to call the `\fIsearch\fR` function or the `\fIsearch_case_insensitive\fR`function, as shown in Listing 12\-22\. This still won‚Äôt compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
#     pub ignore_case: bool,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
    let contents = fs::read_to_string(config\.file_path)?;

    let results = if config\.ignore_case {
        search_case_insensitive(&config\.query, &contents)
    } else {
        search(&config\.query, &contents)
    };

    for line in results {
        println!("{line}");
    }

    Ok(())
}
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 12\-22: Calling either `\fIsearch\fR` or`\fIsearch_case_insensitive\fR` based on the value in `\fIconfig\.ignore_case\fR`
.P
Finally, we need to check for the environment variable\. The functions forworking with environment variables are in the `\fIenv\fR` module in the standardlibrary, so we bring that module into scope at the top of \fIsrc/lib\.rs\fR\. Thenwe‚Äôll use the `\fIvar\fR` function from the `\fIenv\fR` module to check to see if any valuehas been set for an environment variable named `\fIIGNORE_CASE\fR`, as shown inListing 12\-23\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::env;
// \-\-snip\-\-

# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
#     pub ignore_case: bool,
# }
# 
impl Config {
    pub fn build(args: &[String]) \-> Result<Config, &'static str> {
        if args\.len() < 3 {
            return Err("not enough arguments");
        }

        let query = args[1]\.clone();
        let file_path = args[2]\.clone();

        let ignore_case = env::var("IGNORE_CASE")\.is_ok();

        Ok(Config {
            query,
            file_path,
            ignore_case,
        })
    }
}
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     let results = if config\.ignore_case {
#         search_case_insensitive(&config\.query, &contents)
#     } else {
#         search(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{line}");
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 12\-23: Checking for any value in an environmentvariable named `\fIIGNORE_CASE\fR`
.P
Here, we create a new variable `\fIignore_case\fR`\. To set its value, we call the`\fIenv::var\fR` function and pass it the name of the `\fIIGNORE_CASE\fR` environmentvariable\. The `\fIenv::var\fR` function returns a `\fIResult\fR` that will be thesuccessful `\fIOk\fR` variant that contains the value of the environment variable ifthe environment variable is set to any value\. It will return the `\fIErr\fR` variantif the environment variable is not set\.
.P
We‚Äôre using the `\fIis_ok\fR` method on the `\fIResult\fR` to check whether the environmentvariable is set, which means the program should do a case\-insensitive search\.If the `\fIIGNORE_CASE\fR` environment variable isn‚Äôt set to anything, `\fIis_ok\fR` willreturn false and the program will perform a case\-sensitive search\. We don‚Äôtcare about the \fIvalue\fR of the environment variable, just whether it‚Äôs set orunset, so we‚Äôre checking `\fIis_ok\fR` rather than using `\fIunwrap\fR`, `\fIexpect\fR`, or anyof the other methods we‚Äôve seen on `\fIResult\fR`\.
.P
We pass the value in the `\fIignore_case\fR` variable to the `\fIConfig\fR` instance so the`\fIrun\fR` function can read that value and decide whether to call`\fIsearch_case_insensitive\fR` or `\fIsearch\fR`, as we implemented in Listing 12\-22\.
.P
Let‚Äôs give it a try! First, we‚Äôll run our program without the environmentvariable set and with the query `\fIto\fR`, which should match any line that containsthe word ‚Äúto‚Äù in all lowercase:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- to poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep to poem\.txt`
Are you nobody, too?
How dreary to be somebody!

.EE

.RE
.P
Looks like that still works! Now, let‚Äôs run the program with `\fIIGNORE_CASE\fR`set to `\fI1\fR` but with the same query `\fIto\fR`\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ IGNORE_CASE=1 cargo run \-\- to poem\.txt

.EE

.RE
.P
If you‚Äôre using PowerShell, you will need to set the environment variable andrun the program as separate commands:
.RS
.IP \fBconsole\fR 2

.br
.EX
PS> $Env:IGNORE_CASE=1; cargo run \-\- to poem\.txt

.EE

.RE
.P
This will make `\fIIGNORE_CASE\fR` persist for the remainder of your shellsession\. It can be unset with the `\fIRemove\-Item\fR` cmdlet:
.RS
.IP \fBconsole\fR 2

.br
.EX
PS> Remove\-Item Env:IGNORE_CASE

.EE

.RE
.P
We should get lines that contain ‚Äúto‚Äù that might have uppercase letters:
.RS
.IP \fBconsole\fR 2

.br
.EX
Are you nobody, too?
How dreary to be somebody!
To tell your name the livelong day
To an admiring bog!

.EE

.RE
.P
Excellent, we also got lines containing ‚ÄúTo‚Äù! Our `\fIminigrep\fR` program can now docase\-insensitive searching controlled by an environment variable\. Now you knowhow to manage options set using either command line arguments or environmentvariables\.
.P
Some programs allow arguments \fIand\fR environment variables for the sameconfiguration\. In those cases, the programs decide that one or the other takesprecedence\. For another exercise on your own, try controlling case sensitivitythrough either a command line argument or an environment variable\. Decidewhether the command line argument or the environment variable should takeprecedence if the program is run with one set to case sensitive and one set toignore case\.
.P
The `\fIstd::env\fR` module contains many more useful features for dealing withenvironment variables: check out its documentation to see what is available\.
.SH "Writing Error Messages to Standard Error Instead of Standard Output"

.br

.br
\fBWriting Error Messages to Standard Error Instead of Standard Output\fR
.br
=====================================================================
.br

.P
At the moment, we‚Äôre writing all of our output to the terminal using the`\fIprintln!\fR` macro\. In most terminals, there are two kinds of output: \fIstandard\fRoutput (`\fIstdout\fR`) for general information and \fIstandard error\fR (`\fIstderr\fR`) forerror messages\. This distinction enables users to choose to direct thesuccessful output of a program to a file but still print error messages to thescreen\.
.P
The `\fIprintln!\fR` macro is only capable of printing to standard output, so wehave to use something else to print to standard error\.
.br

.br
\fBChecking Where Errors Are Written\fR
.br
===================================
.br

.P
First, let‚Äôs observe how the content printed by `\fIminigrep\fR` is currently beingwritten to standard output, including any error messages we want to write tostandard error instead\. We‚Äôll do that by redirecting the standard output streamto a file while intentionally causing an error\. We won‚Äôt redirect the standarderror stream, so any content sent to standard error will continue to display onthe screen\.
.P
Command line programs are expected to send error messages to the standard errorstream so we can still see error messages on the screen even if we redirect thestandard output stream to a file\. Our program is not currently well\-behaved:we‚Äôre about to see that it saves the error message output to a file instead!
.P
To demonstrate this behavior, we‚Äôll run the program with `\fI>\fR` and the file path,\fIoutput\.txt\fR, that we want to redirect the standard output stream to\. We won‚Äôtpass any arguments, which should cause an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run > output\.txt

.EE

.RE
.P
The `\fI>\fR` syntax tells the shell to write the contents of standard output to\fIoutput\.txt\fR instead of the screen\. We didn‚Äôt see the error message we wereexpecting printed to the screen, so that means it must have ended up in thefile\. This is what \fIoutput\.txt\fR contains:
.RS
.IP \fBtext\fR 2

.br
.EX
Problem parsing arguments: not enough arguments

.EE

.RE
.P
Yup, our error message is being printed to standard output\. It‚Äôs much moreuseful for error messages like this to be printed to standard error so onlydata from a successful run ends up in the file\. We‚Äôll change that\.
.br

.br
\fBPrinting Errors to Standard Error\fR
.br
===================================
.br

.P
We‚Äôll use the code in Listing 12\-24 to change how error messages are printed\.Because of the refactoring we did earlier in this chapter, all the code thatprints error messages is in one function, `\fImain\fR`\. The standard library providesthe `\fIeprintln!\fR` macro that prints to the standard error stream, so let‚Äôs changethe two places we were calling `\fIprintln!\fR` to print errors to use `\fIeprintln!\fR`instead\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::process;
# 
# use minigrep::Config;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = Config::build(&args)\.unwrap_or_else(|err| {
        eprintln!("Problem parsing arguments: {err}");
        process::exit(1);
    });

    if let Err(e) = minigrep::run(config) {
        eprintln!("Application error: {e}");
        process::exit(1);
    }
}

.EE

.RE
Listing 12\-24: Writing error messages to standard errorinstead of standard output using `\fIeprintln!\fR`
.P
Let‚Äôs now run the program again in the same way, without any arguments andredirecting standard output with `\fI>\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run > output\.txt
Problem parsing arguments: not enough arguments

.EE

.RE
.P
Now we see the error onscreen and \fIoutput\.txt\fR contains nothing, which is thebehavior we expect of command line programs\.
.P
Let‚Äôs run the program again with arguments that don‚Äôt cause an error but stillredirect standard output to a file, like so:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-\- to poem\.txt > output\.txt

.EE

.RE
.P
We won‚Äôt see any output to the terminal, and \fIoutput\.txt\fR will contain ourresults:Filename: output\.txt
.RS
.IP \fBtext\fR 2

.br
.EX
Are you nobody, too?
How dreary to be somebody!

.EE

.RE
.P
This demonstrates that we‚Äôre now using standard output for successful outputand standard error for error output as appropriate\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
This chapter recapped some of the major concepts you‚Äôve learned so far andcovered how to perform common I/O operations in Rust\. By using command linearguments, files, environment variables, and the `\fIeprintln!\fR` macro for printingerrors, you‚Äôre now prepared to write command line applications\. Combined withthe concepts in previous chapters, your code will be well organized, store dataeffectively in the appropriate data structures, handle errors nicely, and bewell tested\.
.P
Next, we‚Äôll explore some Rust features that were influenced by functionallanguages: closures and iterators\.
.SH "Functional Language Features: Iterators and Closures"

.br

.br
\fBFunctional Language Features: Iterators and Closures\fR
.br
======================================================
.br

.P
Rust‚Äôs design has taken inspiration from many existing languages andtechniques, and one significant influence is \fIfunctional programming\fR\.Programming in a functional style often includes using functions as values bypassing them in arguments, returning them from other functions, assigning themto variables for later execution, and so forth\.
.P
In this chapter, we won‚Äôt debate the issue of what functional programming is orisn‚Äôt but will instead discuss some features of Rust that are similar tofeatures in many languages often referred to as functional\.
.P
More specifically, we‚Äôll cover:\fIClosures\fR, a function\-like construct you can store in a variable\fIIterators\fR, a way of processing a series of elements
.P
How to use closures and iterators to improve the I/O project in Chapter 12
.P
The performance of closures and iterators (Spoiler alert: they‚Äôre faster thanyou might think!)
.P
We‚Äôve already covered some other Rust features, such as pattern matching andenums, that are also influenced by the functional style\. Because masteringclosures and iterators is an important part of writing idiomatic, fast Rustcode, we‚Äôll devote this entire chapter to them\.
.SH "Closures: Anonymous Functions that Capture Their Environment"

.br

.br
\fBClosures: Anonymous Functions that Capture Their Environment\fR
.br
==============================================================
.br

.P
Rust‚Äôs closures are anonymous functions you can save in a variable or pass asarguments to other functions\. You can create the closure in one place and thencall the closure elsewhere to evaluate it in a different context\. Unlikefunctions, closures can capture values from the scope in which they‚Äôre defined\.We‚Äôll demonstrate how these closure features allow for code reuse and behaviorcustomization\.
.br

.br
\fBCapturing the Environment with Closures\fR
.br
=========================================
.br

.P
We‚Äôll first examine how we can use closures to capture values from theenvironment they‚Äôre defined in for later use\. Here‚Äôs the scenario: Every sooften, our t\-shirt company gives away an exclusive, limited\-edition shirt tosomeone on our mailing list as a promotion\. People on the mailing list canoptionally add their favorite color to their profile\. If the person chosen fora free shirt has their favorite color set, they get that color shirt\. If theperson hasn‚Äôt specified a favorite color, they get whatever color the companycurrently has the most of\.
.P
There are many ways to implement this\. For this example, we‚Äôre going to use anenum called `\fIShirtColor\fR` that has the variants `\fIRed\fR` and `\fIBlue\fR` (limiting thenumber of colors available for simplicity)\. We represent the company‚Äôsinventory with an `\fIInventory\fR` struct that has a field named `\fIshirts\fR` thatcontains a `\fIVec<ShirtColor>\fR` representing the shirt colors currently in stock\.The method `\fIgiveaway\fR` defined on `\fIInventory\fR` gets the optional shirtcolor preference of the free shirt winner, and returns the shirt color theperson will get\. This setup is shown in Listing 13\-1:Filename: src/main\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[derive(Debug, PartialEq, Copy, Clone)]
enum ShirtColor {
    Red,
    Blue,
}

struct Inventory {
    shirts: Vec<ShirtColor>,
}

impl Inventory {
    fn giveaway(&self, user_preference: Option<ShirtColor>) \-> ShirtColor {
        user_preference\.unwrap_or_else(|| self\.most_stocked())
    }

    fn most_stocked(&self) \-> ShirtColor {
        let mut num_red = 0;
        let mut num_blue = 0;

        for color in &self\.shirts {
            match color {
                ShirtColor::Red => num_red += 1,
                ShirtColor::Blue => num_blue += 1,
            }
        }
        if num_red > num_blue {
            ShirtColor::Red
        } else {
            ShirtColor::Blue
        }
    }
}

fn main() {
    let store = Inventory {
        shirts: vec![ShirtColor::Blue, ShirtColor::Red, ShirtColor::Blue],
    };

    let user_pref1 = Some(ShirtColor::Red);
    let giveaway1 = store\.giveaway(user_pref1);
    println!(
        "The user with preference {:?} gets {:?}",
        user_pref1, giveaway1
    );

    let user_pref2 = None;
    let giveaway2 = store\.giveaway(user_pref2);
    println!(
        "The user with preference {:?} gets {:?}",
        user_pref2, giveaway2
    );
}

.EE

.RE
Listing 13\-1: Shirt company giveaway situation
.P
The `\fIstore\fR` defined in `\fImain\fR` has two blue shirts and one red shirt remainingto distribute for this limited\-edition promotion\. We call the `\fIgiveaway\fR` methodfor a user with a preference for a red shirt and a user without any preference\.
.P
Again, this code could be implemented in many ways, and here, to focus onclosures, we‚Äôve stuck to concepts you‚Äôve already learned except for the body ofthe `\fIgiveaway\fR` method that uses a closure\. In the `\fIgiveaway\fR` method, we get theuser preference as a parameter of type `\fIOption<ShirtColor>\fR` and call the`\fIunwrap_or_else\fR` method on `\fIuser_preference\fR`\. The 
.UR \.\./std/option/enum\.Option\.html#method\.unwrap_or_else
.UE
`\fIunwrap_or_else\fR` method on`\fIOption<T>\fR` is defined by the standard library\.It takes one argument: a closure without any arguments that returns a value `\fIT\fR`(the same type stored in the `\fISome\fR` variant of the `\fIOption<T>\fR`, in this case`\fIShirtColor\fR`)\. If the `\fIOption<T>\fR` is the `\fISome\fR` variant, `\fIunwrap_or_else\fR`returns the value from within the `\fISome\fR`\. If the `\fIOption<T>\fR` is the `\fINone\fR`variant, `\fIunwrap_or_else\fR` calls the closure and returns the value returned bythe closure\.
.P
We specify the closure expression `\fI|| self\.most_stocked()\fR` as the argument to`\fIunwrap_or_else\fR`\. This is a closure that takes no parameters itself (if theclosure had parameters, they would appear between the two vertical bars)\. Thebody of the closure calls `\fIself\.most_stocked()\fR`\. We‚Äôre defining the closurehere, and the implementation of `\fIunwrap_or_else\fR` will evaluate the closurelater if the result is needed\.
.P
Running this code prints:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling shirt\-company v0\.1\.0 (file:///projects/shirt\-company)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.27s
     Running `target/debug/shirt\-company`
The user with preference Some(Red) gets Red
The user with preference None gets Blue

.EE

.RE
.P
One interesting aspect here is that we‚Äôve passed a closure that calls`\fIself\.most_stocked()\fR` on the current `\fIInventory\fR` instance\. The standard librarydidn‚Äôt need to know anything about the `\fIInventory\fR` or `\fIShirtColor\fR` types wedefined, or the logic we want to use in this scenario\. The closure captures animmutable reference to the `\fIself\fR` `\fIInventory\fR` instance and passes it with thecode we specify to the `\fIunwrap_or_else\fR` method\. Functions, on the other hand,are not able to capture their environment in this way\.
.br

.br
\fBClosure Type Inference and Annotation\fR
.br
=======================================
.br

.P
There are more differences between functions and closures\. Closures don‚Äôtusually require you to annotate the types of the parameters or the return valuelike `\fIfn\fR` functions do\. Type annotations are required on functions because thetypes are part of an explicit interface exposed to your users\. Defining thisinterface rigidly is important for ensuring that everyone agrees on what typesof values a function uses and returns\. Closures, on the other hand, aren‚Äôt usedin an exposed interface like this: they‚Äôre stored in variables and used withoutnaming them and exposing them to users of our library\.
.P
Closures are typically short and relevant only within a narrow context ratherthan in any arbitrary scenario\. Within these limited contexts, the compiler caninfer the types of the parameters and the return type, similar to how it‚Äôs ableto infer the types of most variables (there are rare cases where the compilerneeds closure type annotations too)\.
.P
As with variables, we can add type annotations if we want to increaseexplicitness and clarity at the cost of being more verbose than is strictlynecessary\. Annotating the types for a closure would look like the definitionshown in Listing 13\-2\. In this example, we‚Äôre defining a closure and storing itin a variable rather than defining the closure in the spot we pass it as anargument as we did in Listing 13\-1\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::thread;
# use std::time::Duration;
# 
# fn generate_workout(intensity: u32, random_number: u32) {
    let expensive_closure = |num: u32| \-> u32 {
        println!("calculating slowly\.\.\.");
        thread::sleep(Duration::from_secs(2));
        num
    };
# 
#     if intensity < 25 {
#         println!("Today, do {} pushups!", expensive_closure(intensity));
#         println!("Next, do {} situps!", expensive_closure(intensity));
#     } else {
#         if random_number == 3 {
#             println!("Take a break today! Remember to stay hydrated!");
#         } else {
#             println!(
#                 "Today, run for {} minutes!",
#                 expensive_closure(intensity)
#             );
#         }
#     }
# }
# 
# fn main() {
#     let simulated_user_specified_value = 10;
#     let simulated_random_number = 7;
# 
#     generate_workout(simulated_user_specified_value, simulated_random_number);
# }

.EE

.RE
Listing 13\-2: Adding optional type annotations of theparameter and return value types in the closure
.P
With type annotations added, the syntax of closures looks more similar to thesyntax of functions\. Here we define a function that adds 1 to its parameter anda closure that has the same behavior, for comparison\. We‚Äôve added some spacesto line up the relevant parts\. This illustrates how closure syntax is similarto function syntax except for the use of pipes and the amount of syntax that isoptional:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn  add_one_v1   (x: u32) \-> u32 { x + 1 }
let add_one_v2 = |x: u32| \-> u32 { x + 1 };
let add_one_v3 = |x|             { x + 1 };
let add_one_v4 = |x|               x + 1  ;

.EE

.RE
.P
The first line shows a function definition, and the second line shows a fullyannotated closure definition\. In the third line, we remove the type annotationsfrom the closure definition\. In the fourth line, we remove the brackets, whichare optional because the closure body has only one expression\. These are allvalid definitions that will produce the same behavior when they‚Äôre called\. The`\fIadd_one_v3\fR` and `\fIadd_one_v4\fR` lines require the closures to be evaluated to beable to compile because the types will be inferred from their usage\. This issimilar to `\fIlet v = Vec::new();\fR` needing either type annotations or values ofsome type to be inserted into the `\fIVec\fR` for Rust to be able to infer the type\.
.P
For closure definitions, the compiler will infer one concrete type for each oftheir parameters and for their return value\. For instance, Listing 13\-3 showsthe definition of a short closure that just returns the value it receives as aparameter\. This closure isn‚Äôt very useful except for the purposes of thisexample\. Note that we haven‚Äôt added any type annotations to the definition\.Because there are no type annotations, we can call the closure with any type,which we‚Äôve done here with `\fIString\fR` the first time\. If we then try to call`\fIexample_closure\fR` with an integer, we‚Äôll get an error\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let example_closure = |x| x;

    let s = example_closure(String::from("hello"));
    let n = example_closure(5);
# }

.EE

.RE
Listing 13\-3: Attempting to call a closure whose typesare inferred with two different types
.P
The compiler gives us this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling closure\-example v0\.1\.0 (file:///projects/closure\-example)
error[E0308]: mismatched types
 \-\-> src/main\.rs:5:29
  |
5 |     let n = example_closure(5);
  |                             ^\- help: try using a conversion method: `\.to_string()`
  |                             |
  |                             expected struct `String`, found integer

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `closure\-example` due to previous error

.EE

.RE
.P
The first time we call `\fIexample_closure\fR` with the `\fIString\fR` value, the compilerinfers the type of `\fIx\fR` and the return type of the closure to be `\fIString\fR`\. Thosetypes are then locked into the closure in `\fIexample_closure\fR`, and we get a typeerror when we next try to use a different type with the same closure\.
.br

.br
\fBCapturing References or Moving Ownership\fR
.br
==========================================
.br

.P
Closures can capture values from their environment in three ways, whichdirectly map to the three ways a function can take a parameter: borrowingimmutably, borrowing mutably, and taking ownership\. The closure will decidewhich of these to use based on what the body of the function does with thecaptured values\.
.P
In Listing 13\-4, we define a closure that captures an immutable reference tothe vector named `\fIlist\fR` because it only needs an immutable reference to printthe value:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let list = vec![1, 2, 3];
    println!("Before defining closure: {:?}", list);

    let only_borrows = || println!("From closure: {:?}", list);

    println!("Before calling closure: {:?}", list);
    only_borrows();
    println!("After calling closure: {:?}", list);
}

.EE

.RE
Listing 13\-4: Defining and calling a closure thatcaptures an immutable reference
.P
This example also illustrates that a variable can bind to a closure definition,and we can later call the closure by using the variable name and parentheses asif the variable name were a function name\.
.P
Because we can have multiple immutable references to `\fIlist\fR` at the same time,`\fIlist\fR` is still accessible from the code before the closure definition, afterthe closure definition but before the closure is called, and after the closureis called\. This code compiles, runs, and prints:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling closure\-example v0\.1\.0 (file:///projects/closure\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.43s
     Running `target/debug/closure\-example`
Before defining closure: [1, 2, 3]
Before calling closure: [1, 2, 3]
From closure: [1, 2, 3]
After calling closure: [1, 2, 3]

.EE

.RE
.P
Next, in Listing 13\-5, we change the closure body so that it adds an element tothe `\fIlist\fR` vector\. The closure now captures a mutable reference:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut list = vec![1, 2, 3];
    println!("Before defining closure: {:?}", list);

    let mut borrows_mutably = || list\.push(7);

    borrows_mutably();
    println!("After calling closure: {:?}", list);
}

.EE

.RE
Listing 13\-5: Defining and calling a closure thatcaptures a mutable reference
.P
This code compiles, runs, and prints:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling closure\-example v0\.1\.0 (file:///projects/closure\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.43s
     Running `target/debug/closure\-example`
Before defining closure: [1, 2, 3]
After calling closure: [1, 2, 3, 7]

.EE

.RE
.P
Note that there‚Äôs no longer a `\fIprintln!\fR` between the definition and the call ofthe `\fIborrows_mutably\fR` closure: when `\fIborrows_mutably\fR` is defined, it captures amutable reference to `\fIlist\fR`\. We don‚Äôt use the closure again after the closureis called, so the mutable borrow ends\. Between the closure definition and theclosure call, an immutable borrow to print isn‚Äôt allowed because no otherborrows are allowed when there‚Äôs a mutable borrow\. Try adding a `\fIprintln!\fR`there to see what error message you get!
.P
If you want to force the closure to take ownership of the values it uses in theenvironment even though the body of the closure doesn‚Äôt strictly needownership, you can use the `\fImove\fR` keyword before the parameter list\.
.P
This technique is mostly useful when passing a closure to a new thread to movethe data so that it‚Äôs owned by the new thread\. We‚Äôll discuss threads and whyyou would want to use them in detail in Chapter 16 when we talk aboutconcurrency, but for now, let‚Äôs briefly explore spawning a new thread using aclosure that needs the `\fImove\fR` keyword\. Listing 13\-6 shows Listing 13\-4 modifiedto print the vector in a new thread rather than in the main thread:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;

fn main() {
    let list = vec![1, 2, 3];
    println!("Before defining closure: {:?}", list);

    thread::spawn(move || println!("From thread: {:?}", list))
        \.join()
        \.unwrap();
}

.EE

.RE
Listing 13\-6: Using `\fImove\fR` to force the closure for thethread to take ownership of `\fIlist\fR`
.P
We spawn a new thread, giving the thread a closure to run as an argument\. Theclosure body prints out the list\. In Listing 13\-4, the closure only captured`\fIlist\fR` using an immutable reference because that's the least amount of accessto `\fIlist\fR` needed to print it\. In this example, even though the closure bodystill only needs an immutable reference, we need to specify that `\fIlist\fR` shouldbe moved into the closure by putting the `\fImove\fR` keyword at the beginning of theclosure definition\. The new thread might finish before the rest of the mainthread finishes, or the main thread might finish first\. If the main threadmaintained ownership of `\fIlist\fR` but ended before the new thread did and dropped`\fIlist\fR`, the immutable reference in the thread would be invalid\. Therefore, thecompiler requires that `\fIlist\fR` be moved into the closure given to the new threadso the reference will be valid\. Try removing the `\fImove\fR` keyword or using `\fIlist\fR`in the main thread after the closure is defined to see what compiler errors youget!
.br

.br
\fBMoving Captured Values Out of Closures and the \fR
.br
=================================================
.br
`\fIFn\fR` Traits
.P
Once a closure has captured a reference or captured ownership of a value fromthe environment where the closure is defined (thus affecting what, if anything,is moved \fIinto\fR the closure), the code in the body of the closure defines whathappens to the references or values when the closure is evaluated later (thusaffecting what, if anything, is moved \fIout of\fR the closure)\. A closure body cando any of the following: move a captured value out of the closure, mutate thecaptured value, neither move nor mutate the value, or capture nothing from theenvironment to begin with\.
.P
The way a closure captures and handles values from the environment affectswhich traits the closure implements, and traits are how functions and structscan specify what kinds of closures they can use\. Closures will automaticallyimplement one, two, or all three of these `\fIFn\fR` traits, in an additive fashion,depending on how the closure‚Äôs body handles the values:`\fIFnOnce\fR` applies to closures that can be called once\. All closures implementat least this trait, because all closures can be called\. A closure thatmoves captured values out of its body will only implement `\fIFnOnce\fR` and noneof the other `\fIFn\fR` traits, because it can only be called once\.`\fIFnMut\fR` applies to closures that don‚Äôt move captured values out of theirbody, but that might mutate the captured values\. These closures can becalled more than once\.`\fIFn\fR` applies to closures that don‚Äôt move captured values out of their bodyand that don‚Äôt mutate captured values, as well as closures that capturenothing from their environment\. These closures can be called more than oncewithout mutating their environment, which is important in cases such ascalling a closure multiple times concurrently\.
.P
Let‚Äôs look at the definition of the `\fIunwrap_or_else\fR` method on `\fIOption<T>\fR` thatwe used in Listing 13\-1:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
impl<T> Option<T> {
    pub fn unwrap_or_else<F>(self, f: F) \-> T
    where
        F: FnOnce() \-> T
    {
        match self {
            Some(x) => x,
            None => f(),
        }
    }
}

.EE

.RE
.P
Recall that `\fIT\fR` is the generic type representing the type of the value in the`\fISome\fR` variant of an `\fIOption\fR`\. That type `\fIT\fR` is also the return type of the`\fIunwrap_or_else\fR` function: code that calls `\fIunwrap_or_else\fR` on an`\fIOption<String>\fR`, for example, will get a `\fIString\fR`\.
.P
Next, notice that the `\fIunwrap_or_else\fR` function has the additional generic typeparameter `\fIF\fR`\. The `\fIF\fR` type is the type of the parameter named `\fIf\fR`, which isthe closure we provide when calling `\fIunwrap_or_else\fR`\.
.P
The trait bound specified on the generic type `\fIF\fR` is `\fIFnOnce() \-> T\fR`, whichmeans `\fIF\fR` must be able to be called once, take no arguments, and return a `\fIT\fR`\.Using `\fIFnOnce\fR` in the trait bound expresses the constraint that`\fIunwrap_or_else\fR` is only going to call `\fIf\fR` at most one time\. In the body of`\fIunwrap_or_else\fR`, we can see that if the `\fIOption\fR` is `\fISome\fR`, `\fIf\fR` won‚Äôt becalled\. If the `\fIOption\fR` is `\fINone\fR`, `\fIf\fR` will be called once\. Because allclosures implement `\fIFnOnce\fR`, `\fIunwrap_or_else\fR` accepts the most different kindsof closures and is as flexible as it can be\.
.P
Note: Functions can implement all three of the `\fIFn\fR` traits too\. If what wewant to do doesn‚Äôt require capturing a value from the environment, we can usethe name of a function rather than a closure where we need something thatimplements one of the `\fIFn\fR` traits\. For example, on an `\fIOption<Vec<T>>\fR` value,we could call `\fIunwrap_or_else(Vec::new)\fR` to get a new, empty vector if thevalue is `\fINone\fR`\.
.P
Now let‚Äôs look at the standard library method `\fIsort_by_key\fR` defined on slices,to see how that differs from `\fIunwrap_or_else\fR` and why `\fIsort_by_key\fR` uses`\fIFnMut\fR` instead of `\fIFnOnce\fR` for the trait bound\. The closure gets one argumentin the form of a reference to the current item in the slice being considered,and returns a value of type `\fIK\fR` that can be ordered\. This function is usefulwhen you want to sort a slice by a particular attribute of each item\. InListing 13\-7, we have a list of `\fIRectangle\fR` instances and we use `\fIsort_by_key\fR`to order them by their `\fIwidth\fR` attribute from low to high:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let mut list = [
        Rectangle { width: 10, height: 1 },
        Rectangle { width: 3, height: 5 },
        Rectangle { width: 7, height: 12 },
    ];

    list\.sort_by_key(|r| r\.width);
    println!("{:#?}", list);
}

.EE

.RE
Listing 13\-7: Using `\fIsort_by_key\fR` to order rectangles bywidth
.P
This code prints:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.41s
     Running `target/debug/rectangles`
[
    Rectangle {
        width: 3,
        height: 5,
    },
    Rectangle {
        width: 7,
        height: 12,
    },
    Rectangle {
        width: 10,
        height: 1,
    },
]

.EE

.RE
.P
The reason `\fIsort_by_key\fR` is defined to take an `\fIFnMut\fR` closure is that it callsthe closure multiple times: once for each item in the slice\. The closure `\fI|r| r\.width\fR` doesn‚Äôt capture, mutate, or move out anything from its environment, soit meets the trait bound requirements\.
.P
In contrast, Listing 13\-8 shows an example of a closure that implements justthe `\fIFnOnce\fR` trait, because it moves a value out of the environment\. Thecompiler won‚Äôt let us use this closure with `\fIsort_by_key\fR`:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let mut list = [
        Rectangle { width: 10, height: 1 },
        Rectangle { width: 3, height: 5 },
        Rectangle { width: 7, height: 12 },
    ];

    let mut sort_operations = vec![];
    let value = String::from("by key called");

    list\.sort_by_key(|r| {
        sort_operations\.push(value);
        r\.width
    });
    println!("{:#?}", list);
}

.EE

.RE
Listing 13\-8: Attempting to use an `\fIFnOnce\fR` closure with`\fIsort_by_key\fR`
.P
This is a contrived, convoluted way (that doesn‚Äôt work) to try and count thenumber of times `\fIsort_by_key\fR` gets called when sorting `\fIlist\fR`\. This codeattempts to do this counting by pushing `\fIvalue\fR`‚Äîa `\fIString\fR` from the closure‚Äôsenvironment‚Äîinto the `\fIsort_operations\fR` vector\. The closure captures `\fIvalue\fR`then moves `\fIvalue\fR` out of the closure by transferring ownership of `\fIvalue\fR` tothe `\fIsort_operations\fR` vector\. This closure can be called once; trying to callit a second time wouldn‚Äôt work because `\fIvalue\fR` would no longer be in theenvironment to be pushed into `\fIsort_operations\fR` again! Therefore, this closureonly implements `\fIFnOnce\fR`\. When we try to compile this code, we get this errorthat `\fIvalue\fR` can‚Äôt be moved out of the closure because the closure mustimplement `\fIFnMut\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
error[E0507]: cannot move out of `value`, a captured variable in an `FnMut` closure
  \-\-> src/main\.rs:18:30
   |
15 |       let value = String::from("by key called");
   |           \-\-\-\-\- captured outer variable
16 | 
17 |       list\.sort_by_key(|r| {
   |  ______________________\-
18 | |         sort_operations\.push(value);
   | |                              ^^^^^ move occurs because `value` has type `String`, which does not implement the `Copy` trait
19 | |         r\.width
20 | |     });
   | |_____\- captured by this `FnMut` closure

For more information about this error, try `rustc \-\-explain E0507`\.
error: could not compile `rectangles` due to previous error

.EE

.RE
.P
The error points to the line in the closure body that moves `\fIvalue\fR` out of theenvironment\. To fix this, we need to change the closure body so that it doesn‚Äôtmove values out of the environment\. To count the number of times `\fIsort_by_key\fR`is called, keeping a counter in the environment and incrementing its value inthe closure body is a more straightforward way to calculate that\. The closurein Listing 13\-9 works with `\fIsort_by_key\fR` because it is only capturing a mutablereference to the `\fInum_sort_operations\fR` counter and can therefore be called morethan once:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let mut list = [
        Rectangle { width: 10, height: 1 },
        Rectangle { width: 3, height: 5 },
        Rectangle { width: 7, height: 12 },
    ];

    let mut num_sort_operations = 0;
    list\.sort_by_key(|r| {
        num_sort_operations += 1;
        r\.width
    });
    println!("{:#?}, sorted in {num_sort_operations} operations", list);
}

.EE

.RE
Listing 13\-9: Using an `\fIFnMut\fR` closure with `\fIsort_by_key\fR`is allowed
.P
The `\fIFn\fR` traits are important when defining or using functions or types thatmake use of closures\. In the next section, we‚Äôll discuss iterators\. Manyiterator methods take closure arguments, so keep these closure details in mindas we continue!
.SH "Processing a Series of Items with Iterators"

.br

.br
\fBProcessing a Series of Items with Iterators\fR
.br
=============================================
.br

.P
The iterator pattern allows you to perform some task on a sequence of items inturn\. An iterator is responsible for the logic of iterating over each item anddetermining when the sequence has finished\. When you use iterators, you don‚Äôthave to reimplement that logic yourself\.
.P
In Rust, iterators are \fIlazy\fR, meaning they have no effect until you callmethods that consume the iterator to use it up\. For example, the code inListing 13\-10 creates an iterator over the items in the vector `\fIv1\fR` by callingthe `\fIiter\fR` method defined on `\fIVec<T>\fR`\. This code by itself doesn‚Äôt do anythinguseful\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v1 = vec![1, 2, 3];

    let v1_iter = v1\.iter();
# }

.EE

.RE
Listing 13\-10: Creating an iterator
.P
The iterator is stored in the `\fIv1_iter\fR` variable\. Once we‚Äôve created aniterator, we can use it in a variety of ways\. In Listing 3\-5 in Chapter 3, weiterated over an array using a `\fIfor\fR` loop to execute some code on each of itsitems\. Under the hood this implicitly created and then consumed an iterator,but we glossed over how exactly that works until now\.
.P
In the example in Listing 13\-11, we separate the creation of the iterator fromthe use of the iterator in the `\fIfor\fR` loop\. When the `\fIfor\fR` loop is called usingthe iterator in `\fIv1_iter\fR`, each element in the iterator is used in oneiteration of the loop, which prints out each value\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v1 = vec![1, 2, 3];

    let v1_iter = v1\.iter();

    for val in v1_iter {
        println!("Got: {}", val);
    }
# }

.EE

.RE
Listing 13\-11: Using an iterator in a `\fIfor\fR` loop
.P
In languages that don‚Äôt have iterators provided by their standard libraries,you would likely write this same functionality by starting a variable at index0, using that variable to index into the vector to get a value, andincrementing the variable value in a loop until it reached the total number ofitems in the vector\.
.P
Iterators handle all that logic for you, cutting down on repetitive code youcould potentially mess up\. Iterators give you more flexibility to use the samelogic with many different kinds of sequences, not just data structures you canindex into, like vectors\. Let‚Äôs examine how iterators do that\.
.br

.br
\fBThe \fR
.br
======
.br
`\fIIterator\fR` Trait and the `\fInext\fR` Method
.P
All iterators implement a trait named `\fIIterator\fR` that is defined in thestandard library\. The definition of the trait looks like this:
.RS
.IP \fBrust\fR 2

.br
.EX
pub trait Iterator {
    type Item;

    fn next(&mut self) \-> Option<Self::Item>;

    // methods with default implementations elided
}

.EE

.RE
.P
Notice this definition uses some new syntax: `\fItype Item\fR` and `\fISelf::Item\fR`,which are defining an \fIassociated type\fR with this trait\. We‚Äôll talk aboutassociated types in depth in Chapter 19\. For now, all you need to know is thatthis code says implementing the `\fIIterator\fR` trait requires that you also definean `\fIItem\fR` type, and this `\fIItem\fR` type is used in the return type of the `\fInext\fR`method\. In other words, the `\fIItem\fR` type will be the type returned from theiterator\.
.P
The `\fIIterator\fR` trait only requires implementors to define one method: the`\fInext\fR` method, which returns one item of the iterator at a time wrapped in`\fISome\fR` and, when iteration is over, returns `\fINone\fR`\.
.P
We can call the `\fInext\fR` method on iterators directly; Listing 13\-12 demonstrateswhat values are returned from repeated calls to `\fInext\fR` on the iterator createdfrom the vector\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# #[cfg(test)]
# mod tests {
    #[test]
    fn iterator_demonstration() {
        let v1 = vec![1, 2, 3];

        let mut v1_iter = v1\.iter();

        assert_eq!(v1_iter\.next(), Some(&1));
        assert_eq!(v1_iter\.next(), Some(&2));
        assert_eq!(v1_iter\.next(), Some(&3));
        assert_eq!(v1_iter\.next(), None);
    }
# }

.EE

.RE
Listing 13\-12: Calling the `\fInext\fR` method on aniterator
.P
Note that we needed to make `\fIv1_iter\fR` mutable: calling the `\fInext\fR` method on aniterator changes internal state that the iterator uses to keep track of whereit is in the sequence\. In other words, this code \fIconsumes\fR, or uses up, theiterator\. Each call to `\fInext\fR` eats up an item from the iterator\. We didn‚Äôt needto make `\fIv1_iter\fR` mutable when we used a `\fIfor\fR` loop because the loop tookownership of `\fIv1_iter\fR` and made it mutable behind the scenes\.
.P
Also note that the values we get from the calls to `\fInext\fR` are immutablereferences to the values in the vector\. The `\fIiter\fR` method produces an iteratorover immutable references\. If we want to create an iterator that takesownership of `\fIv1\fR` and returns owned values, we can call `\fIinto_iter\fR` instead of`\fIiter\fR`\. Similarly, if we want to iterate over mutable references, we can call`\fIiter_mut\fR` instead of `\fIiter\fR`\.
.br

.br
\fBMethods that Consume the Iterator\fR
.br
===================================
.br

.P
The `\fIIterator\fR` trait has a number of different methods with defaultimplementations provided by the standard library; you can find out about thesemethods by looking in the standard library API documentation for the `\fIIterator\fR`trait\. Some of these methods call the `\fInext\fR` method in their definition, whichis why you‚Äôre required to implement the `\fInext\fR` method when implementing the`\fIIterator\fR` trait\.
.P
Methods that call `\fInext\fR` are called \fIconsuming adaptors\fR, because calling themuses up the iterator\. One example is the `\fIsum\fR` method, which takes ownership ofthe iterator and iterates through the items by repeatedly calling `\fInext\fR`, thusconsuming the iterator\. As it iterates through, it adds each item to a runningtotal and returns the total when iteration is complete\. Listing 13\-13 has atest illustrating a use of the `\fIsum\fR` method:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# #[cfg(test)]
# mod tests {
    #[test]
    fn iterator_sum() {
        let v1 = vec![1, 2, 3];

        let v1_iter = v1\.iter();

        let total: i32 = v1_iter\.sum();

        assert_eq!(total, 6);
    }
# }

.EE

.RE
Listing 13\-13: Calling the `\fIsum\fR` method to get the totalof all items in the iterator
.P
We aren‚Äôt allowed to use `\fIv1_iter\fR` after the call to `\fIsum\fR` because `\fIsum\fR` takesownership of the iterator we call it on\.
.br

.br
\fBMethods that Produce Other Iterators\fR
.br
======================================
.br
\fIIterator adaptors\fR are methods defined on the `\fIIterator\fR` trait that don‚Äôtconsume the iterator\. Instead, they produce different iterators by changingsome aspect of the original iterator\.
.P
Listing 13\-14 shows an example of calling the iterator adaptor method `\fImap\fR`,which takes a closure to call on each item as the items are iterated through\.The `\fImap\fR` method returns a new iterator that produces the modified items\. Theclosure here creates a new iterator in which each item from the vector will beincremented by 1:Filename: src/main\.rs
.RS
.IP \fBrust,not_desired_behavior\fR 2

.br
.EX
# fn main() {
    let v1: Vec<i32> = vec![1, 2, 3];

    v1\.iter()\.map(|x| x + 1);
# }

.EE

.RE
Listing 13\-14: Calling the iterator adaptor `\fImap\fR` tocreate a new iterator
.P
However, this code produces a warning:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling iterators v0\.1\.0 (file:///projects/iterators)
warning: unused `Map` that must be used
 \-\-> src/main\.rs:4:5
  |
4 |     v1\.iter()\.map(|x| x + 1);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_must_use)]` on by default
  = note: iterators are lazy and do nothing unless consumed

warning: `iterators` (bin "iterators") generated 1 warning
    Finished dev [unoptimized + debuginfo] target(s) in 0\.47s
     Running `target/debug/iterators`

.EE

.RE
.P
The code in Listing 13\-14 doesn‚Äôt do anything; the closure we‚Äôve specifiednever gets called\. The warning reminds us why: iterator adaptors are lazy, andwe need to consume the iterator here\.
.P
To fix this warning and consume the iterator, we‚Äôll use the `\fIcollect\fR` method,which we used in Chapter 12 with `\fIenv::args\fR` in Listing 12\-1\. This methodconsumes the iterator and collects the resulting values into a collection datatype\.
.P
In Listing 13\-15, we collect the results of iterating over the iterator that‚Äôsreturned from the call to `\fImap\fR` into a vector\. This vector will end upcontaining each item from the original vector incremented by 1\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v1: Vec<i32> = vec![1, 2, 3];

    let v2: Vec<_> = v1\.iter()\.map(|x| x + 1)\.collect();

    assert_eq!(v2, vec![2, 3, 4]);
# }

.EE

.RE
Listing 13\-15: Calling the `\fImap\fR` method to create a newiterator and then calling the `\fIcollect\fR` method to consume the new iterator andcreate a vector
.P
Because `\fImap\fR` takes a closure, we can specify any operation we want to performon each item\. This is a great example of how closures let you customize somebehavior while reusing the iteration behavior that the `\fIIterator\fR` traitprovides\.
.P
You can chain multiple calls to iterator adaptors to perform complex actions ina readable way\. But because all iterators are lazy, you have to call one of theconsuming adaptor methods to get results from calls to iterator adaptors\.
.br

.br
\fBUsing Closures that Capture Their Environment\fR
.br
===============================================
.br

.P
Many iterator adapters take closures as arguments, and commonly the closureswe‚Äôll specify as arguments to iterator adapters will be closures that capturetheir environment\.
.P
For this example, we‚Äôll use the `\fIfilter\fR` method that takes a closure\. Theclosure gets an item from the iterator and returns a `\fIbool\fR`\. If the closurereturns `\fItrue\fR`, the value will be included in the iteration produced by`\fIfilter\fR`\. If the closure returns `\fIfalse\fR`, the value won‚Äôt be included\.
.P
In Listing 13\-16, we use `\fIfilter\fR` with a closure that captures the `\fIshoe_size\fR`variable from its environment to iterate over a collection of `\fIShoe\fR` structinstances\. It will return only shoes that are the specified size\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[derive(PartialEq, Debug)]
struct Shoe {
    size: u32,
    style: String,
}

fn shoes_in_size(shoes: Vec<Shoe>, shoe_size: u32) \-> Vec<Shoe> {
    shoes\.into_iter()\.filter(|s| s\.size == shoe_size)\.collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn filters_by_size() {
        let shoes = vec![
            Shoe {
                size: 10,
                style: String::from("sneaker"),
            },
            Shoe {
                size: 13,
                style: String::from("sandal"),
            },
            Shoe {
                size: 10,
                style: String::from("boot"),
            },
        ];

        let in_my_size = shoes_in_size(shoes, 10);

        assert_eq!(
            in_my_size,
            vec![
                Shoe {
                    size: 10,
                    style: String::from("sneaker")
                },
                Shoe {
                    size: 10,
                    style: String::from("boot")
                },
            ]
        );
    }
}

.EE

.RE
Listing 13\-16: Using the `\fIfilter\fR` method with a closurethat captures `\fIshoe_size\fR`
.P
The `\fIshoes_in_size\fR` function takes ownership of a vector of shoes and a shoesize as parameters\. It returns a vector containing only shoes of the specifiedsize\.
.P
In the body of `\fIshoes_in_size\fR`, we call `\fIinto_iter\fR` to create an iteratorthat takes ownership of the vector\. Then we call `\fIfilter\fR` to adapt thatiterator into a new iterator that only contains elements for which the closurereturns `\fItrue\fR`\.
.P
The closure captures the `\fIshoe_size\fR` parameter from the environment andcompares the value with each shoe‚Äôs size, keeping only shoes of the sizespecified\. Finally, calling `\fIcollect\fR` gathers the values returned by theadapted iterator into a vector that‚Äôs returned by the function\.
.P
The test shows that when we call `\fIshoes_in_size\fR`, we get back only shoesthat have the same size as the value we specified\.
.SH "Improving Our I/O Project"

.br

.br
\fBImproving Our I/O Project\fR
.br
===========================
.br

.P
With this new knowledge about iterators, we can improve the I/O project inChapter 12 by using iterators to make places in the code clearer and moreconcise\. Let‚Äôs look at how iterators can improve our implementation of the`\fIConfig::build\fR` function and the `\fIsearch\fR` function\.
.br

.br
\fBRemoving a \fR
.br
=============
.br
`\fIclone\fR` Using an Iterator
.P
In Listing 12\-6, we added code that took a slice of `\fIString\fR` values and createdan instance of the `\fIConfig\fR` struct by indexing into the slice and cloning thevalues, allowing the `\fIConfig\fR` struct to own those values\. In Listing 13\-17,we‚Äôve reproduced the implementation of the `\fIConfig::build\fR` function as it wasin Listing 12\-23:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
#     pub ignore_case: bool,
# }
# 
impl Config {
    pub fn build(args: &[String]) \-> Result<Config, &'static str> {
        if args\.len() < 3 {
            return Err("not enough arguments");
        }

        let query = args[1]\.clone();
        let file_path = args[2]\.clone();

        let ignore_case = env::var("IGNORE_CASE")\.is_ok();

        Ok(Config {
            query,
            file_path,
            ignore_case,
        })
    }
}
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     let results = if config\.ignore_case {
#         search_case_insensitive(&config\.query, &contents)
#     } else {
#         search(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{line}");
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 13\-17: Reproduction of the `\fIConfig::build\fR`function from Listing 12\-23
.P
At the time, we said not to worry about the inefficient `\fIclone\fR` calls becausewe would remove them in the future\. Well, that time is now!
.P
We needed `\fIclone\fR` here because we have a slice with `\fIString\fR` elements in theparameter `\fIargs\fR`, but the `\fIbuild\fR` function doesn‚Äôt own `\fIargs\fR`\. To returnownership of a `\fIConfig\fR` instance, we had to clone the values from the `\fIquery\fR`and `\fIfilename\fR` fields of `\fIConfig\fR` so the `\fIConfig\fR` instance can own its values\.
.P
With our new knowledge about iterators, we can change the `\fIbuild\fR` function totake ownership of an iterator as its argument instead of borrowing a slice\.We‚Äôll use the iterator functionality instead of the code that checks the lengthof the slice and indexes into specific locations\. This will clarify what the`\fIConfig::build\fR` function is doing because the iterator will access the values\.
.P
Once `\fIConfig::build\fR` takes ownership of the iterator and stops using indexingoperations that borrow, we can move the `\fIString\fR` values from the iterator into`\fIConfig\fR` rather than calling `\fIclone\fR` and making a new allocation\.
.br

.br
\fBUsing the Returned Iterator Directly\fR
.br
======================================
.br

.P
Open your I/O project‚Äôs \fIsrc/main\.rs\fR file, which should look like this:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::process;
# 
# use minigrep::Config;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = Config::build(&args)\.unwrap_or_else(|err| {
        eprintln!("Problem parsing arguments: {err}");
        process::exit(1);
    });

    // \-\-snip\-\-
# 
#     if let Err(e) = minigrep::run(config) {
#         eprintln!("Application error: {e}");
#         process::exit(1);
#     }
}

.EE

.RE
.P
We‚Äôll first change the start of the `\fImain\fR` function that we had in Listing12\-24 to the code in Listing 13\-18, which this time uses an iterator\. Thiswon‚Äôt compile until we update `\fIConfig::build\fR` as well\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::env;
# use std::process;
# 
# use minigrep::Config;
# 
fn main() {
    let config = Config::build(env::args())\.unwrap_or_else(|err| {
        eprintln!("Problem parsing arguments: {err}");
        process::exit(1);
    });

    // \-\-snip\-\-
# 
#     if let Err(e) = minigrep::run(config) {
#         eprintln!("Application error: {e}");
#         process::exit(1);
#     }
}

.EE

.RE
Listing 13\-18: Passing the return value of `\fIenv::args\fR` to`\fIConfig::build\fR`
.P
The `\fIenv::args\fR` function returns an iterator! Rather than collecting theiterator values into a vector and then passing a slice to `\fIConfig::build\fR`, nowwe‚Äôre passing ownership of the iterator returned from `\fIenv::args\fR` to`\fIConfig::build\fR` directly\.
.P
Next, we need to update the definition of `\fIConfig::build\fR`\. In your I/Oproject‚Äôs \fIsrc/lib\.rs\fR file, let‚Äôs change the signature of `\fIConfig::build\fR` tolook like Listing 13\-19\. This still won‚Äôt compile because we need to update thefunction body\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
#     pub ignore_case: bool,
# }
# 
impl Config {
    pub fn build(
        mut args: impl Iterator<Item = String>,
    ) \-> Result<Config, &'static str> {
        // \-\-snip\-\-
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         let ignore_case = env::var("IGNORE_CASE")\.is_ok();
# 
#         Ok(Config {
#             query,
#             file_path,
#             ignore_case,
#         })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     let results = if config\.ignore_case {
#         search_case_insensitive(&config\.query, &contents)
#     } else {
#         search(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{line}");
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 13\-19: Updating the signature of `\fIConfig::build\fR`to expect an iterator
.P
The standard library documentation for the `\fIenv::args\fR` function shows that thetype of the iterator it returns is `\fIstd::env::Args\fR`, and that type implementsthe `\fIIterator\fR` trait and returns `\fIString\fR` values\.
.P
We‚Äôve updated the signature of the `\fIConfig::build\fR` function so the parameter`\fIargs\fR` has a generic type with the trait bounds `\fIimpl Iterator<Item = String>\fR`instead of `\fI&[String]\fR`\. This usage of the `\fIimpl Trait\fR` syntax we discussed inthe 
.UR ch10\-02\-traits\.html#traits\-as\-parameters
.UE
‚ÄúTraits as Parameters‚Äù section of Chapter 10means that `\fIargs\fR` can be any type that implements the `\fIIterator\fR` type andreturns `\fIString\fR` items\.
.P
Because we‚Äôre taking ownership of `\fIargs\fR` and we‚Äôll be mutating `\fIargs\fR` byiterating over it, we can add the `\fImut\fR` keyword into the specification of the`\fIargs\fR` parameter to make it mutable\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIIterator\fR` Trait Methods Instead of Indexing
.P
Next, we‚Äôll fix the body of `\fIConfig::build\fR`\. Because `\fIargs\fR` implements the`\fIIterator\fR` trait, we know we can call the `\fInext\fR` method on it! Listing 13\-20updates the code from Listing 12\-23 to use the `\fInext\fR` method:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
#     pub ignore_case: bool,
# }
# 
impl Config {
    pub fn build(
        mut args: impl Iterator<Item = String>,
    ) \-> Result<Config, &'static str> {
        args\.next();

        let query = match args\.next() {
            Some(arg) => arg,
            None => return Err("Didn't get a query string"),
        };

        let file_path = match args\.next() {
            Some(arg) => arg,
            None => return Err("Didn't get a file path"),
        };

        let ignore_case = env::var("IGNORE_CASE")\.is_ok();

        Ok(Config {
            query,
            file_path,
            ignore_case,
        })
    }
}
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     let results = if config\.ignore_case {
#         search_case_insensitive(&config\.query, &contents)
#     } else {
#         search(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{line}");
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 13\-20: Changing the body of `\fIConfig::build\fR` to useiterator methods
.P
Remember that the first value in the return value of `\fIenv::args\fR` is the name ofthe program\. We want to ignore that and get to the next value, so first we call`\fInext\fR` and do nothing with the return value\. Second, we call `\fInext\fR` to get thevalue we want to put in the `\fIquery\fR` field of `\fIConfig\fR`\. If `\fInext\fR` returns a`\fISome\fR`, we use a `\fImatch\fR` to extract the value\. If it returns `\fINone\fR`, it meansnot enough arguments were given and we return early with an `\fIErr\fR` value\. We dothe same thing for the `\fIfilename\fR` value\.
.br

.br
\fBMaking Code Clearer with Iterator Adaptors\fR
.br
============================================
.br

.P
We can also take advantage of iterators in the `\fIsearch\fR` function in our I/Oproject, which is reproduced here in Listing 13\-21 as it was in Listing 12\-19:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
# }
# 
# impl Config {
#     pub fn build(args: &[String]) \-> Result<Config, &'static str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let file_path = args[2]\.clone();
# 
#         Ok(Config { query, file_path })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    let mut results = Vec::new();

    for line in contents\.lines() {
        if line\.contains(query) {
            results\.push(line);
        }
    }

    results
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 13\-21: The implementation of the `\fIsearch\fR`function from Listing 12\-19
.P
We can write this code in a more concise way using iterator adaptor methods\.Doing so also lets us avoid having a mutable intermediate `\fIresults\fR` vector\. Thefunctional programming style prefers to minimize the amount of mutable state tomake code clearer\. Removing the mutable state might enable a future enhancementto make searching happen in parallel, because we wouldn‚Äôt have to manageconcurrent access to the `\fIresults\fR` vector\. Listing 13\-22 shows this change:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub file_path: String,
#     pub ignore_case: bool,
# }
# 
# impl Config {
#     pub fn build(
#         mut args: impl Iterator<Item = String>,
#     ) \-> Result<Config, &'static str> {
#         args\.next();
# 
#         let query = match args\.next() {
#             Some(arg) => arg,
#             None => return Err("Didn't get a query string"),
#         };
# 
#         let file_path = match args\.next() {
#             Some(arg) => arg,
#             None => return Err("Didn't get a file path"),
#         };
# 
#         let ignore_case = env::var("IGNORE_CASE")\.is_ok();
# 
#         Ok(Config {
#             query,
#             file_path,
#             ignore_case,
#         })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.file_path)?;
# 
#     let results = if config\.ignore_case {
#         search_case_insensitive(&config\.query, &contents)
#     } else {
#         search(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{line}");
#     }
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    contents
        \.lines()
        \.filter(|line| line\.contains(query))
        \.collect()
}
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 13\-22: Using iterator adaptor methods in theimplementation of the `\fIsearch\fR` function
.P
Recall that the purpose of the `\fIsearch\fR` function is to return all lines in`\fIcontents\fR` that contain the `\fIquery\fR`\. Similar to the `\fIfilter\fR` example in Listing13\-16, this code uses the `\fIfilter\fR` adaptor to keep only the lines that`\fIline\.contains(query)\fR` returns `\fItrue\fR` for\. We then collect the matching linesinto another vector with `\fIcollect\fR`\. Much simpler! Feel free to make the samechange to use iterator methods in the `\fIsearch_case_insensitive\fR` function aswell\.
.br

.br
\fBChoosing Between Loops or Iterators\fR
.br
=====================================
.br

.P
The next logical question is which style you should choose in your own code andwhy: the original implementation in Listing 13\-21 or the version usingiterators in Listing 13\-22\. Most Rust programmers prefer to use the iteratorstyle\. It‚Äôs a bit tougher to get the hang of at first, but once you get a feelfor the various iterator adaptors and what they do, iterators can be easier tounderstand\. Instead of fiddling with the various bits of looping and buildingnew vectors, the code focuses on the high\-level objective of the loop\. Thisabstracts away some of the commonplace code so it‚Äôs easier to see the conceptsthat are unique to this code, such as the filtering condition each element inthe iterator must pass\.
.P
But are the two implementations truly equivalent? The intuitive assumptionmight be that the more low\-level loop will be faster\. Let‚Äôs talk aboutperformance\.
.SH "Comparing Performance: Loops vs\. Iterators"

.br

.br
\fBComparing Performance: Loops vs\. Iterators\fR
.br
============================================
.br

.P
To determine whether to use loops or iterators, you need to know whichimplementation is faster: the version of the `\fIsearch\fR` function with an explicit`\fIfor\fR` loop or the version with iterators\.
.P
We ran a benchmark by loading the entire contents of \fIThe Adventures of\fRSherlock Holmes by Sir Arthur Conan Doyle into a `\fIString\fR` and looking for theword \fIthe\fR in the contents\. Here are the results of the benchmark on theversion of `\fIsearch\fR` using the `\fIfor\fR` loop and the version using iterators:
.RS
.IP \fBtext\fR 2

.br
.EX
test bench_search_for  \.\.\. bench:  19,620,300 ns/iter (+/\- 915,700)
test bench_search_iter \.\.\. bench:  19,234,900 ns/iter (+/\- 657,200)

.EE

.RE
.P
The iterator version was slightly faster! We won‚Äôt explain the benchmark codehere, because the point is not to prove that the two versions are equivalentbut to get a general sense of how these two implementations compareperformance\-wise\.
.P
For a more comprehensive benchmark, you should check using various texts ofvarious sizes as the `\fIcontents\fR`, different words and words of different lengthsas the `\fIquery\fR`, and all kinds of other variations\. The point is this:iterators, although a high\-level abstraction, get compiled down to roughly thesame code as if you‚Äôd written the lower\-level code yourself\. Iterators are oneof Rust‚Äôs \fIzero\-cost abstractions\fR, by which we mean using the abstractionimposes no additional runtime overhead\. This is analogous to how BjarneStroustrup, the original designer and implementor of C++, defines\fIzero\-overhead\fR in ‚ÄúFoundations of C++‚Äù (2012):
.P
In general, C++ implementations obey the zero\-overhead principle: What youdon‚Äôt use, you don‚Äôt pay for\. And further: What you do use, you couldn‚Äôt handcode any better\.
.P
As another example, the following code is taken from an audio decoder\. Thedecoding algorithm uses the linear prediction mathematical operation toestimate future values based on a linear function of the previous samples\. Thiscode uses an iterator chain to do some math on three variables in scope: a`\fIbuffer\fR` slice of data, an array of 12 `\fIcoefficients\fR`, and an amount by whichto shift data in `\fIqlp_shift\fR`\. We‚Äôve declared the variables within this examplebut not given them any values; although this code doesn‚Äôt have much meaningoutside of its context, it‚Äôs still a concise, real\-world example of how Rusttranslates high\-level ideas to low\-level code\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let buffer: &mut [i32];
let coefficients: [i64; 12];
let qlp_shift: i16;

for i in 12\.\.buffer\.len() {
    let prediction = coefficients\.iter()
                                 \.zip(&buffer[i \- 12\.\.i])
                                 \.map(|(&c, &s)| c * s as i64)
                                 \.sum::<i64>() >> qlp_shift;
    let delta = buffer[i];
    buffer[i] = prediction as i32 + delta;
}

.EE

.RE
.P
To calculate the value of `\fIprediction\fR`, this code iterates through each of the12 values in `\fIcoefficients\fR` and uses the `\fIzip\fR` method to pair the coefficientvalues with the previous 12 values in `\fIbuffer\fR`\. Then, for each pair, wemultiply the values together, sum all the results, and shift the bits in thesum `\fIqlp_shift\fR` bits to the right\.
.P
Calculations in applications like audio decoders often prioritize performancemost highly\. Here, we‚Äôre creating an iterator, using two adaptors, and thenconsuming the value\. What assembly code would this Rust code compile to? Well,as of this writing, it compiles down to the same assembly you‚Äôd write by hand\.There‚Äôs no loop at all corresponding to the iteration over the values in`\fIcoefficients\fR`: Rust knows that there are 12 iterations, so it ‚Äúunrolls‚Äù theloop\. \fIUnrolling\fR is an optimization that removes the overhead of the loopcontrolling code and instead generates repetitive code for each iteration ofthe loop\.
.P
All of the coefficients get stored in registers, which means accessing thevalues is very fast\. There are no bounds checks on the array access at runtime\.All these optimizations that Rust is able to apply make the resulting codeextremely efficient\. Now that you know this, you can use iterators and closureswithout fear! They make code seem like it‚Äôs higher level but don‚Äôt impose aruntime performance penalty for doing so\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Closures and iterators are Rust features inspired by functional programminglanguage ideas\. They contribute to Rust‚Äôs capability to clearly expresshigh\-level ideas at low\-level performance\. The implementations of closures anditerators are such that runtime performance is not affected\. This is part ofRust‚Äôs goal to strive to provide zero\-cost abstractions\.
.P
Now that we‚Äôve improved the expressiveness of our I/O project, let‚Äôs look atsome more features of `\fIcargo\fR` that will help us share the project with theworld\.
.SH "More about Cargo and Crates\.io"

.br

.br
\fBMore About Cargo and Crates\.io\fR
.br
================================
.br

.P
So far we‚Äôve used only the most basic features of Cargo to build, run, and testour code, but it can do a lot more\. In this chapter, we‚Äôll discuss some of itsother, more advanced features to show you how to do the following:
.P
Customize your build through release profiles
.P
Publish libraries on 
.UR https://crates\.io/
.UE
crates\.io
.P
Organize large projects with workspaces
.P
Install binaries from 
.UR https://crates\.io/
.UE
crates\.io
.P
Extend Cargo using custom commands
.P
Cargo can do even more than the functionality we cover in this chapter, so fora full explanation of all its features, see 
.UR https://doc\.rust\-lang\.org/cargo/
.UE
itsdocumentation\.
.SH "Customizing Builds with Release Profiles"

.br

.br
\fBCustomizing Builds with Release Profiles\fR
.br
==========================================
.br

.P
In Rust, \fIrelease profiles\fR are predefined and customizable profiles withdifferent configurations that allow a programmer to have more control overvarious options for compiling code\. Each profile is configured independently ofthe others\.
.P
Cargo has two main profiles: the `\fIdev\fR` profile Cargo uses when you run `\fIcargo build\fR` and the `\fIrelease\fR` profile Cargo uses when you run `\fIcargo build \-\-release\fR`\. The `\fIdev\fR` profile is defined with good defaults for development,and the `\fIrelease\fR` profile has good defaults for release builds\.
.P
These profile names might be familiar from the output of your builds:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
$ cargo build \-\-release
    Finished release [optimized] target(s) in 0\.0s

.EE

.RE
.P
The `\fIdev\fR` and `\fIrelease\fR` are these different profiles used by the compiler\.
.P
Cargo has default settings for each of the profiles that apply when you haven'texplicitly added any `\fI[profile\.*]\fR` sections in the project‚Äôs \fICargo\.toml\fR file\.By adding `\fI[profile\.*]\fR` sections for any profile you want to customize, youoverride any subset of the default settings\. For example, here are the defaultvalues for the `\fIopt\-level\fR` setting for the `\fIdev\fR` and `\fIrelease\fR` profiles:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[profile\.dev]
opt\-level = 0

[profile\.release]
opt\-level = 3

.EE

.RE
.P
The `\fIopt\-level\fR` setting controls the number of optimizations Rust will apply toyour code, with a range of 0 to 3\. Applying more optimizations extendscompiling time, so if you‚Äôre in development and compiling your code often,you‚Äôll want fewer optimizations to compile faster even if the resulting coderuns slower\. The default `\fIopt\-level\fR` for `\fIdev\fR` is therefore `\fI0\fR`\. When you‚Äôreready to release your code, it‚Äôs best to spend more time compiling\. You‚Äôll onlycompile in release mode once, but you‚Äôll run the compiled program many times,so release mode trades longer compile time for code that runs faster\. That iswhy the default `\fIopt\-level\fR` for the `\fIrelease\fR` profile is `\fI3\fR`\.
.P
You can override a default setting by adding a different value for it in\fICargo\.toml\fR\. For example, if we want to use optimization level 1 in thedevelopment profile, we can add these two lines to our project‚Äôs \fICargo\.toml\fRfile:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[profile\.dev]
opt\-level = 1

.EE

.RE
.P
This code overrides the default setting of `\fI0\fR`\. Now when we run `\fIcargo build\fR`,Cargo will use the defaults for the `\fIdev\fR` profile plus our customization to`\fIopt\-level\fR`\. Because we set `\fIopt\-level\fR` to `\fI1\fR`, Cargo will apply moreoptimizations than the default, but not as many as in a release build\.
.P
For the full list of configuration options and defaults for each profile, see
.UR https://doc\.rust\-lang\.org/cargo/reference/profiles\.html
.UE
Cargo‚Äôs documentation\.
.SH "Publishing a Crate to Crates\.io"

.br

.br
\fBPublishing a Crate to Crates\.io\fR
.br
=================================
.br

.P
We‚Äôve used packages from 
.UR https://crates\.io/
.UE
crates\.io asdependencies of our project, but you can also share your code with other peopleby publishing your own packages\. The crate registry at
.UR https://crates\.io/
.UE
crates\.io distributes the source code ofyour packages, so it primarily hosts code that is open source\.
.P
Rust and Cargo have features that make your published package easier for peopleto find and use\. We‚Äôll talk about some of these features next and then explainhow to publish a package\.
.br

.br
\fBMaking Useful Documentation Comments\fR
.br
======================================
.br

.P
Accurately documenting your packages will help other users know how and when touse them, so it‚Äôs worth investing the time to write documentation\. In Chapter3, we discussed how to comment Rust code using two slashes, `\fI//\fR`\. Rust also hasa particular kind of comment for documentation, known conveniently as a\fIdocumentation comment\fR, that will generate HTML documentation\. The HTMLdisplays the contents of documentation comments for public API items intendedfor programmers interested in knowing how to \fIuse\fR your crate as opposed to howyour crate is \fIimplemented\fR\.
.P
Documentation comments use three slashes, `\fI///\fR`, instead of two and supportMarkdown notation for formatting the text\. Place documentation comments justbefore the item they‚Äôre documenting\. Listing 14\-1 shows documentation commentsfor an `\fIadd_one\fR` function in a crate named `\fImy_crate\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
/// Adds one to the number given\.
///
/// # Examples
///
/// ```
/// let arg = 5;
/// let answer = my_crate::add_one(arg);
///
/// assert_eq!(6, answer);
/// ```
pub fn add_one(x: i32) \-> i32 {
    x + 1
}

.EE

.RE
Listing 14\-1: A documentation comment for afunction
.P
Here, we give a description of what the `\fIadd_one\fR` function does, start asection with the heading `\fIExamples\fR`, and then provide code that demonstrateshow to use the `\fIadd_one\fR` function\. We can generate the HTML documentation fromthis documentation comment by running `\fIcargo doc\fR`\. This command runs the`\fIrustdoc\fR` tool distributed with Rust and puts the generated HTML documentationin the \fItarget/doc\fR directory\.
.P
For convenience, running `\fIcargo doc \-\-open\fR` will build the HTML for yourcurrent crate‚Äôs documentation (as well as the documentation for all of yourcrate‚Äôs dependencies) and open the result in a web browser\. Navigate to the`\fIadd_one\fR` function and you‚Äôll see how the text in the documentation comments isrendered, as shown in Figure 14\-1:Figure 14\-1: HTML documentation for the `\fIadd_one\fR`function
.br

.br
\fBCommonly Used Sections\fR
.br
========================
.br

.P
We used the `\fI# Examples\fR` Markdown heading in Listing 14\-1 to create a sectionin the HTML with the title ‚ÄúExamples\.‚Äù Here are some other sections that crateauthors commonly use in their documentation:\fBPanics\fR: The scenarios in which the function being documented couldpanic\. Callers of the function who don‚Äôt want their programs to panic shouldmake sure they don‚Äôt call the function in these situations\.\fBErrors\fR: If the function returns a `\fIResult\fR`, describing the kinds oferrors that might occur and what conditions might cause those errors to bereturned can be helpful to callers so they can write code to handle thedifferent kinds of errors in different ways\.\fBSafety\fR: If the function is `\fIunsafe\fR` to call (we discuss unsafety inChapter 19), there should be a section explaining why the function is unsafeand covering the invariants that the function expects callers to uphold\.
.P
Most documentation comments don‚Äôt need all of these sections, but this is agood checklist to remind you of the aspects of your code users will beinterested in knowing about\.
.br

.br
\fBDocumentation Comments as Tests\fR
.br
=================================
.br

.P
Adding example code blocks in your documentation comments can help demonstratehow to use your library, and doing so has an additional bonus: running `\fIcargo test\fR` will run the code examples in your documentation as tests! Nothing isbetter than documentation with examples\. But nothing is worse than examplesthat don‚Äôt work because the code has changed since the documentation waswritten\. If we run `\fIcargo test\fR` with the documentation for the `\fIadd_one\fR`function from Listing 14\-1, we will see a section in the test results like this:
.RS
.IP \fBtext\fR 2

.br
.EX
   Doc\-tests my_crate

running 1 test
test src/lib\.rs \- add_one (line 5) \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.27s

.EE

.RE
.P
Now if we change either the function or the example so the `\fIassert_eq!\fR` in theexample panics and run `\fIcargo test\fR` again, we‚Äôll see that the doc tests catchthat the example and the code are out of sync with each other!
.br

.br
\fBCommenting Contained Items\fR
.br
============================
.br

.P
The style of doc comment `\fI//!\fR` adds documentation to the item that contains thecomments rather than to the items following the comments\. We typically usethese doc comments inside the crate root file (\fIsrc/lib\.rs\fR by convention) orinside a module to document the crate or the module as a whole\.
.P
For example, to add documentation that describes the purpose of the `\fImy_crate\fR`crate that contains the `\fIadd_one\fR` function, we add documentation comments thatstart with `\fI//!\fR` to the beginning of the \fIsrc/lib\.rs\fR file, as shown in Listing14\-2:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
//! # My Crate
//!
//! `my_crate` is a collection of utilities to make performing certain
//! calculations more convenient\.

/// Adds one to the number given\.
// \-\-snip\-\-
# ///
# /// # Examples
# ///
# /// ```
# /// let arg = 5;
# /// let answer = my_crate::add_one(arg);
# ///
# /// assert_eq!(6, answer);
# /// ```
# pub fn add_one(x: i32) \-> i32 {
#     x + 1
# }

.EE

.RE
Listing 14\-2: Documentation for the `\fImy_crate\fR` crate as awhole
.P
Notice there isn‚Äôt any code after the last line that begins with `\fI//!\fR`\. Becausewe started the comments with `\fI//!\fR` instead of `\fI///\fR`, we‚Äôre documenting the itemthat contains this comment rather than an item that follows this comment\. Inthis case, that item is the \fIsrc/lib\.rs\fR file, which is the crate root\. Thesecomments describe the entire crate\.
.P
When we run `\fIcargo doc \-\-open\fR`, these comments will display on the frontpage of the documentation for `\fImy_crate\fR` above the list of public items in thecrate, as shown in Figure 14\-2:Figure 14\-2: Rendered documentation for `\fImy_crate\fR`,including the comment describing the crate as a whole
.P
Documentation comments within items are useful for describing crates andmodules especially\. Use them to explain the overall purpose of the container tohelp your users understand the crate‚Äôs organization\.
.br

.br
\fBExporting a Convenient Public API with \fR
.br
=========================================
.br
`\fIpub use\fR`
.P
The structure of your public API is a major consideration when publishing acrate\. People who use your crate are less familiar with the structure than youare and might have difficulty finding the pieces they want to use if your cratehas a large module hierarchy\.
.P
In Chapter 7, we covered how to make items public using the `\fIpub\fR` keyword, andbring items into a scope with the `\fIuse\fR` keyword\. However, the structure thatmakes sense to you while you‚Äôre developing a crate might not be very convenientfor your users\. You might want to organize your structs in a hierarchycontaining multiple levels, but then people who want to use a type you‚Äôvedefined deep in the hierarchy might have trouble finding out that type exists\.They might also be annoyed at having to enter `\fIuse\fR``\fImy_crate::some_module::another_module::UsefulType;\fR` rather than `\fIuse\fR``\fImy_crate::UsefulType;\fR`\.
.P
The good news is that if the structure \fIisn‚Äôt\fR convenient for others to usefrom another library, you don‚Äôt have to rearrange your internal organization:instead, you can re\-export items to make a public structure that‚Äôs differentfrom your private structure by using `\fIpub use\fR`\. Re\-exporting takes a publicitem in one location and makes it public in another location, as if it weredefined in the other location instead\.
.P
For example, say we made a library named `\fIart\fR` for modeling artistic concepts\.Within this library are two modules: a `\fIkinds\fR` module containing two enumsnamed `\fIPrimaryColor\fR` and `\fISecondaryColor\fR` and a `\fIutils\fR` module containing afunction named `\fImix\fR`, as shown in Listing 14\-3:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
//! # Art
//!
//! A library for modeling artistic concepts\.

pub mod kinds {
    /// The primary colors according to the RYB color model\.
    pub enum PrimaryColor {
        Red,
        Yellow,
        Blue,
    }

    /// The secondary colors according to the RYB color model\.
    pub enum SecondaryColor {
        Orange,
        Green,
        Purple,
    }
}

pub mod utils {
    use crate::kinds::*;

    /// Combines two primary colors in equal amounts to create
    /// a secondary color\.
    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) \-> SecondaryColor {
        // \-\-snip\-\-
#         unimplemented!();
    }
}

.EE

.RE
Listing 14\-3: An `\fIart\fR` library with items organized into`\fIkinds\fR` and `\fIutils\fR` modules
.P
Figure 14\-3 shows what the front page of the documentation for this crategenerated by `\fIcargo doc\fR` would look like:Figure 14\-3: Front page of the documentation for `\fIart\fR`that lists the `\fIkinds\fR` and `\fIutils\fR` modules
.P
Note that the `\fIPrimaryColor\fR` and `\fISecondaryColor\fR` types aren‚Äôt listed on thefront page, nor is the `\fImix\fR` function\. We have to click `\fIkinds\fR` and `\fIutils\fR` tosee them\.
.P
Another crate that depends on this library would need `\fIuse\fR` statements thatbring the items from `\fIart\fR` into scope, specifying the module structure that‚Äôscurrently defined\. Listing 14\-4 shows an example of a crate that uses the`\fIPrimaryColor\fR` and `\fImix\fR` items from the `\fIart\fR` crate:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use art::kinds::PrimaryColor;
use art::utils::mix;

fn main() {
    let red = PrimaryColor::Red;
    let yellow = PrimaryColor::Yellow;
    mix(red, yellow);
}

.EE

.RE
Listing 14\-4: A crate using the `\fIart\fR` crate‚Äôs items withits internal structure exported
.P
The author of the code in Listing 14\-4, which uses the `\fIart\fR` crate, had tofigure out that `\fIPrimaryColor\fR` is in the `\fIkinds\fR` module and `\fImix\fR` is in the`\fIutils\fR` module\. The module structure of the `\fIart\fR` crate is more relevant todevelopers working on the `\fIart\fR` crate than to those using it\. The internalstructure doesn‚Äôt contain any useful information for someone trying tounderstand how to use the `\fIart\fR` crate, but rather causes confusion becausedevelopers who use it have to figure out where to look, and must specify themodule names in the `\fIuse\fR` statements\.
.P
To remove the internal organization from the public API, we can modify the`\fIart\fR` crate code in Listing 14\-3 to add `\fIpub use\fR` statements to re\-export theitems at the top level, as shown in Listing 14\-5:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
//! # Art
//!
//! A library for modeling artistic concepts\.

pub use self::kinds::PrimaryColor;
pub use self::kinds::SecondaryColor;
pub use self::utils::mix;

pub mod kinds {
    // \-\-snip\-\-
#     /// The primary colors according to the RYB color model\.
#     pub enum PrimaryColor {
#         Red,
#         Yellow,
#         Blue,
#     }
# 
#     /// The secondary colors according to the RYB color model\.
#     pub enum SecondaryColor {
#         Orange,
#         Green,
#         Purple,
#     }
}

pub mod utils {
    // \-\-snip\-\-
#     use crate::kinds::*;
# 
#     /// Combines two primary colors in equal amounts to create
#     /// a secondary color\.
#     pub fn mix(c1: PrimaryColor, c2: PrimaryColor) \-> SecondaryColor {
#         SecondaryColor::Orange
#     }
}

.EE

.RE
Listing 14\-5: Adding `\fIpub use\fR` statements to re\-exportitems
.P
The API documentation that `\fIcargo doc\fR` generates for this crate will now listand link re\-exports on the front page, as shown in Figure 14\-4, making the`\fIPrimaryColor\fR` and `\fISecondaryColor\fR` types and the `\fImix\fR` function easier to find\.Figure 14\-4: The front page of the documentation for `\fIart\fR`that lists the re\-exports
.P
The `\fIart\fR` crate users can still see and use the internal structure from Listing14\-3 as demonstrated in Listing 14\-4, or they can use the more convenientstructure in Listing 14\-5, as shown in Listing 14\-6:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use art::mix;
use art::PrimaryColor;

fn main() {
    // \-\-snip\-\-
#     let red = PrimaryColor::Red;
#     let yellow = PrimaryColor::Yellow;
#     mix(red, yellow);
}

.EE

.RE
Listing 14\-6: A program using the re\-exported items fromthe `\fIart\fR` crate
.P
In cases where there are many nested modules, re\-exporting the types at the toplevel with `\fIpub use\fR` can make a significant difference in the experience ofpeople who use the crate\. Another common use of `\fIpub use\fR` is to re\-exportdefinitions of a dependency in the current crate to make that crate'sdefinitions part of your crate‚Äôs public API\.
.P
Creating a useful public API structure is more of an art than a science, andyou can iterate to find the API that works best for your users\. Choosing `\fIpub use\fR` gives you flexibility in how you structure your crate internally anddecouples that internal structure from what you present to your users\. Look atsome of the code of crates you‚Äôve installed to see if their internal structurediffers from their public API\.
.br

.br
\fBSetting Up a Crates\.io Account\fR
.br
================================
.br

.P
Before you can publish any crates, you need to create an account on
.UR https://crates\.io/
.UE
crates\.io and get an API token\. To do so,visit the home page at 
.UR https://crates\.io/
.UE
crates\.io and login via a GitHub account\. (The GitHub account is currently a requirement, butthe site might support other ways of creating an account in the future\.) Onceyou‚Äôre logged in, visit your account settings at
.UR https://crates\.io/me/
.UE
https://crates\.io/me/ and retrieve yourAPI key\. Then run the `\fIcargo login\fR` command with your API key, like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo login abcdefghijklmnopqrstuvwxyz012345

.EE

.RE
.P
This command will inform Cargo of your API token and store it locally in\fI~/\.cargo/credentials\fR\. Note that this token is a \fIsecret\fR: do not share itwith anyone else\. If you do share it with anyone for any reason, you shouldrevoke it and generate a new token on 
.UR https://crates\.io/
.UE
crates\.io\.
.br

.br
\fBAdding Metadata to a New Crate\fR
.br
================================
.br

.P
Let‚Äôs say you have a crate you want to publish\. Before publishing, you‚Äôll needto add some metadata in the `\fI[package]\fR` section of the crate‚Äôs \fICargo\.toml\fRfile\.
.P
Your crate will need a unique name\. While you‚Äôre working on a crate locally,you can name a crate whatever you‚Äôd like\. However, crate names on
.UR https://crates\.io/
.UE
crates\.io are allocated on a first\-come,first\-served basis\. Once a crate name is taken, no one else can publish a cratewith that name\. Before attempting to publish a crate, search for the name youwant to use\. If the name has been used, you will need to find another name andedit the `\fIname\fR` field in the \fICargo\.toml\fR file under the `\fI[package]\fR` section touse the new name for publishing, like so:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "guessing_game"

.EE

.RE
.P
Even if you‚Äôve chosen a unique name, when you run `\fIcargo publish\fR` to publishthe crate at this point, you‚Äôll get a warning and then an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo publish
    Updating crates\.io index
warning: manifest has no description, license, license\-file, documentation, homepage or repository\.
See https://doc\.rust\-lang\.org/cargo/reference/manifest\.html#package\-metadata for more info\.
\-\-snip\-\-
error: failed to publish to registry at https://crates\.io

Caused by:
  the remote server responded with an error: missing or empty metadata fields: description, license\. Please see https://doc\.rust\-lang\.org/cargo/reference/manifest\.html for how to upload metadata

.EE

.RE
.P
This errors because you‚Äôre missing some crucial information: a description andlicense are required so people will know what your crate does and under whatterms they can use it\. In \fICargo\.toml\fR, add a description that's just asentence or two, because it will appear with your crate in search results\. Forthe `\fIlicense\fR` field, you need to give a \fIlicense identifier value\fR\. The 
.UR http://spdx\.org/licenses/
.UE
LinuxFoundation‚Äôs Software Package Data Exchange (SPDX) lists the identifiersyou can use for this value\. For example, to specify that you‚Äôve licensed yourcrate using the MIT License, add the `\fIMIT\fR` identifier:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "guessing_game"
license = "MIT"

.EE

.RE
.P
If you want to use a license that doesn‚Äôt appear in the SPDX, you need to placethe text of that license in a file, include the file in your project, and thenuse `\fIlicense\-file\fR` to specify the name of that file instead of using the`\fIlicense\fR` key\.
.P
Guidance on which license is appropriate for your project is beyond the scopeof this book\. Many people in the Rust community license their projects in thesame way as Rust by using a dual license of `\fIMIT OR Apache\-2\.0\fR`\. This practicedemonstrates that you can also specify multiple license identifiers separatedby `\fIOR\fR` to have multiple licenses for your project\.
.P
With a unique name, the version, your description, and a license added, the\fICargo\.toml\fR file for a project that is ready to publish might look like this:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "guessing_game"
version = "0\.1\.0"
edition = "2021"
description = "A fun game where you guess what number the computer has chosen\."
license = "MIT OR Apache\-2\.0"

[dependencies]

.EE

.RE
.UR https://doc\.rust\-lang\.org/cargo/
.UE
Cargo‚Äôs documentation describes othermetadata you can specify to ensure others can discover and use your crate moreeasily\.
.br

.br
\fBPublishing to Crates\.io\fR
.br
=========================
.br

.P
Now that you‚Äôve created an account, saved your API token, chosen a name foryour crate, and specified the required metadata, you‚Äôre ready to publish!Publishing a crate uploads a specific version to
.UR https://crates\.io/
.UE
crates\.io for others to use\.
.P
Be careful, because a publish is \fIpermanent\fR\. The version can never beoverwritten, and the code cannot be deleted\. One major goal of
.UR https://crates\.io/
.UE
crates\.io is to act as a permanent archiveof code so that builds of all projects that depend on crates from
.UR https://crates\.io/
.UE
crates\.io will continue to work\. Allowingversion deletions would make fulfilling that goal impossible\. However, there isno limit to the number of crate versions you can publish\.
.P
Run the `\fIcargo publish\fR` command again\. It should succeed now:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo publish
    Updating crates\.io index
   Packaging guessing_game v0\.1\.0 (file:///projects/guessing_game)
   Verifying guessing_game v0\.1\.0 (file:///projects/guessing_game)
   Compiling guessing_game v0\.1\.0
(file:///projects/guessing_game/target/package/guessing_game\-0\.1\.0)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.19s
   Uploading guessing_game v0\.1\.0 (file:///projects/guessing_game)

.EE

.RE
.P
Congratulations! You‚Äôve now shared your code with the Rust community, andanyone can easily add your crate as a dependency of their project\.
.br

.br
\fBPublishing a New Version of an Existing Crate\fR
.br
===============================================
.br

.P
When you‚Äôve made changes to your crate and are ready to release a new version,you change the `\fIversion\fR` value specified in your \fICargo\.toml\fR file andrepublish\. Use the 
.UR http://semver\.org/
.UE
Semantic Versioning rules to decide what anappropriate next version number is based on the kinds of changes you‚Äôve made\.Then run `\fIcargo publish\fR` to upload the new version\.
.br

.br
\fBDeprecating Versions from Crates\.io with \fR
.br
===========================================
.br
`\fIcargo yank\fR`
.P
Although you can‚Äôt remove previous versions of a crate, you can prevent anyfuture projects from adding them as a new dependency\. This is useful when acrate version is broken for one reason or another\. In such situations, Cargosupports \fIyanking\fR a crate version\.
.P
Yanking a version prevents new projects from depending on that version whileallowing all existing projects that depend on it to continue\. Essentially, ayank means that all projects with a \fICargo\.lock\fR will not break, and any future\fICargo\.lock\fR files generated will not use the yanked version\.
.P
To yank a version of a crate, in the directory of the crate that you‚Äôvepreviously published, run `\fIcargo yank\fR` and specify which version you want toyank\. For example, if we've published a crate named `\fIguessing_game\fR` version1\.0\.1 and we want to yank it, in the project directory for `\fIguessing_game\fR` we'drun:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo yank \-\-vers 1\.0\.1
    Updating crates\.io index
        Yank guessing_game:1\.0\.1

.EE

.RE
.P
By adding `\fI\-\-undo\fR` to the command, you can also undo a yank and allow projectsto start depending on a version again:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo yank \-\-vers 1\.0\.1 \-\-undo
    Updating crates\.io index
      Unyank guessing_game_:1\.0\.1

.EE

.RE
.P
A yank \fIdoes not\fR delete any code\. It cannot, for example, delete accidentallyuploaded secrets\. If that happens, you must reset those secrets immediately\.
.SH "Cargo Workspaces"

.br

.br
\fBCargo Workspaces\fR
.br
==================
.br

.P
In Chapter 12, we built a package that included a binary crate and a librarycrate\. As your project develops, you might find that the library cratecontinues to get bigger and you want to split your package further intomultiple library crates\. Cargo offers a feature called \fIworkspaces\fR that canhelp manage multiple related packages that are developed in tandem\.
.br

.br
\fBCreating a Workspace\fR
.br
======================
.br

.P
A \fIworkspace\fR is a set of packages that share the same \fICargo\.lock\fR and outputdirectory\. Let‚Äôs make a project using a workspace‚Äîwe‚Äôll use trivial code so wecan concentrate on the structure of the workspace\. There are multiple ways tostructure a workspace, so we'll just show one common way\. We‚Äôll have aworkspace containing a binary and two libraries\. The binary, which will providethe main functionality, will depend on the two libraries\. One library willprovide an `\fIadd_one\fR` function, and a second library an `\fIadd_two\fR` function\.These three crates will be part of the same workspace\. We‚Äôll start by creatinga new directory for the workspace:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ mkdir add
$ cd add

.EE

.RE
.P
Next, in the \fIadd\fR directory, we create the \fICargo\.toml\fR file that willconfigure the entire workspace\. This file won‚Äôt have a `\fI[package]\fR` section\.Instead, it will start with a `\fI[workspace]\fR` section that will allow us to addmembers to the workspace by specifying the path to the package with our binarycrate; in this case, that path is \fIadder\fR:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[workspace]

members = [
    "adder",
]

.EE

.RE
.P
Next, we‚Äôll create the `\fIadder\fR` binary crate by running `\fIcargo new\fR` within the\fIadd\fR directory:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new adder
     Created binary (application) `adder` package

.EE

.RE
.P
At this point, we can build the workspace by running `\fIcargo build\fR`\. The filesin your \fIadd\fR directory should look like this:
.RS
.IP \fBtext\fR 2

.br
.EX
‚îú‚îÄ‚îÄ Cargo\.lock
‚îú‚îÄ‚îÄ Cargo\.toml
‚îú‚îÄ‚îÄ adder
‚îÇ   ‚îú‚îÄ‚îÄ Cargo\.toml
‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ       ‚îî‚îÄ‚îÄ main\.rs
‚îî‚îÄ‚îÄ target

.EE

.RE
.P
The workspace has one \fItarget\fR directory at the top level that the compiledartifacts will be placed into; the `\fIadder\fR` package doesn‚Äôt have its own\fItarget\fR directory\. Even if we were to run `\fIcargo build\fR` from inside the\fIadder\fR directory, the compiled artifacts would still end up in \fIadd/target\fRrather than \fIadd/adder/target\fR\. Cargo structures the \fItarget\fR directory in aworkspace like this because the crates in a workspace are meant to depend oneach other\. If each crate had its own \fItarget\fR directory, each crate would haveto recompile each of the other crates in the workspace to place the artifactsin its own \fItarget\fR directory\. By sharing one \fItarget\fR directory, the cratescan avoid unnecessary rebuilding\.
.br

.br
\fBCreating the Second Package in the Workspace\fR
.br
==============================================
.br

.P
Next, let‚Äôs create another member package in the workspace and call it`\fIadd_one\fR`\. Change the top\-level \fICargo\.toml\fR to specify the \fIadd_one\fR path inthe `\fImembers\fR` list:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[workspace]

members = [
    "adder",
    "add_one",
]

.EE

.RE
.P
Then generate a new library crate named `\fIadd_one\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new add_one \-\-lib
     Created library `add_one` package

.EE

.RE
.P
Your \fIadd\fR directory should now have these directories and files:
.RS
.IP \fBtext\fR 2

.br
.EX
‚îú‚îÄ‚îÄ Cargo\.lock
‚îú‚îÄ‚îÄ Cargo\.toml
‚îú‚îÄ‚îÄ add_one
‚îÇ   ‚îú‚îÄ‚îÄ Cargo\.toml
‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ       ‚îî‚îÄ‚îÄ lib\.rs
‚îú‚îÄ‚îÄ adder
‚îÇ   ‚îú‚îÄ‚îÄ Cargo\.toml
‚îÇ   ‚îî‚îÄ‚îÄ src
‚îÇ       ‚îî‚îÄ‚îÄ main\.rs
‚îî‚îÄ‚îÄ target

.EE

.RE
.P
In the \fIadd_one/src/lib\.rs\fR file, let‚Äôs add an `\fIadd_one\fR` function:Filename: add_one/src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_one(x: i32) \-> i32 {
    x + 1
}

.EE

.RE
.P
Now we can have the `\fIadder\fR` package with our binary depend on the `\fIadd_one\fR`package that has our library\. First, we‚Äôll need to add a path dependency on`\fIadd_one\fR` to \fIadder/Cargo\.toml\fR\.Filename: adder/Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[dependencies]
add_one = { path = "\.\./add_one" }

.EE

.RE
.P
Cargo doesn‚Äôt assume that crates in a workspace will depend on each other, sowe need to be explicit about the dependency relationships\.
.P
Next, let‚Äôs use the `\fIadd_one\fR` function (from the `\fIadd_one\fR` crate) in the`\fIadder\fR` crate\. Open the \fIadder/src/main\.rs\fR file and add a `\fIuse\fR` line at thetop to bring the new `\fIadd_one\fR` library crate into scope\. Then change the `\fImain\fR`function to call the `\fIadd_one\fR` function, as in Listing 14\-7\.Filename: adder/src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use add_one;

fn main() {
    let num = 10;
    println!("Hello, world! {num} plus one is {}!", add_one::add_one(num));
}

.EE

.RE
Listing 14\-7: Using the `\fIadd_one\fR` library crate from the`\fIadder\fR` crate
.P
Let‚Äôs build the workspace by running `\fIcargo build\fR` in the top\-level \fIadd\fRdirectory!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling add_one v0\.1\.0 (file:///projects/add/add_one)
   Compiling adder v0\.1\.0 (file:///projects/add/adder)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.68s

.EE

.RE
.P
To run the binary crate from the \fIadd\fR directory, we can specify whichpackage in the workspace we want to run by using the `\fI\-p\fR` argument and thepackage name with `\fIcargo run\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-p adder
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/adder`
Hello, world! 10 plus one is 11!

.EE

.RE
.P
This runs the code in \fIadder/src/main\.rs\fR, which depends on the `\fIadd_one\fR` crate\.
.br

.br
\fBDepending on an External Package in a Workspace\fR
.br
=================================================
.br

.P
Notice that the workspace has only one \fICargo\.lock\fR file at the top level,rather than having a \fICargo\.lock\fR in each crate‚Äôs directory\. This ensures thatall crates are using the same version of all dependencies\. If we add the `\fIrand\fR`package to the \fIadder/Cargo\.toml\fR and \fIadd_one/Cargo\.toml\fR files, Cargo willresolve both of those to one version of `\fIrand\fR` and record that in the one\fICargo\.lock\fR\. Making all crates in the workspace use the same dependenciesmeans the crates will always be compatible with each other\. Let‚Äôs add the`\fIrand\fR` crate to the `\fI[dependencies]\fR` section in the \fIadd_one/Cargo\.toml\fR fileso we can use the `\fIrand\fR` crate in the `\fIadd_one\fR` crate:Filename: add_one/Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[dependencies]
rand = "0\.8\.3"

.EE

.RE
.P
We can now add `\fIuse rand;\fR` to the \fIadd_one/src/lib\.rs\fR file, and building thewhole workspace by running `\fIcargo build\fR` in the \fIadd\fR directory will bring inand compile the `\fIrand\fR` crate\. We will get one warning because we aren‚Äôtreferring to the `\fIrand\fR` we brought into scope:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
    Updating crates\.io index
  Downloaded rand v0\.8\.3
   \-\-snip\-\-
   Compiling rand v0\.8\.3
   Compiling add_one v0\.1\.0 (file:///projects/add/add_one)
warning: unused import: `rand`
 \-\-> add_one/src/lib\.rs:1:5
  |
1 | use rand;
  |     ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: 1 warning emitted

   Compiling adder v0\.1\.0 (file:///projects/add/adder)
    Finished dev [unoptimized + debuginfo] target(s) in 10\.18s

.EE

.RE
.P
The top\-level \fICargo\.lock\fR now contains information about the dependency of`\fIadd_one\fR` on `\fIrand\fR`\. However, even though `\fIrand\fR` is used somewhere in theworkspace, we can‚Äôt use it in other crates in the workspace unless we add`\fIrand\fR` to their \fICargo\.toml\fR files as well\. For example, if we add `\fIuse rand;\fR`to the \fIadder/src/main\.rs\fR file for the `\fIadder\fR` package, we‚Äôll get an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
  \-\-snip\-\-
   Compiling adder v0\.1\.0 (file:///projects/add/adder)
error[E0432]: unresolved import `rand`
 \-\-> adder/src/main\.rs:2:5
  |
2 | use rand;
  |     ^^^^ no external crate `rand`

.EE

.RE
.P
To fix this, edit the \fICargo\.toml\fR file for the `\fIadder\fR` package and indicatethat `\fIrand\fR` is a dependency for it as well\. Building the `\fIadder\fR` package willadd `\fIrand\fR` to the list of dependencies for `\fIadder\fR` in \fICargo\.lock\fR, but noadditional copies of `\fIrand\fR` will be downloaded\. Cargo has ensured that everycrate in every package in the workspace using the `\fIrand\fR` package will be usingthe same version, saving us space and ensuring that the crates in the workspacewill be compatible with each other\.
.br

.br
\fBAdding a Test to a Workspace\fR
.br
==============================
.br

.P
For another enhancement, let‚Äôs add a test of the `\fIadd_one::add_one\fR` functionwithin the `\fIadd_one\fR` crate:Filename: add_one/src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_one(x: i32) \-> i32 {
    x + 1
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_works() {
        assert_eq!(3, add_one(2));
    }
}

.EE

.RE
.P
Now run `\fIcargo test\fR` in the top\-level \fIadd\fR directory\. Running `\fIcargo test\fR` ina workspace structured like this one will run the tests for all the crates inthe workspace:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling add_one v0\.1\.0 (file:///projects/add/add_one)
   Compiling adder v0\.1\.0 (file:///projects/add/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.27s
     Running target/debug/deps/add_one\-f0253159197f7841

running 1 test
test tests::it_works \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running target/debug/deps/adder\-49979ff40686fa8e

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests add_one

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

.EE

.RE
.P
The first section of the output shows that the `\fIit_works\fR` test in the `\fIadd_one\fR`crate passed\. The next section shows that zero tests were found in the `\fIadder\fR`crate, and then the last section shows zero documentation tests were found inthe `\fIadd_one\fR` crate\.
.P
We can also run tests for one particular crate in a workspace from thetop\-level directory by using the `\fI\-p\fR` flag and specifying the name of the cratewe want to test:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-p add_one
    Finished test [unoptimized + debuginfo] target(s) in 0\.00s
     Running target/debug/deps/add_one\-b3235fea9a156f74

running 1 test
test tests::it_works \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests add_one

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

.EE

.RE
.P
This output shows `\fIcargo test\fR` only ran the tests for the `\fIadd_one\fR` crate anddidn‚Äôt run the `\fIadder\fR` crate tests\.
.P
If you publish the crates in the workspace to 
.UR https://crates\.io/
.UE
crates\.io,each crate in the workspace will need to be published separately\. Like `\fIcargo test\fR`, we can publish a particular crate in our workspace by using the `\fI\-p\fR`flag and specifying the name of the crate we want to publish\.
.P
For additional practice, add an `\fIadd_two\fR` crate to this workspace in a similarway as the `\fIadd_one\fR` crate!
.P
As your project grows, consider using a workspace: it‚Äôs easier to understandsmaller, individual components than one big blob of code\. Furthermore, keepingthe crates in a workspace can make coordination between crates easier if theyare often changed at the same time\.
.SH "Installing Binaries from Crates\.io with cargo install"

.br

.br
\fBInstalling Binaries with \fR
.br
===========================
.br
`\fIcargo install\fR`
.P
The `\fIcargo install\fR` command allows you to install and use binary crateslocally\. This isn‚Äôt intended to replace system packages; it‚Äôs meant to be aconvenient way for Rust developers to install tools that others have shared on
.UR https://crates\.io/
.UE
crates\.io\. Note that you can only installpackages that have binary targets\. A \fIbinary target\fR is the runnable programthat is created if the crate has a \fIsrc/main\.rs\fR file or another file specifiedas a binary, as opposed to a library target that isn‚Äôt runnable on its own butis suitable for including within other programs\. Usually, crates haveinformation in the \fIREADME\fR file about whether a crate is a library, has abinary target, or both\.
.P
All binaries installed with `\fIcargo install\fR` are stored in the installationroot‚Äôs \fIbin\fR folder\. If you installed Rust using \fIrustup\.rs\fR and don‚Äôt have anycustom configurations, this directory will be \fI$HOME/\.cargo/bin\fR\. Ensure thatdirectory is in your `\fI$PATH\fR` to be able to run programs you‚Äôve installed with`\fIcargo install\fR`\.
.P
For example, in Chapter 12 we mentioned that there‚Äôs a Rust implementation ofthe `\fIgrep\fR` tool called `\fIripgrep\fR` for searching files\. To install `\fIripgrep\fR`, wecan run the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo install ripgrep
    Updating crates\.io index
  Downloaded ripgrep v11\.0\.2
  Downloaded 1 crate (243\.3 KB) in 0\.88s
  Installing ripgrep v11\.0\.2
\-\-snip\-\-
   Compiling ripgrep v11\.0\.2
    Finished release [optimized + debuginfo] target(s) in 3m 10s
  Installing ~/\.cargo/bin/rg
   Installed package `ripgrep v11\.0\.2` (executable `rg`)

.EE

.RE
.P
The second\-to\-last line of the output shows the location and the name of theinstalled binary, which in the case of `\fIripgrep\fR` is `\fIrg\fR`\. As long as theinstallation directory is in your `\fI$PATH\fR`, as mentioned previously, you canthen run `\fIrg \-\-help\fR` and start using a faster, rustier tool for searching files!
.SH "Extending Cargo with Custom Commands"

.br

.br
\fBExtending Cargo with Custom Commands\fR
.br
======================================
.br

.P
Cargo is designed so you can extend it with new subcommands without having tomodify Cargo\. If a binary in your `\fI$PATH\fR` is named `\fIcargo\-something\fR`, you canrun it as if it was a Cargo subcommand by running `\fIcargo something\fR`\. Customcommands like this are also listed when you run `\fIcargo \-\-list\fR`\. Being able touse `\fIcargo install\fR` to install extensions and then run them just like thebuilt\-in Cargo tools is a super convenient benefit of Cargo‚Äôs design!
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Sharing code with Cargo and 
.UR https://crates\.io/
.UE
crates\.io ispart of what makes the Rust ecosystem useful for many different tasks\. Rust‚Äôsstandard library is small and stable, but crates are easy to share, use, andimprove on a timeline different from that of the language\. Don‚Äôt be shy aboutsharing code that‚Äôs useful to you on 
.UR https://crates\.io/
.UE
crates\.io; it‚Äôs likely that it will be useful to someone else as well!
.SH "Smart Pointers"

.br

.br
\fBSmart Pointers\fR
.br
================
.br

.P
A \fIpointer\fR is a general concept for a variable that contains an address inmemory\. This address refers to, or ‚Äúpoints at,‚Äù some other data\. The mostcommon kind of pointer in Rust is a reference, which you learned about inChapter 4\. References are indicated by the `\fI&\fR` symbol and borrow the value theypoint to\. They don‚Äôt have any special capabilities other than referring todata, and have no overhead\.\fISmart pointers\fR, on the other hand, are data structures that act like apointer but also have additional metadata and capabilities\. The concept ofsmart pointers isn‚Äôt unique to Rust: smart pointers originated in C++ and existin other languages as well\. Rust has a variety of smart pointers defined in thestandard library that provide functionality beyond that provided by references\.To explore the general concept, we'll look at a couple of different examples ofsmart pointers, including a \fIreference counting\fR smart pointer type\. Thispointer enables you to allow data to have multiple owners by keeping track ofthe number of owners and, when no owners remain, cleaning up the data\.
.P
Rust, with its concept of ownership and borrowing, has an additional differencebetween references and smart pointers: while references only borrow data, inmany cases, smart pointers \fIown\fR the data they point to\.
.P
Though we didn't call them as such at the time, we‚Äôve already encountered a fewsmart pointers in this book, including `\fIString\fR` and `\fIVec<T>\fR` in Chapter 8\. Boththese types count as smart pointers because they own some memory and allow youto manipulate it\. They also have metadata and extra capabilities or guarantees\.`\fIString\fR`, for example, stores its capacity as metadata and has the extraability to ensure its data will always be valid UTF\-8\.
.P
Smart pointers are usually implemented using structs\. Unlike an ordinarystruct, smart pointers implement the `\fIDeref\fR` and `\fIDrop\fR` traits\. The `\fIDeref\fR`trait allows an instance of the smart pointer struct to behave like a referenceso you can write your code to work with either references or smart pointers\.The `\fIDrop\fR` trait allows you to customize the code that's run when an instanceof the smart pointer goes out of scope\. In this chapter, we‚Äôll discuss bothtraits and demonstrate why they‚Äôre important to smart pointers\.
.P
Given that the smart pointer pattern is a general design pattern usedfrequently in Rust, this chapter won‚Äôt cover every existing smart pointer\. Manylibraries have their own smart pointers, and you can even write your own\. We‚Äôllcover the most common smart pointers in the standard library:`\fIBox<T>\fR` for allocating values on the heap`\fIRc<T>\fR`, a reference counting type that enables multiple ownership`\fIRef<T>\fR` and `\fIRefMut<T>\fR`, accessed through `\fIRefCell<T>\fR`, a type that enforcesthe borrowing rules at runtime instead of compile time
.P
In addition, we‚Äôll cover the \fIinterior mutability\fR pattern where an immutabletype exposes an API for mutating an interior value\. We‚Äôll also discuss\fIreference cycles\fR: how they can leak memory and how to prevent them\.
.P
Let‚Äôs dive in!
.SH "Using Box<T> to Point to Data on the Heap"

.br

.br
\fBUsing \fR
.br
========
.br
`\fIBox<T>\fR` to Point to Data on the Heap
.P
The most straightforward smart pointer is a \fIbox\fR, whose type is written`\fIBox<T>\fR`\. Boxes allow you to store data on the heap rather than the stack\. Whatremains on the stack is the pointer to the heap data\. Refer to Chapter 4 toreview the difference between the stack and the heap\.
.P
Boxes don‚Äôt have performance overhead, other than storing their data on theheap instead of on the stack\. But they don‚Äôt have many extra capabilitieseither\. You‚Äôll use them most often in these situations:
.P
When you have a type whose size can‚Äôt be known at compile time and you wantto use a value of that type in a context that requires an exact size
.P
When you have a large amount of data and you want to transfer ownership butensure the data won‚Äôt be copied when you do so
.P
When you want to own a value and you care only that it‚Äôs a type thatimplements a particular trait rather than being of a specific type
.P
We‚Äôll demonstrate the first situation in the 
.UR #enabling\-recursive\-types\-with\-boxes
.UE
‚ÄúEnabling Recursive Types withBoxes‚Äù section\. In thesecond case, transferring ownership of a large amount of data can take a longtime because the data is copied around on the stack\. To improve performance inthis situation, we can store the large amount of data on the heap in a box\.Then, only the small amount of pointer data is copied around on the stack,while the data it references stays in one place on the heap\. The third case isknown as a \fItrait object\fR, and Chapter 17 devotes an entire section, 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
‚ÄúUsingTrait Objects That Allow for Values of Different Types,‚Äù just to that topic\. So what you learn here you‚Äôll apply again inChapter 17!
.br

.br
\fBUsing a \fR
.br
==========
.br
`\fIBox<T>\fR` to Store Data on the Heap
.P
Before we discuss the heap storage use case for `\fIBox<T>\fR`, we‚Äôll cover thesyntax and how to interact with values stored within a `\fIBox<T>\fR`\.
.P
Listing 15\-1 shows how to use a box to store an `\fIi32\fR` value on the heap:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let b = Box::new(5);
    println!("b = {}", b);
}

.EE

.RE
Listing 15\-1: Storing an `\fIi32\fR` value on the heap using abox
.P
We define the variable `\fIb\fR` to have the value of a `\fIBox\fR` that points to thevalue `\fI5\fR`, which is allocated on the heap\. This program will print `\fIb = 5\fR`; inthis case, we can access the data in the box similar to how we would if thisdata were on the stack\. Just like any owned value, when a box goes out ofscope, as `\fIb\fR` does at the end of `\fImain\fR`, it will be deallocated\. Thedeallocation happens both for the box (stored on the stack) and the data itpoints to (stored on the heap)\.
.P
Putting a single value on the heap isn‚Äôt very useful, so you won‚Äôt use boxes bythemselves in this way very often\. Having values like a single `\fIi32\fR` on thestack, where they‚Äôre stored by default, is more appropriate in the majority ofsituations\. Let‚Äôs look at a case where boxes allow us to define types that wewouldn‚Äôt be allowed to if we didn‚Äôt have boxes\.
.br

.br
\fBEnabling Recursive Types with Boxes\fR
.br
=====================================
.br

.P
A value of \fIrecursive type\fR can have another value of the same type as part ofitself\. Recursive types pose an issue because at compile time Rust needs toknow how much space a type takes up\. However, the nesting of values ofrecursive types could theoretically continue infinitely, so Rust can‚Äôt know howmuch space the value needs\. Because boxes have a known size, we can enablerecursive types by inserting a box in the recursive type definition\.
.P
As an example of a recursive type, let‚Äôs explore the \fIcons list\fR\. This is a datatype commonly found in functional programming languages\. The cons list typewe‚Äôll define is straightforward except for the recursion; therefore, theconcepts in the example we‚Äôll work with will be useful any time you get intomore complex situations involving recursive types\.
.br

.br
\fBMore Information About the Cons List\fR
.br
======================================
.br

.P
A \fIcons list\fR is a data structure that comes from the Lisp programming languageand its dialects and is made up of nested pairs, and is the Lisp version of alinked list\. Its name comes from the `\fIcons\fR` function (short for ‚Äúconstructfunction‚Äù) in Lisp that constructs a new pair from its two arguments\. Bycalling `\fIcons\fR` on a pair consisting of a value and another pair, we canconstruct cons lists made up of recursive pairs\.
.P
For example, here's a pseudocode representation of a cons list containing thelist 1, 2, 3 with each pair in parentheses:
.RS
.IP \fBtext\fR 2

.br
.EX
(1, (2, (3, Nil)))

.EE

.RE
.P
Each item in a cons list contains two elements: the value of the current itemand the next item\. The last item in the list contains only a value called `\fINil\fR`without a next item\. A cons list is produced by recursively calling the `\fIcons\fR`function\. The canonical name to denote the base case of the recursion is `\fINil\fR`\.Note that this is not the same as the ‚Äúnull‚Äù or ‚Äúnil‚Äù concept in Chapter 6,which is an invalid or absent value\.
.P
The cons list isn‚Äôt a commonly used data structure in Rust\. Most of the timewhen you have a list of items in Rust, `\fIVec<T>\fR` is a better choice to use\.Other, more complex recursive data types \fIare\fR useful in various situations,but by starting with the cons list in this chapter, we can explore how boxeslet us define a recursive data type without much distraction\.
.P
Listing 15\-2 contains an enum definition for a cons list\. Note that this codewon‚Äôt compile yet because the `\fIList\fR` type doesn‚Äôt have a known size, whichwe‚Äôll demonstrate\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
enum List {
    Cons(i32, List),
    Nil,
}
# 
# fn main() {}

.EE

.RE
Listing 15\-2: The first attempt at defining an enum torepresent a cons list data structure of `\fIi32\fR` values
.P
Note: We‚Äôre implementing a cons list that holds only `\fIi32\fR` values for thepurposes of this example\. We could have implemented it using generics, as wediscussed in Chapter 10, to define a cons list type that could store values ofany type\.
.P
Using the `\fIList\fR` type to store the list `\fI1, 2, 3\fR` would look like the code inListing 15\-3:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# enum List {
#     Cons(i32, List),
#     Nil,
# }
# 
use crate::List::{Cons, Nil};

fn main() {
    let list = Cons(1, Cons(2, Cons(3, Nil)));
}

.EE

.RE
Listing 15\-3: Using the `\fIList\fR` enum to store the list `\fI1, 2, 3\fR`
.P
The first `\fICons\fR` value holds `\fI1\fR` and another `\fIList\fR` value\. This `\fIList\fR` value isanother `\fICons\fR` value that holds `\fI2\fR` and another `\fIList\fR` value\. This `\fIList\fR` valueis one more `\fICons\fR` value that holds `\fI3\fR` and a `\fIList\fR` value, which is finally`\fINil\fR`, the non\-recursive variant that signals the end of the list\.
.P
If we try to compile the code in Listing 15\-3, we get the error shown inListing 15\-4:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
error[E0072]: recursive type `List` has infinite size
 \-\-> src/main\.rs:1:1
  |
1 | enum List {
  | ^^^^^^^^^ recursive type has infinite size
2 |     Cons(i32, List),
  |               \-\-\-\- recursive without indirection
  |
help: insert some indirection (e\.g\., a `Box`, `Rc`, or `&`) to make `List` representable
  |
2 |     Cons(i32, Box<List>),
  |               ++++    +

error[E0391]: cycle detected when computing drop\-check constraints for `List`
 \-\-> src/main\.rs:1:1
  |
1 | enum List {
  | ^^^^^^^^^
  |
  = note: \.\.\.which immediately requires computing drop\-check constraints for `List` again
  = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst }, value: List } }`

Some errors have detailed explanations: E0072, E0391\.
For more information about an error, try `rustc \-\-explain E0072`\.
error: could not compile `cons\-list` due to 2 previous errors

.EE

.RE
Listing 15\-4: The error we get when attempting to definea recursive enum
.P
The error shows this type ‚Äúhas infinite size\.‚Äù The reason is that we‚Äôve defined`\fIList\fR` with a variant that is recursive: it holds another value of itselfdirectly\. As a result, Rust can‚Äôt figure out how much space it needs to store a`\fIList\fR` value\. Let‚Äôs break down why we get this error\. First, we'll look at howRust decides how much space it needs to store a value of a non\-recursive type\.
.br

.br
\fBComputing the Size of a Non\-Recursive Type\fR
.br
============================================
.br

.P
Recall the `\fIMessage\fR` enum we defined in Listing 6\-2 when we discussed enumdefinitions in Chapter 6:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}
# 
# fn main() {}

.EE

.RE
.P
To determine how much space to allocate for a `\fIMessage\fR` value, Rust goesthrough each of the variants to see which variant needs the most space\. Rustsees that `\fIMessage::Quit\fR` doesn‚Äôt need any space, `\fIMessage::Move\fR` needs enoughspace to store two `\fIi32\fR` values, and so forth\. Because only one variant will beused, the most space a `\fIMessage\fR` value will need is the space it would take tostore the largest of its variants\.
.P
Contrast this with what happens when Rust tries to determine how much space arecursive type like the `\fIList\fR` enum in Listing 15\-2 needs\. The compiler startsby looking at the `\fICons\fR` variant, which holds a value of type `\fIi32\fR` and a valueof type `\fIList\fR`\. Therefore, `\fICons\fR` needs an amount of space equal to the size ofan `\fIi32\fR` plus the size of a `\fIList\fR`\. To figure out how much memory the `\fIList\fR`type needs, the compiler looks at the variants, starting with the `\fICons\fR`variant\. The `\fICons\fR` variant holds a value of type `\fIi32\fR` and a value of type`\fIList\fR`, and this process continues infinitely, as shown in Figure 15\-1\.Figure 15\-1: An infinite `\fIList\fR` consisting of infinite`\fICons\fR` variants
.br

.br
\fBUsing \fR
.br
========
.br
`\fIBox<T>\fR` to Get a Recursive Type with a Known Size
.P
Because Rust can‚Äôt figure out how much space to allocate for recursivelydefined types, the compiler gives an error with this helpful suggestion:
.RS
.IP \fBtext\fR 2

.br
.EX
help: insert some indirection (e\.g\., a `Box`, `Rc`, or `&`) to make `List` representable
  |
2 |     Cons(i32, Box<List>),
  |               ^^^^    ^

.EE

.RE
.P
In this suggestion, ‚Äúindirection‚Äù means that instead of storing a valuedirectly, we should change the data structure to store the value indirectly bystoring a pointer to the value instead\.
.P
Because a `\fIBox<T>\fR` is a pointer, Rust always knows how much space a `\fIBox<T>\fR`needs: a pointer‚Äôs size doesn‚Äôt change based on the amount of data it‚Äôspointing to\. This means we can put a `\fIBox<T>\fR` inside the `\fICons\fR` variant insteadof another `\fIList\fR` value directly\. The `\fIBox<T>\fR` will point to the next `\fIList\fR`value that will be on the heap rather than inside the `\fICons\fR` variant\.Conceptually, we still have a list, created with lists holding other lists, butthis implementation is now more like placing the items next to one anotherrather than inside one another\.
.P
We can change the definition of the `\fIList\fR` enum in Listing 15\-2 and the usageof the `\fIList\fR` in Listing 15\-3 to the code in Listing 15\-5, which will compile:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
enum List {
    Cons(i32, Box<List>),
    Nil,
}

use crate::List::{Cons, Nil};

fn main() {
    let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));
}

.EE

.RE
Listing 15\-5: Definition of `\fIList\fR` that uses `\fIBox<T>\fR` inorder to have a known size
.P
The `\fICons\fR` variant needs the size of an `\fIi32\fR` plus the space to store thebox‚Äôs pointer data\. The `\fINil\fR` variant stores no values, so it needs less spacethan the `\fICons\fR` variant\. We now know that any `\fIList\fR` value will take up thesize of an `\fIi32\fR` plus the size of a box‚Äôs pointer data\. By using a box, we‚Äôvebroken the infinite, recursive chain, so the compiler can figure out the sizeit needs to store a `\fIList\fR` value\. Figure 15\-2 shows what the `\fICons\fR` variantlooks like now\.Figure 15\-2: A `\fIList\fR` that is not infinitely sizedbecause `\fICons\fR` holds a `\fIBox\fR`
.P
Boxes provide only the indirection and heap allocation; they don‚Äôt have anyother special capabilities, like those we‚Äôll see with the other smart pointertypes\. They also don‚Äôt have the performance overhead that these specialcapabilities incur, so they can be useful in cases like the cons list where theindirection is the only feature we need\. We‚Äôll look at more use cases for boxesin Chapter 17, too\.
.P
The `\fIBox<T>\fR` type is a smart pointer because it implements the `\fIDeref\fR` trait,which allows `\fIBox<T>\fR` values to be treated like references\. When a `\fIBox<T>\fR`value goes out of scope, the heap data that the box is pointing to is cleanedup as well because of the `\fIDrop\fR` trait implementation\. These two traits will beeven more important to the functionality provided by the other smart pointertypes we‚Äôll discuss in the rest of this chapter\. Let‚Äôs explore these two traitsin more detail\.
.SH "Treating Smart Pointers Like Regular References with the Deref Trait"

.br

.br
\fBTreating Smart Pointers Like Regular References with the \fR
.br
===========================================================
.br
`\fIDeref\fR` Trait
.P
Implementing the `\fIDeref\fR` trait allows you to customize the behavior of the\fIdereference operator\fR `\fI*\fR` (not to be confused with the multiplication or globoperator)\. By implementing `\fIDeref\fR` in such a way that a smart pointer can betreated like a regular reference, you can write code that operates onreferences and use that code with smart pointers too\.
.P
Let‚Äôs first look at how the dereference operator works with regular references\.Then we‚Äôll try to define a custom type that behaves like `\fIBox<T>\fR`, and see whythe dereference operator doesn‚Äôt work like a reference on our newly definedtype\. We‚Äôll explore how implementing the `\fIDeref\fR` trait makes it possible forsmart pointers to work in ways similar to references\. Then we‚Äôll look atRust‚Äôs \fIderef coercion\fR feature and how it lets us work with either referencesor smart pointers\.
.P
Note: there‚Äôs one big difference between the `\fIMyBox<T>\fR` type we‚Äôre about tobuild and the real `\fIBox<T>\fR`: our version will not store its data on the heap\.We are focusing this example on `\fIDeref\fR`, so where the data is actually storedis less important than the pointer\-like behavior\.
.br

.br
\fBFollowing the Pointer to the Value\fR
.br
====================================
.br

.P
A regular reference is a type of pointer, and one way to think of a pointer isas an arrow to a value stored somewhere else\. In Listing 15\-6, we create areference to an `\fIi32\fR` value and then use the dereference operator to follow thereference to the value:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 5;
    let y = &x;

    assert_eq!(5, x);
    assert_eq!(5, *y);
}

.EE

.RE
Listing 15\-6: Using the dereference operator to follow areference to an `\fIi32\fR` value
.P
The variable `\fIx\fR` holds an `\fIi32\fR` value `\fI5\fR`\. We set `\fIy\fR` equal to a reference to`\fIx\fR`\. We can assert that `\fIx\fR` is equal to `\fI5\fR`\. However, if we want to make anassertion about the value in `\fIy\fR`, we have to use `\fI*y\fR` to follow the referenceto the value it‚Äôs pointing to (hence \fIdereference\fR) so the compiler can comparethe actual value\. Once we dereference `\fIy\fR`, we have access to the integer value`\fIy\fR` is pointing to that we can compare with `\fI5\fR`\.
.P
If we tried to write `\fIassert_eq!(5, y);\fR` instead, we would get this compilationerror:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling deref\-example v0\.1\.0 (file:///projects/deref\-example)
error[E0277]: can't compare `{integer}` with `&{integer}`
 \-\-> src/main\.rs:6:5
  |
6 |     assert_eq!(5, y);
  |     ^^^^^^^^^^^^^^^^ no implementation for `{integer} == &{integer}`
  |
  = help: the trait `PartialEq<&{integer}>` is not implemented for `{integer}`
  = help: the following other types implement trait `PartialEq<Rhs>`:
            f32
            f64
            i128
            i16
            i32
            i64
            i8
            isize
          and 6 others
  = note: this error originates in the macro `assert_eq` (in Nightly builds, run with \-Z macro\-backtrace for more info)

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `deref\-example` due to previous error

.EE

.RE
.P
Comparing a number and a reference to a number isn‚Äôt allowed because they‚Äôredifferent types\. We must use the dereference operator to follow the referenceto the value it‚Äôs pointing to\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIBox<T>\fR` Like a Reference
.P
We can rewrite the code in Listing 15\-6 to use a `\fIBox<T>\fR` instead of areference; the dereference operator used on the `\fIBox<T>\fR` in Listing 15\-7functions in the same way as the dereference operator used on the reference inListing 15\-6:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 5;
    let y = Box::new(x);

    assert_eq!(5, x);
    assert_eq!(5, *y);
}

.EE

.RE
Listing 15\-7: Using the dereference operator on a`\fIBox<i32>\fR`
.P
The main difference between Listing 15\-7 and Listing 15\-6 is that here we set`\fIy\fR` to be an instance of a `\fIBox<T>\fR` pointing to a copied value of `\fIx\fR` ratherthan a reference pointing to the value of `\fIx\fR`\. In the last assertion, we canuse the dereference operator to follow the pointer of the `\fIBox<T>\fR` in the sameway that we did when `\fIy\fR` was a reference\. Next, we‚Äôll explore what is specialabout `\fIBox<T>\fR` that enables us to use the dereference operator by defining ourown type\.
.br

.br
\fBDefining Our Own Smart Pointer\fR
.br
================================
.br

.P
Let‚Äôs build a smart pointer similar to the `\fIBox<T>\fR` type provided by thestandard library to experience how smart pointers behave differently fromreferences by default\. Then we‚Äôll look at how to add the ability to use thedereference operator\.
.P
The `\fIBox<T>\fR` type is ultimately defined as a tuple struct with one element, soListing 15\-8 defines a `\fIMyBox<T>\fR` type in the same way\. We‚Äôll also define a`\fInew\fR` function to match the `\fInew\fR` function defined on `\fIBox<T>\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct MyBox<T>(T);

impl<T> MyBox<T> {
    fn new(x: T) \-> MyBox<T> {
        MyBox(x)
    }
}
# 
# fn main() {}

.EE

.RE
Listing 15\-8: Defining a `\fIMyBox<T>\fR` type
.P
We define a struct named `\fIMyBox\fR` and declare a generic parameter `\fIT\fR`, becausewe want our type to hold values of any type\. The `\fIMyBox\fR` type is a tuple structwith one element of type `\fIT\fR`\. The `\fIMyBox::new\fR` function takes one parameter oftype `\fIT\fR` and returns a `\fIMyBox\fR` instance that holds the value passed in\.
.P
Let‚Äôs try adding the `\fImain\fR` function in Listing 15\-7 to Listing 15\-8 andchanging it to use the `\fIMyBox<T>\fR` type we‚Äôve defined instead of `\fIBox<T>\fR`\. Thecode in Listing 15\-9 won‚Äôt compile because Rust doesn‚Äôt know how to dereference`\fIMyBox\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# struct MyBox<T>(T);
# 
# impl<T> MyBox<T> {
#     fn new(x: T) \-> MyBox<T> {
#         MyBox(x)
#     }
# }
# 
fn main() {
    let x = 5;
    let y = MyBox::new(x);

    assert_eq!(5, x);
    assert_eq!(5, *y);
}

.EE

.RE
Listing 15\-9: Attempting to use `\fIMyBox<T>\fR` in the sameway we used references and `\fIBox<T>\fR`
.P
Here‚Äôs the resulting compilation error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling deref\-example v0\.1\.0 (file:///projects/deref\-example)
error[E0614]: type `MyBox<{integer}>` cannot be dereferenced
  \-\-> src/main\.rs:14:19
   |
14 |     assert_eq!(5, *y);
   |                   ^^

For more information about this error, try `rustc \-\-explain E0614`\.
error: could not compile `deref\-example` due to previous error

.EE

.RE
.P
Our `\fIMyBox<T>\fR` type can‚Äôt be dereferenced because we haven‚Äôt implemented thatability on our type\. To enable dereferencing with the `\fI*\fR` operator, weimplement the `\fIDeref\fR` trait\.
.br

.br
\fBTreating a Type Like a Reference by Implementing the \fR
.br
=======================================================
.br
`\fIDeref\fR` Trait
.P
As discussed in the 
.UR ch10\-02\-traits\.html#implementing\-a\-trait\-on\-a\-type
.UE
‚ÄúImplementing a Trait on a Type‚Äù section of Chapter 10, to implement a trait, we need to provideimplementations for the trait‚Äôs required methods\. The `\fIDeref\fR` trait, providedby the standard library, requires us to implement one method named `\fIderef\fR` thatborrows `\fIself\fR` and returns a reference to the inner data\. Listing 15\-10contains an implementation of `\fIDeref\fR` to add to the definition of `\fIMyBox\fR`:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::ops::Deref;

impl<T> Deref for MyBox<T> {
    type Target = T;

    fn deref(&self) \-> &Self::Target {
        &self\.0
    }
}
# 
# struct MyBox<T>(T);
# 
# impl<T> MyBox<T> {
#     fn new(x: T) \-> MyBox<T> {
#         MyBox(x)
#     }
# }
# 
# fn main() {
#     let x = 5;
#     let y = MyBox::new(x);
# 
#     assert_eq!(5, x);
#     assert_eq!(5, *y);
# }

.EE

.RE
Listing 15\-10: Implementing `\fIDeref\fR` on `\fIMyBox<T>\fR`
.P
The `\fItype Target = T;\fR` syntax defines an associated type for the `\fIDeref\fR`trait to use\. Associated types are a slightly different way of declaring ageneric parameter, but you don‚Äôt need to worry about them for now; we‚Äôll coverthem in more detail in Chapter 19\.
.P
We fill in the body of the `\fIderef\fR` method with `\fI&self\.0\fR` so `\fIderef\fR` returns areference to the value we want to access with the `\fI*\fR` operator; recall from the
.UR ch05\-01\-defining\-structs\.html#using\-tuple\-structs\-without\-named\-fields\-to\-create\-different\-types
.UE
‚ÄúUsing Tuple Structs without Named Fields to Create DifferentTypes‚Äù section of Chapter 5 that `\fI\.0\fR` accessesthe first value in a tuple struct\. The `\fImain\fR` function in Listing 15\-9 thatcalls `\fI*\fR` on the `\fIMyBox<T>\fR` value now compiles, and the assertions pass!
.P
Without the `\fIDeref\fR` trait, the compiler can only dereference `\fI&\fR` references\.The `\fIderef\fR` method gives the compiler the ability to take a value of any typethat implements `\fIDeref\fR` and call the `\fIderef\fR` method to get a `\fI&\fR` reference thatit knows how to dereference\.
.P
When we entered `\fI*y\fR` in Listing 15\-9, behind the scenes Rust actually ran thiscode:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
*(y\.deref())

.EE

.RE
.P
Rust substitutes the `\fI*\fR` operator with a call to the `\fIderef\fR` method and then aplain dereference so we don‚Äôt have to think about whether or not we need tocall the `\fIderef\fR` method\. This Rust feature lets us write code that functionsidentically whether we have a regular reference or a type that implements`\fIDeref\fR`\.
.P
The reason the `\fIderef\fR` method returns a reference to a value, and that theplain dereference outside the parentheses in `\fI*(y\.deref())\fR` is still necessary,is to do with the ownership system\. If the `\fIderef\fR` method returned the valuedirectly instead of a reference to the value, the value would be moved out of`\fIself\fR`\. We don‚Äôt want to take ownership of the inner value inside `\fIMyBox<T>\fR` inthis case or in most cases where we use the dereference operator\.
.P
Note that the `\fI*\fR` operator is replaced with a call to the `\fIderef\fR` method andthen a call to the `\fI*\fR` operator just once, each time we use a `\fI*\fR` in our code\.Because the substitution of the `\fI*\fR` operator does not recurse infinitely, weend up with data of type `\fIi32\fR`, which matches the `\fI5\fR` in `\fIassert_eq!\fR` inListing 15\-9\.
.br

.br
\fBImplicit Deref Coercions with Functions and Methods\fR
.br
=====================================================
.br
\fIDeref coercion\fR converts a reference to a type that implements the `\fIDeref\fR`trait into a reference to another type\. For example, deref coercion can convert`\fI&String\fR` to `\fI&str\fR` because `\fIString\fR` implements the `\fIDeref\fR` trait such that itreturns `\fI&str\fR`\. Deref coercion is a convenience Rust performs on arguments tofunctions and methods, and works only on types that implement the `\fIDeref\fR`trait\. It happens automatically when we pass a reference to a particular type‚Äôsvalue as an argument to a function or method that doesn‚Äôt match the parametertype in the function or method definition\. A sequence of calls to the `\fIderef\fR`method converts the type we provided into the type the parameter needs\.
.P
Deref coercion was added to Rust so that programmers writing function andmethod calls don‚Äôt need to add as many explicit references and dereferenceswith `\fI&\fR` and `\fI*\fR`\. The deref coercion feature also lets us write more code thatcan work for either references or smart pointers\.
.P
To see deref coercion in action, let‚Äôs use the `\fIMyBox<T>\fR` type we defined inListing 15\-8 as well as the implementation of `\fIDeref\fR` that we added in Listing15\-10\. Listing 15\-11 shows the definition of a function that has a string sliceparameter:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn hello(name: &str) {
    println!("Hello, {name}!");
}
# 
# fn main() {}

.EE

.RE
Listing 15\-11: A `\fIhello\fR` function that has the parameter`\fIname\fR` of type `\fI&str\fR`
.P
We can call the `\fIhello\fR` function with a string slice as an argument, such as`\fIhello("Rust");\fR` for example\. Deref coercion makes it possible to call `\fIhello\fR`with a reference to a value of type `\fIMyBox<String>\fR`, as shown in Listing 15\-12:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::ops::Deref;
# 
# impl<T> Deref for MyBox<T> {
#     type Target = T;
# 
#     fn deref(&self) \-> &T {
#         &self\.0
#     }
# }
# 
# struct MyBox<T>(T);
# 
# impl<T> MyBox<T> {
#     fn new(x: T) \-> MyBox<T> {
#         MyBox(x)
#     }
# }
# 
# fn hello(name: &str) {
#     println!("Hello, {name}!");
# }
# 
fn main() {
    let m = MyBox::new(String::from("Rust"));
    hello(&m);
}

.EE

.RE
Listing 15\-12: Calling `\fIhello\fR` with a reference to a`\fIMyBox<String>\fR` value, which works because of deref coercion
.P
Here we‚Äôre calling the `\fIhello\fR` function with the argument `\fI&m\fR`, which is areference to a `\fIMyBox<String>\fR` value\. Because we implemented the `\fIDeref\fR` traiton `\fIMyBox<T>\fR` in Listing 15\-10, Rust can turn `\fI&MyBox<String>\fR` into `\fI&String\fR`by calling `\fIderef\fR`\. The standard library provides an implementation of `\fIDeref\fR`on `\fIString\fR` that returns a string slice, and this is in the API documentationfor `\fIDeref\fR`\. Rust calls `\fIderef\fR` again to turn the `\fI&String\fR` into `\fI&str\fR`, whichmatches the `\fIhello\fR` function‚Äôs definition\.
.P
If Rust didn‚Äôt implement deref coercion, we would have to write the code inListing 15\-13 instead of the code in Listing 15\-12 to call `\fIhello\fR` with a valueof type `\fI&MyBox<String>\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::ops::Deref;
# 
# impl<T> Deref for MyBox<T> {
#     type Target = T;
# 
#     fn deref(&self) \-> &T {
#         &self\.0
#     }
# }
# 
# struct MyBox<T>(T);
# 
# impl<T> MyBox<T> {
#     fn new(x: T) \-> MyBox<T> {
#         MyBox(x)
#     }
# }
# 
# fn hello(name: &str) {
#     println!("Hello, {name}!");
# }
# 
fn main() {
    let m = MyBox::new(String::from("Rust"));
    hello(&(*m)[\.\.]);
}

.EE

.RE
Listing 15\-13: The code we would have to write if Rustdidn‚Äôt have deref coercion
.P
The `\fI(*m)\fR` dereferences the `\fIMyBox<String>\fR` into a `\fIString\fR`\. Then the `\fI&\fR` and`\fI[\.\.]\fR` take a string slice of the `\fIString\fR` that is equal to the whole string tomatch the signature of `\fIhello\fR`\. This code without deref coercions is harder toread, write, and understand with all of these symbols involved\. Deref coercionallows Rust to handle these conversions for us automatically\.
.P
When the `\fIDeref\fR` trait is defined for the types involved, Rust will analyze thetypes and use `\fIDeref::deref\fR` as many times as necessary to get a reference tomatch the parameter‚Äôs type\. The number of times that `\fIDeref::deref\fR` needs to beinserted is resolved at compile time, so there is no runtime penalty for takingadvantage of deref coercion!
.br

.br
\fBHow Deref Coercion Interacts with Mutability\fR
.br
==============================================
.br

.P
Similar to how you use the `\fIDeref\fR` trait to override the `\fI*\fR` operator onimmutable references, you can use the `\fIDerefMut\fR` trait to override the `\fI*\fR`operator on mutable references\.
.P
Rust does deref coercion when it finds types and trait implementations in threecases:
.P
From `\fI&T\fR` to `\fI&U\fR` when `\fIT: Deref<Target=U>\fR`
.P
From `\fI&mut T\fR` to `\fI&mut U\fR` when `\fIT: DerefMut<Target=U>\fR`
.P
From `\fI&mut T\fR` to `\fI&U\fR` when `\fIT: Deref<Target=U>\fR`
.P
The first two cases are the same as each other except that the secondimplements mutability\. The first case states that if you have a `\fI&T\fR`, and `\fIT\fR`implements `\fIDeref\fR` to some type `\fIU\fR`, you can get a `\fI&U\fR` transparently\. Thesecond case states that the same deref coercion happens for mutable references\.
.P
The third case is trickier: Rust will also coerce a mutable reference to animmutable one\. But the reverse is \fInot\fR possible: immutable references willnever coerce to mutable references\. Because of the borrowing rules, if you havea mutable reference, that mutable reference must be the only reference to thatdata (otherwise, the program wouldn‚Äôt compile)\. Converting one mutablereference to one immutable reference will never break the borrowing rules\.Converting an immutable reference to a mutable reference would require that theinitial immutable reference is the only immutable reference to that data, butthe borrowing rules don‚Äôt guarantee that\. Therefore, Rust can‚Äôt make theassumption that converting an immutable reference to a mutable reference ispossible\.
.SH "Running Code on Cleanup with the Drop Trait"

.br

.br
\fBRunning Code on Cleanup with the \fR
.br
===================================
.br
`\fIDrop\fR` Trait
.P
The second trait important to the smart pointer pattern is `\fIDrop\fR`, which letsyou customize what happens when a value is about to go out of scope\. You canprovide an implementation for the `\fIDrop\fR` trait on any type, and that code canbe used to release resources like files or network connections\.
.P
We‚Äôre introducing `\fIDrop\fR` in the context of smart pointers because thefunctionality of the `\fIDrop\fR` trait is almost always used when implementing asmart pointer\. For example, when a `\fIBox<T>\fR` is dropped it will deallocate thespace on the heap that the box points to\.
.P
In some languages, for some types, the programmer must call code to free memoryor resources every time they finish using an instance of those types\. Examplesinclude file handles, sockets, or locks\. If they forget, the system mightbecome overloaded and crash\. In Rust, you can specify that a particular bit ofcode be run whenever a value goes out of scope, and the compiler will insertthis code automatically\. As a result, you don‚Äôt need to be careful aboutplacing cleanup code everywhere in a program that an instance of a particulartype is finished with‚Äîyou still won‚Äôt leak resources!
.P
You specify the code to run when a value goes out of scope by implementing the`\fIDrop\fR` trait\. The `\fIDrop\fR` trait requires you to implement one method named`\fIdrop\fR` that takes a mutable reference to `\fIself\fR`\. To see when Rust calls `\fIdrop\fR`,let‚Äôs implement `\fIdrop\fR` with `\fIprintln!\fR` statements for now\.
.P
Listing 15\-14 shows a `\fICustomSmartPointer\fR` struct whose only customfunctionality is that it will print `\fIDropping CustomSmartPointer!\fR` when theinstance goes out of scope, to show when Rust runs the `\fIdrop\fR` function\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct CustomSmartPointer {
    data: String,
}

impl Drop for CustomSmartPointer {
    fn drop(&mut self) {
        println!("Dropping CustomSmartPointer with data `{}`!", self\.data);
    }
}

fn main() {
    let c = CustomSmartPointer {
        data: String::from("my stuff"),
    };
    let d = CustomSmartPointer {
        data: String::from("other stuff"),
    };
    println!("CustomSmartPointers created\.");
}

.EE

.RE
Listing 15\-14: A `\fICustomSmartPointer\fR` struct thatimplements the `\fIDrop\fR` trait where we would put our cleanup code
.P
The `\fIDrop\fR` trait is included in the prelude, so we don‚Äôt need to bring it intoscope\. We implement the `\fIDrop\fR` trait on `\fICustomSmartPointer\fR` and provide animplementation for the `\fIdrop\fR` method that calls `\fIprintln!\fR`\. The body of the`\fIdrop\fR` function is where you would place any logic that you wanted to run whenan instance of your type goes out of scope\. We‚Äôre printing some text here todemonstrate visually when Rust will call `\fIdrop\fR`\.
.P
In `\fImain\fR`, we create two instances of `\fICustomSmartPointer\fR` and then print`\fICustomSmartPointers created\fR`\. At the end of `\fImain\fR`, our instances of`\fICustomSmartPointer\fR` will go out of scope, and Rust will call the code we putin the `\fIdrop\fR` method, printing our final message\. Note that we didn‚Äôt need tocall the `\fIdrop\fR` method explicitly\.
.P
When we run this program, we‚Äôll see the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling drop\-example v0\.1\.0 (file:///projects/drop\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.60s
     Running `target/debug/drop\-example`
CustomSmartPointers created\.
Dropping CustomSmartPointer with data `other stuff`!
Dropping CustomSmartPointer with data `my stuff`!

.EE

.RE
.P
Rust automatically called `\fIdrop\fR` for us when our instances went out of scope,calling the code we specified\. Variables are dropped in the reverse order oftheir creation, so `\fId\fR` was dropped before `\fIc\fR`\. This example's purpose is togive you a visual guide to how the `\fIdrop\fR` method works; usually you wouldspecify the cleanup code that your type needs to run rather than a printmessage\.
.br

.br
\fBDropping a Value Early with \fR
.br
==============================
.br
`\fIstd::mem::drop\fR`
.P
Unfortunately, it‚Äôs not straightforward to disable the automatic `\fIdrop\fR`functionality\. Disabling `\fIdrop\fR` isn‚Äôt usually necessary; the whole point of the`\fIDrop\fR` trait is that it‚Äôs taken care of automatically\. Occasionally, however,you might want to clean up a value early\. One example is when using smartpointers that manage locks: you might want to force the `\fIdrop\fR` method thatreleases the lock so that other code in the same scope can acquire the lock\.Rust doesn‚Äôt let you call the `\fIDrop\fR` trait‚Äôs `\fIdrop\fR` method manually; insteadyou have to call the `\fIstd::mem::drop\fR` function provided by the standard libraryif you want to force a value to be dropped before the end of its scope\.
.P
If we try to call the `\fIDrop\fR` trait‚Äôs `\fIdrop\fR` method manually by modifying the`\fImain\fR` function from Listing 15\-14, as shown in Listing 15\-15, we‚Äôll get acompiler error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# struct CustomSmartPointer {
#     data: String,
# }
# 
# impl Drop for CustomSmartPointer {
#     fn drop(&mut self) {
#         println!("Dropping CustomSmartPointer with data `{}`!", self\.data);
#     }
# }
# 
fn main() {
    let c = CustomSmartPointer {
        data: String::from("some data"),
    };
    println!("CustomSmartPointer created\.");
    c\.drop();
    println!("CustomSmartPointer dropped before the end of main\.");
}

.EE

.RE
Listing 15\-15: Attempting to call the `\fIdrop\fR` method fromthe `\fIDrop\fR` trait manually to clean up early
.P
When we try to compile this code, we‚Äôll get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling drop\-example v0\.1\.0 (file:///projects/drop\-example)
error[E0040]: explicit use of destructor method
  \-\-> src/main\.rs:16:7
   |
16 |     c\.drop();
   |     \-\-^^^^\-\-
   |     | |
   |     | explicit destructor calls not allowed
   |     help: consider using `drop` function: `drop(c)`

For more information about this error, try `rustc \-\-explain E0040`\.
error: could not compile `drop\-example` due to previous error

.EE

.RE
.P
This error message states that we‚Äôre not allowed to explicitly call `\fIdrop\fR`\. Theerror message uses the term \fIdestructor\fR, which is the general programming termfor a function that cleans up an instance\. A \fIdestructor\fR is analogous to a\fIconstructor\fR, which creates an instance\. The `\fIdrop\fR` function in Rust is oneparticular destructor\.
.P
Rust doesn‚Äôt let us call `\fIdrop\fR` explicitly because Rust would stillautomatically call `\fIdrop\fR` on the value at the end of `\fImain\fR`\. This would cause a\fIdouble free\fR error because Rust would be trying to clean up the same valuetwice\.
.P
We can‚Äôt disable the automatic insertion of `\fIdrop\fR` when a value goes out ofscope, and we can‚Äôt call the `\fIdrop\fR` method explicitly\. So, if we need to forcea value to be cleaned up early, we use the `\fIstd::mem::drop\fR` function\.
.P
The `\fIstd::mem::drop\fR` function is different from the `\fIdrop\fR` method in the `\fIDrop\fR`trait\. We call it by passing as an argument the value we want to force drop\.The function is in the prelude, so we can modify `\fImain\fR` in Listing 15\-15 tocall the `\fIdrop\fR` function, as shown in Listing 15\-16:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# struct CustomSmartPointer {
#     data: String,
# }
# 
# impl Drop for CustomSmartPointer {
#     fn drop(&mut self) {
#         println!("Dropping CustomSmartPointer with data `{}`!", self\.data);
#     }
# }
# 
fn main() {
    let c = CustomSmartPointer {
        data: String::from("some data"),
    };
    println!("CustomSmartPointer created\.");
    drop(c);
    println!("CustomSmartPointer dropped before the end of main\.");
}

.EE

.RE
Listing 15\-16: Calling `\fIstd::mem::drop\fR` to explicitlydrop a value before it goes out of scope
.P
Running this code will print the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling drop\-example v0\.1\.0 (file:///projects/drop\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.73s
     Running `target/debug/drop\-example`
CustomSmartPointer created\.
Dropping CustomSmartPointer with data `some data`!
CustomSmartPointer dropped before the end of main\.

.EE

.RE
.P
The text `\fIDropping CustomSmartPointer with data `some data`!\fR` is printedbetween the `\fICustomSmartPointer created\.\fR` and `\fICustomSmartPointer dropped before the end of main\.\fR` text, showing that the `\fIdrop\fR` method code is called todrop `\fIc\fR` at that point\.
.P
You can use code specified in a `\fIDrop\fR` trait implementation in many ways tomake cleanup convenient and safe: for instance, you could use it to create yourown memory allocator! With the `\fIDrop\fR` trait and Rust‚Äôs ownership system, youdon‚Äôt have to remember to clean up because Rust does it automatically\.
.P
You also don‚Äôt have to worry about problems resulting from accidentallycleaning up values still in use: the ownership system that makes surereferences are always valid also ensures that `\fIdrop\fR` gets called only once whenthe value is no longer being used\.
.P
Now that we‚Äôve examined `\fIBox<T>\fR` and some of the characteristics of smartpointers, let‚Äôs look at a few other smart pointers defined in the standardlibrary\.
.SH "Rc<T>, the Reference Counted Smart Pointer"
`\fIRc<T>\fR`, the Reference Counted Smart Pointer
.P
In the majority of cases, ownership is clear: you know exactly which variableowns a given value\. However, there are cases when a single value might havemultiple owners\. For example, in graph data structures, multiple edges mightpoint to the same node, and that node is conceptually owned by all of the edgesthat point to it\. A node shouldn‚Äôt be cleaned up unless it doesn‚Äôt have anyedges pointing to it and so has no owners\.
.P
You have to enable multiple ownership explicitly by using the Rust type`\fIRc<T>\fR`, which is an abbreviation for \fIreference counting\fR\. The `\fIRc<T>\fR` typekeeps track of the number of references to a value to determine whether or notthe value is still in use\. If there are zero references to a value, the valuecan be cleaned up without any references becoming invalid\.
.P
Imagine `\fIRc<T>\fR` as a TV in a family room\. When one person enters to watch TV,they turn it on\. Others can come into the room and watch the TV\. When the lastperson leaves the room, they turn off the TV because it‚Äôs no longer being used\.If someone turns off the TV while others are still watching it, there would beuproar from the remaining TV watchers!
.P
We use the `\fIRc<T>\fR` type when we want to allocate some data on the heap formultiple parts of our program to read and we can‚Äôt determine at compile timewhich part will finish using the data last\. If we knew which part would finishlast, we could just make that part the data‚Äôs owner, and the normal ownershiprules enforced at compile time would take effect\.
.P
Note that `\fIRc<T>\fR` is only for use in single\-threaded scenarios\. When we discussconcurrency in Chapter 16, we‚Äôll cover how to do reference counting inmultithreaded programs\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIRc<T>\fR` to Share Data
.P
Let‚Äôs return to our cons list example in Listing 15\-5\. Recall that we definedit using `\fIBox<T>\fR`\. This time, we‚Äôll create two lists that both share ownershipof a third list\. Conceptually, this looks similar to Figure 15\-3:Figure 15\-3: Two lists, `\fIb\fR` and `\fIc\fR`, sharing ownership ofa third list, `\fIa\fR`
.P
We‚Äôll create list `\fIa\fR` that contains 5 and then 10\. Then we‚Äôll make two morelists: `\fIb\fR` that starts with 3 and `\fIc\fR` that starts with 4\. Both `\fIb\fR` and `\fIc\fR`lists will then continue on to the first `\fIa\fR` list containing 5 and 10\. In otherwords, both lists will share the first list containing 5 and 10\.
.P
Trying to implement this scenario using our definition of `\fIList\fR` with `\fIBox<T>\fR`won‚Äôt work, as shown in Listing 15\-17:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
enum List {
    Cons(i32, Box<List>),
    Nil,
}

use crate::List::{Cons, Nil};

fn main() {
    let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));
    let b = Cons(3, Box::new(a));
    let c = Cons(4, Box::new(a));
}

.EE

.RE
Listing 15\-17: Demonstrating we‚Äôre not allowed to havetwo lists using `\fIBox<T>\fR` that try to share ownership of a third list
.P
When we compile this code, we get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
error[E0382]: use of moved value: `a`
  \-\-> src/main\.rs:11:30
   |
9  |     let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));
   |         \- move occurs because `a` has type `List`, which does not implement the `Copy` trait
10 |     let b = Cons(3, Box::new(a));
   |                              \- value moved here
11 |     let c = Cons(4, Box::new(a));
   |                              ^ value used here after move

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `cons\-list` due to previous error

.EE

.RE
.P
The `\fICons\fR` variants own the data they hold, so when we create the `\fIb\fR` list, `\fIa\fR`is moved into `\fIb\fR` and `\fIb\fR` owns `\fIa\fR`\. Then, when we try to use `\fIa\fR` again whencreating `\fIc\fR`, we‚Äôre not allowed to because `\fIa\fR` has been moved\.
.P
We could change the definition of `\fICons\fR` to hold references instead, but thenwe would have to specify lifetime parameters\. By specifying lifetimeparameters, we would be specifying that every element in the list will live atleast as long as the entire list\. This is the case for the elements and listsin Listing 15\-17, but not in every scenario\.
.P
Instead, we‚Äôll change our definition of `\fIList\fR` to use `\fIRc<T>\fR` in place of`\fIBox<T>\fR`, as shown in Listing 15\-18\. Each `\fICons\fR` variant will now hold a valueand an `\fIRc<T>\fR` pointing to a `\fIList\fR`\. When we create `\fIb\fR`, instead of takingownership of `\fIa\fR`, we‚Äôll clone the `\fIRc<List>\fR` that `\fIa\fR` is holding, therebyincreasing the number of references from one to two and letting `\fIa\fR` and `\fIb\fR`share ownership of the data in that `\fIRc<List>\fR`\. We‚Äôll also clone `\fIa\fR` whencreating `\fIc\fR`, increasing the number of references from two to three\. Every timewe call `\fIRc::clone\fR`, the reference count to the data within the `\fIRc<List>\fR` willincrease, and the data won‚Äôt be cleaned up unless there are zero references toit\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
enum List {
    Cons(i32, Rc<List>),
    Nil,
}

use crate::List::{Cons, Nil};
use std::rc::Rc;

fn main() {
    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));
    let b = Cons(3, Rc::clone(&a));
    let c = Cons(4, Rc::clone(&a));
}

.EE

.RE
Listing 15\-18: A definition of `\fIList\fR` that uses`\fIRc<T>\fR`
.P
We need to add a `\fIuse\fR` statement to bring `\fIRc<T>\fR` into scope because it‚Äôs notin the prelude\. In `\fImain\fR`, we create the list holding 5 and 10 and store it ina new `\fIRc<List>\fR` in `\fIa\fR`\. Then when we create `\fIb\fR` and `\fIc\fR`, we call the`\fIRc::clone\fR` function and pass a reference to the `\fIRc<List>\fR` in `\fIa\fR` as anargument\.
.P
We could have called `\fIa\.clone()\fR` rather than `\fIRc::clone(&a)\fR`, but Rust‚Äôsconvention is to use `\fIRc::clone\fR` in this case\. The implementation of`\fIRc::clone\fR` doesn‚Äôt make a deep copy of all the data like most types‚Äôimplementations of `\fIclone\fR` do\. The call to `\fIRc::clone\fR` only increments thereference count, which doesn‚Äôt take much time\. Deep copies of data can take alot of time\. By using `\fIRc::clone\fR` for reference counting, we can visuallydistinguish between the deep\-copy kinds of clones and the kinds of clones thatincrease the reference count\. When looking for performance problems in thecode, we only need to consider the deep\-copy clones and can disregard calls to`\fIRc::clone\fR`\.
.br

.br
\fBCloning an \fR
.br
=============
.br
`\fIRc<T>\fR` Increases the Reference Count
.P
Let‚Äôs change our working example in Listing 15\-18 so we can see the referencecounts changing as we create and drop references to the `\fIRc<List>\fR` in `\fIa\fR`\.
.P
In Listing 15\-19, we‚Äôll change `\fImain\fR` so it has an inner scope around list `\fIc\fR`;then we can see how the reference count changes when `\fIc\fR` goes out of scope\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# enum List {
#     Cons(i32, Rc<List>),
#     Nil,
# }
# 
# use crate::List::{Cons, Nil};
# use std::rc::Rc;
# 
fn main() {
    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));
    println!("count after creating a = {}", Rc::strong_count(&a));
    let b = Cons(3, Rc::clone(&a));
    println!("count after creating b = {}", Rc::strong_count(&a));
    {
        let c = Cons(4, Rc::clone(&a));
        println!("count after creating c = {}", Rc::strong_count(&a));
    }
    println!("count after c goes out of scope = {}", Rc::strong_count(&a));
}

.EE

.RE
Listing 15\-19: Printing the reference count
.P
At each point in the program where the reference count changes, we print thereference count, which we get by calling the `\fIRc::strong_count\fR` function\. Thisfunction is named `\fIstrong_count\fR` rather than `\fIcount\fR` because the `\fIRc<T>\fR` typealso has a `\fIweak_count\fR`; we‚Äôll see what `\fIweak_count\fR` is used for in the
.UR ch15\-06\-reference\-cycles\.html#preventing\-reference\-cycles\-turning\-an\-rct\-into\-a\-weakt
.UE
‚ÄúPreventing Reference Cycles: Turning an `\fIRc<T>\fR` into a`\fIWeak<T>\fR`‚Äù section\.
.P
This code prints the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.45s
     Running `target/debug/cons\-list`
count after creating a = 1
count after creating b = 2
count after creating c = 3
count after c goes out of scope = 2

.EE

.RE
.P
We can see that the `\fIRc<List>\fR` in `\fIa\fR` has an initial reference count of 1; theneach time we call `\fIclone\fR`, the count goes up by 1\. When `\fIc\fR` goes out of scope,the count goes down by 1\. We don‚Äôt have to call a function to decrease thereference count like we have to call `\fIRc::clone\fR` to increase the referencecount: the implementation of the `\fIDrop\fR` trait decreases the reference countautomatically when an `\fIRc<T>\fR` value goes out of scope\.
.P
What we can‚Äôt see in this example is that when `\fIb\fR` and then `\fIa\fR` go out of scopeat the end of `\fImain\fR`, the count is then 0, and the `\fIRc<List>\fR` is cleaned upcompletely\. Using `\fIRc<T>\fR` allows a single value to have multiple owners, andthe count ensures that the value remains valid as long as any of the ownersstill exist\.
.P
Via immutable references, `\fIRc<T>\fR` allows you to share data between multipleparts of your program for reading only\. If `\fIRc<T>\fR` allowed you to have multiplemutable references too, you might violate one of the borrowing rules discussedin Chapter 4: multiple mutable borrows to the same place can cause data racesand inconsistencies\. But being able to mutate data is very useful! In the nextsection, we‚Äôll discuss the interior mutability pattern and the `\fIRefCell<T>\fR`type that you can use in conjunction with an `\fIRc<T>\fR` to work with thisimmutability restriction\.
.SH "RefCell<T> and the Interior Mutability Pattern"
`\fIRefCell<T>\fR` and the Interior Mutability Pattern\fIInterior mutability\fR is a design pattern in Rust that allows you to mutatedata even when there are immutable references to that data; normally, thisaction is disallowed by the borrowing rules\. To mutate data, the pattern uses`\fIunsafe\fR` code inside a data structure to bend Rust‚Äôs usual rules that governmutation and borrowing\. Unsafe code indicates to the compiler that we‚Äôrechecking the rules manually instead of relying on the compiler to check themfor us; we will discuss unsafe code more in Chapter 19\.
.P
We can use types that use the interior mutability pattern only when we canensure that the borrowing rules will be followed at runtime, even though thecompiler can‚Äôt guarantee that\. The `\fIunsafe\fR` code involved is then wrapped in asafe API, and the outer type is still immutable\.
.P
Let‚Äôs explore this concept by looking at the `\fIRefCell<T>\fR` type that follows theinterior mutability pattern\.
.br

.br
\fBEnforcing Borrowing Rules at Runtime with \fR
.br
============================================
.br
`\fIRefCell<T>\fR`
.P
Unlike `\fIRc<T>\fR`, the `\fIRefCell<T>\fR` type represents single ownership over the datait holds\. So, what makes `\fIRefCell<T>\fR` different from a type like `\fIBox<T>\fR`?Recall the borrowing rules you learned in Chapter 4:
.P
At any given time, you can have \fIeither\fR (but not both) one mutable referenceor any number of immutable references\.
.P
References must always be valid\.
.P
With references and `\fIBox<T>\fR`, the borrowing rules‚Äô invariants are enforced atcompile time\. With `\fIRefCell<T>\fR`, these invariants are enforced \fIat runtime\fR\.With references, if you break these rules, you‚Äôll get a compiler error\. With`\fIRefCell<T>\fR`, if you break these rules, your program will panic and exit\.
.P
The advantages of checking the borrowing rules at compile time are that errorswill be caught sooner in the development process, and there is no impact onruntime performance because all the analysis is completed beforehand\. For thosereasons, checking the borrowing rules at compile time is the best choice in themajority of cases, which is why this is Rust‚Äôs default\.
.P
The advantage of checking the borrowing rules at runtime instead is thatcertain memory\-safe scenarios are then allowed, where they would‚Äôve beendisallowed by the compile\-time checks\. Static analysis, like the Rust compiler,is inherently conservative\. Some properties of code are impossible to detect byanalyzing the code: the most famous example is the Halting Problem, which isbeyond the scope of this book but is an interesting topic to research\.
.P
Because some analysis is impossible, if the Rust compiler can‚Äôt be sure thecode complies with the ownership rules, it might reject a correct program; inthis way, it‚Äôs conservative\. If Rust accepted an incorrect program, userswouldn‚Äôt be able to trust in the guarantees Rust makes\. However, if Rustrejects a correct program, the programmer will be inconvenienced, but nothingcatastrophic can occur\. The `\fIRefCell<T>\fR` type is useful when you‚Äôre sure yourcode follows the borrowing rules but the compiler is unable to understand andguarantee that\.
.P
Similar to `\fIRc<T>\fR`, `\fIRefCell<T>\fR` is only for use in single\-threaded scenariosand will give you a compile\-time error if you try using it in a multithreadedcontext\. We‚Äôll talk about how to get the functionality of `\fIRefCell<T>\fR` in amultithreaded program in Chapter 16\.
.P
Here is a recap of the reasons to choose `\fIBox<T>\fR`, `\fIRc<T>\fR`, or `\fIRefCell<T>\fR`:`\fIRc<T>\fR` enables multiple owners of the same data; `\fIBox<T>\fR` and `\fIRefCell<T>\fR`have single owners\.`\fIBox<T>\fR` allows immutable or mutable borrows checked at compile time; `\fIRc<T>\fR`allows only immutable borrows checked at compile time; `\fIRefCell<T>\fR` allowsimmutable or mutable borrows checked at runtime\.
.P
Because `\fIRefCell<T>\fR` allows mutable borrows checked at runtime, you canmutate the value inside the `\fIRefCell<T>\fR` even when the `\fIRefCell<T>\fR` isimmutable\.
.P
Mutating the value inside an immutable value is the \fIinterior mutability\fRpattern\. Let‚Äôs look at a situation in which interior mutability is useful andexamine how it‚Äôs possible\.
.br

.br
\fBInterior Mutability: A Mutable Borrow to an Immutable Value\fR
.br
=============================================================
.br

.P
A consequence of the borrowing rules is that when you have an immutable value,you can‚Äôt borrow it mutably\. For example, this code won‚Äôt compile:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = 5;
    let y = &mut x;
}

.EE

.RE
.P
If you tried to compile this code, you‚Äôd get the following error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling borrowing v0\.1\.0 (file:///projects/borrowing)
error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable
 \-\-> src/main\.rs:3:13
  |
2 |     let x = 5;
  |         \- help: consider changing this to be mutable: `mut x`
3 |     let y = &mut x;
  |             ^^^^^^ cannot borrow as mutable

For more information about this error, try `rustc \-\-explain E0596`\.
error: could not compile `borrowing` due to previous error

.EE

.RE
.P
However, there are situations in which it would be useful for a value to mutateitself in its methods but appear immutable to other code\. Code outside thevalue‚Äôs methods would not be able to mutate the value\. Using `\fIRefCell<T>\fR` isone way to get the ability to have interior mutability, but `\fIRefCell<T>\fR`doesn‚Äôt get around the borrowing rules completely: the borrow checker in thecompiler allows this interior mutability, and the borrowing rules are checkedat runtime instead\. If you violate the rules, you‚Äôll get a `\fIpanic!\fR` instead ofa compiler error\.
.P
Let‚Äôs work through a practical example where we can use `\fIRefCell<T>\fR` to mutatean immutable value and see why that is useful\.
.br

.br
\fBA Use Case for Interior Mutability: Mock Objects\fR
.br
==================================================
.br

.P
Sometimes during testing a programmer will use a type in place of another type,in order to observe particular behavior and assert it's implemented correctly\.This placeholder type is called a \fItest double\fR\. Think of it in the sense of a"stunt double" in filmmaking, where a person steps in and substitutes for anactor to do a particular tricky scene\. Test doubles stand in for other typeswhen we're running tests\. \fIMock objects\fR are specific types of test doublesthat record what happens during a test so you can assert that the correctactions took place\.
.P
Rust doesn‚Äôt have objects in the same sense as other languages have objects,and Rust doesn‚Äôt have mock object functionality built into the standard libraryas some other languages do\. However, you can definitely create a struct thatwill serve the same purposes as a mock object\.
.P
Here‚Äôs the scenario we‚Äôll test: we‚Äôll create a library that tracks a valueagainst a maximum value and sends messages based on how close to the maximumvalue the current value is\. This library could be used to keep track of auser‚Äôs quota for the number of API calls they‚Äôre allowed to make, for example\.
.P
Our library will only provide the functionality of tracking how close to themaximum a value is and what the messages should be at what times\. Applicationsthat use our library will be expected to provide the mechanism for sending themessages: the application could put a message in the application, send anemail, send a text message, or something else\. The library doesn‚Äôt need to knowthat detail\. All it needs is something that implements a trait we‚Äôll providecalled `\fIMessenger\fR`\. Listing 15\-20 shows the library code:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Messenger {
    fn send(&self, msg: &str);
}

pub struct LimitTracker<'a, T: Messenger> {
    messenger: &'a T,
    value: usize,
    max: usize,
}

impl<'a, T> LimitTracker<'a, T>
where
    T: Messenger,
{
    pub fn new(messenger: &'a T, max: usize) \-> LimitTracker<'a, T> {
        LimitTracker {
            messenger,
            value: 0,
            max,
        }
    }

    pub fn set_value(&mut self, value: usize) {
        self\.value = value;

        let percentage_of_max = self\.value as f64 / self\.max as f64;

        if percentage_of_max >= 1\.0 {
            self\.messenger\.send("Error: You are over your quota!");
        } else if percentage_of_max >= 0\.9 {
            self\.messenger
                \.send("Urgent warning: You've used up over 90% of your quota!");
        } else if percentage_of_max >= 0\.75 {
            self\.messenger
                \.send("Warning: You've used up over 75% of your quota!");
        }
    }
}

.EE

.RE
Listing 15\-20: A library to keep track of how close avalue is to a maximum value and warn when the value is at certain levels
.P
One important part of this code is that the `\fIMessenger\fR` trait has one methodcalled `\fIsend\fR` that takes an immutable reference to `\fIself\fR` and the text of themessage\. This trait is the interface our mock object needs to implement so thatthe mock can be used in the same way a real object is\. The other important partis that we want to test the behavior of the `\fIset_value\fR` method on the`\fILimitTracker\fR`\. We can change what we pass in for the `\fIvalue\fR` parameter, but`\fIset_value\fR` doesn‚Äôt return anything for us to make assertions on\. We want to beable to say that if we create a `\fILimitTracker\fR` with something that implementsthe `\fIMessenger\fR` trait and a particular value for `\fImax\fR`, when we pass differentnumbers for `\fIvalue\fR`, the messenger is told to send the appropriate messages\.
.P
We need a mock object that, instead of sending an email or text message when wecall `\fIsend\fR`, will only keep track of the messages it‚Äôs told to send\. We cancreate a new instance of the mock object, create a `\fILimitTracker\fR` that uses themock object, call the `\fIset_value\fR` method on `\fILimitTracker\fR`, and then check thatthe mock object has the messages we expect\. Listing 15\-21 shows an attempt toimplement a mock object to do just that, but the borrow checker won‚Äôt allow it:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# pub trait Messenger {
#     fn send(&self, msg: &str);
# }
# 
# pub struct LimitTracker<'a, T: Messenger> {
#     messenger: &'a T,
#     value: usize,
#     max: usize,
# }
# 
# impl<'a, T> LimitTracker<'a, T>
# where
#     T: Messenger,
# {
#     pub fn new(messenger: &'a T, max: usize) \-> LimitTracker<'a, T> {
#         LimitTracker {
#             messenger,
#             value: 0,
#             max,
#         }
#     }
# 
#     pub fn set_value(&mut self, value: usize) {
#         self\.value = value;
# 
#         let percentage_of_max = self\.value as f64 / self\.max as f64;
# 
#         if percentage_of_max >= 1\.0 {
#             self\.messenger\.send("Error: You are over your quota!");
#         } else if percentage_of_max >= 0\.9 {
#             self\.messenger
#                 \.send("Urgent warning: You've used up over 90% of your quota!");
#         } else if percentage_of_max >= 0\.75 {
#             self\.messenger
#                 \.send("Warning: You've used up over 75% of your quota!");
#         }
#     }
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    struct MockMessenger {
        sent_messages: Vec<String>,
    }

    impl MockMessenger {
        fn new() \-> MockMessenger {
            MockMessenger {
                sent_messages: vec![],
            }
        }
    }

    impl Messenger for MockMessenger {
        fn send(&self, message: &str) {
            self\.sent_messages\.push(String::from(message));
        }
    }

    #[test]
    fn it_sends_an_over_75_percent_warning_message() {
        let mock_messenger = MockMessenger::new();
        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);

        limit_tracker\.set_value(80);

        assert_eq!(mock_messenger\.sent_messages\.len(), 1);
    }
}

.EE

.RE
Listing 15\-21: An attempt to implement a `\fIMockMessenger\fR`that isn‚Äôt allowed by the borrow checker
.P
This test code defines a `\fIMockMessenger\fR` struct that has a `\fIsent_messages\fR`field with a `\fIVec\fR` of `\fIString\fR` values to keep track of the messages it‚Äôs toldto send\. We also define an associated function `\fInew\fR` to make it convenient tocreate new `\fIMockMessenger\fR` values that start with an empty list of messages\. Wethen implement the `\fIMessenger\fR` trait for `\fIMockMessenger\fR` so we can give a`\fIMockMessenger\fR` to a `\fILimitTracker\fR`\. In the definition of the `\fIsend\fR` method, wetake the message passed in as a parameter and store it in the `\fIMockMessenger\fR`list of `\fIsent_messages\fR`\.
.P
In the test, we‚Äôre testing what happens when the `\fILimitTracker\fR` is told to set`\fIvalue\fR` to something that is more than 75 percent of the `\fImax\fR` value\. First, wecreate a new `\fIMockMessenger\fR`, which will start with an empty list of messages\.Then we create a new `\fILimitTracker\fR` and give it a reference to the new`\fIMockMessenger\fR` and a `\fImax\fR` value of 100\. We call the `\fIset_value\fR` method on the`\fILimitTracker\fR` with a value of 80, which is more than 75 percent of 100\. Thenwe assert that the list of messages that the `\fIMockMessenger\fR` is keeping trackof should now have one message in it\.
.P
However, there‚Äôs one problem with this test, as shown here:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling limit\-tracker v0\.1\.0 (file:///projects/limit\-tracker)
error[E0596]: cannot borrow `self\.sent_messages` as mutable, as it is behind a `&` reference
  \-\-> src/lib\.rs:58:13
   |
2  |     fn send(&self, msg: &str);
   |             \-\-\-\-\- help: consider changing that to be a mutable reference: `&mut self`
\.\.\.
58 |             self\.sent_messages\.push(String::from(message));
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable

For more information about this error, try `rustc \-\-explain E0596`\.
error: could not compile `limit\-tracker` due to previous error
warning: build failed, waiting for other jobs to finish\.\.\.

.EE

.RE
.P
We can‚Äôt modify the `\fIMockMessenger\fR` to keep track of the messages, because the`\fIsend\fR` method takes an immutable reference to `\fIself\fR`\. We also can‚Äôt take thesuggestion from the error text to use `\fI&mut self\fR` instead, because then thesignature of `\fIsend\fR` wouldn‚Äôt match the signature in the `\fIMessenger\fR` traitdefinition (feel free to try and see what error message you get)\.
.P
This is a situation in which interior mutability can help! We‚Äôll store the`\fIsent_messages\fR` within a `\fIRefCell<T>\fR`, and then the `\fIsend\fR` method will beable to modify `\fIsent_messages\fR` to store the messages we‚Äôve seen\. Listing 15\-22shows what that looks like:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Messenger {
#     fn send(&self, msg: &str);
# }
# 
# pub struct LimitTracker<'a, T: Messenger> {
#     messenger: &'a T,
#     value: usize,
#     max: usize,
# }
# 
# impl<'a, T> LimitTracker<'a, T>
# where
#     T: Messenger,
# {
#     pub fn new(messenger: &'a T, max: usize) \-> LimitTracker<'a, T> {
#         LimitTracker {
#             messenger,
#             value: 0,
#             max,
#         }
#     }
# 
#     pub fn set_value(&mut self, value: usize) {
#         self\.value = value;
# 
#         let percentage_of_max = self\.value as f64 / self\.max as f64;
# 
#         if percentage_of_max >= 1\.0 {
#             self\.messenger\.send("Error: You are over your quota!");
#         } else if percentage_of_max >= 0\.9 {
#             self\.messenger
#                 \.send("Urgent warning: You've used up over 90% of your quota!");
#         } else if percentage_of_max >= 0\.75 {
#             self\.messenger
#                 \.send("Warning: You've used up over 75% of your quota!");
#         }
#     }
# }
# 
#[cfg(test)]
mod tests {
    use super::*;
    use std::cell::RefCell;

    struct MockMessenger {
        sent_messages: RefCell<Vec<String>>,
    }

    impl MockMessenger {
        fn new() \-> MockMessenger {
            MockMessenger {
                sent_messages: RefCell::new(vec![]),
            }
        }
    }

    impl Messenger for MockMessenger {
        fn send(&self, message: &str) {
            self\.sent_messages\.borrow_mut()\.push(String::from(message));
        }
    }

    #[test]
    fn it_sends_an_over_75_percent_warning_message() {
        // \-\-snip\-\-
#         let mock_messenger = MockMessenger::new();
#         let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);
# 
#         limit_tracker\.set_value(80);

        assert_eq!(mock_messenger\.sent_messages\.borrow()\.len(), 1);
    }
}

.EE

.RE
Listing 15\-22: Using `\fIRefCell<T>\fR` to mutate an innervalue while the outer value is considered immutable
.P
The `\fIsent_messages\fR` field is now of type `\fIRefCell<Vec<String>>\fR` instead of`\fIVec<String>\fR`\. In the `\fInew\fR` function, we create a new `\fIRefCell<Vec<String>>\fR`instance around the empty vector\.
.P
For the implementation of the `\fIsend\fR` method, the first parameter is still animmutable borrow of `\fIself\fR`, which matches the trait definition\. We call`\fIborrow_mut\fR` on the `\fIRefCell<Vec<String>>\fR` in `\fIself\.sent_messages\fR` to get amutable reference to the value inside the `\fIRefCell<Vec<String>>\fR`, which is thevector\. Then we can call `\fIpush\fR` on the mutable reference to the vector to keeptrack of the messages sent during the test\.
.P
The last change we have to make is in the assertion: to see how many items arein the inner vector, we call `\fIborrow\fR` on the `\fIRefCell<Vec<String>>\fR` to get animmutable reference to the vector\.
.P
Now that you‚Äôve seen how to use `\fIRefCell<T>\fR`, let‚Äôs dig into how it works!
.br

.br
\fBKeeping Track of Borrows at Runtime with \fR
.br
===========================================
.br
`\fIRefCell<T>\fR`
.P
When creating immutable and mutable references, we use the `\fI&\fR` and `\fI&mut\fR`syntax, respectively\. With `\fIRefCell<T>\fR`, we use the `\fIborrow\fR` and `\fIborrow_mut\fR`methods, which are part of the safe API that belongs to `\fIRefCell<T>\fR`\. The`\fIborrow\fR` method returns the smart pointer type `\fIRef<T>\fR`, and `\fIborrow_mut\fR`returns the smart pointer type `\fIRefMut<T>\fR`\. Both types implement `\fIDeref\fR`, so wecan treat them like regular references\.
.P
The `\fIRefCell<T>\fR` keeps track of how many `\fIRef<T>\fR` and `\fIRefMut<T>\fR` smartpointers are currently active\. Every time we call `\fIborrow\fR`, the `\fIRefCell<T>\fR`increases its count of how many immutable borrows are active\. When a `\fIRef<T>\fR`value goes out of scope, the count of immutable borrows goes down by one\. Justlike the compile\-time borrowing rules, `\fIRefCell<T>\fR` lets us have many immutableborrows or one mutable borrow at any point in time\.
.P
If we try to violate these rules, rather than getting a compiler error as wewould with references, the implementation of `\fIRefCell<T>\fR` will panic atruntime\. Listing 15\-23 shows a modification of the implementation of `\fIsend\fR` inListing 15\-22\. We‚Äôre deliberately trying to create two mutable borrows activefor the same scope to illustrate that `\fIRefCell<T>\fR` prevents us from doing thisat runtime\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,panics\fR 2

.br
.EX
# pub trait Messenger {
#     fn send(&self, msg: &str);
# }
# 
# pub struct LimitTracker<'a, T: Messenger> {
#     messenger: &'a T,
#     value: usize,
#     max: usize,
# }
# 
# impl<'a, T> LimitTracker<'a, T>
# where
#     T: Messenger,
# {
#     pub fn new(messenger: &'a T, max: usize) \-> LimitTracker<'a, T> {
#         LimitTracker {
#             messenger,
#             value: 0,
#             max,
#         }
#     }
# 
#     pub fn set_value(&mut self, value: usize) {
#         self\.value = value;
# 
#         let percentage_of_max = self\.value as f64 / self\.max as f64;
# 
#         if percentage_of_max >= 1\.0 {
#             self\.messenger\.send("Error: You are over your quota!");
#         } else if percentage_of_max >= 0\.9 {
#             self\.messenger
#                 \.send("Urgent warning: You've used up over 90% of your quota!");
#         } else if percentage_of_max >= 0\.75 {
#             self\.messenger
#                 \.send("Warning: You've used up over 75% of your quota!");
#         }
#     }
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
#     use std::cell::RefCell;
# 
#     struct MockMessenger {
#         sent_messages: RefCell<Vec<String>>,
#     }
# 
#     impl MockMessenger {
#         fn new() \-> MockMessenger {
#             MockMessenger {
#                 sent_messages: RefCell::new(vec![]),
#             }
#         }
#     }
# 
    impl Messenger for MockMessenger {
        fn send(&self, message: &str) {
            let mut one_borrow = self\.sent_messages\.borrow_mut();
            let mut two_borrow = self\.sent_messages\.borrow_mut();

            one_borrow\.push(String::from(message));
            two_borrow\.push(String::from(message));
        }
    }
# 
#     #[test]
#     fn it_sends_an_over_75_percent_warning_message() {
#         let mock_messenger = MockMessenger::new();
#         let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);
# 
#         limit_tracker\.set_value(80);
# 
#         assert_eq!(mock_messenger\.sent_messages\.borrow()\.len(), 1);
#     }
# }

.EE

.RE
Listing 15\-23: Creating two mutable references in thesame scope to see that `\fIRefCell<T>\fR` will panic
.P
We create a variable `\fIone_borrow\fR` for the `\fIRefMut<T>\fR` smart pointer returnedfrom `\fIborrow_mut\fR`\. Then we create another mutable borrow in the same way in thevariable `\fItwo_borrow\fR`\. This makes two mutable references in the same scope,which isn‚Äôt allowed\. When we run the tests for our library, the code in Listing15\-23 will compile without any errors, but the test will fail:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling limit\-tracker v0\.1\.0 (file:///projects/limit\-tracker)
    Finished test [unoptimized + debuginfo] target(s) in 0\.91s
     Running unittests src/lib\.rs (target/debug/deps/limit_tracker\-e599811fa246dbde)

running 1 test
test tests::it_sends_an_over_75_percent_warning_message \.\.\. FAILED

failures:

\-\-\-\- tests::it_sends_an_over_75_percent_warning_message stdout \-\-\-\-
thread 'main' panicked at 'already borrowed: BorrowMutError', src/lib\.rs:60:53
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::it_sends_an_over_75_percent_warning_message

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Notice that the code panicked with the message `\fIalready borrowed: BorrowMutError\fR`\. This is how `\fIRefCell<T>\fR` handles violations of the borrowingrules at runtime\.
.P
Choosing to catch borrowing errors at runtime rather than compile time, aswe've done here, means you'd potentially be finding mistakes in your code laterin the development process: possibly not until your code was deployed toproduction\. Also, your code would incur a small runtime performance penalty asa result of keeping track of the borrows at runtime rather than compile time\.However, using `\fIRefCell<T>\fR` makes it possible to write a mock object that canmodify itself to keep track of the messages it has seen while you‚Äôre using itin a context where only immutable values are allowed\. You can use `\fIRefCell<T>\fR`despite its trade\-offs to get more functionality than regular referencesprovide\.
.br

.br
\fBHaving Multiple Owners of Mutable Data by Combining \fR
.br
======================================================
.br
`\fIRc<T>\fR` and `\fIRefCell<T>\fR`
.P
A common way to use `\fIRefCell<T>\fR` is in combination with `\fIRc<T>\fR`\. Recall that`\fIRc<T>\fR` lets you have multiple owners of some data, but it only gives immutableaccess to that data\. If you have an `\fIRc<T>\fR` that holds a `\fIRefCell<T>\fR`, you canget a value that can have multiple owners \fIand\fR that you can mutate!
.P
For example, recall the cons list example in Listing 15\-18 where we used`\fIRc<T>\fR` to allow multiple lists to share ownership of another list\. Because`\fIRc<T>\fR` holds only immutable values, we can‚Äôt change any of the values in thelist once we‚Äôve created them\. Let‚Äôs add in `\fIRefCell<T>\fR` to gain the ability tochange the values in the lists\. Listing 15\-24 shows that by using a`\fIRefCell<T>\fR` in the `\fICons\fR` definition, we can modify the value stored in allthe lists:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
enum List {
    Cons(Rc<RefCell<i32>>, Rc<List>),
    Nil,
}

use crate::List::{Cons, Nil};
use std::cell::RefCell;
use std::rc::Rc;

fn main() {
    let value = Rc::new(RefCell::new(5));

    let a = Rc::new(Cons(Rc::clone(&value), Rc::new(Nil)));

    let b = Cons(Rc::new(RefCell::new(3)), Rc::clone(&a));
    let c = Cons(Rc::new(RefCell::new(4)), Rc::clone(&a));

    *value\.borrow_mut() += 10;

    println!("a after = {:?}", a);
    println!("b after = {:?}", b);
    println!("c after = {:?}", c);
}

.EE

.RE
Listing 15\-24: Using `\fIRc<RefCell<i32>>\fR` to create a`\fIList\fR` that we can mutate
.P
We create a value that is an instance of `\fIRc<RefCell<i32>>\fR` and store it in avariable named `\fIvalue\fR` so we can access it directly later\. Then we create a`\fIList\fR` in `\fIa\fR` with a `\fICons\fR` variant that holds `\fIvalue\fR`\. We need to clone`\fIvalue\fR` so both `\fIa\fR` and `\fIvalue\fR` have ownership of the inner `\fI5\fR` value ratherthan transferring ownership from `\fIvalue\fR` to `\fIa\fR` or having `\fIa\fR` borrow from`\fIvalue\fR`\.
.P
We wrap the list `\fIa\fR` in an `\fIRc<T>\fR` so when we create lists `\fIb\fR` and `\fIc\fR`, theycan both refer to `\fIa\fR`, which is what we did in Listing 15\-18\.
.P
After we‚Äôve created the lists in `\fIa\fR`, `\fIb\fR`, and `\fIc\fR`, we want to add 10 to thevalue in `\fIvalue\fR`\. We do this by calling `\fIborrow_mut\fR` on `\fIvalue\fR`, which uses theautomatic dereferencing feature we discussed in Chapter 5 (see the section
.UR ch05\-03\-method\-syntax\.html#wheres\-the\-\-\-operator
.UE
‚ÄúWhere‚Äôs the `\fI\->\fR` Operator?‚Äù) todereference the `\fIRc<T>\fR` to the inner `\fIRefCell<T>\fR` value\. The `\fIborrow_mut\fR`method returns a `\fIRefMut<T>\fR` smart pointer, and we use the dereference operatoron it and change the inner value\.
.P
When we print `\fIa\fR`, `\fIb\fR`, and `\fIc\fR`, we can see that they all have the modifiedvalue of 15 rather than 5:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.63s
     Running `target/debug/cons\-list`
a after = Cons(RefCell { value: 15 }, Nil)
b after = Cons(RefCell { value: 3 }, Cons(RefCell { value: 15 }, Nil))
c after = Cons(RefCell { value: 4 }, Cons(RefCell { value: 15 }, Nil))

.EE

.RE
.P
This technique is pretty neat! By using `\fIRefCell<T>\fR`, we have an outwardlyimmutable `\fIList\fR` value\. But we can use the methods on `\fIRefCell<T>\fR` that provideaccess to its interior mutability so we can modify our data when we need to\.The runtime checks of the borrowing rules protect us from data races, and it‚Äôssometimes worth trading a bit of speed for this flexibility in our datastructures\. Note that `\fIRefCell<T>\fR` does not work for multithreaded code!`\fIMutex<T>\fR` is the thread\-safe version of `\fIRefCell<T>\fR` and we‚Äôll discuss`\fIMutex<T>\fR` in Chapter 16\.
.SH "Reference Cycles Can Leak Memory"

.br

.br
\fBReference Cycles Can Leak Memory\fR
.br
==================================
.br

.P
Rust‚Äôs memory safety guarantees make it difficult, but not impossible, toaccidentally create memory that is never cleaned up (known as a \fImemory leak\fR)\.Preventing memory leaks entirely is not one of Rust‚Äôs guarantees, meaningmemory leaks are memory safe in Rust\. We can see that Rust allows memory leaksby using `\fIRc<T>\fR` and `\fIRefCell<T>\fR`: it‚Äôs possible to create references whereitems refer to each other in a cycle\. This creates memory leaks because thereference count of each item in the cycle will never reach 0, and the valueswill never be dropped\.
.br

.br
\fBCreating a Reference Cycle\fR
.br
============================
.br

.P
Let‚Äôs look at how a reference cycle might happen and how to prevent it,starting with the definition of the `\fIList\fR` enum and a `\fItail\fR` method in Listing15\-25:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use crate::List::{Cons, Nil};
use std::cell::RefCell;
use std::rc::Rc;

#[derive(Debug)]
enum List {
    Cons(i32, RefCell<Rc<List>>),
    Nil,
}

impl List {
    fn tail(&self) \-> Option<&RefCell<Rc<List>>> {
        match self {
            Cons(_, item) => Some(item),
            Nil => None,
        }
    }
}

fn main() {}

.EE

.RE
Listing 15\-25: A cons list definition that holds a`\fIRefCell<T>\fR` so we can modify what a `\fICons\fR` variant is referring to
.P
We‚Äôre using another variation of the `\fIList\fR` definition from Listing 15\-5\. Thesecond element in the `\fICons\fR` variant is now `\fIRefCell<Rc<List>>\fR`, meaning thatinstead of having the ability to modify the `\fIi32\fR` value as we did in Listing15\-24, we want to modify the `\fIList\fR` value a `\fICons\fR` variant is pointing to\.We‚Äôre also adding a `\fItail\fR` method to make it convenient for us to access thesecond item if we have a `\fICons\fR` variant\.
.P
In Listing 15\-26, we‚Äôre adding a `\fImain\fR` function that uses the definitions inListing 15\-25\. This code creates a list in `\fIa\fR` and a list in `\fIb\fR` that points tothe list in `\fIa\fR`\. Then it modifies the list in `\fIa\fR` to point to `\fIb\fR`, creating areference cycle\. There are `\fIprintln!\fR` statements along the way to show what thereference counts are at various points in this process\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use crate::List::{Cons, Nil};
# use std::cell::RefCell;
# use std::rc::Rc;
# 
# #[derive(Debug)]
# enum List {
#     Cons(i32, RefCell<Rc<List>>),
#     Nil,
# }
# 
# impl List {
#     fn tail(&self) \-> Option<&RefCell<Rc<List>>> {
#         match self {
#             Cons(_, item) => Some(item),
#             Nil => None,
#         }
#     }
# }
# 
fn main() {
    let a = Rc::new(Cons(5, RefCell::new(Rc::new(Nil))));

    println!("a initial rc count = {}", Rc::strong_count(&a));
    println!("a next item = {:?}", a\.tail());

    let b = Rc::new(Cons(10, RefCell::new(Rc::clone(&a))));

    println!("a rc count after b creation = {}", Rc::strong_count(&a));
    println!("b initial rc count = {}", Rc::strong_count(&b));
    println!("b next item = {:?}", b\.tail());

    if let Some(link) = a\.tail() {
        *link\.borrow_mut() = Rc::clone(&b);
    }

    println!("b rc count after changing a = {}", Rc::strong_count(&b));
    println!("a rc count after changing a = {}", Rc::strong_count(&a));

    // Uncomment the next line to see that we have a cycle;
    // it will overflow the stack
    // println!("a next item = {:?}", a\.tail());
}

.EE

.RE
Listing 15\-26: Creating a reference cycle of two `\fIList\fR`values pointing to each other
.P
We create an `\fIRc<List>\fR` instance holding a `\fIList\fR` value in the variable `\fIa\fR`with an initial list of `\fI5, Nil\fR`\. We then create an `\fIRc<List>\fR` instance holdinganother `\fIList\fR` value in the variable `\fIb\fR` that contains the value 10 and pointsto the list in `\fIa\fR`\.
.P
We modify `\fIa\fR` so it points to `\fIb\fR` instead of `\fINil\fR`, creating a cycle\. We dothat by using the `\fItail\fR` method to get a reference to the `\fIRefCell<Rc<List>>\fR`in `\fIa\fR`, which we put in the variable `\fIlink\fR`\. Then we use the `\fIborrow_mut\fR`method on the `\fIRefCell<Rc<List>>\fR` to change the value inside from an `\fIRc<List>\fR`that holds a `\fINil\fR` value to the `\fIRc<List>\fR` in `\fIb\fR`\.
.P
When we run this code, keeping the last `\fIprintln!\fR` commented out for themoment, we‚Äôll get this output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.53s
     Running `target/debug/cons\-list`
a initial rc count = 1
a next item = Some(RefCell { value: Nil })
a rc count after b creation = 2
b initial rc count = 1
b next item = Some(RefCell { value: Cons(5, RefCell { value: Nil }) })
b rc count after changing a = 2
a rc count after changing a = 2

.EE

.RE
.P
The reference count of the `\fIRc<List>\fR` instances in both `\fIa\fR` and `\fIb\fR` are 2 afterwe change the list in `\fIa\fR` to point to `\fIb\fR`\. At the end of `\fImain\fR`, Rust drops thevariable `\fIb\fR`, which decreases the reference count of the `\fIb\fR` `\fIRc<List>\fR` instancefrom 2 to 1\. The memory that `\fIRc<List>\fR` has on the heap won‚Äôt be dropped atthis point, because its reference count is 1, not 0\. Then Rust drops `\fIa\fR`, whichdecreases the reference count of the `\fIa\fR` `\fIRc<List>\fR` instance from 2 to 1 aswell\. This instance‚Äôs memory can‚Äôt be dropped either, because the other`\fIRc<List>\fR` instance still refers to it\. The memory allocated to the list willremain uncollected forever\. To visualize this reference cycle, we‚Äôve created adiagram in Figure 15\-4\.Figure 15\-4: A reference cycle of lists `\fIa\fR` and `\fIb\fR`pointing to each other
.P
If you uncomment the last `\fIprintln!\fR` and run the program, Rust will try toprint this cycle with `\fIa\fR` pointing to `\fIb\fR` pointing to `\fIa\fR` and so forth until itoverflows the stack\.
.P
Compared to a real\-world program, the consequences creating a reference cyclein this example aren‚Äôt very dire: right after we create the reference cycle,the program ends\. However, if a more complex program allocated lots of memoryin a cycle and held onto it for a long time, the program would use more memorythan it needed and might overwhelm the system, causing it to run out ofavailable memory\.
.P
Creating reference cycles is not easily done, but it‚Äôs not impossible either\.If you have `\fIRefCell<T>\fR` values that contain `\fIRc<T>\fR` values or similar nestedcombinations of types with interior mutability and reference counting, you mustensure that you don‚Äôt create cycles; you can‚Äôt rely on Rust to catch them\.Creating a reference cycle would be a logic bug in your program that you shoulduse automated tests, code reviews, and other software development practices tominimize\.
.P
Another solution for avoiding reference cycles is reorganizing your datastructures so that some references express ownership and some references don‚Äôt\.As a result, you can have cycles made up of some ownership relationships andsome non\-ownership relationships, and only the ownership relationships affectwhether or not a value can be dropped\. In Listing 15\-25, we always want `\fICons\fR`variants to own their list, so reorganizing the data structure isn‚Äôt possible\.Let‚Äôs look at an example using graphs made up of parent nodes and child nodesto see when non\-ownership relationships are an appropriate way to preventreference cycles\.
.br

.br
\fBPreventing Reference Cycles: Turning an \fR
.br
==========================================
.br
`\fIRc<T>\fR` into a `\fIWeak<T>\fR`
.P
So far, we‚Äôve demonstrated that calling `\fIRc::clone\fR` increases the`\fIstrong_count\fR` of an `\fIRc<T>\fR` instance, and an `\fIRc<T>\fR` instance is only cleanedup if its `\fIstrong_count\fR` is 0\. You can also create a \fIweak reference\fR to thevalue within an `\fIRc<T>\fR` instance by calling `\fIRc::downgrade\fR` and passing areference to the `\fIRc<T>\fR`\. Strong references are how you can share ownership ofan `\fIRc<T>\fR` instance\. Weak references don‚Äôt express an ownership relationship,and their count doesn't affect when an `\fIRc<T>\fR` instance is cleaned up\. Theywon‚Äôt cause a reference cycle because any cycle involving some weak referenceswill be broken once the strong reference count of values involved is 0\.
.P
When you call `\fIRc::downgrade\fR`, you get a smart pointer of type `\fIWeak<T>\fR`\.Instead of increasing the `\fIstrong_count\fR` in the `\fIRc<T>\fR` instance by 1, calling`\fIRc::downgrade\fR` increases the `\fIweak_count\fR` by 1\. The `\fIRc<T>\fR` type uses`\fIweak_count\fR` to keep track of how many `\fIWeak<T>\fR` references exist, similar to`\fIstrong_count\fR`\. The difference is the `\fIweak_count\fR` doesn‚Äôt need to be 0 for the`\fIRc<T>\fR` instance to be cleaned up\.
.P
Because the value that `\fIWeak<T>\fR` references might have been dropped, to doanything with the value that a `\fIWeak<T>\fR` is pointing to, you must make sure thevalue still exists\. Do this by calling the `\fIupgrade\fR` method on a `\fIWeak<T>\fR`instance, which will return an `\fIOption<Rc<T>>\fR`\. You‚Äôll get a result of `\fISome\fR`if the `\fIRc<T>\fR` value has not been dropped yet and a result of `\fINone\fR` if the`\fIRc<T>\fR` value has been dropped\. Because `\fIupgrade\fR` returns an `\fIOption<Rc<T>>\fR`,Rust will ensure that the `\fISome\fR` case and the `\fINone\fR` case are handled, andthere won‚Äôt be an invalid pointer\.
.P
As an example, rather than using a list whose items know only about the nextitem, we‚Äôll create a tree whose items know about their children items \fIand\fRtheir parent items\.
.br

.br
\fBCreating a Tree Data Structure: a \fR
.br
====================================
.br
`\fINode\fR` with Child Nodes
.P
To start, we‚Äôll build a tree with nodes that know about their child nodes\.We‚Äôll create a struct named `\fINode\fR` that holds its own `\fIi32\fR` value as well asreferences to its children `\fINode\fR` values:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::cell::RefCell;
use std::rc::Rc;

#[derive(Debug)]
struct Node {
    value: i32,
    children: RefCell<Vec<Rc<Node>>>,
}
# 
# fn main() {
#     let leaf = Rc::new(Node {
#         value: 3,
#         children: RefCell::new(vec![]),
#     });
# 
#     let branch = Rc::new(Node {
#         value: 5,
#         children: RefCell::new(vec![Rc::clone(&leaf)]),
#     });
# }

.EE

.RE
.P
We want a `\fINode\fR` to own its children, and we want to share that ownership withvariables so we can access each `\fINode\fR` in the tree directly\. To do this, wedefine the `\fIVec<T>\fR` items to be values of type `\fIRc<Node>\fR`\. We also want tomodify which nodes are children of another node, so we have a `\fIRefCell<T>\fR` in`\fIchildren\fR` around the `\fIVec<Rc<Node>>\fR`\.
.P
Next, we‚Äôll use our struct definition and create one `\fINode\fR` instance named`\fIleaf\fR` with the value 3 and no children, and another instance named `\fIbranch\fR`with the value 5 and `\fIleaf\fR` as one of its children, as shown in Listing 15\-27:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::cell::RefCell;
# use std::rc::Rc;
# 
# #[derive(Debug)]
# struct Node {
#     value: i32,
#     children: RefCell<Vec<Rc<Node>>>,
# }
# 
fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        children: RefCell::new(vec![]),
    });

    let branch = Rc::new(Node {
        value: 5,
        children: RefCell::new(vec![Rc::clone(&leaf)]),
    });
}

.EE

.RE
Listing 15\-27: Creating a `\fIleaf\fR` node with no childrenand a `\fIbranch\fR` node with `\fIleaf\fR` as one of its children
.P
We clone the `\fIRc<Node>\fR` in `\fIleaf\fR` and store that in `\fIbranch\fR`, meaning the`\fINode\fR` in `\fIleaf\fR` now has two owners: `\fIleaf\fR` and `\fIbranch\fR`\. We can get from`\fIbranch\fR` to `\fIleaf\fR` through `\fIbranch\.children\fR`, but there‚Äôs no way to get from`\fIleaf\fR` to `\fIbranch\fR`\. The reason is that `\fIleaf\fR` has no reference to `\fIbranch\fR` anddoesn‚Äôt know they‚Äôre related\. We want `\fIleaf\fR` to know that `\fIbranch\fR` is itsparent\. We‚Äôll do that next\.
.br

.br
\fBAdding a Reference from a Child to Its Parent\fR
.br
===============================================
.br

.P
To make the child node aware of its parent, we need to add a `\fIparent\fR` field toour `\fINode\fR` struct definition\. The trouble is in deciding what the type of`\fIparent\fR` should be\. We know it can‚Äôt contain an `\fIRc<T>\fR`, because that wouldcreate a reference cycle with `\fIleaf\.parent\fR` pointing to `\fIbranch\fR` and`\fIbranch\.children\fR` pointing to `\fIleaf\fR`, which would cause their `\fIstrong_count\fR`values to never be 0\.
.P
Thinking about the relationships another way, a parent node should own itschildren: if a parent node is dropped, its child nodes should be dropped aswell\. However, a child should not own its parent: if we drop a child node, theparent should still exist\. This is a case for weak references!
.P
So instead of `\fIRc<T>\fR`, we‚Äôll make the type of `\fIparent\fR` use `\fIWeak<T>\fR`,specifically a `\fIRefCell<Weak<Node>>\fR`\. Now our `\fINode\fR` struct definition lookslike this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::cell::RefCell;
use std::rc::{Rc, Weak};

#[derive(Debug)]
struct Node {
    value: i32,
    parent: RefCell<Weak<Node>>,
    children: RefCell<Vec<Rc<Node>>>,
}
# 
# fn main() {
#     let leaf = Rc::new(Node {
#         value: 3,
#         parent: RefCell::new(Weak::new()),
#         children: RefCell::new(vec![]),
#     });
# 
#     println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());
# 
#     let branch = Rc::new(Node {
#         value: 5,
#         parent: RefCell::new(Weak::new()),
#         children: RefCell::new(vec![Rc::clone(&leaf)]),
#     });
# 
#     *leaf\.parent\.borrow_mut() = Rc::downgrade(&branch);
# 
#     println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());
# }

.EE

.RE
.P
A node will be able to refer to its parent node but doesn‚Äôt own its parent\.In Listing 15\-28, we update `\fImain\fR` to use this new definition so the `\fIleaf\fR`node will have a way to refer to its parent, `\fIbranch\fR`:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::cell::RefCell;
# use std::rc::{Rc, Weak};
# 
# #[derive(Debug)]
# struct Node {
#     value: i32,
#     parent: RefCell<Weak<Node>>,
#     children: RefCell<Vec<Rc<Node>>>,
# }
# 
fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());

    let branch = Rc::new(Node {
        value: 5,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![Rc::clone(&leaf)]),
    });

    *leaf\.parent\.borrow_mut() = Rc::downgrade(&branch);

    println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());
}

.EE

.RE
Listing 15\-28: A `\fIleaf\fR` node with a weak reference to itsparent node `\fIbranch\fR`
.P
Creating the `\fIleaf\fR` node looks similar to Listing 15\-27 with the exception ofthe `\fIparent\fR` field: `\fIleaf\fR` starts out without a parent, so we create a new,empty `\fIWeak<Node>\fR` reference instance\.
.P
At this point, when we try to get a reference to the parent of `\fIleaf\fR` by usingthe `\fIupgrade\fR` method, we get a `\fINone\fR` value\. We see this in the output from thefirst `\fIprintln!\fR` statement:
.RS
.IP \fBtext\fR 2

.br
.EX
leaf parent = None

.EE

.RE
.P
When we create the `\fIbranch\fR` node, it will also have a new `\fIWeak<Node>\fR`reference in the `\fIparent\fR` field, because `\fIbranch\fR` doesn‚Äôt have a parent node\.We still have `\fIleaf\fR` as one of the children of `\fIbranch\fR`\. Once we have the`\fINode\fR` instance in `\fIbranch\fR`, we can modify `\fIleaf\fR` to give it a `\fIWeak<Node>\fR`reference to its parent\. We use the `\fIborrow_mut\fR` method on the`\fIRefCell<Weak<Node>>\fR` in the `\fIparent\fR` field of `\fIleaf\fR`, and then we use the`\fIRc::downgrade\fR` function to create a `\fIWeak<Node>\fR` reference to `\fIbranch\fR` fromthe `\fIRc<Node>\fR` in `\fIbranch\.\fR`
.P
When we print the parent of `\fIleaf\fR` again, this time we‚Äôll get a `\fISome\fR` variantholding `\fIbranch\fR`: now `\fIleaf\fR` can access its parent! When we print `\fIleaf\fR`, wealso avoid the cycle that eventually ended in a stack overflow like we had inListing 15\-26; the `\fIWeak<Node>\fR` references are printed as `\fI(Weak)\fR`:
.RS
.IP \fBtext\fR 2

.br
.EX
leaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },
children: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },
children: RefCell { value: [] } }] } })

.EE

.RE
.P
The lack of infinite output indicates that this code didn‚Äôt create a referencecycle\. We can also tell this by looking at the values we get from calling`\fIRc::strong_count\fR` and `\fIRc::weak_count\fR`\.
.br

.br
\fBVisualizing Changes to \fR
.br
=========================
.br
`\fIstrong_count\fR` and `\fIweak_count\fR`
.P
Let‚Äôs look at how the `\fIstrong_count\fR` and `\fIweak_count\fR` values of the `\fIRc<Node>\fR`instances change by creating a new inner scope and moving the creation of`\fIbranch\fR` into that scope\. By doing so, we can see what happens when `\fIbranch\fR` iscreated and then dropped when it goes out of scope\. The modifications are shownin Listing 15\-29:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::cell::RefCell;
# use std::rc::{Rc, Weak};
# 
# #[derive(Debug)]
# struct Node {
#     value: i32,
#     parent: RefCell<Weak<Node>>,
#     children: RefCell<Vec<Rc<Node>>>,
# }
# 
fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!(
        "leaf strong = {}, weak = {}",
        Rc::strong_count(&leaf),
        Rc::weak_count(&leaf),
    );

    {
        let branch = Rc::new(Node {
            value: 5,
            parent: RefCell::new(Weak::new()),
            children: RefCell::new(vec![Rc::clone(&leaf)]),
        });

        *leaf\.parent\.borrow_mut() = Rc::downgrade(&branch);

        println!(
            "branch strong = {}, weak = {}",
            Rc::strong_count(&branch),
            Rc::weak_count(&branch),
        );

        println!(
            "leaf strong = {}, weak = {}",
            Rc::strong_count(&leaf),
            Rc::weak_count(&leaf),
        );
    }

    println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());
    println!(
        "leaf strong = {}, weak = {}",
        Rc::strong_count(&leaf),
        Rc::weak_count(&leaf),
    );
}

.EE

.RE
Listing 15\-29: Creating `\fIbranch\fR` in an inner scope andexamining strong and weak reference counts
.P
After `\fIleaf\fR` is created, its `\fIRc<Node>\fR` has a strong count of 1 and a weakcount of 0\. In the inner scope, we create `\fIbranch\fR` and associate it with`\fIleaf\fR`, at which point when we print the counts, the `\fIRc<Node>\fR` in `\fIbranch\fR`will have a strong count of 1 and a weak count of 1 (for `\fIleaf\.parent\fR` pointingto `\fIbranch\fR` with a `\fIWeak<Node>\fR`)\. When we print the counts in `\fIleaf\fR`, we‚Äôll seeit will have a strong count of 2, because `\fIbranch\fR` now has a clone of the`\fIRc<Node>\fR` of `\fIleaf\fR` stored in `\fIbranch\.children\fR`, but will still have a weakcount of 0\.
.P
When the inner scope ends, `\fIbranch\fR` goes out of scope and the strong count ofthe `\fIRc<Node>\fR` decreases to 0, so its `\fINode\fR` is dropped\. The weak count of 1from `\fIleaf\.parent\fR` has no bearing on whether or not `\fINode\fR` is dropped, so wedon‚Äôt get any memory leaks!
.P
If we try to access the parent of `\fIleaf\fR` after the end of the scope, we‚Äôll get`\fINone\fR` again\. At the end of the program, the `\fIRc<Node>\fR` in `\fIleaf\fR` has a strongcount of 1 and a weak count of 0, because the variable `\fIleaf\fR` is now the onlyreference to the `\fIRc<Node>\fR` again\.
.P
All of the logic that manages the counts and value dropping is built into`\fIRc<T>\fR` and `\fIWeak<T>\fR` and their implementations of the `\fIDrop\fR` trait\. Byspecifying that the relationship from a child to its parent should be a`\fIWeak<T>\fR` reference in the definition of `\fINode\fR`, you‚Äôre able to have parentnodes point to child nodes and vice versa without creating a reference cycleand memory leaks\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
This chapter covered how to use smart pointers to make different guarantees andtrade\-offs from those Rust makes by default with regular references\. The`\fIBox<T>\fR` type has a known size and points to data allocated on the heap\. The`\fIRc<T>\fR` type keeps track of the number of references to data on the heap sothat data can have multiple owners\. The `\fIRefCell<T>\fR` type with its interiormutability gives us a type that we can use when we need an immutable type butneed to change an inner value of that type; it also enforces the borrowingrules at runtime instead of at compile time\.
.P
Also discussed were the `\fIDeref\fR` and `\fIDrop\fR` traits, which enable a lot of thefunctionality of smart pointers\. We explored reference cycles that can causememory leaks and how to prevent them using `\fIWeak<T>\fR`\.
.P
If this chapter has piqued your interest and you want to implement your ownsmart pointers, check out 
.UR \.\./nomicon/index\.html
.UE
‚ÄúThe Rustonomicon‚Äù for more usefulinformation\.
.P
Next, we‚Äôll talk about concurrency in Rust\. You‚Äôll even learn about a few newsmart pointers\.
.SH "Fearless Concurrency"

.br

.br
\fBFearless Concurrency\fR
.br
======================
.br

.P
Handling concurrent programming safely and efficiently is another of Rust‚Äôsmajor goals\. \fIConcurrent programming\fR, where different parts of a programexecute independently, and \fIparallel programming\fR, where different parts of aprogram execute at the same time, are becoming increasingly important as morecomputers take advantage of their multiple processors\. Historically,programming in these contexts has been difficult and error prone: Rust hopes tochange that\.
.P
Initially, the Rust team thought that ensuring memory safety and preventingconcurrency problems were two separate challenges to be solved with differentmethods\. Over time, the team discovered that the ownership and type systems area powerful set of tools to help manage memory safety \fIand\fR concurrencyproblems! By leveraging ownership and type checking, many concurrency errorsare compile\-time errors in Rust rather than runtime errors\. Therefore, ratherthan making you spend lots of time trying to reproduce the exact circumstancesunder which a runtime concurrency bug occurs, incorrect code will refuse tocompile and present an error explaining the problem\. As a result, you can fixyour code while you‚Äôre working on it rather than potentially after it has beenshipped to production\. We‚Äôve nicknamed this aspect of Rust \fIfearless\fR\fIconcurrency\fR\. Fearless concurrency allows you to write code that is free ofsubtle bugs and is easy to refactor without introducing new bugs\.
.P
Note: For simplicity‚Äôs sake, we‚Äôll refer to many of the problems as\fIconcurrent\fR rather than being more precise by saying \fIconcurrent and/or\fRparallel\. If this book were about concurrency and/or parallelism, we‚Äôd bemore specific\. For this chapter, please mentally substitute \fIconcurrent\fRand/or parallel whenever we use \fIconcurrent\fR\.
.P
Many languages are dogmatic about the solutions they offer for handlingconcurrent problems\. For example, Erlang has elegant functionality formessage\-passing concurrency but has only obscure ways to share state betweenthreads\. Supporting only a subset of possible solutions is a reasonablestrategy for higher\-level languages, because a higher\-level language promisesbenefits from giving up some control to gain abstractions\. However, lower\-levellanguages are expected to provide the solution with the best performance in anygiven situation and have fewer abstractions over the hardware\. Therefore, Rustoffers a variety of tools for modeling problems in whatever way is appropriatefor your situation and requirements\.
.P
Here are the topics we‚Äôll cover in this chapter:
.P
How to create threads to run multiple pieces of code at the same time\fIMessage\-passing\fR concurrency, where channels send messages between threads\fIShared\-state\fR concurrency, where multiple threads have access to some pieceof data
.P
The `\fISync\fR` and `\fISend\fR` traits, which extend Rust‚Äôs concurrency guarantees touser\-defined types as well as types provided by the standard library
.SH "Using Threads to Run Code Simultaneously"

.br

.br
\fBUsing Threads to Run Code Simultaneously\fR
.br
==========================================
.br

.P
In most current operating systems, an executed program‚Äôs code is run in a\fIprocess\fR, and the operating system will manage multiple processes at once\.Within a program, you can also have independent parts that run simultaneously\.The features that run these independent parts are called \fIthreads\fR\. Forexample, a web server could have multiple threads so that it could respond tomore than one request at the same time\.
.P
Splitting the computation in your program into multiple threads to run multipletasks at the same time can improve performance, but it also adds complexity\.Because threads can run simultaneously, there‚Äôs no inherent guarantee about theorder in which parts of your code on different threads will run\. This can leadto problems, such as:
.P
Race conditions, where threads are accessing data or resources in aninconsistent order
.P
Deadlocks, where two threads are waiting for each other, preventing boththreads from continuing
.P
Bugs that happen only in certain situations and are hard to reproduce and fixreliably
.P
Rust attempts to mitigate the negative effects of using threads, butprogramming in a multithreaded context still takes careful thought and requiresa code structure that is different from that in programs running in a singlethread\.
.P
Programming languages implement threads in a few different ways, and manyoperating systems provide an API the language can call for creating newthreads\. The Rust standard library uses a \fI1:1\fR model of thread implementation,whereby a program uses one operating system thread per one language thread\.There are crates that implement other models of threading that make differenttradeoffs to the 1:1 model\.
.br

.br
\fBCreating a New Thread with \fR
.br
=============================
.br
`\fIspawn\fR`
.P
To create a new thread, we call the `\fIthread::spawn\fR` function and pass it aclosure (we talked about closures in Chapter 13) containing the code we want torun in the new thread\. The example in Listing 16\-1 prints some text from a mainthread and other text from a new thread:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;
use std::time::Duration;

fn main() {
    thread::spawn(|| {
        for i in 1\.\.10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1\.\.5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
}

.EE

.RE
Listing 16\-1: Creating a new thread to print one thingwhile the main thread prints something else
.P
Note that when the main thread of a Rust program completes, all spawned threadsare shut down, whether or not they have finished running\. The output from thisprogram might be a little different every time, but it will look similar to thefollowing:
.RS
.IP \fBtext\fR 2

.br
.EX
hi number 1 from the main thread!
hi number 1 from the spawned thread!
hi number 2 from the main thread!
hi number 2 from the spawned thread!
hi number 3 from the main thread!
hi number 3 from the spawned thread!
hi number 4 from the main thread!
hi number 4 from the spawned thread!
hi number 5 from the spawned thread!

.EE

.RE
.P
The calls to `\fIthread::sleep\fR` force a thread to stop its execution for a shortduration, allowing a different thread to run\. The threads will probably taketurns, but that isn‚Äôt guaranteed: it depends on how your operating systemschedules the threads\. In this run, the main thread printed first, even thoughthe print statement from the spawned thread appears first in the code\. And eventhough we told the spawned thread to print until `\fIi\fR` is 9, it only got to 5before the main thread shut down\.
.P
If you run this code and only see output from the main thread, or don‚Äôt see anyoverlap, try increasing the numbers in the ranges to create more opportunitiesfor the operating system to switch between the threads\.
.br

.br
\fBWaiting for All Threads to Finish Using \fR
.br
==========================================
.br
`\fIjoin\fR` Handles
.P
The code in Listing 16\-1 not only stops the spawned thread prematurely most ofthe time due to the main thread ending, but because there is no guarantee onthe order in which threads run, we also can‚Äôt guarantee that the spawned threadwill get to run at all!
.P
We can fix the problem of the spawned thread not running or ending prematurelyby saving the return value of `\fIthread::spawn\fR` in a variable\. The return type of`\fIthread::spawn\fR` is `\fIJoinHandle\fR`\. A `\fIJoinHandle\fR` is an owned value that, when wecall the `\fIjoin\fR` method on it, will wait for its thread to finish\. Listing 16\-2shows how to use the `\fIJoinHandle\fR` of the thread we created in Listing 16\-1 andcall `\fIjoin\fR` to make sure the spawned thread finishes before `\fImain\fR` exits:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;
use std::time::Duration;

fn main() {
    let handle = thread::spawn(|| {
        for i in 1\.\.10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1\.\.5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }

    handle\.join()\.unwrap();
}

.EE

.RE
Listing 16\-2: Saving a `\fIJoinHandle\fR` from `\fIthread::spawn\fR`to guarantee the thread is run to completion
.P
Calling `\fIjoin\fR` on the handle blocks the thread currently running until thethread represented by the handle terminates\. \fIBlocking\fR a thread means thatthread is prevented from performing work or exiting\. Because we‚Äôve put the callto `\fIjoin\fR` after the main thread‚Äôs `\fIfor\fR` loop, running Listing 16\-2 shouldproduce output similar to this:
.RS
.IP \fBtext\fR 2

.br
.EX
hi number 1 from the main thread!
hi number 2 from the main thread!
hi number 1 from the spawned thread!
hi number 3 from the main thread!
hi number 2 from the spawned thread!
hi number 4 from the main thread!
hi number 3 from the spawned thread!
hi number 4 from the spawned thread!
hi number 5 from the spawned thread!
hi number 6 from the spawned thread!
hi number 7 from the spawned thread!
hi number 8 from the spawned thread!
hi number 9 from the spawned thread!

.EE

.RE
.P
The two threads continue alternating, but the main thread waits because of thecall to `\fIhandle\.join()\fR` and does not end until the spawned thread is finished\.
.P
But let‚Äôs see what happens when we instead move `\fIhandle\.join()\fR` before the`\fIfor\fR` loop in `\fImain\fR`, like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;
use std::time::Duration;

fn main() {
    let handle = thread::spawn(|| {
        for i in 1\.\.10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    handle\.join()\.unwrap();

    for i in 1\.\.5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
}

.EE

.RE
.P
The main thread will wait for the spawned thread to finish and then run its`\fIfor\fR` loop, so the output won‚Äôt be interleaved anymore, as shown here:
.RS
.IP \fBtext\fR 2

.br
.EX
hi number 1 from the spawned thread!
hi number 2 from the spawned thread!
hi number 3 from the spawned thread!
hi number 4 from the spawned thread!
hi number 5 from the spawned thread!
hi number 6 from the spawned thread!
hi number 7 from the spawned thread!
hi number 8 from the spawned thread!
hi number 9 from the spawned thread!
hi number 1 from the main thread!
hi number 2 from the main thread!
hi number 3 from the main thread!
hi number 4 from the main thread!

.EE

.RE
.P
Small details, such as where `\fIjoin\fR` is called, can affect whether or not yourthreads run at the same time\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fImove\fR` Closures with Threads
.P
We'll often use the `\fImove\fR` keyword with closures passed to `\fIthread::spawn\fR`because the closure will then take ownership of the values it uses from theenvironment, thus transferring ownership of those values from one thread toanother\. In the 
.UR ch13\-01\-closures\.html#capturing\-references\-or\-moving\-ownership
.UE
‚ÄúCapturing References or Moving Ownership‚Äù section of Chapter 13, we discussed `\fImove\fR` in the context of closures\. Now,we‚Äôll concentrate more on the interaction between `\fImove\fR` and `\fIthread::spawn\fR`\.
.P
Notice in Listing 16\-1 that the closure we pass to `\fIthread::spawn\fR` takes noarguments: we‚Äôre not using any data from the main thread in the spawnedthread‚Äôs code\. To use data from the main thread in the spawned thread, thespawned thread‚Äôs closure must capture the values it needs\. Listing 16\-3 showsan attempt to create a vector in the main thread and use it in the spawnedthread\. However, this won‚Äôt yet work, as you‚Äôll see in a moment\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(|| {
        println!("Here's a vector: {:?}", v);
    });

    handle\.join()\.unwrap();
}

.EE

.RE
Listing 16\-3: Attempting to use a vector created by themain thread in another thread
.P
The closure uses `\fIv\fR`, so it will capture `\fIv\fR` and make it part of the closure‚Äôsenvironment\. Because `\fIthread::spawn\fR` runs this closure in a new thread, weshould be able to access `\fIv\fR` inside that new thread\. But when we compile thisexample, we get the following error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling threads v0\.1\.0 (file:///projects/threads)
error[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function
 \-\-> src/main\.rs:6:32
  |
6 |     let handle = thread::spawn(|| {
  |                                ^^ may outlive borrowed value `v`
7 |         println!("Here's a vector: {:?}", v);
  |                                           \- `v` is borrowed here
  |
note: function requires argument type to outlive `'static`
 \-\-> src/main\.rs:6:18
  |
6 |       let handle = thread::spawn(|| {
  |  __________________^
7 | |         println!("Here's a vector: {:?}", v);
8 | |     });
  | |______^
help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword
  |
6 |     let handle = thread::spawn(move || {
  |                                ++++

For more information about this error, try `rustc \-\-explain E0373`\.
error: could not compile `threads` due to previous error

.EE

.RE
.P
Rust \fIinfers\fR how to capture `\fIv\fR`, and because `\fIprintln!\fR` only needs a referenceto `\fIv\fR`, the closure tries to borrow `\fIv\fR`\. However, there‚Äôs a problem: Rust can‚Äôttell how long the spawned thread will run, so it doesn‚Äôt know if the referenceto `\fIv\fR` will always be valid\.
.P
Listing 16\-4 provides a scenario that‚Äôs more likely to have a reference to `\fIv\fR`that won‚Äôt be valid:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(|| {
        println!("Here's a vector: {:?}", v);
    });

    drop(v); // oh no!

    handle\.join()\.unwrap();
}

.EE

.RE
Listing 16\-4: A thread with a closure that attempts tocapture a reference to `\fIv\fR` from a main thread that drops `\fIv\fR`
.P
If Rust allowed us to run this code, there‚Äôs a possibility the spawned threadwould be immediately put in the background without running at all\. The spawnedthread has a reference to `\fIv\fR` inside, but the main thread immediately drops`\fIv\fR`, using the `\fIdrop\fR` function we discussed in Chapter 15\. Then, when thespawned thread starts to execute, `\fIv\fR` is no longer valid, so a reference to itis also invalid\. Oh no!
.P
To fix the compiler error in Listing 16\-3, we can use the error message‚Äôsadvice:
.RS
.IP \fBtext\fR 2

.br
.EX
help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword
  |
6 |     let handle = thread::spawn(move || {
  |                                ++++

.EE

.RE
.P
By adding the `\fImove\fR` keyword before the closure, we force the closure to takeownership of the values it‚Äôs using rather than allowing Rust to infer that itshould borrow the values\. The modification to Listing 16\-3 shown in Listing16\-5 will compile and run as we intend:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(move || {
        println!("Here's a vector: {:?}", v);
    });

    handle\.join()\.unwrap();
}

.EE

.RE
Listing 16\-5: Using the `\fImove\fR` keyword to force a closureto take ownership of the values it uses
.P
We might be tempted to try the same thing to fix the code in Listing 16\-4 wherethe main thread called `\fIdrop\fR` by using a `\fImove\fR` closure\. However, this fix willnot work because what Listing 16\-4 is trying to do is disallowed for adifferent reason\. If we added `\fImove\fR` to the closure, we would move `\fIv\fR` into theclosure‚Äôs environment, and we could no longer call `\fIdrop\fR` on it in the mainthread\. We would get this compiler error instead:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling threads v0\.1\.0 (file:///projects/threads)
error[E0382]: use of moved value: `v`
  \-\-> src/main\.rs:10:10
   |
4  |     let v = vec![1, 2, 3];
   |         \- move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait
5  | 
6  |     let handle = thread::spawn(move || {
   |                                \-\-\-\-\-\-\- value moved into closure here
7  |         println!("Here's a vector: {:?}", v);
   |                                           \- variable moved due to use in closure
\.\.\.
10 |     drop(v); // oh no!
   |          ^ value used here after move

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `threads` due to previous error

.EE

.RE
.P
Rust‚Äôs ownership rules have saved us again! We got an error from the code inListing 16\-3 because Rust was being conservative and only borrowing `\fIv\fR` for thethread, which meant the main thread could theoretically invalidate the spawnedthread‚Äôs reference\. By telling Rust to move ownership of `\fIv\fR` to the spawnedthread, we‚Äôre guaranteeing Rust that the main thread won‚Äôt use `\fIv\fR` anymore\. Ifwe change Listing 16\-4 in the same way, we‚Äôre then violating the ownershiprules when we try to use `\fIv\fR` in the main thread\. The `\fImove\fR` keyword overridesRust‚Äôs conservative default of borrowing; it doesn‚Äôt let us violate theownership rules\.
.P
With a basic understanding of threads and the thread API, let‚Äôs look at what wecan \fIdo\fR with threads\.
.SH "Using Message Passing to Transfer Data Between Threads"

.br

.br
\fBUsing Message Passing to Transfer Data Between Threads\fR
.br
========================================================
.br

.P
One increasingly popular approach to ensuring safe concurrency is \fImessage\fRpassing, where threads or actors communicate by sending each other messagescontaining data\. Here‚Äôs the idea in a slogan from 
.UR https://golang\.org/doc/effective_go\.html#concurrency
.UE
the Go languagedocumentation:‚ÄúDo not communicate by sharing memory; instead, share memory by communicating\.‚Äù
.P
To accomplish message\-sending concurrency, Rust's standard library provides animplementation of \fIchannels\fR\. A channel is a general programming concept bywhich data is sent from one thread to another\.
.P
You can imagine a channel in programming as being like a directional channel ofwater, such as a stream or a river\. If you put something like a rubber duckinto a river, it will travel downstream to the end of the waterway\.
.P
A channel has two halves: a transmitter and a receiver\. The transmitter half isthe upstream location where you put rubber ducks into the river, and thereceiver half is where the rubber duck ends up downstream\. One part of yourcode calls methods on the transmitter with the data you want to send, andanother part checks the receiving end for arriving messages\. A channel is saidto be \fIclosed\fR if either the transmitter or receiver half is dropped\.
.P
Here, we‚Äôll work up to a program that has one thread to generate values andsend them down a channel, and another thread that will receive the values andprint them out\. We‚Äôll be sending simple values between threads using a channelto illustrate the feature\. Once you‚Äôre familiar with the technique, you coulduse channels for any threads that need to communicate between each other, suchas a chat system or a system where many threads perform parts of a calculationand send the parts to one thread that aggregates the results\.
.P
First, in Listing 16\-6, we‚Äôll create a channel but not do anything with it\.Note that this won‚Äôt compile yet because Rust can‚Äôt tell what type of values wewant to send over the channel\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::sync::mpsc;

fn main() {
    let (tx, rx) = mpsc::channel();
}

.EE

.RE
Listing 16\-6: Creating a channel and assigning the twohalves to `\fItx\fR` and `\fIrx\fR`
.P
We create a new channel using the `\fImpsc::channel\fR` function; `\fImpsc\fR` stands for\fImultiple producer, single consumer\fR\. In short, the way Rust‚Äôs standard libraryimplements channels means a channel can have multiple \fIsending\fR ends thatproduce values but only one \fIreceiving\fR end that consumes those values\. Imaginemultiple streams flowing together into one big river: everything sent down anyof the streams will end up in one river at the end\. We‚Äôll start with a singleproducer for now, but we‚Äôll add multiple producers when we get this exampleworking\.
.P
The `\fImpsc::channel\fR` function returns a tuple, the first element of which is thesending end\-\-the transmitter\-\-and the second element is the receiving end\-\-thereceiver\. The abbreviations `\fItx\fR` and `\fIrx\fR` are traditionally used in many fieldsfor \fItransmitter\fR and \fIreceiver\fR respectively, so we name our variables as suchto indicate each end\. We‚Äôre using a `\fIlet\fR` statement with a pattern thatdestructures the tuples; we‚Äôll discuss the use of patterns in `\fIlet\fR` statementsand destructuring in Chapter 18\. For now, know that using a `\fIlet\fR` statementthis way is a convenient approach to extract the pieces of the tuple returnedby `\fImpsc::channel\fR`\.
.P
Let‚Äôs move the transmitting end into a spawned thread and have it send onestring so the spawned thread is communicating with the main thread, as shown inListing 16\-7\. This is like putting a rubber duck in the river upstream orsending a chat message from one thread to another\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::sync::mpsc;
use std::thread;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx\.send(val)\.unwrap();
    });
}

.EE

.RE
Listing 16\-7: Moving `\fItx\fR` to a spawned thread and sending‚Äúhi‚Äù
.P
Again, we‚Äôre using `\fIthread::spawn\fR` to create a new thread and then using `\fImove\fR`to move `\fItx\fR` into the closure so the spawned thread owns `\fItx\fR`\. The spawnedthread needs to own the transmitter to be able to send messages through thechannel\. The transmitter has a `\fIsend\fR` method that takes the value we want tosend\. The `\fIsend\fR` method returns a `\fIResult<T, E>\fR` type, so if the receiver hasalready been dropped and there‚Äôs nowhere to send a value, the send operationwill return an error\. In this example, we‚Äôre calling `\fIunwrap\fR` to panic in caseof an error\. But in a real application, we would handle it properly: return toChapter 9 to review strategies for proper error handling\.
.P
In Listing 16\-8, we‚Äôll get the value from the receiver in the main thread\. Thisis like retrieving the rubber duck from the water at the end of the river orreceiving a chat message\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::sync::mpsc;
use std::thread;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx\.send(val)\.unwrap();
    });

    let received = rx\.recv()\.unwrap();
    println!("Got: {}", received);
}

.EE

.RE
Listing 16\-8: Receiving the value ‚Äúhi‚Äù in the main threadand printing it
.P
The receiver has two useful methods: `\fIrecv\fR` and `\fItry_recv\fR`\. We‚Äôre using `\fIrecv\fR`,short for \fIreceive\fR, which will block the main thread‚Äôs execution and waituntil a value is sent down the channel\. Once a value is sent, `\fIrecv\fR` willreturn it in a `\fIResult<T, E>\fR`\. When the transmitter closes, `\fIrecv\fR` will returnan error to signal that no more values will be coming\.
.P
The `\fItry_recv\fR` method doesn‚Äôt block, but will instead return a `\fIResult<T, E>\fR`immediately: an `\fIOk\fR` value holding a message if one is available and an `\fIErr\fR`value if there aren‚Äôt any messages this time\. Using `\fItry_recv\fR` is useful ifthis thread has other work to do while waiting for messages: we could write aloop that calls `\fItry_recv\fR` every so often, handles a message if one isavailable, and otherwise does other work for a little while until checkingagain\.
.P
We‚Äôve used `\fIrecv\fR` in this example for simplicity; we don‚Äôt have any other workfor the main thread to do other than wait for messages, so blocking the mainthread is appropriate\.
.P
When we run the code in Listing 16\-8, we‚Äôll see the value printed from the mainthread:
.RS
.IP \fBtext\fR 2

.br
.EX
Got: hi

.EE

.RE
.P
Perfect!
.br

.br
\fBChannels and Ownership Transference\fR
.br
=====================================
.br

.P
The ownership rules play a vital role in message sending because they help youwrite safe, concurrent code\. Preventing errors in concurrent programming is theadvantage of thinking about ownership throughout your Rust programs\. Let‚Äôs doan experiment to show how channels and ownership work together to preventproblems: we‚Äôll try to use a `\fIval\fR` value in the spawned thread \fIafter\fR we‚Äôvesent it down the channel\. Try compiling the code in Listing 16\-9 to see whythis code isn‚Äôt allowed:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::sync::mpsc;
use std::thread;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx\.send(val)\.unwrap();
        println!("val is {}", val);
    });

    let received = rx\.recv()\.unwrap();
    println!("Got: {}", received);
}

.EE

.RE
Listing 16\-9: Attempting to use `\fIval\fR` after we‚Äôve sent itdown the channel
.P
Here, we try to print `\fIval\fR` after we‚Äôve sent it down the channel via `\fItx\.send\fR`\.Allowing this would be a bad idea: once the value has been sent to anotherthread, that thread could modify or drop it before we try to use the valueagain\. Potentially, the other thread‚Äôs modifications could cause errors orunexpected results due to inconsistent or nonexistent data\. However, Rust givesus an error if we try to compile the code in Listing 16\-9:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling message\-passing v0\.1\.0 (file:///projects/message\-passing)
error[E0382]: borrow of moved value: `val`
  \-\-> src/main\.rs:10:31
   |
8  |         let val = String::from("hi");
   |             \-\-\- move occurs because `val` has type `String`, which does not implement the `Copy` trait
9  |         tx\.send(val)\.unwrap();
   |                 \-\-\- value moved here
10 |         println!("val is {}", val);
   |                               ^^^ value borrowed here after move
   |
   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with \-Z macro\-backtrace for more info)

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `message\-passing` due to previous error

.EE

.RE
.P
Our concurrency mistake has caused a compile time error\. The `\fIsend\fR` functiontakes ownership of its parameter, and when the value is moved, the receivertakes ownership of it\. This stops us from accidentally using the value againafter sending it; the ownership system checks that everything is okay\.
.br

.br
\fBSending Multiple Values and Seeing the Receiver Waiting\fR
.br
=========================================================
.br

.P
The code in Listing 16\-8 compiled and ran, but it didn‚Äôt clearly show us thattwo separate threads were talking to each other over the channel\. In Listing16\-10 we‚Äôve made some modifications that will prove the code in Listing 16\-8 isrunning concurrently: the spawned thread will now send multiple messages andpause for a second between each message\.Filename: src/main\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::sync::mpsc;
use std::thread;
use std::time::Duration;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let vals = vec![
            String::from("hi"),
            String::from("from"),
            String::from("the"),
            String::from("thread"),
        ];

        for val in vals {
            tx\.send(val)\.unwrap();
            thread::sleep(Duration::from_secs(1));
        }
    });

    for received in rx {
        println!("Got: {}", received);
    }
}

.EE

.RE
Listing 16\-10: Sending multiple messages and pausingbetween each
.P
This time, the spawned thread has a vector of strings that we want to send tothe main thread\. We iterate over them, sending each individually, and pausebetween each by calling the `\fIthread::sleep\fR` function with a `\fIDuration\fR` value of1 second\.
.P
In the main thread, we‚Äôre not calling the `\fIrecv\fR` function explicitly anymore:instead, we‚Äôre treating `\fIrx\fR` as an iterator\. For each value received, we‚Äôreprinting it\. When the channel is closed, iteration will end\.
.P
When running the code in Listing 16\-10, you should see the following outputwith a 1\-second pause in between each line:
.RS
.IP \fBtext\fR 2

.br
.EX
Got: hi
Got: from
Got: the
Got: thread

.EE

.RE
.P
Because we don‚Äôt have any code that pauses or delays in the `\fIfor\fR` loop in themain thread, we can tell that the main thread is waiting to receive values fromthe spawned thread\.
.br

.br
\fBCreating Multiple Producers by Cloning the Transmitter\fR
.br
========================================================
.br

.P
Earlier we mentioned that `\fImpsc\fR` was an acronym for \fImultiple producer,\fRsingle consumer\. Let‚Äôs put `\fImpsc\fR` to use and expand the code in Listing 16\-10to create multiple threads that all send values to the same receiver\. We can doso by cloning the transmitter, as shown in Listing 16\-11:Filename: src/main\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::thread;
# use std::time::Duration;
# 
# fn main() {
    // \-\-snip\-\-

    let (tx, rx) = mpsc::channel();

    let tx1 = tx\.clone();
    thread::spawn(move || {
        let vals = vec![
            String::from("hi"),
            String::from("from"),
            String::from("the"),
            String::from("thread"),
        ];

        for val in vals {
            tx1\.send(val)\.unwrap();
            thread::sleep(Duration::from_secs(1));
        }
    });

    thread::spawn(move || {
        let vals = vec![
            String::from("more"),
            String::from("messages"),
            String::from("for"),
            String::from("you"),
        ];

        for val in vals {
            tx\.send(val)\.unwrap();
            thread::sleep(Duration::from_secs(1));
        }
    });

    for received in rx {
        println!("Got: {}", received);
    }

    // \-\-snip\-\-
# }

.EE

.RE
Listing 16\-11: Sending multiple messages from multipleproducers
.P
This time, before we create the first spawned thread, we call `\fIclone\fR` on thetransmitter\. This will give us a new transmitter we can pass to the firstspawned thread\. We pass the original transmitter to a second spawned thread\.This gives us two threads, each sending different messages to the one receiver\.
.P
When you run the code, your output should look something like this:
.RS
.IP \fBtext\fR 2

.br
.EX
Got: hi
Got: more
Got: from
Got: messages
Got: for
Got: the
Got: thread
Got: you

.EE

.RE
.P
You might see the values in another order, depending on your system\. This iswhat makes concurrency interesting as well as difficult\. If you experiment with`\fIthread::sleep\fR`, giving it various values in the different threads, each runwill be more nondeterministic and create different output each time\.
.P
Now that we‚Äôve looked at how channels work, let‚Äôs look at a different method ofconcurrency\.
.SH "Shared\-State Concurrency"

.br

.br
\fBShared\-State Concurrency\fR
.br
==========================
.br

.P
Message passing is a fine way of handling concurrency, but it‚Äôs not the onlyone\. Another method would be for multiple threads to access the same shareddata\. Consider this part of the slogan from the Go language documentationagain: ‚Äúdo not communicate by sharing memory\.‚Äù
.P
What would communicating by sharing memory look like? In addition, why wouldmessage\-passing enthusiasts caution not to use memory sharing?
.P
In a way, channels in any programming language are similar to single ownership,because once you transfer a value down a channel, you should no longer use thatvalue\. Shared memory concurrency is like multiple ownership: multiple threadscan access the same memory location at the same time\. As you saw in Chapter 15,where smart pointers made multiple ownership possible, multiple ownership canadd complexity because these different owners need managing\. Rust‚Äôs type systemand ownership rules greatly assist in getting this management correct\. For anexample, let‚Äôs look at mutexes, one of the more common concurrency primitivesfor shared memory\.
.br

.br
\fBUsing Mutexes to Allow Access to Data from One Thread at a Time\fR
.br
=================================================================
.br
\fIMutex\fR is an abbreviation for \fImutual exclusion\fR, as in, a mutex allows onlyone thread to access some data at any given time\. To access the data in amutex, a thread must first signal that it wants access by asking to acquire themutex‚Äôs \fIlock\fR\. The lock is a data structure that is part of the mutex thatkeeps track of who currently has exclusive access to the data\. Therefore, themutex is described as \fIguarding\fR the data it holds via the locking system\.
.P
Mutexes have a reputation for being difficult to use because you have toremember two rules:
.P
You must attempt to acquire the lock before using the data\.
.P
When you‚Äôre done with the data that the mutex guards, you must unlock thedata so other threads can acquire the lock\.
.P
For a real\-world metaphor for a mutex, imagine a panel discussion at aconference with only one microphone\. Before a panelist can speak, they have toask or signal that they want to use the microphone\. When they get themicrophone, they can talk for as long as they want to and then hand themicrophone to the next panelist who requests to speak\. If a panelist forgets tohand the microphone off when they‚Äôre finished with it, no one else is able tospeak\. If management of the shared microphone goes wrong, the panel won‚Äôt workas planned!
.P
Management of mutexes can be incredibly tricky to get right, which is why somany people are enthusiastic about channels\. However, thanks to Rust‚Äôs typesystem and ownership rules, you can‚Äôt get locking and unlocking wrong\.
.br

.br
\fBThe API of \fR
.br
=============
.br
`\fIMutex<T>\fR`
.P
As an example of how to use a mutex, let‚Äôs start by using a mutex in asingle\-threaded context, as shown in Listing 16\-12:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::sync::Mutex;

fn main() {
    let m = Mutex::new(5);

    {
        let mut num = m\.lock()\.unwrap();
        *num = 6;
    }

    println!("m = {:?}", m);
}

.EE

.RE
Listing 16\-12: Exploring the API of `\fIMutex<T>\fR` in asingle\-threaded context for simplicity
.P
As with many types, we create a `\fIMutex<T>\fR` using the associated function `\fInew\fR`\.To access the data inside the mutex, we use the `\fIlock\fR` method to acquire thelock\. This call will block the current thread so it can‚Äôt do any work untilit‚Äôs our turn to have the lock\.
.P
The call to `\fIlock\fR` would fail if another thread holding the lock panicked\. Inthat case, no one would ever be able to get the lock, so we‚Äôve chosen to`\fIunwrap\fR` and have this thread panic if we‚Äôre in that situation\.
.P
After we‚Äôve acquired the lock, we can treat the return value, named `\fInum\fR` inthis case, as a mutable reference to the data inside\. The type system ensuresthat we acquire a lock before using the value in `\fIm\fR`\. The type of `\fIm\fR` is`\fIMutex<i32>\fR`, not `\fIi32\fR`, so we \fImust\fR call `\fIlock\fR` to be able to use the `\fIi32\fR`value\. We can‚Äôt forget; the type system won‚Äôt let us access the inner `\fIi32\fR`otherwise\.
.P
As you might suspect, `\fIMutex<T>\fR` is a smart pointer\. More accurately, the callto `\fIlock\fR` \fIreturns\fR a smart pointer called `\fIMutexGuard\fR`, wrapped in a`\fILockResult\fR` that we handled with the call to `\fIunwrap\fR`\. The `\fIMutexGuard\fR` smartpointer implements `\fIDeref\fR` to point at our inner data; the smart pointer alsohas a `\fIDrop\fR` implementation that releases the lock automatically when a`\fIMutexGuard\fR` goes out of scope, which happens at the end of the inner scope\. Asa result, we don‚Äôt risk forgetting to release the lock and blocking the mutexfrom being used by other threads, because the lock release happensautomatically\.
.P
After dropping the lock, we can print the mutex value and see that we were ableto change the inner `\fIi32\fR` to 6\.
.br

.br
\fBSharing a \fR
.br
============
.br
`\fIMutex<T>\fR` Between Multiple Threads
.P
Now, let‚Äôs try to share a value between multiple threads using `\fIMutex<T>\fR`\.We‚Äôll spin up 10 threads and have them each increment a counter value by 1, sothe counter goes from 0 to 10\. The next example in Listing 16\-13 will havea compiler error, and we‚Äôll use that error to learn more about using`\fIMutex<T>\fR` and how Rust helps us use it correctly\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::sync::Mutex;
use std::thread;

fn main() {
    let counter = Mutex::new(0);
    let mut handles = vec![];

    for _ in 0\.\.10 {
        let handle = thread::spawn(move || {
            let mut num = counter\.lock()\.unwrap();

            *num += 1;
        });
        handles\.push(handle);
    }

    for handle in handles {
        handle\.join()\.unwrap();
    }

    println!("Result: {}", *counter\.lock()\.unwrap());
}

.EE

.RE
Listing 16\-13: Ten threads each increment a counterguarded by a `\fIMutex<T>\fR`
.P
We create a `\fIcounter\fR` variable to hold an `\fIi32\fR` inside a `\fIMutex<T>\fR`, as we didin Listing 16\-12\. Next, we create 10 threads by iterating over a range ofnumbers\. We use `\fIthread::spawn\fR` and give all the threads the same closure: onethat moves the counter into the thread, acquires a lock on the `\fIMutex<T>\fR` bycalling the `\fIlock\fR` method, and then adds 1 to the value in the mutex\. When athread finishes running its closure, `\fInum\fR` will go out of scope and release thelock so another thread can acquire it\.
.P
In the main thread, we collect all the join handles\. Then, as we did in Listing16\-2, we call `\fIjoin\fR` on each handle to make sure all the threads finish\. Atthat point, the main thread will acquire the lock and print the result of thisprogram\.
.P
We hinted that this example wouldn‚Äôt compile\. Now let‚Äôs find out why!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling shared\-state v0\.1\.0 (file:///projects/shared\-state)
error[E0382]: use of moved value: `counter`
  \-\-> src/main\.rs:9:36
   |
5  |     let counter = Mutex::new(0);
   |         \-\-\-\-\-\-\- move occurs because `counter` has type `Mutex<i32>`, which does not implement the `Copy` trait
\.\.\.
9  |         let handle = thread::spawn(move || {
   |                                    ^^^^^^^ value moved into closure here, in previous iteration of loop
10 |             let mut num = counter\.lock()\.unwrap();
   |                           \-\-\-\-\-\-\- use occurs due to use in closure

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `shared\-state` due to previous error

.EE

.RE
.P
The error message states that the `\fIcounter\fR` value was moved in the previousiteration of the loop\. Rust is telling us that we can‚Äôt move the ownershipof lock `\fIcounter\fR` into multiple threads\. Let‚Äôs fix the compiler error with amultiple\-ownership method we discussed in Chapter 15\.
.br

.br
\fBMultiple Ownership with Multiple Threads\fR
.br
==========================================
.br

.P
In Chapter 15, we gave a value multiple owners by using the smart pointer`\fIRc<T>\fR` to create a reference counted value\. Let‚Äôs do the same here and seewhat happens\. We‚Äôll wrap the `\fIMutex<T>\fR` in `\fIRc<T>\fR` in Listing 16\-14 and clonethe `\fIRc<T>\fR` before moving ownership to the thread\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::rc::Rc;
use std::sync::Mutex;
use std::thread;

fn main() {
    let counter = Rc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0\.\.10 {
        let counter = Rc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter\.lock()\.unwrap();

            *num += 1;
        });
        handles\.push(handle);
    }

    for handle in handles {
        handle\.join()\.unwrap();
    }

    println!("Result: {}", *counter\.lock()\.unwrap());
}

.EE

.RE
Listing 16\-14: Attempting to use `\fIRc<T>\fR` to allowmultiple threads to own the `\fIMutex<T>\fR`
.P
Once again, we compile and get\.\.\. different errors! The compiler is teaching usa lot\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling shared\-state v0\.1\.0 (file:///projects/shared\-state)
error[E0277]: `Rc<Mutex<i32>>` cannot be sent between threads safely
   \-\-> src/main\.rs:11:22
    |
11  |           let handle = thread::spawn(move || {
    |  ______________________^^^^^^^^^^^^^_\-
    | |                      |
    | |                      `Rc<Mutex<i32>>` cannot be sent between threads safely
12  | |             let mut num = counter\.lock()\.unwrap();
13  | |
14  | |             *num += 1;
15  | |         });
    | |_________\- within this `[closure@src/main\.rs:11:36: 15:10]`
    |
    = help: within `[closure@src/main\.rs:11:36: 15:10]`, the trait `Send` is not implemented for `Rc<Mutex<i32>>`
    = note: required because it appears within the type `[closure@src/main\.rs:11:36: 15:10]`
note: required by a bound in `spawn`

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `shared\-state` due to previous error

.EE

.RE
.P
Wow, that error message is very wordy! Here‚Äôs the important part to focus on:`\fI`Rc<Mutex<i32>>` cannot be sent between threads safely\fR`\. The compiler isalso telling us the reason why: `\fIthe trait `Send` is not implemented for `Rc<Mutex<i32>>` \fR`\. We‚Äôll talk about `\fISend\fR` in the next section: it‚Äôs one ofthe traits that ensures the types we use with threads are meant for use inconcurrent situations\.
.P
Unfortunately, `\fIRc<T>\fR` is not safe to share across threads\. When `\fIRc<T>\fR`manages the reference count, it adds to the count for each call to `\fIclone\fR` andsubtracts from the count when each clone is dropped\. But it doesn‚Äôt use anyconcurrency primitives to make sure that changes to the count can‚Äôt beinterrupted by another thread\. This could lead to wrong counts‚Äîsubtle bugs thatcould in turn lead to memory leaks or a value being dropped before we‚Äôre donewith it\. What we need is a type exactly like `\fIRc<T>\fR` but one that makes changesto the reference count in a thread\-safe way\.
.br

.br
\fBAtomic Reference Counting with \fR
.br
=================================
.br
`\fIArc<T>\fR`
.P
Fortunately, `\fIArc<T>\fR` \fIis\fR a type like `\fIRc<T>\fR` that is safe to use inconcurrent situations\. The \fIa\fR stands for \fIatomic\fR, meaning it‚Äôs an \fIatomically\fRreference counted type\. Atomics are an additional kind of concurrencyprimitive that we won‚Äôt cover in detail here: see the standard librarydocumentation for 
.UR \.\./std/sync/atomic/index\.html
.UE
`\fIstd::sync::atomic\fR` for moredetails\. At this point, you just need to know that atomics work like primitivetypes but are safe to share across threads\.
.P
You might then wonder why all primitive types aren‚Äôt atomic and why standardlibrary types aren‚Äôt implemented to use `\fIArc<T>\fR` by default\. The reason is thatthread safety comes with a performance penalty that you only want to pay whenyou really need to\. If you‚Äôre just performing operations on values within asingle thread, your code can run faster if it doesn‚Äôt have to enforce theguarantees atomics provide\.
.P
Let‚Äôs return to our example: `\fIArc<T>\fR` and `\fIRc<T>\fR` have the same API, so we fixour program by changing the `\fIuse\fR` line, the call to `\fInew\fR`, and the call to`\fIclone\fR`\. The code in Listing 16\-15 will finally compile and run:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::sync::{Arc, Mutex};
use std::thread;

fn main() {
    let counter = Arc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0\.\.10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter\.lock()\.unwrap();

            *num += 1;
        });
        handles\.push(handle);
    }

    for handle in handles {
        handle\.join()\.unwrap();
    }

    println!("Result: {}", *counter\.lock()\.unwrap());
}

.EE

.RE
Listing 16\-15: Using an `\fIArc<T>\fR` to wrap the `\fIMutex<T>\fR`to be able to share ownership across multiple threads
.P
This code will print the following:
.RS
.IP \fBtext\fR 2

.br
.EX
Result: 10

.EE

.RE
.P
We did it! We counted from 0 to 10, which may not seem very impressive, but itdid teach us a lot about `\fIMutex<T>\fR` and thread safety\. You could also use thisprogram‚Äôs structure to do more complicated operations than just incrementing acounter\. Using this strategy, you can divide a calculation into independentparts, split those parts across threads, and then use a `\fIMutex<T>\fR` to have eachthread update the final result with its part\.
.P
Note that if you are doing simple numerical operations, there are types simplerthan `\fIMutex<T>\fR` types provided by the 
.UR \.\./std/sync/atomic/index\.html
.UE
`\fIstd::sync::atomic\fR` module of thestandard library\. These types provide safe, concurrent, atomic accessto primitive types\. We chose to use `\fIMutex<T>\fR` with a primitive type for thisexample so we could concentrate on how `\fIMutex<T>\fR` works\.
.br

.br
\fBSimilarities Between \fR
.br
=======================
.br
`\fIRefCell<T>\fR`/`\fIRc<T>\fR` and `\fIMutex<T>\fR`/`\fIArc<T>\fR`
.P
You might have noticed that `\fIcounter\fR` is immutable but we could get a mutablereference to the value inside it; this means `\fIMutex<T>\fR` provides interiormutability, as the `\fICell\fR` family does\. In the same way we used `\fIRefCell<T>\fR` inChapter 15 to allow us to mutate contents inside an `\fIRc<T>\fR`, we use `\fIMutex<T>\fR`to mutate contents inside an `\fIArc<T>\fR`\.
.P
Another detail to note is that Rust can‚Äôt protect you from all kinds of logicerrors when you use `\fIMutex<T>\fR`\. Recall in Chapter 15 that using `\fIRc<T>\fR` camewith the risk of creating reference cycles, where two `\fIRc<T>\fR` values refer toeach other, causing memory leaks\. Similarly, `\fIMutex<T>\fR` comes with the risk ofcreating \fIdeadlocks\fR\. These occur when an operation needs to lock two resourcesand two threads have each acquired one of the locks, causing them to wait foreach other forever\. If you‚Äôre interested in deadlocks, try creating a Rustprogram that has a deadlock; then research deadlock mitigation strategies formutexes in any language and have a go at implementing them in Rust\. Thestandard library API documentation for `\fIMutex<T>\fR` and `\fIMutexGuard\fR` offersuseful information\.
.P
We‚Äôll round out this chapter by talking about the `\fISend\fR` and `\fISync\fR` traits andhow we can use them with custom types\.
.SH "Extensible Concurrency with the Sync and Send Traits"

.br

.br
\fBExtensible Concurrency with the \fR
.br
==================================
.br
`\fISync\fR` and `\fISend\fR` Traits
.P
Interestingly, the Rust language has \fIvery\fR few concurrency features\. Almostevery concurrency feature we‚Äôve talked about so far in this chapter has beenpart of the standard library, not the language\. Your options for handlingconcurrency are not limited to the language or the standard library; you canwrite your own concurrency features or use those written by others\.
.P
However, two concurrency concepts are embedded in the language: the`\fIstd::marker\fR` traits `\fISync\fR` and `\fISend\fR`\.
.br

.br
\fBAllowing Transference of Ownership Between Threads with \fR
.br
==========================================================
.br
`\fISend\fR`
.P
The `\fISend\fR` marker trait indicates that ownership of values of the typeimplementing `\fISend\fR` can be transferred between threads\. Almost every Rust typeis `\fISend\fR`, but there are some exceptions, including `\fIRc<T>\fR`: this cannot be`\fISend\fR` because if you cloned an `\fIRc<T>\fR` value and tried to transfer ownershipof the clone to another thread, both threads might update the reference countat the same time\. For this reason, `\fIRc<T>\fR` is implemented for use insingle\-threaded situations where you don‚Äôt want to pay the thread\-safeperformance penalty\.
.P
Therefore, Rust‚Äôs type system and trait bounds ensure that you can neveraccidentally send an `\fIRc<T>\fR` value across threads unsafely\. When we tried to dothis in Listing 16\-14, we got the error `\fIthe trait Send is not implemented for Rc<Mutex<i32>>\fR`\. When we switched to `\fIArc<T>\fR`, which is `\fISend\fR`, the codecompiled\.
.P
Any type composed entirely of `\fISend\fR` types is automatically marked as `\fISend\fR` aswell\. Almost all primitive types are `\fISend\fR`, aside from raw pointers, whichwe‚Äôll discuss in Chapter 19\.
.br

.br
\fBAllowing Access from Multiple Threads with \fR
.br
=============================================
.br
`\fISync\fR`
.P
The `\fISync\fR` marker trait indicates that it is safe for the type implementing`\fISync\fR` to be referenced from multiple threads\. In other words, any type `\fIT\fR` is`\fISync\fR` if `\fI&T\fR` (an immutable reference to `\fIT\fR`) is `\fISend\fR`, meaning the referencecan be sent safely to another thread\. Similar to `\fISend\fR`, primitive types are`\fISync\fR`, and types composed entirely of types that are `\fISync\fR` are also `\fISync\fR`\.
.P
The smart pointer `\fIRc<T>\fR` is also not `\fISync\fR` for the same reasons that it‚Äôs not`\fISend\fR`\. The `\fIRefCell<T>\fR` type (which we talked about in Chapter 15) and thefamily of related `\fICell<T>\fR` types are not `\fISync\fR`\. The implementation of borrowchecking that `\fIRefCell<T>\fR` does at runtime is not thread\-safe\. The smartpointer `\fIMutex<T>\fR` is `\fISync\fR` and can be used to share access with multiplethreads as you saw in the 
.UR ch16\-03\-shared\-state\.html#sharing\-a\-mutext\-between\-multiple\-threads
.UE
‚ÄúSharing a `\fIMutex<T>\fR` Between MultipleThreads‚Äù section\.
.br

.br
\fBImplementing \fR
.br
===============
.br
`\fISend\fR` and `\fISync\fR` Manually Is Unsafe
.P
Because types that are made up of `\fISend\fR` and `\fISync\fR` traits are automaticallyalso `\fISend\fR` and `\fISync\fR`, we don‚Äôt have to implement those traits manually\. Asmarker traits, they don‚Äôt even have any methods to implement\. They‚Äôre justuseful for enforcing invariants related to concurrency\.
.P
Manually implementing these traits involves implementing unsafe Rust code\.We‚Äôll talk about using unsafe Rust code in Chapter 19; for now, the importantinformation is that building new concurrent types not made up of `\fISend\fR` and`\fISync\fR` parts requires careful thought to uphold the safety guarantees\. 
.UR \.\./nomicon/index\.html
.UE
‚ÄúTheRustonomicon‚Äù has more information about these guarantees and how touphold them\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
This isn‚Äôt the last you‚Äôll see of concurrency in this book: the project inChapter 20 will use the concepts in this chapter in a more realistic situationthan the smaller examples discussed here\.
.P
As mentioned earlier, because very little of how Rust handles concurrency ispart of the language, many concurrency solutions are implemented as crates\.These evolve more quickly than the standard library, so be sure to searchonline for the current, state\-of\-the\-art crates to use in multithreadedsituations\.
.P
The Rust standard library provides channels for message passing and smartpointer types, such as `\fIMutex<T>\fR` and `\fIArc<T>\fR`, that are safe to use inconcurrent contexts\. The type system and the borrow checker ensure that thecode using these solutions won‚Äôt end up with data races or invalid references\.Once you get your code to compile, you can rest assured that it will happilyrun on multiple threads without the kinds of hard\-to\-track\-down bugs common inother languages\. Concurrent programming is no longer a concept to be afraid of:go forth and make your programs concurrent, fearlessly!
.P
Next, we‚Äôll talk about idiomatic ways to model problems and structure solutionsas your Rust programs get bigger\. In addition, we‚Äôll discuss how Rust‚Äôs idiomsrelate to those you might be familiar with from object\-oriented programming\.
.SH "Object Oriented Programming Features of Rust"

.br

.br
\fBObject\-Oriented Programming Features of Rust\fR
.br
==============================================
.br

.P
Object\-oriented programming (OOP) is a way of modeling programs\. Objects as aprogrammatic concept were introduced in the programming language Simula in the1960s\. Those objects influenced Alan Kay‚Äôs programming architecture in whichobjects pass messages to each other\. To describe this architecture, he coinedthe term \fIobject\-oriented programming\fR in 1967\. Many competing definitionsdescribe what OOP is, and by some of these definitions Rust is object\-oriented,but by others it is not\. In this chapter, we‚Äôll explore certain characteristicsthat are commonly considered object\-oriented and how those characteristicstranslate to idiomatic Rust\. We‚Äôll then show you how to implement anobject\-oriented design pattern in Rust and discuss the trade\-offs of doing soversus implementing a solution using some of Rust‚Äôs strengths instead\.
.SH "Characteristics of Object\-Oriented Languages"

.br

.br
\fBCharacteristics of Object\-Oriented Languages\fR
.br
==============================================
.br

.P
There is no consensus in the programming community about what features alanguage must have to be considered object\-oriented\. Rust is influenced by manyprogramming paradigms, including OOP; for example, we explored the featuresthat came from functional programming in Chapter 13\. Arguably, OOP languagesshare certain common characteristics, namely objects, encapsulation, andinheritance\. Let‚Äôs look at what each of those characteristics means and whetherRust supports it\.
.br

.br
\fBObjects Contain Data and Behavior\fR
.br
===================================
.br

.P
The book \fIDesign Patterns: Elements of Reusable Object\-Oriented Software\fR byErich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison\-WesleyProfessional, 1994), colloquially referred to as \fIThe Gang of Four\fR book, is acatalog of object\-oriented design patterns\. It defines OOP this way:
.P
Object\-oriented programs are made up of objects\. An \fIobject\fR packages bothdata and the procedures that operate on that data\. The procedures aretypically called \fImethods\fR or \fIoperations\fR\.
.P
Using this definition, Rust is object\-oriented: structs and enums have data,and `\fIimpl\fR` blocks provide methods on structs and enums\. Even though structs andenums with methods aren‚Äôt \fIcalled\fR objects, they provide the samefunctionality, according to the Gang of Four‚Äôs definition of objects\.
.br

.br
\fBEncapsulation that Hides Implementation Details\fR
.br
=================================================
.br

.P
Another aspect commonly associated with OOP is the idea of \fIencapsulation\fR,which means that the implementation details of an object aren‚Äôt accessible tocode using that object\. Therefore, the only way to interact with an object isthrough its public API; code using the object shouldn‚Äôt be able to reach intothe object‚Äôs internals and change data or behavior directly\. This enables theprogrammer to change and refactor an object‚Äôs internals without needing tochange the code that uses the object\.
.P
We discussed how to control encapsulation in Chapter 7: we can use the `\fIpub\fR`keyword to decide which modules, types, functions, and methods in our codeshould be public, and by default everything else is private\. For example, wecan define a struct `\fIAveragedCollection\fR` that has a field containing a vectorof `\fIi32\fR` values\. The struct can also have a field that contains the average ofthe values in the vector, meaning the average doesn‚Äôt have to be computedon demand whenever anyone needs it\. In other words, `\fIAveragedCollection\fR` willcache the calculated average for us\. Listing 17\-1 has the definition of the`\fIAveragedCollection\fR` struct:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct AveragedCollection {
    list: Vec<i32>,
    average: f64,
}

.EE

.RE
Listing 17\-1: An `\fIAveragedCollection\fR` struct thatmaintains a list of integers and the average of the items in thecollection
.P
The struct is marked `\fIpub\fR` so that other code can use it, but the fields withinthe struct remain private\. This is important in this case because we want toensure that whenever a value is added or removed from the list, the average isalso updated\. We do this by implementing `\fIadd\fR`, `\fIremove\fR`, and `\fIaverage\fR` methodson the struct, as shown in Listing 17\-2:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct AveragedCollection {
#     list: Vec<i32>,
#     average: f64,
# }
# 
impl AveragedCollection {
    pub fn add(&mut self, value: i32) {
        self\.list\.push(value);
        self\.update_average();
    }

    pub fn remove(&mut self) \-> Option<i32> {
        let result = self\.list\.pop();
        match result {
            Some(value) => {
                self\.update_average();
                Some(value)
            }
            None => None,
        }
    }

    pub fn average(&self) \-> f64 {
        self\.average
    }

    fn update_average(&mut self) {
        let total: i32 = self\.list\.iter()\.sum();
        self\.average = total as f64 / self\.list\.len() as f64;
    }
}

.EE

.RE
Listing 17\-2: Implementations of the public methods`\fIadd\fR`, `\fIremove\fR`, and `\fIaverage\fR` on `\fIAveragedCollection\fR`
.P
The public methods `\fIadd\fR`, `\fIremove\fR`, and `\fIaverage\fR` are the only ways to accessor modify data in an instance of `\fIAveragedCollection\fR`\. When an item is addedto `\fIlist\fR` using the `\fIadd\fR` method or removed using the `\fIremove\fR` method, theimplementations of each call the private `\fIupdate_average\fR` method that handlesupdating the `\fIaverage\fR` field as well\.
.P
We leave the `\fIlist\fR` and `\fIaverage\fR` fields private so there is no way forexternal code to add or remove items to or from the `\fIlist\fR` field directly;otherwise, the `\fIaverage\fR` field might become out of sync when the `\fIlist\fR`changes\. The `\fIaverage\fR` method returns the value in the `\fIaverage\fR` field,allowing external code to read the `\fIaverage\fR` but not modify it\.
.P
Because we‚Äôve encapsulated the implementation details of the struct`\fIAveragedCollection\fR`, we can easily change aspects, such as the data structure,in the future\. For instance, we could use a `\fIHashSet<i32>\fR` instead of a`\fIVec<i32>\fR` for the `\fIlist\fR` field\. As long as the signatures of the `\fIadd\fR`,`\fIremove\fR`, and `\fIaverage\fR` public methods stay the same, code using`\fIAveragedCollection\fR` wouldn‚Äôt need to change\. If we made `\fIlist\fR` public instead,this wouldn‚Äôt necessarily be the case: `\fIHashSet<i32>\fR` and `\fIVec<i32>\fR` havedifferent methods for adding and removing items, so the external code wouldlikely have to change if it were modifying `\fIlist\fR` directly\.
.P
If encapsulation is a required aspect for a language to be consideredobject\-oriented, then Rust meets that requirement\. The option to use `\fIpub\fR` ornot for different parts of code enables encapsulation of implementation details\.
.br

.br
\fBInheritance as a Type System and as Code Sharing\fR
.br
==================================================
.br
\fIInheritance\fR is a mechanism whereby an object can inherit elements fromanother object‚Äôs definition, thus gaining the parent object‚Äôs data and behaviorwithout you having to define them again\.
.P
If a language must have inheritance to be an object\-oriented language, thenRust is not one\. There is no way to define a struct that inherits the parentstruct‚Äôs fields and method implementations without using a macro\.
.P
However, if you‚Äôre used to having inheritance in your programming toolbox, youcan use other solutions in Rust, depending on your reason for reaching forinheritance in the first place\.
.P
You would choose inheritance for two main reasons\. One is for reuse of code:you can implement particular behavior for one type, and inheritance enables youto reuse that implementation for a different type\. You can do this in a limitedway in Rust code using default trait method implementations, which you saw inListing 10\-14 when we added a default implementation of the `\fIsummarize\fR` methodon the `\fISummary\fR` trait\. Any type implementing the `\fISummary\fR` trait would havethe `\fIsummarize\fR` method available on it without any further code\. This issimilar to a parent class having an implementation of a method and aninheriting child class also having the implementation of the method\. We canalso override the default implementation of the `\fIsummarize\fR` method when weimplement the `\fISummary\fR` trait, which is similar to a child class overriding theimplementation of a method inherited from a parent class\.
.P
The other reason to use inheritance relates to the type system: to enable achild type to be used in the same places as the parent type\. This is alsocalled \fIpolymorphism\fR, which means that you can substitute multiple objects foreach other at runtime if they share certain characteristics\.
.br

.br
\fBPolymorphism\fR
.br
==============
.br

.P
To many people, polymorphism is synonymous with inheritance\. But it‚Äôsactually a more general concept that refers to code that can work with dataof multiple types\. For inheritance, those types are generally subclasses\.
.P
Rust instead uses generics to abstract over different possible types andtrait bounds to impose constraints on what those types must provide\. This issometimes called \fIbounded parametric polymorphism\fR\.
.P
Inheritance has recently fallen out of favor as a programming design solutionin many programming languages because it‚Äôs often at risk of sharing more codethan necessary\. Subclasses shouldn‚Äôt always share all characteristics of theirparent class but will do so with inheritance\. This can make a program‚Äôs designless flexible\. It also introduces the possibility of calling methods onsubclasses that don‚Äôt make sense or that cause errors because the methods don‚Äôtapply to the subclass\. In addition, some languages will only allow singleinheritance (meaning a subclass can only inherit from one class), furtherrestricting the flexibility of a program‚Äôs design\.
.P
For these reasons, Rust takes the different approach of using trait objectsinstead of inheritance\. Let‚Äôs look at how trait objects enable polymorphism inRust\.
.SH "Using Trait Objects That Allow for Values of Different Types"

.br

.br
\fBUsing Trait Objects That Allow for Values of Different Types\fR
.br
==============================================================
.br

.P
In Chapter 8, we mentioned that one limitation of vectors is that they canstore elements of only one type\. We created a workaround in Listing 8\-9 wherewe defined a `\fISpreadsheetCell\fR` enum that had variants to hold integers, floats,and text\. This meant we could store different types of data in each cell andstill have a vector that represented a row of cells\. This is a perfectly goodsolution when our interchangeable items are a fixed set of types that we knowwhen our code is compiled\.
.P
However, sometimes we want our library user to be able to extend the set oftypes that are valid in a particular situation\. To show how we might achievethis, we‚Äôll create an example graphical user interface (GUI) tool that iteratesthrough a list of items, calling a `\fIdraw\fR` method on each one to draw it to thescreen‚Äîa common technique for GUI tools\. We‚Äôll create a library crate called`\fIgui\fR` that contains the structure of a GUI library\. This crate might includesome types for people to use, such as `\fIButton\fR` or `\fITextField\fR`\. In addition,`\fIgui\fR` users will want to create their own types that can be drawn: forinstance, one programmer might add an `\fIImage\fR` and another might add a`\fISelectBox\fR`\.
.P
We won‚Äôt implement a fully fledged GUI library for this example but will showhow the pieces would fit together\. At the time of writing the library, we can‚Äôtknow and define all the types other programmers might want to create\. But we doknow that `\fIgui\fR` needs to keep track of many values of different types, and itneeds to call a `\fIdraw\fR` method on each of these differently typed values\. Itdoesn‚Äôt need to know exactly what will happen when we call the `\fIdraw\fR` method,just that the value will have that method available for us to call\.
.P
To do this in a language with inheritance, we might define a class named`\fIComponent\fR` that has a method named `\fIdraw\fR` on it\. The other classes, such as`\fIButton\fR`, `\fIImage\fR`, and `\fISelectBox\fR`, would inherit from `\fIComponent\fR` and thusinherit the `\fIdraw\fR` method\. They could each override the `\fIdraw\fR` method to definetheir custom behavior, but the framework could treat all of the types as ifthey were `\fIComponent\fR` instances and call `\fIdraw\fR` on them\. But because Rustdoesn‚Äôt have inheritance, we need another way to structure the `\fIgui\fR` library toallow users to extend it with new types\.
.br

.br
\fBDefining a Trait for Common Behavior\fR
.br
======================================
.br

.P
To implement the behavior we want `\fIgui\fR` to have, we‚Äôll define a trait named`\fIDraw\fR` that will have one method named `\fIdraw\fR`\. Then we can define a vector thattakes a \fItrait object\fR\. A trait object points to both an instance of a typeimplementing our specified trait and a table used to look up trait methods onthat type at runtime\. We create a trait object by specifying some sort ofpointer, such as a `\fI&\fR` reference or a `\fIBox<T>\fR` smart pointer, then the `\fIdyn\fR`keyword, and then specifying the relevant trait\. (We‚Äôll talk about the reasontrait objects must use a pointer in Chapter 19 in the section 
.UR ch19\-04\-advanced\-types\.html#dynamically\-sized\-types\-and\-the\-sized\-trait
.UE
‚ÄúDynamicallySized Types and the `\fISized\fR` Trait\.‚Äù) We canuse trait objects in place of a generic or concrete type\. Wherever we use atrait object, Rust‚Äôs type system will ensure at compile time that any valueused in that context will implement the trait object‚Äôs trait\. Consequently, wedon‚Äôt need to know all the possible types at compile time\.
.P
We‚Äôve mentioned that, in Rust, we refrain from calling structs and enums‚Äúobjects‚Äù to distinguish them from other languages‚Äô objects\. In a struct orenum, the data in the struct fields and the behavior in `\fIimpl\fR` blocks areseparated, whereas in other languages, the data and behavior combined into oneconcept is often labeled an object\. However, trait objects \fIare\fR more likeobjects in other languages in the sense that they combine data and behavior\.But trait objects differ from traditional objects in that we can‚Äôt add data toa trait object\. Trait objects aren‚Äôt as generally useful as objects in otherlanguages: their specific purpose is to allow abstraction across commonbehavior\.
.P
Listing 17\-3 shows how to define a trait named `\fIDraw\fR` with one method named`\fIdraw\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Draw {
    fn draw(&self);
}

.EE

.RE
Listing 17\-3: Definition of the `\fIDraw\fR` trait
.P
This syntax should look familiar from our discussions on how to define traitsin Chapter 10\. Next comes some new syntax: Listing 17\-4 defines a struct named`\fIScreen\fR` that holds a vector named `\fIcomponents\fR`\. This vector is of type`\fIBox<dyn Draw>\fR`, which is a trait object; it‚Äôs a stand\-in for any type insidea `\fIBox\fR` that implements the `\fIDraw\fR` trait\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Draw {
#     fn draw(&self);
# }
# 
pub struct Screen {
    pub components: Vec<Box<dyn Draw>>,
}

.EE

.RE
Listing 17\-4: Definition of the `\fIScreen\fR` struct with a`\fIcomponents\fR` field holding a vector of trait objects that implement the `\fIDraw\fR`trait
.P
On the `\fIScreen\fR` struct, we‚Äôll define a method named `\fIrun\fR` that will call the`\fIdraw\fR` method on each of its `\fIcomponents\fR`, as shown in Listing 17\-5:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Draw {
#     fn draw(&self);
# }
# 
# pub struct Screen {
#     pub components: Vec<Box<dyn Draw>>,
# }
# 
impl Screen {
    pub fn run(&self) {
        for component in self\.components\.iter() {
            component\.draw();
        }
    }
}

.EE

.RE
Listing 17\-5: A `\fIrun\fR` method on `\fIScreen\fR` that calls the`\fIdraw\fR` method on each component
.P
This works differently from defining a struct that uses a generic typeparameter with trait bounds\. A generic type parameter can only be substitutedwith one concrete type at a time, whereas trait objects allow for multipleconcrete types to fill in for the trait object at runtime\. For example, wecould have defined the `\fIScreen\fR` struct using a generic type and a trait boundas in Listing 17\-6:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Draw {
#     fn draw(&self);
# }
# 
pub struct Screen<T: Draw> {
    pub components: Vec<T>,
}

impl<T> Screen<T>
where
    T: Draw,
{
    pub fn run(&self) {
        for component in self\.components\.iter() {
            component\.draw();
        }
    }
}

.EE

.RE
Listing 17\-6: An alternate implementation of the `\fIScreen\fR`struct and its `\fIrun\fR` method using generics and trait bounds
.P
This restricts us to a `\fIScreen\fR` instance that has a list of components all oftype `\fIButton\fR` or all of type `\fITextField\fR`\. If you‚Äôll only ever have homogeneouscollections, using generics and trait bounds is preferable because thedefinitions will be monomorphized at compile time to use the concrete types\.
.P
On the other hand, with the method using trait objects, one `\fIScreen\fR` instancecan hold a `\fIVec<T>\fR` that contains a `\fIBox<Button>\fR` as well as a`\fIBox<TextField>\fR`\. Let‚Äôs look at how this works, and then we‚Äôll talk about theruntime performance implications\.
.br

.br
\fBImplementing the Trait\fR
.br
========================
.br

.P
Now we‚Äôll add some types that implement the `\fIDraw\fR` trait\. We‚Äôll provide the`\fIButton\fR` type\. Again, actually implementing a GUI library is beyond the scopeof this book, so the `\fIdraw\fR` method won‚Äôt have any useful implementation in itsbody\. To imagine what the implementation might look like, a `\fIButton\fR` structmight have fields for `\fIwidth\fR`, `\fIheight\fR`, and `\fIlabel\fR`, as shown in Listing 17\-7:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Draw {
#     fn draw(&self);
# }
# 
# pub struct Screen {
#     pub components: Vec<Box<dyn Draw>>,
# }
# 
# impl Screen {
#     pub fn run(&self) {
#         for component in self\.components\.iter() {
#             component\.draw();
#         }
#     }
# }
# 
pub struct Button {
    pub width: u32,
    pub height: u32,
    pub label: String,
}

impl Draw for Button {
    fn draw(&self) {
        // code to actually draw a button
    }
}

.EE

.RE
Listing 17\-7: A `\fIButton\fR` struct that implements the`\fIDraw\fR` trait
.P
The `\fIwidth\fR`, `\fIheight\fR`, and `\fIlabel\fR` fields on `\fIButton\fR` will differ from thefields on other components; for example, a `\fITextField\fR` type might have thosesame fields plus a `\fIplaceholder\fR` field\. Each of the types we want to draw onthe screen will implement the `\fIDraw\fR` trait but will use different code in the`\fIdraw\fR` method to define how to draw that particular type, as `\fIButton\fR` has here(without the actual GUI code, as mentioned)\. The `\fIButton\fR` type, for instance,might have an additional `\fIimpl\fR` block containing methods related to whathappens when a user clicks the button\. These kinds of methods won‚Äôt apply totypes like `\fITextField\fR`\.
.P
If someone using our library decides to implement a `\fISelectBox\fR` struct that has`\fIwidth\fR`, `\fIheight\fR`, and `\fIoptions\fR` fields, they implement the `\fIDraw\fR` trait on the`\fISelectBox\fR` type as well, as shown in Listing 17\-8:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use gui::Draw;

struct SelectBox {
    width: u32,
    height: u32,
    options: Vec<String>,
}

impl Draw for SelectBox {
    fn draw(&self) {
        // code to actually draw a select box
    }
}
# 
# fn main() {}

.EE

.RE
Listing 17\-8: Another crate using `\fIgui\fR` and implementingthe `\fIDraw\fR` trait on a `\fISelectBox\fR` struct
.P
Our library‚Äôs user can now write their `\fImain\fR` function to create a `\fIScreen\fR`instance\. To the `\fIScreen\fR` instance, they can add a `\fISelectBox\fR` and a `\fIButton\fR`by putting each in a `\fIBox<T>\fR` to become a trait object\. They can then call the`\fIrun\fR` method on the `\fIScreen\fR` instance, which will call `\fIdraw\fR` on each of thecomponents\. Listing 17\-9 shows this implementation:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use gui::Draw;
# 
# struct SelectBox {
#     width: u32,
#     height: u32,
#     options: Vec<String>,
# }
# 
# impl Draw for SelectBox {
#     fn draw(&self) {
#         // code to actually draw a select box
#     }
# }
# 
use gui::{Button, Screen};

fn main() {
    let screen = Screen {
        components: vec![
            Box::new(SelectBox {
                width: 75,
                height: 10,
                options: vec![
                    String::from("Yes"),
                    String::from("Maybe"),
                    String::from("No"),
                ],
            }),
            Box::new(Button {
                width: 50,
                height: 10,
                label: String::from("OK"),
            }),
        ],
    };

    screen\.run();
}

.EE

.RE
Listing 17\-9: Using trait objects to store values ofdifferent types that implement the same trait
.P
When we wrote the library, we didn‚Äôt know that someone might add the`\fISelectBox\fR` type, but our `\fIScreen\fR` implementation was able to operate on thenew type and draw it because `\fISelectBox\fR` implements the `\fIDraw\fR` trait, whichmeans it implements the `\fIdraw\fR` method\.
.P
This concept‚Äîof being concerned only with the messages a value responds torather than the value‚Äôs concrete type‚Äîis similar to the concept of \fIduck\fRtyping in dynamically typed languages: if it walks like a duck and quackslike a duck, then it must be a duck! In the implementation of `\fIrun\fR` on `\fIScreen\fR`in Listing 17\-5, `\fIrun\fR` doesn‚Äôt need to know what the concrete type of eachcomponent is\. It doesn‚Äôt check whether a component is an instance of a `\fIButton\fR`or a `\fISelectBox\fR`, it just calls the `\fIdraw\fR` method on the component\. Byspecifying `\fIBox<dyn Draw>\fR` as the type of the values in the `\fIcomponents\fR`vector, we‚Äôve defined `\fIScreen\fR` to need values that we can call the `\fIdraw\fR`method on\.
.P
The advantage of using trait objects and Rust‚Äôs type system to write codesimilar to code using duck typing is that we never have to check whether avalue implements a particular method at runtime or worry about getting errorsif a value doesn‚Äôt implement a method but we call it anyway\. Rust won‚Äôt compileour code if the values don‚Äôt implement the traits that the trait objects need\.
.P
For example, Listing 17\-10 shows what happens if we try to create a `\fIScreen\fR`with a `\fIString\fR` as a component:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use gui::Screen;

fn main() {
    let screen = Screen {
        components: vec![Box::new(String::from("Hi"))],
    };

    screen\.run();
}

.EE

.RE
Listing 17\-10: Attempting to use a type that doesn‚Äôtimplement the trait object‚Äôs trait
.P
We‚Äôll get this error because `\fIString\fR` doesn‚Äôt implement the `\fIDraw\fR` trait:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling gui v0\.1\.0 (file:///projects/gui)
error[E0277]: the trait bound `String: Draw` is not satisfied
 \-\-> src/main\.rs:5:26
  |
5 |         components: vec![Box::new(String::from("Hi"))],
  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Draw` is not implemented for `String`
  |
  = help: the trait `Draw` is implemented for `Button`
  = note: required for the cast to the object type `dyn Draw`

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `gui` due to previous error

.EE

.RE
.P
This error lets us know that either we‚Äôre passing something to `\fIScreen\fR` wedidn‚Äôt mean to pass and so should pass a different type or we should implement`\fIDraw\fR` on `\fIString\fR` so that `\fIScreen\fR` is able to call `\fIdraw\fR` on it\.
.br

.br
\fBTrait Objects Perform Dynamic Dispatch\fR
.br
========================================
.br

.P
Recall in the 
.UR ch10\-01\-syntax\.html#performance\-of\-code\-using\-generics
.UE
‚ÄúPerformance of Code UsingGenerics‚Äù section inChapter 10 our discussion on the monomorphization process performed by thecompiler when we use trait bounds on generics: the compiler generatesnongeneric implementations of functions and methods for each concrete type thatwe use in place of a generic type parameter\. The code that results frommonomorphization is doing \fIstatic dispatch\fR, which is when the compiler knowswhat method you‚Äôre calling at compile time\. This is opposed to \fIdynamic\fRdispatch, which is when the compiler can‚Äôt tell at compile time which methodyou‚Äôre calling\. In dynamic dispatch cases, the compiler emits code that atruntime will figure out which method to call\.
.P
When we use trait objects, Rust must use dynamic dispatch\. The compiler doesn‚Äôtknow all the types that might be used with the code that‚Äôs using trait objects,so it doesn‚Äôt know which method implemented on which type to call\. Instead, atruntime, Rust uses the pointers inside the trait object to know which method tocall\. This lookup incurs a runtime cost that doesn‚Äôt occur with staticdispatch\. Dynamic dispatch also prevents the compiler from choosing to inline amethod‚Äôs code, which in turn prevents some optimizations\. However, we did getextra flexibility in the code that we wrote in Listing 17\-5 and were able tosupport in Listing 17\-9, so it‚Äôs a trade\-off to consider\.
.SH "Implementing an Object\-Oriented Design Pattern"

.br

.br
\fBImplementing an Object\-Oriented Design Pattern\fR
.br
================================================
.br

.P
The \fIstate pattern\fR is an object\-oriented design pattern\. The crux of thepattern is that we define a set of states a value can have internally\. Thestates are represented by a set of \fIstate objects\fR, and the value‚Äôs behaviorchanges based on its state\. We‚Äôre going to work through an example of a blogpost struct that has a field to hold its state, which will be a state objectfrom the set "draft", "review", or "published"\.
.P
The state objects share functionality: in Rust, of course, we use structs andtraits rather than objects and inheritance\. Each state object is responsiblefor its own behavior and for governing when it should change into anotherstate\. The value that holds a state object knows nothing about the differentbehavior of the states or when to transition between states\.
.P
The advantage of using the state pattern is that, when the businessrequirements of the program change, we won‚Äôt need to change the code of thevalue holding the state or the code that uses the value\. We‚Äôll only need toupdate the code inside one of the state objects to change its rules or perhapsadd more state objects\.
.P
First, we‚Äôre going to implement the state pattern in a more traditionalobject\-oriented way, then we‚Äôll use an approach that‚Äôs a bit more natural inRust\. Let‚Äôs dig in to incrementally implementing a blog post workflow using thestate pattern\.
.P
The final functionality will look like this:
.P
A blog post starts as an empty draft\.
.P
When the draft is done, a review of the post is requested\.
.P
When the post is approved, it gets published\.
.P
Only published blog posts return content to print, so unapproved posts can‚Äôtaccidentally be published\.
.P
Any other changes attempted on a post should have no effect\. For example, if wetry to approve a draft blog post before we‚Äôve requested a review, the postshould remain an unpublished draft\.
.P
Listing 17\-11 shows this workflow in code form: this is an example usage of theAPI we‚Äôll implement in a library crate named `\fIblog\fR`\. This won‚Äôt compile yetbecause we haven‚Äôt implemented the `\fIblog\fR` crate\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use blog::Post;

fn main() {
    let mut post = Post::new();

    post\.add_text("I ate a salad for lunch today");
    assert_eq!("", post\.content());

    post\.request_review();
    assert_eq!("", post\.content());

    post\.approve();
    assert_eq!("I ate a salad for lunch today", post\.content());
}

.EE

.RE
Listing 17\-11: Code that demonstrates the desiredbehavior we want our `\fIblog\fR` crate to have
.P
We want to allow the user to create a new draft blog post with `\fIPost::new\fR`\. Wewant to allow text to be added to the blog post\. If we try to get the post‚Äôscontent immediately, before approval, we shouldn‚Äôt get any text because thepost is still a draft\. We‚Äôve added `\fIassert_eq!\fR` in the code for demonstrationpurposes\. An excellent unit test for this would be to assert that a draft blogpost returns an empty string from the `\fIcontent\fR` method, but we‚Äôre not going towrite tests for this example\.
.P
Next, we want to enable a request for a review of the post, and we want`\fIcontent\fR` to return an empty string while waiting for the review\. When the postreceives approval, it should get published, meaning the text of the post willbe returned when `\fIcontent\fR` is called\.
.P
Notice that the only type we‚Äôre interacting with from the crate is the `\fIPost\fR`type\. This type will use the state pattern and will hold a value that will beone of three state objects representing the various states a post can bein‚Äîdraft, waiting for review, or published\. Changing from one state to anotherwill be managed internally within the `\fIPost\fR` type\. The states change inresponse to the methods called by our library‚Äôs users on the `\fIPost\fR` instance,but they don‚Äôt have to manage the state changes directly\. Also, users can‚Äôtmake a mistake with the states, like publishing a post before it‚Äôs reviewed\.
.br

.br
\fBDefining \fR
.br
===========
.br
`\fIPost\fR` and Creating a New Instance in the Draft State
.P
Let‚Äôs get started on the implementation of the library! We know we need apublic `\fIPost\fR` struct that holds some content, so we‚Äôll start with thedefinition of the struct and an associated public `\fInew\fR` function to create aninstance of `\fIPost\fR`, as shown in Listing 17\-12\. We‚Äôll also make a private`\fIState\fR` trait that will define the behavior that all state objects for a `\fIPost\fR`must have\.
.P
Then `\fIPost\fR` will hold a trait object of `\fIBox<dyn State>\fR` inside an `\fIOption<T>\fR`in a private field named `\fIstate\fR` to hold the state object\. You‚Äôll see why the`\fIOption<T>\fR` is necessary in a bit\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct Post {
    state: Option<Box<dyn State>>,
    content: String,
}

impl Post {
    pub fn new() \-> Post {
        Post {
            state: Some(Box::new(Draft {})),
            content: String::new(),
        }
    }
}

trait State {}

struct Draft {}

impl State for Draft {}

.EE

.RE
Listing 17\-12: Definition of a `\fIPost\fR` struct and a `\fInew\fR`function that creates a new `\fIPost\fR` instance, a `\fIState\fR` trait, and a `\fIDraft\fR`struct
.P
The `\fIState\fR` trait defines the behavior shared by different post states\. Thestate objects are `\fIDraft\fR`, `\fIPendingReview\fR`, and `\fIPublished\fR`, and they will allimplement the `\fIState\fR` trait\. For now, the trait doesn‚Äôt have any methods, andwe‚Äôll start by defining just the `\fIDraft\fR` state because that is the state wewant a post to start in\.
.P
When we create a new `\fIPost\fR`, we set its `\fIstate\fR` field to a `\fISome\fR` value thatholds a `\fIBox\fR`\. This `\fIBox\fR` points to a new instance of the `\fIDraft\fR` struct\.This ensures whenever we create a new instance of `\fIPost\fR`, it will start out asa draft\. Because the `\fIstate\fR` field of `\fIPost\fR` is private, there is no way tocreate a `\fIPost\fR` in any other state! In the `\fIPost::new\fR` function, we set the`\fIcontent\fR` field to a new, empty `\fIString\fR`\.
.br

.br
\fBStoring the Text of the Post Content\fR
.br
======================================
.br

.P
We saw in Listing 17\-11 that we want to be able to call a method named`\fIadd_text\fR` and pass it a `\fI&str\fR` that is then added as the text content of theblog post\. We implement this as a method, rather than exposing the `\fIcontent\fR`field as `\fIpub\fR`, so that later we can implement a method that will control howthe `\fIcontent\fR` field‚Äôs data is read\. The `\fIadd_text\fR` method is prettystraightforward, so let‚Äôs add the implementation in Listing 17\-13 to the `\fIimpl Post\fR` block:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
    pub fn add_text(&mut self, text: &str) {
        self\.content\.push_str(text);
    }
}
# 
# trait State {}
# 
# struct Draft {}
# 
# impl State for Draft {}

.EE

.RE
Listing 17\-13: Implementing the `\fIadd_text\fR` method to addtext to a post‚Äôs `\fIcontent\fR`
.P
The `\fIadd_text\fR` method takes a mutable reference to `\fIself\fR`, because we‚Äôrechanging the `\fIPost\fR` instance that we‚Äôre calling `\fIadd_text\fR` on\. We then call`\fIpush_str\fR` on the `\fIString\fR` in `\fIcontent\fR` and pass the `\fItext\fR` argument to add tothe saved `\fIcontent\fR`\. This behavior doesn‚Äôt depend on the state the post is in,so it‚Äôs not part of the state pattern\. The `\fIadd_text\fR` method doesn‚Äôt interactwith the `\fIstate\fR` field at all, but it is part of the behavior we want tosupport\.
.br

.br
\fBEnsuring the Content of a Draft Post Is Empty\fR
.br
===============================================
.br

.P
Even after we‚Äôve called `\fIadd_text\fR` and added some content to our post, we stillwant the `\fIcontent\fR` method to return an empty string slice because the post isstill in the draft state, as shown on line 7 of Listing 17\-11\. For now, let‚Äôsimplement the `\fIcontent\fR` method with the simplest thing that will fulfill thisrequirement: always returning an empty string slice\. We‚Äôll change this lateronce we implement the ability to change a post‚Äôs state so it can be published\.So far, posts can only be in the draft state, so the post content should alwaysbe empty\. Listing 17\-14 shows this placeholder implementation:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
    pub fn content(&self) \-> &str {
        ""
    }
}
# 
# trait State {}
# 
# struct Draft {}
# 
# impl State for Draft {}

.EE

.RE
Listing 17\-14: Adding a placeholder implementation forthe `\fIcontent\fR` method on `\fIPost\fR` that always returns an empty string slice
.P
With this added `\fIcontent\fR` method, everything in Listing 17\-11 up to line 7works as intended\.
.br

.br
\fBRequesting a Review of the Post Changes Its State\fR
.br
===================================================
.br

.P
Next, we need to add functionality to request a review of a post, which shouldchange its state from `\fIDraft\fR` to `\fIPendingReview\fR`\. Listing 17\-15 shows this code:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
#     pub fn content(&self) \-> &str {
#         ""
#     }
# 
    pub fn request_review(&mut self) {
        if let Some(s) = self\.state\.take() {
            self\.state = Some(s\.request_review())
        }
    }
}

trait State {
    fn request_review(self: Box<Self>) \-> Box<dyn State>;
}

struct Draft {}

impl State for Draft {
    fn request_review(self: Box<Self>) \-> Box<dyn State> {
        Box::new(PendingReview {})
    }
}

struct PendingReview {}

impl State for PendingReview {
    fn request_review(self: Box<Self>) \-> Box<dyn State> {
        self
    }
}

.EE

.RE
Listing 17\-15: Implementing `\fIrequest_review\fR` methods on`\fIPost\fR` and the `\fIState\fR` trait
.P
We give `\fIPost\fR` a public method named `\fIrequest_review\fR` that will take a mutablereference to `\fIself\fR`\. Then we call an internal `\fIrequest_review\fR` method on thecurrent state of `\fIPost\fR`, and this second `\fIrequest_review\fR` method consumes thecurrent state and returns a new state\.
.P
We add the `\fIrequest_review\fR` method to the `\fIState\fR` trait; all types thatimplement the trait will now need to implement the `\fIrequest_review\fR` method\.Note that rather than having `\fIself\fR`, `\fI&self\fR`, or `\fI&mut self\fR` as the firstparameter of the method, we have `\fIself: Box<Self>\fR`\. This syntax means themethod is only valid when called on a `\fIBox\fR` holding the type\. This syntax takesownership of `\fIBox<Self>\fR`, invalidating the old state so the state value of the`\fIPost\fR` can transform into a new state\.
.P
To consume the old state, the `\fIrequest_review\fR` method needs to take ownershipof the state value\. This is where the `\fIOption\fR` in the `\fIstate\fR` field of `\fIPost\fR`comes in: we call the `\fItake\fR` method to take the `\fISome\fR` value out of the `\fIstate\fR`field and leave a `\fINone\fR` in its place, because Rust doesn‚Äôt let us haveunpopulated fields in structs\. This lets us move the `\fIstate\fR` value out of`\fIPost\fR` rather than borrowing it\. Then we‚Äôll set the post‚Äôs `\fIstate\fR` value to theresult of this operation\.
.P
We need to set `\fIstate\fR` to `\fINone\fR` temporarily rather than setting it directlywith code like `\fIself\.state = self\.state\.request_review();\fR` to get ownership ofthe `\fIstate\fR` value\. This ensures `\fIPost\fR` can‚Äôt use the old `\fIstate\fR` value afterwe‚Äôve transformed it into a new state\.
.P
The `\fIrequest_review\fR` method on `\fIDraft\fR` returns a new, boxed instance of a new`\fIPendingReview\fR` struct, which represents the state when a post is waiting for areview\. The `\fIPendingReview\fR` struct also implements the `\fIrequest_review\fR` methodbut doesn‚Äôt do any transformations\. Rather, it returns itself, because when werequest a review on a post already in the `\fIPendingReview\fR` state, it should stayin the `\fIPendingReview\fR` state\.
.P
Now we can start seeing the advantages of the state pattern: the`\fIrequest_review\fR` method on `\fIPost\fR` is the same no matter its `\fIstate\fR` value\. Eachstate is responsible for its own rules\.
.P
We‚Äôll leave the `\fIcontent\fR` method on `\fIPost\fR` as is, returning an empty stringslice\. We can now have a `\fIPost\fR` in the `\fIPendingReview\fR` state as well as in the`\fIDraft\fR` state, but we want the same behavior in the `\fIPendingReview\fR` state\.Listing 17\-11 now works up to line 10!
.br

.br
\fBAdding \fR
.br
=========
.br
`\fIapprove\fR` to Change the Behavior of `\fIcontent\fR`
.P
The `\fIapprove\fR` method will be similar to the `\fIrequest_review\fR` method: it willset `\fIstate\fR` to the value that the current state says it should have when thatstate is approved, as shown in Listing 17\-16:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
#     pub fn content(&self) \-> &str {
#         ""
#     }
# 
#     pub fn request_review(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.request_review())
#         }
#     }
# 
    pub fn approve(&mut self) {
        if let Some(s) = self\.state\.take() {
            self\.state = Some(s\.approve())
        }
    }
}

trait State {
    fn request_review(self: Box<Self>) \-> Box<dyn State>;
    fn approve(self: Box<Self>) \-> Box<dyn State>;
}

struct Draft {}

impl State for Draft {
    // \-\-snip\-\-
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(PendingReview {})
#     }
# 
    fn approve(self: Box<Self>) \-> Box<dyn State> {
        self
    }
}

struct PendingReview {}

impl State for PendingReview {
    // \-\-snip\-\-
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
    fn approve(self: Box<Self>) \-> Box<dyn State> {
        Box::new(Published {})
    }
}

struct Published {}

impl State for Published {
    fn request_review(self: Box<Self>) \-> Box<dyn State> {
        self
    }

    fn approve(self: Box<Self>) \-> Box<dyn State> {
        self
    }
}

.EE

.RE
Listing 17\-16: Implementing the `\fIapprove\fR` method on`\fIPost\fR` and the `\fIState\fR` trait
.P
We add the `\fIapprove\fR` method to the `\fIState\fR` trait and add a new struct thatimplements `\fIState\fR`, the `\fIPublished\fR` state\.
.P
Similar to the way `\fIrequest_review\fR` on `\fIPendingReview\fR` works, if we call the`\fIapprove\fR` method on a `\fIDraft\fR`, it will have no effect because `\fIapprove\fR` willreturn `\fIself\fR`\. When we call `\fIapprove\fR` on `\fIPendingReview\fR`, it returns a new,boxed instance of the `\fIPublished\fR` struct\. The `\fIPublished\fR` struct implements the`\fIState\fR` trait, and for both the `\fIrequest_review\fR` method and the `\fIapprove\fR`method, it returns itself, because the post should stay in the `\fIPublished\fR`state in those cases\.
.P
Now we need to update the `\fIcontent\fR` method on `\fIPost\fR`\. We want the valuereturned from `\fIcontent\fR` to depend on the current state of the `\fIPost\fR`, so we‚Äôregoing to have the `\fIPost\fR` delegate to a `\fIcontent\fR` method defined on its `\fIstate\fR`,as shown in Listing 17\-17:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
    pub fn content(&self) \-> &str {
        self\.state\.as_ref()\.unwrap()\.content(self)
    }
    // \-\-snip\-\-
# 
#     pub fn request_review(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.request_review())
#         }
#     }
# 
#     pub fn approve(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.approve())
#         }
#     }
}
# 
# trait State {
#     fn request_review(self: Box<Self>) \-> Box<dyn State>;
#     fn approve(self: Box<Self>) \-> Box<dyn State>;
# }
# 
# struct Draft {}
# 
# impl State for Draft {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(PendingReview {})
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# }
# 
# struct PendingReview {}
# 
# impl State for PendingReview {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(Published {})
#     }
# }
# 
# struct Published {}
# 
# impl State for Published {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# }

.EE

.RE
Listing 17\-17: Updating the `\fIcontent\fR` method on `\fIPost\fR` todelegate to a `\fIcontent\fR` method on `\fIState\fR`
.P
Because the goal is to keep all these rules inside the structs that implement`\fIState\fR`, we call a `\fIcontent\fR` method on the value in `\fIstate\fR` and pass the postinstance (that is, `\fIself\fR`) as an argument\. Then we return the value that‚Äôsreturned from using the `\fIcontent\fR` method on the `\fIstate\fR` value\.
.P
We call the `\fIas_ref\fR` method on the `\fIOption\fR` because we want a reference to thevalue inside the `\fIOption\fR` rather than ownership of the value\. Because `\fIstate\fR`is an `\fIOption<Box<dyn State>>\fR`, when we call `\fIas_ref\fR`, an `\fIOption<&Box<dyn State>>\fR` is returned\. If we didn‚Äôt call `\fIas_ref\fR`, we would get an error becausewe can‚Äôt move `\fIstate\fR` out of the borrowed `\fI&self\fR` of the function parameter\.
.P
We then call the `\fIunwrap\fR` method, which we know will never panic, because weknow the methods on `\fIPost\fR` ensure that `\fIstate\fR` will always contain a `\fISome\fR`value when those methods are done\. This is one of the cases we talked about inthe 
.UR ch09\-03\-to\-panic\-or\-not\-to\-panic\.html#cases\-in\-which\-you\-have\-more\-information\-than\-the\-compiler
.UE
‚ÄúCases In Which You Have More Information Than theCompiler‚Äù section of Chapter 9 when weknow that a `\fINone\fR` value is never possible, even though the compiler isn‚Äôt ableto understand that\.
.P
At this point, when we call `\fIcontent\fR` on the `\fI&Box<dyn State>\fR`, deref coercionwill take effect on the `\fI&\fR` and the `\fIBox\fR` so the `\fIcontent\fR` method willultimately be called on the type that implements the `\fIState\fR` trait\. That meanswe need to add `\fIcontent\fR` to the `\fIState\fR` trait definition, and that is wherewe‚Äôll put the logic for what content to return depending on which state wehave, as shown in Listing 17\-18:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
# impl Post {
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
#     pub fn content(&self) \-> &str {
#         self\.state\.as_ref()\.unwrap()\.content(self)
#     }
# 
#     pub fn request_review(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.request_review())
#         }
#     }
# 
#     pub fn approve(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.approve())
#         }
#     }
# }
# 
trait State {
    // \-\-snip\-\-
#     fn request_review(self: Box<Self>) \-> Box<dyn State>;
#     fn approve(self: Box<Self>) \-> Box<dyn State>;
# 
    fn content<'a>(&self, post: &'a Post) \-> &'a str {
        ""
    }
}

// \-\-snip\-\-
# 
# struct Draft {}
# 
# impl State for Draft {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(PendingReview {})
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# }
# 
# struct PendingReview {}
# 
# impl State for PendingReview {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(Published {})
#     }
# }
# 
struct Published {}

impl State for Published {
    // \-\-snip\-\-
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
    fn content<'a>(&self, post: &'a Post) \-> &'a str {
        &post\.content
    }
}

.EE

.RE
Listing 17\-18: Adding the `\fIcontent\fR` method to the `\fIState\fR`trait
.P
We add a default implementation for the `\fIcontent\fR` method that returns an emptystring slice\. That means we don‚Äôt need to implement `\fIcontent\fR` on the `\fIDraft\fR`and `\fIPendingReview\fR` structs\. The `\fIPublished\fR` struct will override the `\fIcontent\fR`method and return the value in `\fIpost\.content\fR`\.
.P
Note that we need lifetime annotations on this method, as we discussed inChapter 10\. We‚Äôre taking a reference to a `\fIpost\fR` as an argument and returning areference to part of that `\fIpost\fR`, so the lifetime of the returned reference isrelated to the lifetime of the `\fIpost\fR` argument\.
.P
And we‚Äôre done‚Äîall of Listing 17\-11 now works! We‚Äôve implemented the statepattern with the rules of the blog post workflow\. The logic related to therules lives in the state objects rather than being scattered throughout `\fIPost\fR`\.
.br

.br
\fBWhy Not An Enum?\fR
.br
==================
.br

.P
You may have been wondering why we didn‚Äôt use an `\fIenum\fR` with the differentpossible post states as variants\. That‚Äôs certainly a possible solution, tryit and compare the end results to see which you prefer! One disadvantage ofusing an enum is every place that checks the value of the enum will need a`\fImatch\fR` expression or similar to handle every possible variant\. This couldget more repetitive than this trait object solution\.
.br

.br
\fBTrade\-offs of the State Pattern\fR
.br
=================================
.br

.P
We‚Äôve shown that Rust is capable of implementing the object\-oriented statepattern to encapsulate the different kinds of behavior a post should have ineach state\. The methods on `\fIPost\fR` know nothing about the various behaviors\. Theway we organized the code, we have to look in only one place to know thedifferent ways a published post can behave: the implementation of the `\fIState\fR`trait on the `\fIPublished\fR` struct\.
.P
If we were to create an alternative implementation that didn‚Äôt use the statepattern, we might instead use `\fImatch\fR` expressions in the methods on `\fIPost\fR` oreven in the `\fImain\fR` code that checks the state of the post and changes behaviorin those places\. That would mean we would have to look in several places tounderstand all the implications of a post being in the published state! Thiswould only increase the more states we added: each of those `\fImatch\fR` expressionswould need another arm\.
.P
With the state pattern, the `\fIPost\fR` methods and the places we use `\fIPost\fR` don‚Äôtneed `\fImatch\fR` expressions, and to add a new state, we would only need to add anew struct and implement the trait methods on that one struct\.
.P
The implementation using the state pattern is easy to extend to add morefunctionality\. To see the simplicity of maintaining code that uses the statepattern, try a few of these suggestions:
.P
Add a `\fIreject\fR` method that changes the post‚Äôs state from `\fIPendingReview\fR` backto `\fIDraft\fR`\.
.P
Require two calls to `\fIapprove\fR` before the state can be changed to `\fIPublished\fR`\.
.P
Allow users to add text content only when a post is in the `\fIDraft\fR` state\.Hint: have the state object responsible for what might change about thecontent but not responsible for modifying the `\fIPost\fR`\.
.P
One downside of the state pattern is that, because the states implement thetransitions between states, some of the states are coupled to each other\. If weadd another state between `\fIPendingReview\fR` and `\fIPublished\fR`, such as `\fIScheduled\fR`,we would have to change the code in `\fIPendingReview\fR` to transition to`\fIScheduled\fR` instead\. It would be less work if `\fIPendingReview\fR` didn‚Äôt need tochange with the addition of a new state, but that would mean switching toanother design pattern\.
.P
Another downside is that we‚Äôve duplicated some logic\. To eliminate some of theduplication, we might try to make default implementations for the`\fIrequest_review\fR` and `\fIapprove\fR` methods on the `\fIState\fR` trait that return `\fIself\fR`;however, this would violate object safety, because the trait doesn‚Äôt know whatthe concrete `\fIself\fR` will be exactly\. We want to be able to use `\fIState\fR` as atrait object, so we need its methods to be object safe\.
.P
Other duplication includes the similar implementations of the `\fIrequest_review\fR`and `\fIapprove\fR` methods on `\fIPost\fR`\. Both methods delegate to the implementation ofthe same method on the value in the `\fIstate\fR` field of `\fIOption\fR` and set the newvalue of the `\fIstate\fR` field to the result\. If we had a lot of methods on `\fIPost\fR`that followed this pattern, we might consider defining a macro to eliminate therepetition (see the 
.UR ch19\-06\-macros\.html#macros
.UE
‚ÄúMacros‚Äù section in Chapter 19)\.
.P
By implementing the state pattern exactly as it‚Äôs defined for object\-orientedlanguages, we‚Äôre not taking as full advantage of Rust‚Äôs strengths as we could\.Let‚Äôs look at some changes we can make to the `\fIblog\fR` crate that can makeinvalid states and transitions into compile time errors\.
.br

.br
\fBEncoding States and Behavior as Types\fR
.br
=======================================
.br

.P
We‚Äôll show you how to rethink the state pattern to get a different set oftrade\-offs\. Rather than encapsulating the states and transitions completely sooutside code has no knowledge of them, we‚Äôll encode the states into differenttypes\. Consequently, Rust‚Äôs type checking system will prevent attempts to usedraft posts where only published posts are allowed by issuing a compiler error\.
.P
Let‚Äôs consider the first part of `\fImain\fR` in Listing 17\-11:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use blog::Post;
# 
fn main() {
    let mut post = Post::new();

    post\.add_text("I ate a salad for lunch today");
    assert_eq!("", post\.content());
# 
#     post\.request_review();
#     assert_eq!("", post\.content());
# 
#     post\.approve();
#     assert_eq!("I ate a salad for lunch today", post\.content());
}

.EE

.RE
.P
We still enable the creation of new posts in the draft state using `\fIPost::new\fR`and the ability to add text to the post‚Äôs content\. But instead of having a`\fIcontent\fR` method on a draft post that returns an empty string, we‚Äôll make it sodraft posts don‚Äôt have the `\fIcontent\fR` method at all\. That way, if we try to geta draft post‚Äôs content, we‚Äôll get a compiler error telling us the methoddoesn‚Äôt exist\. As a result, it will be impossible for us to accidentallydisplay draft post content in production, because that code won‚Äôt even compile\.Listing 17\-19 shows the definition of a `\fIPost\fR` struct and a `\fIDraftPost\fR` struct,as well as methods on each:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct Post {
    content: String,
}

pub struct DraftPost {
    content: String,
}

impl Post {
    pub fn new() \-> DraftPost {
        DraftPost {
            content: String::new(),
        }
    }

    pub fn content(&self) \-> &str {
        &self\.content
    }
}

impl DraftPost {
    pub fn add_text(&mut self, text: &str) {
        self\.content\.push_str(text);
    }
}

.EE

.RE
Listing 17\-19: A `\fIPost\fR` with a `\fIcontent\fR` method and a`\fIDraftPost\fR` without a `\fIcontent\fR` method
.P
Both the `\fIPost\fR` and `\fIDraftPost\fR` structs have a private `\fIcontent\fR` field thatstores the blog post text\. The structs no longer have the `\fIstate\fR` field becausewe‚Äôre moving the encoding of the state to the types of the structs\. The `\fIPost\fR`struct will represent a published post, and it has a `\fIcontent\fR` method thatreturns the `\fIcontent\fR`\.
.P
We still have a `\fIPost::new\fR` function, but instead of returning an instance of`\fIPost\fR`, it returns an instance of `\fIDraftPost\fR`\. Because `\fIcontent\fR` is privateand there aren‚Äôt any functions that return `\fIPost\fR`, it‚Äôs not possible to createan instance of `\fIPost\fR` right now\.
.P
The `\fIDraftPost\fR` struct has an `\fIadd_text\fR` method, so we can add text to`\fIcontent\fR` as before, but note that `\fIDraftPost\fR` does not have a `\fIcontent\fR` methoddefined! So now the program ensures all posts start as draft posts, and draftposts don‚Äôt have their content available for display\. Any attempt to get aroundthese constraints will result in a compiler error\.
.br

.br
\fBImplementing Transitions as Transformations into Different Types\fR
.br
==================================================================
.br

.P
So how do we get a published post? We want to enforce the rule that a draftpost has to be reviewed and approved before it can be published\. A post in thepending review state should still not display any content\. Let‚Äôs implementthese constraints by adding another struct, `\fIPendingReviewPost\fR`, defining the`\fIrequest_review\fR` method on `\fIDraftPost\fR` to return a `\fIPendingReviewPost\fR`, anddefining an `\fIapprove\fR` method on `\fIPendingReviewPost\fR` to return a `\fIPost\fR`, asshown in Listing 17\-20:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     content: String,
# }
# 
# pub struct DraftPost {
#     content: String,
# }
# 
# impl Post {
#     pub fn new() \-> DraftPost {
#         DraftPost {
#             content: String::new(),
#         }
#     }
# 
#     pub fn content(&self) \-> &str {
#         &self\.content
#     }
# }
# 
impl DraftPost {
    // \-\-snip\-\-
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
    pub fn request_review(self) \-> PendingReviewPost {
        PendingReviewPost {
            content: self\.content,
        }
    }
}

pub struct PendingReviewPost {
    content: String,
}

impl PendingReviewPost {
    pub fn approve(self) \-> Post {
        Post {
            content: self\.content,
        }
    }
}

.EE

.RE
Listing 17\-20: A `\fIPendingReviewPost\fR` that gets created bycalling `\fIrequest_review\fR` on `\fIDraftPost\fR` and an `\fIapprove\fR` method that turns a`\fIPendingReviewPost\fR` into a published `\fIPost\fR`
.P
The `\fIrequest_review\fR` and `\fIapprove\fR` methods take ownership of `\fIself\fR`, thusconsuming the `\fIDraftPost\fR` and `\fIPendingReviewPost\fR` instances and transformingthem into a `\fIPendingReviewPost\fR` and a published `\fIPost\fR`, respectively\. This way,we won‚Äôt have any lingering `\fIDraftPost\fR` instances after we‚Äôve called`\fIrequest_review\fR` on them, and so forth\. The `\fIPendingReviewPost\fR` struct doesn‚Äôthave a `\fIcontent\fR` method defined on it, so attempting to read its contentresults in a compiler error, as with `\fIDraftPost\fR`\. Because the only way to get apublished `\fIPost\fR` instance that does have a `\fIcontent\fR` method defined is to callthe `\fIapprove\fR` method on a `\fIPendingReviewPost\fR`, and the only way to get a`\fIPendingReviewPost\fR` is to call the `\fIrequest_review\fR` method on a `\fIDraftPost\fR`,we‚Äôve now encoded the blog post workflow into the type system\.
.P
But we also have to make some small changes to `\fImain\fR`\. The `\fIrequest_review\fR` and`\fIapprove\fR` methods return new instances rather than modifying the struct they‚Äôrecalled on, so we need to add more `\fIlet post =\fR` shadowing assignments to savethe returned instances\. We also can‚Äôt have the assertions about the draft andpending review posts‚Äô contents be empty strings, nor do we need them: we can‚Äôtcompile code that tries to use the content of posts in those states any longer\.The updated code in `\fImain\fR` is shown in Listing 17\-21:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use blog::Post;

fn main() {
    let mut post = Post::new();

    post\.add_text("I ate a salad for lunch today");

    let post = post\.request_review();

    let post = post\.approve();

    assert_eq!("I ate a salad for lunch today", post\.content());
}

.EE

.RE
Listing 17\-21: Modifications to `\fImain\fR` to use the newimplementation of the blog post workflow
.P
The changes we needed to make to `\fImain\fR` to reassign `\fIpost\fR` mean that thisimplementation doesn‚Äôt quite follow the object\-oriented state pattern anymore:the transformations between the states are no longer encapsulated entirelywithin the `\fIPost\fR` implementation\. However, our gain is that invalid states arenow impossible because of the type system and the type checking that happens atcompile time! This ensures that certain bugs, such as display of the content ofan unpublished post, will be discovered before they make it to production\.
.P
Try the tasks suggested at the start of this section on the `\fIblog\fR` crate as itis after Listing 17\-21 to see what you think about the design of this versionof the code\. Note that some of the tasks might be completed already in thisdesign\.
.P
We‚Äôve seen that even though Rust is capable of implementing object\-orienteddesign patterns, other patterns, such as encoding state into the type system,are also available in Rust\. These patterns have different trade\-offs\. Althoughyou might be very familiar with object\-oriented patterns, rethinking theproblem to take advantage of Rust‚Äôs features can provide benefits, such aspreventing some bugs at compile time\. Object\-oriented patterns won‚Äôt always bethe best solution in Rust due to certain features, like ownership, thatobject\-oriented languages don‚Äôt have\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
No matter whether or not you think Rust is an object\-oriented language afterreading this chapter, you now know that you can use trait objects to get someobject\-oriented features in Rust\. Dynamic dispatch can give your code someflexibility in exchange for a bit of runtime performance\. You can use thisflexibility to implement object\-oriented patterns that can help your code‚Äôsmaintainability\. Rust also has other features, like ownership, thatobject\-oriented languages don‚Äôt have\. An object\-oriented pattern won‚Äôt alwaysbe the best way to take advantage of Rust‚Äôs strengths, but is an availableoption\.
.P
Next, we‚Äôll look at patterns, which are another of Rust‚Äôs features that enablelots of flexibility\. We‚Äôve looked at them briefly throughout the book buthaven‚Äôt seen their full capability yet\. Let‚Äôs go!
.SH "Patterns and Matching"

.br

.br
\fBPatterns and Matching\fR
.br
=======================
.br
\fIPatterns\fR are a special syntax in Rust for matching against the structure oftypes, both complex and simple\. Using patterns in conjunction with `\fImatch\fR`expressions and other constructs gives you more control over a program‚Äôscontrol flow\. A pattern consists of some combination of the following:
.P
Literals
.P
Destructured arrays, enums, structs, or tuples
.P
Variables
.P
Wildcards
.P
Placeholders
.P
Some example patterns include `\fIx\fR`, `\fI(a, 3)\fR`, and `\fISome(Color::Red)\fR`\. In thecontexts in which patterns are valid, these components describe the shape ofdata\. Our program then matches values against the patterns to determine whetherit has the correct shape of data to continue running a particular piece of code\.
.P
To use a pattern, we compare it to some value\. If the pattern matches thevalue, we use the value parts in our code\. Recall the `\fImatch\fR` expressions inChapter 6 that used patterns, such as the coin\-sorting machine example\. If thevalue fits the shape of the pattern, we can use the named pieces\. If itdoesn‚Äôt, the code associated with the pattern won‚Äôt run\.
.P
This chapter is a reference on all things related to patterns\. We‚Äôll cover thevalid places to use patterns, the difference between refutable and irrefutablepatterns, and the different kinds of pattern syntax that you might see\. By theend of the chapter, you‚Äôll know how to use patterns to express many concepts ina clear way\.
.SH "All the Places Patterns Can Be Used"

.br

.br
\fBAll the Places Patterns Can Be Used\fR
.br
=====================================
.br

.P
Patterns pop up in a number of places in Rust, and you‚Äôve been using them a lotwithout realizing it! This section discusses all the places where patterns arevalid\.`\fImatch\fR` Arms
.P
As discussed in Chapter 6, we use patterns in the arms of `\fImatch\fR` expressions\.Formally, `\fImatch\fR` expressions are defined as the keyword `\fImatch\fR`, a value tomatch on, and one or more match arms that consist of a pattern and anexpression to run if the value matches that arm‚Äôs pattern, like this:
.RS
.IP \fBtext\fR 2

.br
.EX
match VALUE {
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
}

.EE

.RE
.P
For example, here's the `\fImatch\fR` expression from Listing 6\-5 that matches on an`\fIOption<i32>\fR` value in the variable `\fIx\fR`:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
match x {
    None => None,
    Some(i) => Some(i + 1),
}

.EE

.RE
.P
The patterns in this `\fImatch\fR` expression are the `\fINone\fR` and `\fISome(i)\fR` on theleft of each arrow\.
.P
One requirement for `\fImatch\fR` expressions is that they need to be \fIexhaustive\fR inthe sense that all possibilities for the value in the `\fImatch\fR` expression mustbe accounted for\. One way to ensure you‚Äôve covered every possibility is to havea catchall pattern for the last arm: for example, a variable name matching anyvalue can never fail and thus covers every remaining case\.
.P
The particular pattern `\fI_\fR` will match anything, but it never binds to avariable, so it‚Äôs often used in the last match arm\. The `\fI_\fR` pattern can beuseful when you want to ignore any value not specified, for example\. We‚Äôllcover the `\fI_\fR` pattern in more detail in the 
.UR ch18\-03\-pattern\-syntax\.html#ignoring\-values\-in\-a\-pattern
.UE
‚ÄúIgnoring Values in aPattern‚Äù section later in thischapter\.
.br

.br
\fBConditional \fR
.br
==============
.br
`\fIif let\fR` Expressions
.P
In Chapter 6 we discussed how to use `\fIif let\fR` expressions mainly as a shorterway to write the equivalent of a `\fImatch\fR` that only matches one case\.Optionally, `\fIif let\fR` can have a corresponding `\fIelse\fR` containing code to run ifthe pattern in the `\fIif let\fR` doesn‚Äôt match\.
.P
Listing 18\-1 shows that it‚Äôs also possible to mix and match `\fIif let\fR`, `\fIelse if\fR`, and `\fIelse if let\fR` expressions\. Doing so gives us more flexibility than a`\fImatch\fR` expression in which we can express only one value to compare with thepatterns\. Also, Rust doesn't require that the conditions in a series of `\fIif let\fR`, `\fIelse if\fR`, `\fIelse if let\fR` arms relate to each other\.
.P
The code in Listing 18\-1 determines what color to make your background based ona series of checks for several conditions\. For this example, we‚Äôve createdvariables with hardcoded values that a real program might receive from userinput\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let favorite_color: Option<&str> = None;
    let is_tuesday = false;
    let age: Result<u8, _> = "34"\.parse();

    if let Some(color) = favorite_color {
        println!("Using your favorite color, {color}, as the background");
    } else if is_tuesday {
        println!("Tuesday is green day!");
    } else if let Ok(age) = age {
        if age > 30 {
            println!("Using purple as the background color");
        } else {
            println!("Using orange as the background color");
        }
    } else {
        println!("Using blue as the background color");
    }
}

.EE

.RE
Listing 18\-1: Mixing `\fIif let\fR`, `\fIelse if\fR`, `\fIelse if let\fR`,and `\fIelse\fR`
.P
If the user specifies a favorite color, that color is used as the background\.If no favorite color is specified and today is Tuesday, the background color isgreen\. Otherwise, if the user specifies their age as a string and we can parseit as a number successfully, the color is either purple or orange depending onthe value of the number\. If none of these conditions apply, the backgroundcolor is blue\.
.P
This conditional structure lets us support complex requirements\. With thehardcoded values we have here, this example will print `\fIUsing purple as the background color\fR`\.
.P
You can see that `\fIif let\fR` can also introduce shadowed variables in the same waythat `\fImatch\fR` arms can: the line `\fIif let Ok(age) = age\fR` introduces a newshadowed `\fIage\fR` variable that contains the value inside the `\fIOk\fR` variant\. Thismeans we need to place the `\fIif age > 30\fR` condition within that block: we can‚Äôtcombine these two conditions into `\fIif let Ok(age) = age && age > 30\fR`\. Theshadowed `\fIage\fR` we want to compare to 30 isn‚Äôt valid until the new scope startswith the curly bracket\.
.P
The downside of using `\fIif let\fR` expressions is that the compiler doesn‚Äôt checkfor exhaustiveness, whereas with `\fImatch\fR` expressions it does\. If we omitted thelast `\fIelse\fR` block and therefore missed handling some cases, the compiler wouldnot alert us to the possible logic bug\.`\fIwhile let\fR` Conditional Loops
.P
Similar in construction to `\fIif let\fR`, the `\fIwhile let\fR` conditional loop allows a`\fIwhile\fR` loop to run for as long as a pattern continues to match\. In Listing18\-2 we code a `\fIwhile let\fR` loop that uses a vector as a stack and prints thevalues in the vector in the opposite order in which they were pushed\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut stack = Vec::new();

    stack\.push(1);
    stack\.push(2);
    stack\.push(3);

    while let Some(top) = stack\.pop() {
        println!("{}", top);
    }
# }

.EE

.RE
Listing 18\-2: Using a `\fIwhile let\fR` loop to print valuesfor as long as `\fIstack\.pop()\fR` returns `\fISome\fR`
.P
This example prints 3, 2, and then 1\. The `\fIpop\fR` method takes the last elementout of the vector and returns `\fISome(value)\fR`\. If the vector is empty, `\fIpop\fR`returns `\fINone\fR`\. The `\fIwhile\fR` loop continues running the code in its block aslong as `\fIpop\fR` returns `\fISome\fR`\. When `\fIpop\fR` returns `\fINone\fR`, the loop stops\. We canuse `\fIwhile let\fR` to pop every element off our stack\.`\fIfor\fR` Loops
.P
In a `\fIfor\fR` loop, the value that directly follows the keyword `\fIfor\fR` is apattern\. For example, in `\fIfor x in y\fR` the `\fIx\fR` is the pattern\. Listing 18\-3demonstrates how to use a pattern in a `\fIfor\fR` loop to destructure, or breakapart, a tuple as part of the `\fIfor\fR` loop\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v = vec!['a', 'b', 'c'];

    for (index, value) in v\.iter()\.enumerate() {
        println!("{} is at index {}", value, index);
    }
# }

.EE

.RE
Listing 18\-3: Using a pattern in a `\fIfor\fR` loop todestructure a tuple
.P
The code in Listing 18\-3 will print the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.52s
     Running `target/debug/patterns`
a is at index 0
b is at index 1
c is at index 2

.EE

.RE
.P
We adapt an iterator using the `\fIenumerate\fR` method so it produces a value andthe index for that value, placed into a tuple\. The first value produced is thetuple `\fI(0, 'a')\fR`\. When this value is matched to the pattern `\fI(index, value)\fR`,`\fIindex\fR` will be `\fI0\fR` and `\fIvalue\fR` will be `\fI'a'\fR`, printing the first line of theoutput\.`\fIlet\fR` Statements
.P
Prior to this chapter, we had only explicitly discussed using patterns with`\fImatch\fR` and `\fIif let\fR`, but in fact, we‚Äôve used patterns in other places as well,including in `\fIlet\fR` statements\. For example, consider this straightforwardvariable assignment with `\fIlet\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
let x = 5;

.EE

.RE
.P
Every time you've used a `\fIlet\fR` statement like this you've been using patterns,although you might not have realized it! More formally, a `\fIlet\fR` statement lookslike this:
.RS
.IP \fBtext\fR 2

.br
.EX
let PATTERN = EXPRESSION;

.EE

.RE
.P
In statements like `\fIlet x = 5;\fR` with a variable name in the `\fIPATTERN\fR` slot, thevariable name is just a particularly simple form of a pattern\. Rust comparesthe expression against the pattern and assigns any names it finds\. So in the`\fIlet x = 5;\fR` example, `\fIx\fR` is a pattern that means ‚Äúbind what matches here tothe variable `\fIx\fR`\.‚Äù Because the name `\fIx\fR` is the whole pattern, this patterneffectively means ‚Äúbind everything to the variable `\fIx\fR`, whatever the value is\.‚Äù
.P
To see the pattern matching aspect of `\fIlet\fR` more clearly, consider Listing18\-4, which uses a pattern with `\fIlet\fR` to destructure a tuple\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let (x, y, z) = (1, 2, 3);
# }

.EE

.RE
Listing 18\-4: Using a pattern to destructure a tuple andcreate three variables at once
.P
Here, we match a tuple against a pattern\. Rust compares the value `\fI(1, 2, 3)\fR`to the pattern `\fI(x, y, z)\fR` and sees that the value matches the pattern, so Rustbinds `\fI1\fR` to `\fIx\fR`, `\fI2\fR` to `\fIy\fR`, and `\fI3\fR` to `\fIz\fR`\. You can think of this tuplepattern as nesting three individual variable patterns inside it\.
.P
If the number of elements in the pattern doesn‚Äôt match the number of elementsin the tuple, the overall type won‚Äôt match and we‚Äôll get a compiler error\. Forexample, Listing 18\-5 shows an attempt to destructure a tuple with threeelements into two variables, which won‚Äôt work\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let (x, y) = (1, 2, 3);
# }

.EE

.RE
Listing 18\-5: Incorrectly constructing a pattern whosevariables don‚Äôt match the number of elements in the tuple
.P
Attempting to compile this code results in this type error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
error[E0308]: mismatched types
 \-\-> src/main\.rs:2:9
  |
2 |     let (x, y) = (1, 2, 3);
  |         ^^^^^^   \-\-\-\-\-\-\-\-\- this expression has type `({integer}, {integer}, {integer})`
  |         |
  |         expected a tuple with 3 elements, found one with 2 elements
  |
  = note: expected tuple `({integer}, {integer}, {integer})`
             found tuple `(_, _)`

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `patterns` due to previous error

.EE

.RE
.P
To fix the error, we could ignore one or more of the values in the tuple using`\fI_\fR` or `\fI\.\.\fR`, as you‚Äôll see in the 
.UR ch18\-03\-pattern\-syntax\.html#ignoring\-values\-in\-a\-pattern
.UE
‚ÄúIgnoring Values in aPattern‚Äù section\. If the problemis that we have too many variables in the pattern, the solution is to make thetypes match by removing variables so the number of variables equals the numberof elements in the tuple\.
.br

.br
\fBFunction Parameters\fR
.br
=====================
.br

.P
Function parameters can also be patterns\. The code in Listing 18\-6, whichdeclares a function named `\fIfoo\fR` that takes one parameter named `\fIx\fR` of type`\fIi32\fR`, should by now look familiar\.
.RS
.IP \fBrust\fR 2

.br
.EX
fn foo(x: i32) {
    // code goes here
}
# 
# fn main() {}

.EE

.RE
Listing 18\-6: A function signature uses patterns in theparameters
.P
The `\fIx\fR` part is a pattern! As we did with `\fIlet\fR`, we could match a tuple in afunction‚Äôs arguments to the pattern\. Listing 18\-7 splits the values in a tupleas we pass it to a function\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn print_coordinates(&(x, y): &(i32, i32)) {
    println!("Current location: ({}, {})", x, y);
}

fn main() {
    let point = (3, 5);
    print_coordinates(&point);
}

.EE

.RE
Listing 18\-7: A function with parameters that destructurea tuple
.P
This code prints `\fICurrent location: (3, 5)\fR`\. The values `\fI&(3, 5)\fR` match thepattern `\fI&(x, y)\fR`, so `\fIx\fR` is the value `\fI3\fR` and `\fIy\fR` is the value `\fI5\fR`\.
.P
We can also use patterns in closure parameter lists in the same way as infunction parameter lists, because closures are similar to functions, asdiscussed in Chapter 13\.
.P
At this point, you‚Äôve seen several ways of using patterns, but patterns don‚Äôtwork the same in every place we can use them\. In some places, the patterns mustbe irrefutable; in other circumstances, they can be refutable\. We‚Äôll discussthese two concepts next\.
.SH "Refutability: Whether a Pattern Might Fail to Match"

.br

.br
\fBRefutability: Whether a Pattern Might Fail to Match\fR
.br
=====================================================
.br

.P
Patterns come in two forms: refutable and irrefutable\. Patterns that will matchfor any possible value passed are \fIirrefutable\fR\. An example would be `\fIx\fR` in thestatement `\fIlet x = 5;\fR` because `\fIx\fR` matches anything and therefore cannot failto match\. Patterns that can fail to match for some possible value are\fIrefutable\fR\. An example would be `\fISome(x)\fR` in the expression `\fIif let Some(x) = a_value\fR` because if the value in the `\fIa_value\fR` variable is `\fINone\fR` rather than`\fISome\fR`, the `\fISome(x)\fR` pattern will not match\.
.P
Function parameters, `\fIlet\fR` statements, and `\fIfor\fR` loops can only acceptirrefutable patterns, because the program cannot do anything meaningful whenvalues don‚Äôt match\. The `\fIif let\fR` and `\fIwhile let\fR` expressions acceptrefutable and irrefutable patterns, but the compiler warns againstirrefutable patterns because by definition they‚Äôre intended to handle possiblefailure: the functionality of a conditional is in its ability to performdifferently depending on success or failure\.
.P
In general, you shouldn‚Äôt have to worry about the distinction between refutableand irrefutable patterns; however, you do need to be familiar with the conceptof refutability so you can respond when you see it in an error message\. Inthose cases, you‚Äôll need to change either the pattern or the construct you‚Äôreusing the pattern with, depending on the intended behavior of the code\.
.P
Let‚Äôs look at an example of what happens when we try to use a refutable patternwhere Rust requires an irrefutable pattern and vice versa\. Listing 18\-8 shows a`\fIlet\fR` statement, but for the pattern we‚Äôve specified `\fISome(x)\fR`, a refutablepattern\. As you might expect, this code will not compile\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let some_option_value: Option<i32> = None;
    let Some(x) = some_option_value;
# }

.EE

.RE
Listing 18\-8: Attempting to use a refutable pattern with`\fIlet\fR`
.P
If `\fIsome_option_value\fR` was a `\fINone\fR` value, it would fail to match the pattern`\fISome(x)\fR`, meaning the pattern is refutable\. However, the `\fIlet\fR` statement canonly accept an irrefutable pattern because there is nothing valid the code cando with a `\fINone\fR` value\. At compile time, Rust will complain that we‚Äôve tried touse a refutable pattern where an irrefutable pattern is required:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
error[E0005]: refutable pattern in local binding: `None` not covered
   \-\-> src/main\.rs:3:9
    |
3   |     let Some(x) = some_option_value;
    |         ^^^^^^^ pattern `None` not covered
    |
    = note: `let` bindings require an "irrefutable pattern", like a `struct` or an `enum` with only one variant
    = note: for more information, visit https://doc\.rust\-lang\.org/book/ch18\-02\-refutability\.html
note: `Option<i32>` defined here
    = note: the matched value is of type `Option<i32>`
help: you might want to use `if let` to ignore the variant that isn't matched
    |
3   |     let x = if let Some(x) = some_option_value { x } else { todo!() };
    |     ++++++++++                                 ++++++++++++++++++++++

For more information about this error, try `rustc \-\-explain E0005`\.
error: could not compile `patterns` due to previous error

.EE

.RE
.P
Because we didn‚Äôt cover (and couldn‚Äôt cover!) every valid value with thepattern `\fISome(x)\fR`, Rust rightfully produces a compiler error\.
.P
If we have a refutable pattern where an irrefutable pattern is needed, we canfix it by changing the code that uses the pattern: instead of using `\fIlet\fR`, wecan use `\fIif let\fR`\. Then if the pattern doesn‚Äôt match, the code will just skipthe code in the curly brackets, giving it a way to continue validly\. Listing18\-9 shows how to fix the code in Listing 18\-8\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let some_option_value: Option<i32> = None;
    if let Some(x) = some_option_value {
        println!("{}", x);
    }
# }

.EE

.RE
Listing 18\-9: Using `\fIif let\fR` and a block with refutablepatterns instead of `\fIlet\fR`
.P
We‚Äôve given the code an out! This code is perfectly valid, although it means wecannot use an irrefutable pattern without receiving an error\. If we give `\fIif let\fR` a pattern that will always match, such as `\fIx\fR`, as shown in Listing 18\-10,the compiler will give a warning\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    if let x = 5 {
        println!("{}", x);
    };
# }

.EE

.RE
Listing 18\-10: Attempting to use an irrefutable patternwith `\fIif let\fR`
.P
Rust complains that it doesn‚Äôt make sense to use `\fIif let\fR` with an irrefutablepattern:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
warning: irrefutable `if let` pattern
 \-\-> src/main\.rs:2:8
  |
2 |     if let x = 5 {
  |        ^^^^^^^^^
  |
  = note: `#[warn(irrefutable_let_patterns)]` on by default
  = note: this pattern will always match, so the `if let` is useless
  = help: consider replacing the `if let` with a `let`

warning: `patterns` (bin "patterns") generated 1 warning
    Finished dev [unoptimized + debuginfo] target(s) in 0\.39s
     Running `target/debug/patterns`
5

.EE

.RE
.P
For this reason, match arms must use refutable patterns, except for the lastarm, which should match any remaining values with an irrefutable pattern\. Rustallows us to use an irrefutable pattern in a `\fImatch\fR` with only one arm, butthis syntax isn‚Äôt particularly useful and could be replaced with a simpler`\fIlet\fR` statement\.
.P
Now that you know where to use patterns and the difference between refutableand irrefutable patterns, let‚Äôs cover all the syntax we can use to createpatterns\.
.SH "Pattern Syntax"

.br

.br
\fBPattern Syntax\fR
.br
================
.br

.P
In this section, we gather all the syntax valid in patterns and discuss why andwhen you might want to use each one\.
.br

.br
\fBMatching Literals\fR
.br
===================
.br

.P
As you saw in Chapter 6, you can match patterns against literals directly\. Thefollowing code gives some examples:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 1;

    match x {
        1 => println!("one"),
        2 => println!("two"),
        3 => println!("three"),
        _ => println!("anything"),
    }
# }

.EE

.RE
.P
This code prints `\fIone\fR` because the value in `\fIx\fR` is 1\. This syntax is usefulwhen you want your code to take an action if it gets a particular concretevalue\.
.br

.br
\fBMatching Named Variables\fR
.br
==========================
.br

.P
Named variables are irrefutable patterns that match any value, and we‚Äôve usedthem many times in the book\. However, there is a complication when you usenamed variables in `\fImatch\fR` expressions\. Because `\fImatch\fR` starts a new scope,variables declared as part of a pattern inside the `\fImatch\fR` expression willshadow those with the same name outside the `\fImatch\fR` construct, as is the casewith all variables\. In Listing 18\-11, we declare a variable named `\fIx\fR` with thevalue `\fISome(5)\fR` and a variable `\fIy\fR` with the value `\fI10\fR`\. We then create a`\fImatch\fR` expression on the value `\fIx\fR`\. Look at the patterns in the match arms and`\fIprintln!\fR` at the end, and try to figure out what the code will print beforerunning this code or reading further\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = Some(5);
    let y = 10;

    match x {
        Some(50) => println!("Got 50"),
        Some(y) => println!("Matched, y = {y}"),
        _ => println!("Default case, x = {:?}", x),
    }

    println!("at the end: x = {:?}, y = {y}", x);
# }

.EE

.RE
Listing 18\-11: A `\fImatch\fR` expression with an arm thatintroduces a shadowed variable `\fIy\fR`
.P
Let‚Äôs walk through what happens when the `\fImatch\fR` expression runs\. The patternin the first match arm doesn‚Äôt match the defined value of `\fIx\fR`, so the codecontinues\.
.P
The pattern in the second match arm introduces a new variable named `\fIy\fR` thatwill match any value inside a `\fISome\fR` value\. Because we‚Äôre in a new scope insidethe `\fImatch\fR` expression, this is a new `\fIy\fR` variable, not the `\fIy\fR` we declared atthe beginning with the value 10\. This new `\fIy\fR` binding will match any valueinside a `\fISome\fR`, which is what we have in `\fIx\fR`\. Therefore, this new `\fIy\fR` binds tothe inner value of the `\fISome\fR` in `\fIx\fR`\. That value is `\fI5\fR`, so the expression forthat arm executes and prints `\fIMatched, y = 5\fR`\.
.P
If `\fIx\fR` had been a `\fINone\fR` value instead of `\fISome(5)\fR`, the patterns in the firsttwo arms wouldn‚Äôt have matched, so the value would have matched to theunderscore\. We didn‚Äôt introduce the `\fIx\fR` variable in the pattern of theunderscore arm, so the `\fIx\fR` in the expression is still the outer `\fIx\fR` that hasn‚Äôtbeen shadowed\. In this hypothetical case, the `\fImatch\fR` would print `\fIDefault case, x = None\fR`\.
.P
When the `\fImatch\fR` expression is done, its scope ends, and so does the scope ofthe inner `\fIy\fR`\. The last `\fIprintln!\fR` produces `\fIat the end: x = Some(5), y = 10\fR`\.
.P
To create a `\fImatch\fR` expression that compares the values of the outer `\fIx\fR` and`\fIy\fR`, rather than introducing a shadowed variable, we would need to use a matchguard conditional instead\. We‚Äôll talk about match guards later in the 
.UR #extra\-conditionals\-with\-match\-guards
.UE
‚ÄúExtraConditionals with Match Guards‚Äù section\.
.br

.br
\fBMultiple Patterns\fR
.br
===================
.br

.P
In `\fImatch\fR` expressions, you can match multiple patterns using the `\fI|\fR` syntax,which is the pattern \fIor\fR operator\. For example, in the following code we matchthe value of `\fIx\fR` against the match arms, the first of which has an \fIor\fR option,meaning if the value of `\fIx\fR` matches either of the values in that arm, thatarm‚Äôs code will run:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 1;

    match x {
        1 | 2 => println!("one or two"),
        3 => println!("three"),
        _ => println!("anything"),
    }
# }

.EE

.RE
.P
This code prints `\fIone or two\fR`\.
.br

.br
\fBMatching Ranges of Values with \fR
.br
=================================
.br
`\fI\.\.=\fR`
.P
The `\fI\.\.=\fR` syntax allows us to match to an inclusive range of values\. In thefollowing code, when a pattern matches any of the values within the givenrange, that arm will execute:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 5;

    match x {
        1\.\.=5 => println!("one through five"),
        _ => println!("something else"),
    }
# }

.EE

.RE
.P
If `\fIx\fR` is 1, 2, 3, 4, or 5, the first arm will match\. This syntax is moreconvenient for multiple match values than using the `\fI|\fR` operator to express thesame idea; if we were to use `\fI|\fR` we would have to specify `\fI1 | 2 | 3 | 4 | 5\fR`\.Specifying a range is much shorter, especially if we want to match, say, anynumber between 1 and 1,000!
.P
The compiler checks that the range isn‚Äôt empty at compile time, and because theonly types for which Rust can tell if a range is empty or not are `\fIchar\fR` andnumeric values, ranges are only allowed with numeric or `\fIchar\fR` values\.
.P
Here is an example using ranges of `\fIchar\fR` values:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 'c';

    match x {
        'a'\.\.='j' => println!("early ASCII letter"),
        'k'\.\.='z' => println!("late ASCII letter"),
        _ => println!("something else"),
    }
# }

.EE

.RE
.P
Rust can tell that `\fI'c'\fR` is within the first pattern‚Äôs range and prints `\fIearly ASCII letter\fR`\.
.br

.br
\fBDestructuring to Break Apart Values\fR
.br
=====================================
.br

.P
We can also use patterns to destructure structs, enums, and tuples to usedifferent parts of these values\. Let‚Äôs walk through each value\.
.br

.br
\fBDestructuring Structs\fR
.br
=======================
.br

.P
Listing 18\-12 shows a `\fIPoint\fR` struct with two fields, `\fIx\fR` and `\fIy\fR`, that we canbreak apart using a pattern with a `\fIlet\fR` statement\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x: a, y: b } = p;
    assert_eq!(0, a);
    assert_eq!(7, b);
}

.EE

.RE
Listing 18\-12: Destructuring a struct‚Äôs fields intoseparate variables
.P
This code creates the variables `\fIa\fR` and `\fIb\fR` that match the values of the `\fIx\fR`and `\fIy\fR` fields of the `\fIp\fR` struct\. This example shows that the names of thevariables in the pattern don‚Äôt have to match the field names of the struct\.However, it‚Äôs common to match the variable names to the field names to make iteasier to remember which variables came from which fields\. Because of thiscommon usage, and because writing `\fIlet Point { x: x, y: y } = p;\fR` contains alot of duplication, Rust has a shorthand for patterns that match struct fields:you only need to list the name of the struct field, and the variables createdfrom the pattern will have the same names\. Listing 18\-13 behaves in the sameway as the code in Listing 18\-12, but the variables created in the `\fIlet\fR`pattern are `\fIx\fR` and `\fIy\fR` instead of `\fIa\fR` and `\fIb\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x, y } = p;
    assert_eq!(0, x);
    assert_eq!(7, y);
}

.EE

.RE
Listing 18\-13: Destructuring struct fields using structfield shorthand
.P
This code creates the variables `\fIx\fR` and `\fIy\fR` that match the `\fIx\fR` and `\fIy\fR` fieldsof the `\fIp\fR` variable\. The outcome is that the variables `\fIx\fR` and `\fIy\fR` contain thevalues from the `\fIp\fR` struct\.
.P
We can also destructure with literal values as part of the struct patternrather than creating variables for all the fields\. Doing so allows us to testsome of the fields for particular values while creating variables todestructure the other fields\.
.P
In Listing 18\-14, we have a `\fImatch\fR` expression that separates `\fIPoint\fR` valuesinto three cases: points that lie directly on the `\fIx\fR` axis (which is true when`\fIy = 0\fR`), on the `\fIy\fR` axis (`\fIx = 0\fR`), or neither\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# struct Point {
#     x: i32,
#     y: i32,
# }
# 
fn main() {
    let p = Point { x: 0, y: 7 };

    match p {
        Point { x, y: 0 } => println!("On the x axis at {}", x),
        Point { x: 0, y } => println!("On the y axis at {}", y),
        Point { x, y } => println!("On neither axis: ({}, {})", x, y),
    }
}

.EE

.RE
Listing 18\-14: Destructuring and matching literal valuesin one pattern
.P
The first arm will match any point that lies on the `\fIx\fR` axis by specifying thatthe `\fIy\fR` field matches if its value matches the literal `\fI0\fR`\. The pattern stillcreates an `\fIx\fR` variable that we can use in the code for this arm\.
.P
Similarly, the second arm matches any point on the `\fIy\fR` axis by specifying thatthe `\fIx\fR` field matches if its value is `\fI0\fR` and creates a variable `\fIy\fR` for thevalue of the `\fIy\fR` field\. The third arm doesn‚Äôt specify any literals, so itmatches any other `\fIPoint\fR` and creates variables for both the `\fIx\fR` and `\fIy\fR` fields\.
.P
In this example, the value `\fIp\fR` matches the second arm by virtue of `\fIx\fR`containing a 0, so this code will print `\fIOn the y axis at 7\fR`\.
.P
Remember that a `\fImatch\fR` expression stops checking arms once it has found thefirst matching pattern, so even though `\fIPoint { x: 0, y: 0}\fR` is on the `\fIx\fR` axisand the `\fIy\fR` axis, this code would only print `\fIOn the x axis at 0\fR`\.
.br

.br
\fBDestructuring Enums\fR
.br
=====================
.br

.P
We've destructured enums in this book (for example, Listing 6\-5 in Chapter 6),but haven‚Äôt yet explicitly discussed that the pattern to destructure an enumcorresponds to the way the data stored within the enum is defined\. As anexample, in Listing 18\-15 we use the `\fIMessage\fR` enum from Listing 6\-2 and writea `\fImatch\fR` with patterns that will destructure each inner value\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

fn main() {
    let msg = Message::ChangeColor(0, 160, 255);

    match msg {
        Message::Quit => {
            println!("The Quit variant has no data to destructure\.")
        }
        Message::Move { x, y } => {
            println!(
                "Move in the x direction {} and in the y direction {}",
                x, y
            );
        }
        Message::Write(text) => println!("Text message: {}", text),
        Message::ChangeColor(r, g, b) => println!(
            "Change the color to red {}, green {}, and blue {}",
            r, g, b
        ),
    }
}

.EE

.RE
Listing 18\-15: Destructuring enum variants that holddifferent kinds of values
.P
This code will print `\fIChange the color to red 0, green 160, and blue 255\fR`\. Trychanging the value of `\fImsg\fR` to see the code from the other arms run\.
.P
For enum variants without any data, like `\fIMessage::Quit\fR`, we can‚Äôt destructurethe value any further\. We can only match on the literal `\fIMessage::Quit\fR` value,and no variables are in that pattern\.
.P
For struct\-like enum variants, such as `\fIMessage::Move\fR`, we can use a patternsimilar to the pattern we specify to match structs\. After the variant name, weplace curly brackets and then list the fields with variables so we break apartthe pieces to use in the code for this arm\. Here we use the shorthand form aswe did in Listing 18\-13\.
.P
For tuple\-like enum variants, like `\fIMessage::Write\fR` that holds a tuple with oneelement and `\fIMessage::ChangeColor\fR` that holds a tuple with three elements, thepattern is similar to the pattern we specify to match tuples\. The number ofvariables in the pattern must match the number of elements in the variant we‚Äôrematching\.
.br

.br
\fBDestructuring Nested Structs and Enums\fR
.br
========================================
.br

.P
So far, our examples have all been matching structs or enums one level deep,but matching can work on nested items too! For example, we can refactor thecode in Listing 18\-15 to support RGB and HSV colors in the `\fIChangeColor\fR`message, as shown in Listing 18\-16\.
.RS
.IP \fBrust\fR 2

.br
.EX
enum Color {
    Rgb(i32, i32, i32),
    Hsv(i32, i32, i32),
}

enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(Color),
}

fn main() {
    let msg = Message::ChangeColor(Color::Hsv(0, 160, 255));

    match msg {
        Message::ChangeColor(Color::Rgb(r, g, b)) => println!(
            "Change the color to red {}, green {}, and blue {}",
            r, g, b
        ),
        Message::ChangeColor(Color::Hsv(h, s, v)) => println!(
            "Change the color to hue {}, saturation {}, and value {}",
            h, s, v
        ),
        _ => (),
    }
}

.EE

.RE
Listing 18\-16: Matching on nested enums
.P
The pattern of the first arm in the `\fImatch\fR` expression matches a`\fIMessage::ChangeColor\fR` enum variant that contains a `\fIColor::Rgb\fR` variant; thenthe pattern binds to the three inner `\fIi32\fR` values\. The pattern of the secondarm also matches a `\fIMessage::ChangeColor\fR` enum variant, but the inner enummatches `\fIColor::Hsv\fR` instead\. We can specify these complex conditions in one`\fImatch\fR` expression, even though two enums are involved\.
.br

.br
\fBDestructuring Structs and Tuples\fR
.br
==================================
.br

.P
We can mix, match, and nest destructuring patterns in even more complex ways\.The following example shows a complicated destructure where we nest structs andtuples inside a tuple and destructure all the primitive values out:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     struct Point {
#         x: i32,
#         y: i32,
#     }
# 
    let ((feet, inches), Point { x, y }) = ((3, 10), Point { x: 3, y: \-10 });
# }

.EE

.RE
.P
This code lets us break complex types into their component parts so we can usethe values we‚Äôre interested in separately\.
.P
Destructuring with patterns is a convenient way to use pieces of values, suchas the value from each field in a struct, separately from each other\.
.br

.br
\fBIgnoring Values in a Pattern\fR
.br
==============================
.br

.P
You‚Äôve seen that it‚Äôs sometimes useful to ignore values in a pattern, such asin the last arm of a `\fImatch\fR`, to get a catchall that doesn‚Äôt actually doanything but does account for all remaining possible values\. There are a fewways to ignore entire values or parts of values in a pattern: using the `\fI_\fR`pattern (which you‚Äôve seen), using the `\fI_\fR` pattern within another pattern,using a name that starts with an underscore, or using `\fI\.\.\fR` to ignore remainingparts of a value\. Let‚Äôs explore how and why to use each of these patterns\.
.br

.br
\fBIgnoring an Entire Value with \fR
.br
================================
.br
`\fI_\fR`
.P
We‚Äôve used the underscore as a wildcard pattern that will match any value butnot bind to the value\. This is especially useful as the last arm in a `\fImatch\fR`expression, but we can also use it in any pattern, including functionparameters, as shown in Listing 18\-17\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn foo(_: i32, y: i32) {
    println!("This code only uses the y parameter: {}", y);
}

fn main() {
    foo(3, 4);
}

.EE

.RE
Listing 18\-17: Using `\fI_\fR` in a function signature
.P
This code will completely ignore the value `\fI3\fR` passed as the first argument,and will print `\fIThis code only uses the y parameter: 4\fR`\.
.P
In most cases when you no longer need a particular function parameter, youwould change the signature so it doesn‚Äôt include the unused parameter\. Ignoringa function parameter can be especially useful in cases when, for example,you're implementing a trait when you need a certain type signature but thefunction body in your implementation doesn‚Äôt need one of the parameters\. Youthen avoid getting a compiler warning about unused function parameters, as youwould if you used a name instead\.
.br

.br
\fBIgnoring Parts of a Value with a Nested \fR
.br
==========================================
.br
`\fI_\fR`
.P
We can also use `\fI_\fR` inside another pattern to ignore just part of a value, forexample, when we want to test for only part of a value but have no use for theother parts in the corresponding code we want to run\. Listing 18\-18 shows coderesponsible for managing a setting‚Äôs value\. The business requirements are thatthe user should not be allowed to overwrite an existing customization of asetting but can unset the setting and give it a value if it is currently unset\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut setting_value = Some(5);
    let new_setting_value = Some(10);

    match (setting_value, new_setting_value) {
        (Some(_), Some(_)) => {
            println!("Can't overwrite an existing customized value");
        }
        _ => {
            setting_value = new_setting_value;
        }
    }

    println!("setting is {:?}", setting_value);
# }

.EE

.RE
Listing 18\-18: Using an underscore within patterns thatmatch `\fISome\fR` variants when we don‚Äôt need to use the value inside the`\fISome\fR`
.P
This code will print `\fICan't overwrite an existing customized value\fR` and then`\fIsetting is Some(5)\fR`\. In the first match arm, we don‚Äôt need to match on or usethe values inside either `\fISome\fR` variant, but we do need to test for the casewhen `\fIsetting_value\fR` and `\fInew_setting_value\fR` are the `\fISome\fR` variant\. In thatcase, we print the reason for not changing `\fIsetting_value\fR`, and it doesn‚Äôt getchanged\.
.P
In all other cases (if either `\fIsetting_value\fR` or `\fInew_setting_value\fR` are`\fINone\fR`) expressed by the `\fI_\fR` pattern in the second arm, we want to allow`\fInew_setting_value\fR` to become `\fIsetting_value\fR`\.
.P
We can also use underscores in multiple places within one pattern to ignoreparticular values\. Listing 18\-19 shows an example of ignoring the second andfourth values in a tuple of five items\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let numbers = (2, 4, 8, 16, 32);

    match numbers {
        (first, _, third, _, fifth) => {
            println!("Some numbers: {first}, {third}, {fifth}")
        }
    }
# }

.EE

.RE
Listing 18\-19: Ignoring multiple parts of a tuple
.P
This code will print `\fISome numbers: 2, 8, 32\fR`, and the values 4 and 16 will beignored\.
.br

.br
\fBIgnoring an Unused Variable by Starting Its Name with \fR
.br
========================================================
.br
`\fI_\fR`
.P
If you create a variable but don‚Äôt use it anywhere, Rust will usually issue awarning because an unused variable could be a bug\. However, sometimes it‚Äôsuseful to be able to create a variable you won‚Äôt use yet, such as when you‚Äôreprototyping or just starting a project\. In this situation, you can tell Rustnot to warn you about the unused variable by starting the name of the variablewith an underscore\. In Listing 18\-20, we create two unused variables, but whenwe compile this code, we should only get a warning about one of them\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let _x = 5;
    let y = 10;
}

.EE

.RE
Listing 18\-20: Starting a variable name with anunderscore to avoid getting unused variable warnings
.P
Here we get a warning about not using the variable `\fIy\fR`, but we don‚Äôt get awarning about not using `\fI_x\fR`\.
.P
Note that there is a subtle difference between using only `\fI_\fR` and using a namethat starts with an underscore\. The syntax `\fI_x\fR` still binds the value to thevariable, whereas `\fI_\fR` doesn‚Äôt bind at all\. To show a case where thisdistinction matters, Listing 18\-21 will provide us with an error\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let s = Some(String::from("Hello!"));

    if let Some(_s) = s {
        println!("found a string");
    }

    println!("{:?}", s);
# }

.EE

.RE
Listing 18\-21: An unused variable starting with anunderscore still binds the value, which might take ownership of the value
.P
We‚Äôll receive an error because the `\fIs\fR` value will still be moved into `\fI_s\fR`,which prevents us from using `\fIs\fR` again\. However, using the underscore by itselfdoesn‚Äôt ever bind to the value\. Listing 18\-22 will compile without any errorsbecause `\fIs\fR` doesn‚Äôt get moved into `\fI_\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s = Some(String::from("Hello!"));

    if let Some(_) = s {
        println!("found a string");
    }

    println!("{:?}", s);
# }

.EE

.RE
Listing 18\-22: Using an underscore does not bind thevalue
.P
This code works just fine because we never bind `\fIs\fR` to anything; it isn‚Äôt moved\.
.br

.br
\fBIgnoring Remaining Parts of a Value with \fR
.br
===========================================
.br
`\fI\.\.\fR`
.P
With values that have many parts, we can use the `\fI\.\.\fR` syntax to use specificparts and ignore the rest, avoiding the need to list underscores for eachignored value\. The `\fI\.\.\fR` pattern ignores any parts of a value that we haven‚Äôtexplicitly matched in the rest of the pattern\. In Listing 18\-23, we have a`\fIPoint\fR` struct that holds a coordinate in three\-dimensional space\. In the`\fImatch\fR` expression, we want to operate only on the `\fIx\fR` coordinate and ignorethe values in the `\fIy\fR` and `\fIz\fR` fields\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }

    let origin = Point { x: 0, y: 0, z: 0 };

    match origin {
        Point { x, \.\. } => println!("x is {}", x),
    }
# }

.EE

.RE
Listing 18\-23: Ignoring all fields of a `\fIPoint\fR` exceptfor `\fIx\fR` by using `\fI\.\.\fR`
.P
We list the `\fIx\fR` value and then just include the `\fI\.\.\fR` pattern\. This is quickerthan having to list `\fIy: _\fR` and `\fIz: _\fR`, particularly when we‚Äôre working withstructs that have lots of fields in situations where only one or two fields arerelevant\.
.P
The syntax `\fI\.\.\fR` will expand to as many values as it needs to be\. Listing 18\-24shows how to use `\fI\.\.\fR` with a tuple\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let numbers = (2, 4, 8, 16, 32);

    match numbers {
        (first, \.\., last) => {
            println!("Some numbers: {first}, {last}");
        }
    }
}

.EE

.RE
Listing 18\-24: Matching only the first and last values ina tuple and ignoring all other values
.P
In this code, the first and last value are matched with `\fIfirst\fR` and `\fIlast\fR`\. The`\fI\.\.\fR` will match and ignore everything in the middle\.
.P
However, using `\fI\.\.\fR` must be unambiguous\. If it is unclear which values areintended for matching and which should be ignored, Rust will give us an error\.Listing 18\-25 shows an example of using `\fI\.\.\fR` ambiguously, so it will notcompile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let numbers = (2, 4, 8, 16, 32);

    match numbers {
        (\.\., second, \.\.) => {
            println!("Some numbers: {}", second)
        },
    }
}

.EE

.RE
Listing 18\-25: An attempt to use `\fI\.\.\fR` in an ambiguousway
.P
When we compile this example, we get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
error: `\.\.` can only be used once per tuple pattern
 \-\-> src/main\.rs:5:22
  |
5 |         (\.\., second, \.\.) => {
  |          \-\-          ^^ can only be used once per tuple pattern
  |          |
  |          previously used here

error: could not compile `patterns` due to previous error

.EE

.RE
.P
It‚Äôs impossible for Rust to determine how many values in the tuple to ignorebefore matching a value with `\fIsecond\fR` and then how many further values toignore thereafter\. This code could mean that we want to ignore `\fI2\fR`, bind`\fIsecond\fR` to `\fI4\fR`, and then ignore `\fI8\fR`, `\fI16\fR`, and `\fI32\fR`; or that we want to ignore`\fI2\fR` and `\fI4\fR`, bind `\fIsecond\fR` to `\fI8\fR`, and then ignore `\fI16\fR` and `\fI32\fR`; and so forth\.The variable name `\fIsecond\fR` doesn‚Äôt mean anything special to Rust, so we get acompiler error because using `\fI\.\.\fR` in two places like this is ambiguous\.
.br

.br
\fBExtra Conditionals with Match Guards\fR
.br
======================================
.br

.P
A \fImatch guard\fR is an additional `\fIif\fR` condition, specified after the pattern ina `\fImatch\fR` arm, that must also match for that arm to be chosen\. Match guards areuseful for expressing more complex ideas than a pattern alone allows\.
.P
The condition can use variables created in the pattern\. Listing 18\-26 shows a`\fImatch\fR` where the first arm has the pattern `\fISome(x)\fR` and also has a matchguard of `\fIif x % 2 == 0\fR` (which will be true if the number is even)\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let num = Some(4);

    match num {
        Some(x) if x % 2 == 0 => println!("The number {} is even", x),
        Some(x) => println!("The number {} is odd", x),
        None => (),
    }
# }

.EE

.RE
Listing 18\-26: Adding a match guard to a pattern
.P
This example will print `\fIThe number 4 is even\fR`\. When `\fInum\fR` is compared to thepattern in the first arm, it matches, because `\fISome(4)\fR` matches `\fISome(x)\fR`\. Thenthe match guard checks whether the remainder of dividing `\fIx\fR` by 2 is equal to0, and because it is, the first arm is selected\.
.P
If `\fInum\fR` had been `\fISome(5)\fR` instead, the match guard in the first arm wouldhave been false because the remainder of 5 divided by 2 is 1, which is notequal to 0\. Rust would then go to the second arm, which would match because thesecond arm doesn‚Äôt have a match guard and therefore matches any `\fISome\fR` variant\.
.P
There is no way to express the `\fIif x % 2 == 0\fR` condition within a pattern, sothe match guard gives us the ability to express this logic\. The downside ofthis additional expressiveness is that the compiler doesn't try to check forexhaustiveness when match guard expressions are involved\.
.P
In Listing 18\-11, we mentioned that we could use match guards to solve ourpattern\-shadowing problem\. Recall that we created a new variable inside thepattern in the `\fImatch\fR` expression instead of using the variable outside the`\fImatch\fR`\. That new variable meant we couldn‚Äôt test against the value of theouter variable\. Listing 18\-27 shows how we can use a match guard to fix thisproblem\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = Some(5);
    let y = 10;

    match x {
        Some(50) => println!("Got 50"),
        Some(n) if n == y => println!("Matched, n = {n}"),
        _ => println!("Default case, x = {:?}", x),
    }

    println!("at the end: x = {:?}, y = {y}", x);
}

.EE

.RE
Listing 18\-27: Using a match guard to test for equalitywith an outer variable
.P
This code will now print `\fIDefault case, x = Some(5)\fR`\. The pattern in the secondmatch arm doesn‚Äôt introduce a new variable `\fIy\fR` that would shadow the outer `\fIy\fR`,meaning we can use the outer `\fIy\fR` in the match guard\. Instead of specifying thepattern as `\fISome(y)\fR`, which would have shadowed the outer `\fIy\fR`, we specify`\fISome(n)\fR`\. This creates a new variable `\fIn\fR` that doesn‚Äôt shadow anything becausethere is no `\fIn\fR` variable outside the `\fImatch\fR`\.
.P
The match guard `\fIif n == y\fR` is not a pattern and therefore doesn‚Äôt introducenew variables\. This `\fIy\fR` \fIis\fR the outer `\fIy\fR` rather than a new shadowed `\fIy\fR`, andwe can look for a value that has the same value as the outer `\fIy\fR` by comparing`\fIn\fR` to `\fIy\fR`\.
.P
You can also use the \fIor\fR operator `\fI|\fR` in a match guard to specify multiplepatterns; the match guard condition will apply to all the patterns\. Listing18\-28 shows the precedence when combining a pattern that uses `\fI|\fR` with a matchguard\. The important part of this example is that the `\fIif y\fR` match guardapplies to `\fI4\fR`, `\fI5\fR`, \fIand\fR `\fI6\fR`, even though it might look like `\fIif y\fR` onlyapplies to `\fI6\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 4;
    let y = false;

    match x {
        4 | 5 | 6 if y => println!("yes"),
        _ => println!("no"),
    }
# }

.EE

.RE
Listing 18\-28: Combining multiple patterns with a matchguard
.P
The match condition states that the arm only matches if the value of `\fIx\fR` isequal to `\fI4\fR`, `\fI5\fR`, or `\fI6\fR` \fIand\fR if `\fIy\fR` is `\fItrue\fR`\. When this code runs, thepattern of the first arm matches because `\fIx\fR` is `\fI4\fR`, but the match guard `\fIif y\fR`is false, so the first arm is not chosen\. The code moves on to the second arm,which does match, and this program prints `\fIno\fR`\. The reason is that the `\fIif\fR`condition applies to the whole pattern `\fI4 | 5 | 6\fR`, not only to the last value`\fI6\fR`\. In other words, the precedence of a match guard in relation to a patternbehaves like this:
.RS
.IP \fBtext\fR 2

.br
.EX
(4 | 5 | 6) if y => \.\.\.

.EE

.RE
.P
rather than this:
.RS
.IP \fBtext\fR 2

.br
.EX
4 | 5 | (6 if y) => \.\.\.

.EE

.RE
.P
After running the code, the precedence behavior is evident: if the match guardwere applied only to the final value in the list of values specified using the`\fI|\fR` operator, the arm would have matched and the program would have printed`\fIyes\fR`\.`\fI@\fR` Bindings
.P
The \fIat\fR operator `\fI@\fR` lets us create a variable that holds a value at the sametime as we‚Äôre testing that value for a pattern match\. In Listing 18\-29, we wantto test that a `\fIMessage::Hello\fR` `\fIid\fR` field is within the range `\fI3\.\.=7\fR`\. We alsowant to bind the value to the variable `\fIid_variable\fR` so we can use it in thecode associated with the arm\. We could name this variable `\fIid\fR`, the same as thefield, but for this example we‚Äôll use a different name\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum Message {
        Hello { id: i32 },
    }

    let msg = Message::Hello { id: 5 };

    match msg {
        Message::Hello {
            id: id_variable @ 3\.\.=7,
        } => println!("Found an id in range: {}", id_variable),
        Message::Hello { id: 10\.\.=12 } => {
            println!("Found an id in another range")
        }
        Message::Hello { id } => println!("Found some other id: {}", id),
    }
# }

.EE

.RE
Listing 18\-29: Using `\fI@\fR` to bind to a value in a patternwhile also testing it
.P
This example will print `\fIFound an id in range: 5\fR`\. By specifying `\fIid_variable @\fR` before the range `\fI3\.\.=7\fR`, we‚Äôre capturing whatever value matched the rangewhile also testing that the value matched the range pattern\.
.P
In the second arm, where we only have a range specified in the pattern, the codeassociated with the arm doesn‚Äôt have a variable that contains the actual valueof the `\fIid\fR` field\. The `\fIid\fR` field‚Äôs value could have been 10, 11, or 12, butthe code that goes with that pattern doesn‚Äôt know which it is\. The pattern codeisn‚Äôt able to use the value from the `\fIid\fR` field, because we haven‚Äôt saved the`\fIid\fR` value in a variable\.
.P
In the last arm, where we‚Äôve specified a variable without a range, we do havethe value available to use in the arm‚Äôs code in a variable named `\fIid\fR`\. Thereason is that we‚Äôve used the struct field shorthand syntax\. But we haven‚Äôtapplied any test to the value in the `\fIid\fR` field in this arm, as we did with thefirst two arms: any value would match this pattern\.
.P
Using `\fI@\fR` lets us test a value and save it in a variable within one pattern\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Rust‚Äôs patterns are very useful in distinguishing between different kinds ofdata\. When used in `\fImatch\fR` expressions, Rust ensures your patterns cover everypossible value, or your program won‚Äôt compile\. Patterns in `\fIlet\fR` statements andfunction parameters make those constructs more useful, enabling thedestructuring of values into smaller parts at the same time as assigning tovariables\. We can create simple or complex patterns to suit our needs\.
.P
Next, for the penultimate chapter of the book, we‚Äôll look at some advancedaspects of a variety of Rust‚Äôs features\.
.SH "Advanced Features"

.br

.br
\fBAdvanced Features\fR
.br
===================
.br

.P
By now, you‚Äôve learned the most commonly used parts of the Rust programminglanguage\. Before we do one more project in Chapter 20, we‚Äôll look at a fewaspects of the language you might run into every once in a while, but may notuse every day\. You can use this chapter as a reference for when you encounterany unknowns\. The features covered here are useful in very specific situations\.Although you might not reach for them often, we want to make sure you have agrasp of all the features Rust has to offer\.
.P
In this chapter, we‚Äôll cover:
.P
Unsafe Rust: how to opt out of some of Rust‚Äôs guarantees and takeresponsibility for manually upholding those guarantees
.P
Advanced traits: associated types, default type parameters, fully qualifiedsyntax, supertraits, and the newtype pattern in relation to traits
.P
Advanced types: more about the newtype pattern, type aliases, the never type,and dynamically sized types
.P
Advanced functions and closures: function pointers and returning closures
.P
Macros: ways to define code that defines more code at compile time
.P
It‚Äôs a panoply of Rust features with something for everyone! Let‚Äôs dive in!
.SH "Unsafe Rust"

.br

.br
\fBUnsafe Rust\fR
.br
=============
.br

.P
All the code we‚Äôve discussed so far has had Rust‚Äôs memory safety guaranteesenforced at compile time\. However, Rust has a second language hidden inside itthat doesn‚Äôt enforce these memory safety guarantees: it‚Äôs called \fIunsafe Rust\fRand works just like regular Rust, but gives us extra superpowers\.
.P
Unsafe Rust exists because, by nature, static analysis is conservative\. Whenthe compiler tries to determine whether or not code upholds the guarantees,it‚Äôs better for it to reject some valid programs than to accept some invalidprograms\. Although the code \fImight\fR be okay, if the Rust compiler doesn‚Äôt haveenough information to be confident, it will reject the code\. In these cases,you can use unsafe code to tell the compiler, ‚ÄúTrust me, I know what I‚Äômdoing\.‚Äù Be warned, however, that you use unsafe Rust at your own risk: if youuse unsafe code incorrectly, problems can occur due to memory unsafety, such asnull pointer dereferencing\.
.P
Another reason Rust has an unsafe alter ego is that the underlying computerhardware is inherently unsafe\. If Rust didn‚Äôt let you do unsafe operations, youcouldn‚Äôt do certain tasks\. Rust needs to allow you to do low\-level systemsprogramming, such as directly interacting with the operating system or evenwriting your own operating system\. Working with low\-level systems programmingis one of the goals of the language\. Let‚Äôs explore what we can do with unsafeRust and how to do it\.
.br

.br
\fBUnsafe Superpowers\fR
.br
====================
.br

.P
To switch to unsafe Rust, use the `\fIunsafe\fR` keyword and then start a new blockthat holds the unsafe code\. You can take five actions in unsafe Rust that youcan‚Äôt in safe Rust, which we call \fIunsafe superpowers\fR\. Those superpowersinclude the ability to:
.P
Dereference a raw pointer
.P
Call an unsafe function or method
.P
Access or modify a mutable static variable
.P
Implement an unsafe trait
.P
Access fields of `\fIunion\fR`s
.P
It‚Äôs important to understand that `\fIunsafe\fR` doesn‚Äôt turn off the borrow checkeror disable any other of Rust‚Äôs safety checks: if you use a reference in unsafecode, it will still be checked\. The `\fIunsafe\fR` keyword only gives you access tothese five features that are then not checked by the compiler for memorysafety\. You‚Äôll still get some degree of safety inside of an unsafe block\.
.P
In addition, `\fIunsafe\fR` does not mean the code inside the block is necessarilydangerous or that it will definitely have memory safety problems: the intent isthat as the programmer, you‚Äôll ensure the code inside an `\fIunsafe\fR` block willaccess memory in a valid way\.
.P
People are fallible, and mistakes will happen, but by requiring these fiveunsafe operations to be inside blocks annotated with `\fIunsafe\fR` you‚Äôll know thatany errors related to memory safety must be within an `\fIunsafe\fR` block\. Keep`\fIunsafe\fR` blocks small; you‚Äôll be thankful later when you investigate memorybugs\.
.P
To isolate unsafe code as much as possible, it‚Äôs best to enclose unsafe codewithin a safe abstraction and provide a safe API, which we‚Äôll discuss later inthe chapter when we examine unsafe functions and methods\. Parts of the standardlibrary are implemented as safe abstractions over unsafe code that has beenaudited\. Wrapping unsafe code in a safe abstraction prevents uses of `\fIunsafe\fR`from leaking out into all the places that you or your users might want to usethe functionality implemented with `\fIunsafe\fR` code, because using a safeabstraction is safe\.
.P
Let‚Äôs look at each of the five unsafe superpowers in turn\. We‚Äôll also look atsome abstractions that provide a safe interface to unsafe code\.
.br

.br
\fBDereferencing a Raw Pointer\fR
.br
=============================
.br

.P
In Chapter 4, in the 
.UR ch04\-02\-references\-and\-borrowing\.html#dangling\-references
.UE
‚ÄúDangling References‚Äù section, we mentioned that the compiler ensures references are alwaysvalid\. Unsafe Rust has two new types called \fIraw pointers\fR that are similar toreferences\. As with references, raw pointers can be immutable or mutable andare written as `\fI*const T\fR` and `\fI*mut T\fR`, respectively\. The asterisk isn‚Äôt thedereference operator; it‚Äôs part of the type name\. In the context of rawpointers, \fIimmutable\fR means that the pointer can‚Äôt be directly assigned toafter being dereferenced\.
.P
Different from references and smart pointers, raw pointers:
.P
Are allowed to ignore the borrowing rules by having both immutable andmutable pointers or multiple mutable pointers to the same location
.P
Aren‚Äôt guaranteed to point to valid memory
.P
Are allowed to be null
.P
Don‚Äôt implement any automatic cleanup
.P
By opting out of having Rust enforce these guarantees, you can give upguaranteed safety in exchange for greater performance or the ability tointerface with another language or hardware where Rust‚Äôs guarantees don‚Äôt apply\.
.P
Listing 19\-1 shows how to create an immutable and a mutable raw pointer fromreferences\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut num = 5;

    let r1 = &num as *const i32;
    let r2 = &mut num as *mut i32;
# }

.EE

.RE
Listing 19\-1: Creating raw pointers from references
.P
Notice that we don‚Äôt include the `\fIunsafe\fR` keyword in this code\. We can createraw pointers in safe code; we just can‚Äôt dereference raw pointers outside anunsafe block, as you‚Äôll see in a bit\.
.P
We‚Äôve created raw pointers by using `\fIas\fR` to cast an immutable and a mutablereference into their corresponding raw pointer types\. Because we created themdirectly from references guaranteed to be valid, we know these particular rawpointers are valid, but we can‚Äôt make that assumption about just any rawpointer\.
.P
To demonstrate this, next we‚Äôll create a raw pointer whose validity we can‚Äôt beso certain of\. Listing 19\-2 shows how to create a raw pointer to an arbitrarylocation in memory\. Trying to use arbitrary memory is undefined: there might bedata at that address or there might not, the compiler might optimize the codeso there is no memory access, or the program might error with a segmentationfault\. Usually, there is no good reason to write code like this, but it ispossible\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let address = 0x012345usize;
    let r = address as *const i32;
# }

.EE

.RE
Listing 19\-2: Creating a raw pointer to an arbitrarymemory address
.P
Recall that we can create raw pointers in safe code, but we can‚Äôt \fIdereference\fRraw pointers and read the data being pointed to\. In Listing 19\-3, we use thedereference operator `\fI*\fR` on a raw pointer that requires an `\fIunsafe\fR` block\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut num = 5;

    let r1 = &num as *const i32;
    let r2 = &mut num as *mut i32;

    unsafe {
        println!("r1 is: {}", *r1);
        println!("r2 is: {}", *r2);
    }
# }

.EE

.RE
Listing 19\-3: Dereferencing raw pointers within an`\fIunsafe\fR` block
.P
Creating a pointer does no harm; it‚Äôs only when we try to access the value thatit points at that we might end up dealing with an invalid value\.
.P
Note also that in Listing 19\-1 and 19\-3, we created `\fI*const i32\fR` and `\fI*mut i32\fR`raw pointers that both pointed to the same memory location, where `\fInum\fR` isstored\. If we instead tried to create an immutable and a mutable reference to`\fInum\fR`, the code would not have compiled because Rust‚Äôs ownership rules don‚Äôtallow a mutable reference at the same time as any immutable references\. Withraw pointers, we can create a mutable pointer and an immutable pointer to thesame location and change data through the mutable pointer, potentially creatinga data race\. Be careful!
.P
With all of these dangers, why would you ever use raw pointers? One major usecase is when interfacing with C code, as you‚Äôll see in the next section,
.UR #calling\-an\-unsafe\-function\-or\-method
.UE
‚ÄúCalling an Unsafe Function orMethod\.‚Äù Another case iswhen building up safe abstractions that the borrow checker doesn‚Äôt understand\.We‚Äôll introduce unsafe functions and then look at an example of a safeabstraction that uses unsafe code\.
.br

.br
\fBCalling an Unsafe Function or Method\fR
.br
======================================
.br

.P
The second type of operation you can perform in an unsafe block is callingunsafe functions\. Unsafe functions and methods look exactly like regularfunctions and methods, but they have an extra `\fIunsafe\fR` before the rest of thedefinition\. The `\fIunsafe\fR` keyword in this context indicates the function hasrequirements we need to uphold when we call this function, because Rust can‚Äôtguarantee we‚Äôve met these requirements\. By calling an unsafe function within an`\fIunsafe\fR` block, we‚Äôre saying that we‚Äôve read this function‚Äôs documentation andtake responsibility for upholding the function‚Äôs contracts\.
.P
Here is an unsafe function named `\fIdangerous\fR` that doesn‚Äôt do anything in itsbody:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    unsafe fn dangerous() {}

    unsafe {
        dangerous();
    }
# }

.EE

.RE
.P
We must call the `\fIdangerous\fR` function within a separate `\fIunsafe\fR` block\. If wetry to call `\fIdangerous\fR` without the `\fIunsafe\fR` block, we‚Äôll get an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling unsafe\-example v0\.1\.0 (file:///projects/unsafe\-example)
error[E0133]: call to unsafe function is unsafe and requires unsafe function or block
 \-\-> src/main\.rs:4:5
  |
4 |     dangerous();
  |     ^^^^^^^^^^^ call to unsafe function
  |
  = note: consult the function's documentation for information on how to avoid undefined behavior

For more information about this error, try `rustc \-\-explain E0133`\.
error: could not compile `unsafe\-example` due to previous error

.EE

.RE
.P
With the `\fIunsafe\fR` block, we‚Äôre asserting to Rust that we‚Äôve read the function‚Äôsdocumentation, we understand how to use it properly, and we‚Äôve verified thatwe‚Äôre fulfilling the contract of the function\.
.P
Bodies of unsafe functions are effectively `\fIunsafe\fR` blocks, so to perform otherunsafe operations within an unsafe function, we don‚Äôt need to add another`\fIunsafe\fR` block\.
.br

.br
\fBCreating a Safe Abstraction over Unsafe Code\fR
.br
==============================================
.br

.P
Just because a function contains unsafe code doesn‚Äôt mean we need to mark theentire function as unsafe\. In fact, wrapping unsafe code in a safe function isa common abstraction\. As an example, let‚Äôs study the `\fIsplit_at_mut\fR` functionfrom the standard library, which requires some unsafe code\. We‚Äôll explore howwe might implement it\. This safe method is defined on mutable slices: it takesone slice and makes it two by splitting the slice at the index given as anargument\. Listing 19\-4 shows how to use `\fIsplit_at_mut\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut v = vec![1, 2, 3, 4, 5, 6];

    let r = &mut v[\.\.];

    let (a, b) = r\.split_at_mut(3);

    assert_eq!(a, &mut [1, 2, 3]);
    assert_eq!(b, &mut [4, 5, 6]);
# }

.EE

.RE
Listing 19\-4: Using the safe `\fIsplit_at_mut\fR`function
.P
We can‚Äôt implement this function using only safe Rust\. An attempt might looksomething like Listing 19\-5, which won‚Äôt compile\. For simplicity, we‚Äôllimplement `\fIsplit_at_mut\fR` as a function rather than a method and only for slicesof `\fIi32\fR` values rather than for a generic type `\fIT\fR`\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn split_at_mut(values: &mut [i32], mid: usize) \-> (&mut [i32], &mut [i32]) {
    let len = values\.len();

    assert!(mid <= len);

    (&mut values[\.\.mid], &mut values[mid\.\.])
}
# 
# fn main() {
#     let mut vector = vec![1, 2, 3, 4, 5, 6];
#     let (left, right) = split_at_mut(&mut vector, 3);
# }

.EE

.RE
Listing 19\-5: An attempted implementation of`\fIsplit_at_mut\fR` using only safe Rust
.P
This function first gets the total length of the slice\. Then it asserts thatthe index given as a parameter is within the slice by checking whether it‚Äôsless than or equal to the length\. The assertion means that if we pass an indexthat is greater than the length to split the slice at, the function will panicbefore it attempts to use that index\.
.P
Then we return two mutable slices in a tuple: one from the start of theoriginal slice to the `\fImid\fR` index and another from `\fImid\fR` to the end of theslice\.
.P
When we try to compile the code in Listing 19\-5, we‚Äôll get an error\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling unsafe\-example v0\.1\.0 (file:///projects/unsafe\-example)
error[E0499]: cannot borrow `*values` as mutable more than once at a time
 \-\-> src/main\.rs:6:31
  |
1 | fn split_at_mut(values: &mut [i32], mid: usize) \-> (&mut [i32], &mut [i32]) {
  |                         \- let's call the lifetime of this reference `'1`
\.\.\.
6 |     (&mut values[\.\.mid], &mut values[mid\.\.])
  |     \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-^^^^^^\-\-\-\-\-\-\-\-
  |     |     |                   |
  |     |     |                   second mutable borrow occurs here
  |     |     first mutable borrow occurs here
  |     returning this value requires that `*values` is borrowed for `'1`

For more information about this error, try `rustc \-\-explain E0499`\.
error: could not compile `unsafe\-example` due to previous error

.EE

.RE
.P
Rust‚Äôs borrow checker can‚Äôt understand that we‚Äôre borrowing different parts ofthe slice; it only knows that we‚Äôre borrowing from the same slice twice\.Borrowing different parts of a slice is fundamentally okay because the twoslices aren‚Äôt overlapping, but Rust isn‚Äôt smart enough to know this\. When weknow code is okay, but Rust doesn‚Äôt, it‚Äôs time to reach for unsafe code\.
.P
Listing 19\-6 shows how to use an `\fIunsafe\fR` block, a raw pointer, and some callsto unsafe functions to make the implementation of `\fIsplit_at_mut\fR` work\.
.RS
.IP \fBrust\fR 2

.br
.EX
use std::slice;

fn split_at_mut(values: &mut [i32], mid: usize) \-> (&mut [i32], &mut [i32]) {
    let len = values\.len();
    let ptr = values\.as_mut_ptr();

    assert!(mid <= len);

    unsafe {
        (
            slice::from_raw_parts_mut(ptr, mid),
            slice::from_raw_parts_mut(ptr\.add(mid), len \- mid),
        )
    }
}
# 
# fn main() {
#     let mut vector = vec![1, 2, 3, 4, 5, 6];
#     let (left, right) = split_at_mut(&mut vector, 3);
# }

.EE

.RE
Listing 19\-6: Using unsafe code in the implementation ofthe `\fIsplit_at_mut\fR` function
.P
Recall from 
.UR ch04\-03\-slices\.html#the\-slice\-type
.UE
‚ÄúThe Slice Type‚Äù section inChapter 4 that slices are a pointer to some data and the length of the slice\.We use the `\fIlen\fR` method to get the length of a slice and the `\fIas_mut_ptr\fR`method to access the raw pointer of a slice\. In this case, because we have amutable slice to `\fIi32\fR` values, `\fIas_mut_ptr\fR` returns a raw pointer with the type`\fI*mut i32\fR`, which we‚Äôve stored in the variable `\fIptr\fR`\.
.P
We keep the assertion that the `\fImid\fR` index is within the slice\. Then we get tothe unsafe code: the `\fIslice::from_raw_parts_mut\fR` function takes a raw pointerand a length, and it creates a slice\. We use this function to create a slicethat starts from `\fIptr\fR` and is `\fImid\fR` items long\. Then we call the `\fIadd\fR`method on `\fIptr\fR` with `\fImid\fR` as an argument to get a raw pointer that starts at`\fImid\fR`, and we create a slice using that pointer and the remaining number ofitems after `\fImid\fR` as the length\.
.P
The function `\fIslice::from_raw_parts_mut\fR` is unsafe because it takes a rawpointer and must trust that this pointer is valid\. The `\fIadd\fR` method on rawpointers is also unsafe, because it must trust that the offset location is alsoa valid pointer\. Therefore, we had to put an `\fIunsafe\fR` block around our calls to`\fIslice::from_raw_parts_mut\fR` and `\fIadd\fR` so we could call them\. By looking atthe code and by adding the assertion that `\fImid\fR` must be less than or equal to`\fIlen\fR`, we can tell that all the raw pointers used within the `\fIunsafe\fR` blockwill be valid pointers to data within the slice\. This is an acceptable andappropriate use of `\fIunsafe\fR`\.
.P
Note that we don‚Äôt need to mark the resulting `\fIsplit_at_mut\fR` function as`\fIunsafe\fR`, and we can call this function from safe Rust\. We‚Äôve created a safeabstraction to the unsafe code with an implementation of the function that uses`\fIunsafe\fR` code in a safe way, because it creates only valid pointers from thedata this function has access to\.
.P
In contrast, the use of `\fIslice::from_raw_parts_mut\fR` in Listing 19\-7 wouldlikely crash when the slice is used\. This code takes an arbitrary memorylocation and creates a slice 10,000 items long\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::slice;

    let address = 0x01234usize;
    let r = address as *mut i32;

    let values: &[i32] = unsafe { slice::from_raw_parts_mut(r, 10000) };
# }

.EE

.RE
Listing 19\-7: Creating a slice from an arbitrary memorylocation
.P
We don‚Äôt own the memory at this arbitrary location, and there is no guaranteethat the slice this code creates contains valid `\fIi32\fR` values\. Attempting to use`\fIvalues\fR` as though it‚Äôs a valid slice results in undefined behavior\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIextern\fR` Functions to Call External Code
.P
Sometimes, your Rust code might need to interact with code written in anotherlanguage\. For this, Rust has the keyword `\fIextern\fR` that facilitates the creationand use of a \fIForeign Function Interface (FFI)\fR\. An FFI is a way for aprogramming language to define functions and enable a different (foreign)programming language to call those functions\.
.P
Listing 19\-8 demonstrates how to set up an integration with the `\fIabs\fR` functionfrom the C standard library\. Functions declared within `\fIextern\fR` blocks arealways unsafe to call from Rust code\. The reason is that other languages don‚Äôtenforce Rust‚Äôs rules and guarantees, and Rust can‚Äôt check them, soresponsibility falls on the programmer to ensure safety\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
extern "C" {
    fn abs(input: i32) \-> i32;
}

fn main() {
    unsafe {
        println!("Absolute value of \-3 according to C: {}", abs(\-3));
    }
}

.EE

.RE
Listing 19\-8: Declaring and calling an `\fIextern\fR` functiondefined in another language
.P
Within the `\fIextern "C"\fR` block, we list the names and signatures of externalfunctions from another language we want to call\. The `\fI"C"\fR` part defines which\fIapplication binary interface (ABI)\fR the external function uses: the ABIdefines how to call the function at the assembly level\. The `\fI"C"\fR` ABI is themost common and follows the C programming language‚Äôs ABI\.
.br

.br
\fBCalling Rust Functions from Other Languages\fR
.br
=============================================
.br

.P
We can also use `\fIextern\fR` to create an interface that allows other languagesto call Rust functions\. Instead of creating a whole `\fIextern\fR` block, we addthe `\fIextern\fR` keyword and specify the ABI to use just before the `\fIfn\fR` keywordfor the relevant function\. We also need to add a `\fI#[no_mangle]\fR` annotation totell the Rust compiler not to mangle the name of this function\. \fIMangling\fR iswhen a compiler changes the name we‚Äôve given a function to a different namethat contains more information for other parts of the compilation process toconsume but is less human readable\. Every programming language compilermangles names slightly differently, so for a Rust function to be nameable byother languages, we must disable the Rust compiler‚Äôs name mangling\.
.P
In the following example, we make the `\fIcall_from_c\fR` function accessible fromC code, after it‚Äôs compiled to a shared library and linked from C:
.RS
.IP \fBrust\fR 2

.br
.EX
#[no_mangle]
pub extern "C" fn call_from_c() {
    println!("Just called a Rust function from C!");
}

.EE

.RE
.P
This usage of `\fIextern\fR` does not require `\fIunsafe\fR`\.
.br

.br
\fBAccessing or Modifying a Mutable Static Variable\fR
.br
==================================================
.br

.P
In this book, we‚Äôve not yet talked about \fIglobal variables\fR, which Rust doessupport but can be problematic with Rust‚Äôs ownership rules\. If two threads areaccessing the same mutable global variable, it can cause a data race\.
.P
In Rust, global variables are called \fIstatic\fR variables\. Listing 19\-9 shows anexample declaration and use of a static variable with a string slice as avalue\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
static HELLO_WORLD: &str = "Hello, world!";

fn main() {
    println!("name is: {}", HELLO_WORLD);
}

.EE

.RE
Listing 19\-9: Defining and using an immutable staticvariable
.P
Static variables are similar to constants, which we discussed in the
.UR ch03\-01\-variables\-and\-mutability\.html#constants
.UE
‚ÄúDifferences Between Variables andConstants‚Äù sectionin Chapter 3\. The names of static variables are in `\fISCREAMING_SNAKE_CASE\fR` byconvention\. Static variables can only store references with the `\fI'static\fR`lifetime, which means the Rust compiler can figure out the lifetime and wearen‚Äôt required to annotate it explicitly\. Accessing an immutable staticvariable is safe\.
.P
A subtle difference between constants and immutable static variables is thatvalues in a static variable have a fixed address in memory\. Using the valuewill always access the same data\. Constants, on the other hand, are allowed toduplicate their data whenever they‚Äôre used\. Another difference is that staticvariables can be mutable\. Accessing and modifying mutable static variables is\fIunsafe\fR\. Listing 19\-10 shows how to declare, access, and modify a mutablestatic variable named `\fICOUNTER\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
static mut COUNTER: u32 = 0;

fn add_to_count(inc: u32) {
    unsafe {
        COUNTER += inc;
    }
}

fn main() {
    add_to_count(3);

    unsafe {
        println!("COUNTER: {}", COUNTER);
    }
}

.EE

.RE
Listing 19\-10: Reading from or writing to a mutablestatic variable is unsafe
.P
As with regular variables, we specify mutability using the `\fImut\fR` keyword\. Anycode that reads or writes from `\fICOUNTER\fR` must be within an `\fIunsafe\fR` block\. Thiscode compiles and prints `\fICOUNTER: 3\fR` as we would expect because it‚Äôs singlethreaded\. Having multiple threads access `\fICOUNTER\fR` would likely result in dataraces\.
.P
With mutable data that is globally accessible, it‚Äôs difficult to ensure thereare no data races, which is why Rust considers mutable static variables to beunsafe\. Where possible, it‚Äôs preferable to use the concurrency techniques andthread\-safe smart pointers we discussed in Chapter 16 so the compiler checksthat data accessed from different threads is done safely\.
.br

.br
\fBImplementing an Unsafe Trait\fR
.br
==============================
.br

.P
We can use `\fIunsafe\fR` to implement an unsafe trait\. A trait is unsafe when atleast one of its methods has some invariant that the compiler can‚Äôt verify\. Wedeclare that a trait is `\fIunsafe\fR` by adding the `\fIunsafe\fR` keyword before `\fItrait\fR`and marking the implementation of the trait as `\fIunsafe\fR` too, as shown inListing 19\-11\.
.RS
.IP \fBrust\fR 2

.br
.EX
unsafe trait Foo {
    // methods go here
}

unsafe impl Foo for i32 {
    // method implementations go here
}

fn main() {}

.EE

.RE
Listing 19\-11: Defining and implementing an unsafetrait
.P
By using `\fIunsafe impl\fR`, we‚Äôre promising that we‚Äôll uphold the invariants thatthe compiler can‚Äôt verify\.
.P
As an example, recall the `\fISync\fR` and `\fISend\fR` marker traits we discussed in the
.UR ch16\-04\-extensible\-concurrency\-sync\-and\-send\.html#extensible\-concurrency\-with\-the\-sync\-and\-send\-traits
.UE
‚ÄúExtensible Concurrency with the `\fISync\fR` and `\fISend\fR`Traits‚Äùsection in Chapter 16: the compiler implements these traits automatically ifour types are composed entirely of `\fISend\fR` and `\fISync\fR` types\. If we implement atype that contains a type that is not `\fISend\fR` or `\fISync\fR`, such as raw pointers,and we want to mark that type as `\fISend\fR` or `\fISync\fR`, we must use `\fIunsafe\fR`\. Rustcan‚Äôt verify that our type upholds the guarantees that it can be safely sentacross threads or accessed from multiple threads; therefore, we need to dothose checks manually and indicate as such with `\fIunsafe\fR`\.
.br

.br
\fBAccessing Fields of a Union\fR
.br
=============================
.br

.P
The final action that works only with `\fIunsafe\fR` is accessing fields of a\fIunion\fR\. A `\fIunion\fR` is similar to a `\fIstruct\fR`, but only one declared field isused in a particular instance at one time\. Unions are primarily used tointerface with unions in C code\. Accessing union fields is unsafe because Rustcan‚Äôt guarantee the type of the data currently being stored in the unioninstance\. You can learn more about unions in 
.UR \.\./reference/items/unions\.html
.UE
the Rust Reference\.
.br

.br
\fBWhen to Use Unsafe Code\fR
.br
=========================
.br

.P
Using `\fIunsafe\fR` to take one of the five actions (superpowers) just discussedisn‚Äôt wrong or even frowned upon\. But it is trickier to get `\fIunsafe\fR` codecorrect because the compiler can‚Äôt help uphold memory safety\. When you have areason to use `\fIunsafe\fR` code, you can do so, and having the explicit `\fIunsafe\fR`annotation makes it easier to track down the source of problems when they occur\.
.SH "Advanced Traits"

.br

.br
\fBAdvanced Traits\fR
.br
=================
.br

.P
We first covered traits in the 
.UR ch10\-02\-traits\.html#traits\-defining\-shared\-behavior
.UE
‚ÄúTraits: Defining SharedBehavior‚Äù section of Chapter10, but we didn‚Äôt discuss the more advanced details\. Now that you know moreabout Rust, we can get into the nitty\-gritty\.
.br

.br
\fBSpecifying Placeholder Types in Trait Definitions with Associated Types\fR
.br
=========================================================================
.br
\fIAssociated types\fR connect a type placeholder with a trait such that the traitmethod definitions can use these placeholder types in their signatures\. Theimplementor of a trait will specify the concrete type to be used instead of theplaceholder type for the particular implementation\. That way, we can define atrait that uses some types without needing to know exactly what those types areuntil the trait is implemented\.
.P
We‚Äôve described most of the advanced features in this chapter as being rarelyneeded\. Associated types are somewhere in the middle: they‚Äôre used more rarelythan features explained in the rest of the book but more commonly than many ofthe other features discussed in this chapter\.
.P
One example of a trait with an associated type is the `\fIIterator\fR` trait that thestandard library provides\. The associated type is named `\fIItem\fR` and stands infor the type of the values the type implementing the `\fIIterator\fR` trait isiterating over\. The definition of the `\fIIterator\fR` trait is as shown in Listing19\-12\.
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Iterator {
    type Item;

    fn next(&mut self) \-> Option<Self::Item>;
}

.EE

.RE
Listing 19\-12: The definition of the `\fIIterator\fR` traitthat has an associated type `\fIItem\fR`
.P
The type `\fIItem\fR` is a placeholder, and the `\fInext\fR` method‚Äôs definition shows thatit will return values of type `\fIOption<Self::Item>\fR`\. Implementors of the`\fIIterator\fR` trait will specify the concrete type for `\fIItem\fR`, and the `\fInext\fR`method will return an `\fIOption\fR` containing a value of that concrete type\.
.P
Associated types might seem like a similar concept to generics, in that thelatter allow us to define a function without specifying what types it canhandle\. To examine the difference between the two concepts, we‚Äôll look at animplementation of the `\fIIterator\fR` trait on a type named `\fICounter\fR` that specifiesthe `\fIItem\fR` type is `\fIu32\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# struct Counter {
#     count: u32,
# }
# 
# impl Counter {
#     fn new() \-> Counter {
#         Counter { count: 0 }
#     }
# }
# 
impl Iterator for Counter {
    type Item = u32;

    fn next(&mut self) \-> Option<Self::Item> {
        // \-\-snip\-\-
#         if self\.count < 5 {
#             self\.count += 1;
#             Some(self\.count)
#         } else {
#             None
#         }
#     }
# }

.EE

.RE
.P
This syntax seems comparable to that of generics\. So why not just define the`\fIIterator\fR` trait with generics, as shown in Listing 19\-13?
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Iterator<T> {
    fn next(&mut self) \-> Option<T>;
}

.EE

.RE
Listing 19\-13: A hypothetical definition of the`\fIIterator\fR` trait using generics
.P
The difference is that when using generics, as in Listing 19\-13, we mustannotate the types in each implementation; because we can also implement`\fIIterator<String> for Counter\fR` or any other type, we could have multipleimplementations of `\fIIterator\fR` for `\fICounter\fR`\. In other words, when a trait has ageneric parameter, it can be implemented for a type multiple times, changingthe concrete types of the generic type parameters each time\. When we use the`\fInext\fR` method on `\fICounter\fR`, we would have to provide type annotations toindicate which implementation of `\fIIterator\fR` we want to use\.
.P
With associated types, we don‚Äôt need to annotate types because we can‚Äôtimplement a trait on a type multiple times\. In Listing 19\-12 with thedefinition that uses associated types, we can only choose what the type of`\fIItem\fR` will be once, because there can only be one `\fIimpl Iterator for Counter\fR`\.We don‚Äôt have to specify that we want an iterator of `\fIu32\fR` values everywherethat we call `\fInext\fR` on `\fICounter\fR`\.
.P
Associated types also become part of the trait‚Äôs contract: implementors of thetrait must provide a type to stand in for the associated type placeholder\.Associated types often have a name that describes how the type will be used,and documenting the associated type in the API documentation is good practice\.
.br

.br
\fBDefault Generic Type Parameters and Operator Overloading\fR
.br
==========================================================
.br

.P
When we use generic type parameters, we can specify a default concrete type forthe generic type\. This eliminates the need for implementors of the trait tospecify a concrete type if the default type works\. You specify a default typewhen declaring a generic type with the `\fI<PlaceholderType=ConcreteType>\fR` syntax\.
.P
A great example of a situation where this technique is useful is with \fIoperator\fRoverloading, in which you customize the behavior of an operator (such as `\fI+\fR`)in particular situations\.
.P
Rust doesn‚Äôt allow you to create your own operators or overload arbitraryoperators\. But you can overload the operations and corresponding traits listedin `\fIstd::ops\fR` by implementing the traits associated with the operator\. Forexample, in Listing 19\-14 we overload the `\fI+\fR` operator to add two `\fIPoint\fR`instances together\. We do this by implementing the `\fIAdd\fR` trait on a `\fIPoint\fR`struct:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::ops::Add;

#[derive(Debug, Copy, Clone, PartialEq)]
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Point;

    fn add(self, other: Point) \-> Point {
        Point {
            x: self\.x + other\.x,
            y: self\.y + other\.y,
        }
    }
}

fn main() {
    assert_eq!(
        Point { x: 1, y: 0 } + Point { x: 2, y: 3 },
        Point { x: 3, y: 3 }
    );
}

.EE

.RE
Listing 19\-14: Implementing the `\fIAdd\fR` trait to overloadthe `\fI+\fR` operator for `\fIPoint\fR` instances
.P
The `\fIadd\fR` method adds the `\fIx\fR` values of two `\fIPoint\fR` instances and the `\fIy\fR`values of two `\fIPoint\fR` instances to create a new `\fIPoint\fR`\. The `\fIAdd\fR` trait has anassociated type named `\fIOutput\fR` that determines the type returned from the `\fIadd\fR`method\.
.P
The default generic type in this code is within the `\fIAdd\fR` trait\. Here is itsdefinition:
.RS
.IP \fBrust\fR 2

.br
.EX
trait Add<Rhs=Self> {
    type Output;

    fn add(self, rhs: Rhs) \-> Self::Output;
}

.EE

.RE
.P
This code should look generally familiar: a trait with one method and anassociated type\. The new part is `\fIRhs=Self\fR`: this syntax is called \fIdefault\fRtype parameters\. The `\fIRhs\fR` generic type parameter (short for ‚Äúright handside‚Äù) defines the type of the `\fIrhs\fR` parameter in the `\fIadd\fR` method\. If we don‚Äôtspecify a concrete type for `\fIRhs\fR` when we implement the `\fIAdd\fR` trait, the typeof `\fIRhs\fR` will default to `\fISelf\fR`, which will be the type we‚Äôre implementing`\fIAdd\fR` on\.
.P
When we implemented `\fIAdd\fR` for `\fIPoint\fR`, we used the default for `\fIRhs\fR` because wewanted to add two `\fIPoint\fR` instances\. Let‚Äôs look at an example of implementingthe `\fIAdd\fR` trait where we want to customize the `\fIRhs\fR` type rather than using thedefault\.
.P
We have two structs, `\fIMillimeters\fR` and `\fIMeters\fR`, holding values in differentunits\. This thin wrapping of an existing type in another struct is known as the\fInewtype pattern\fR, which we describe in more detail in the 
.UR ch19\-03\-advanced\-traits\.html#using\-the\-newtype\-pattern\-to\-implement\-external\-traits\-on\-external\-types
.UE
‚ÄúUsing the NewtypePattern to Implement External Traits on External Types‚Äù section\. We want to add values in millimeters to values in meters and havethe implementation of `\fIAdd\fR` do the conversion correctly\. We can implement `\fIAdd\fR`for `\fIMillimeters\fR` with `\fIMeters\fR` as the `\fIRhs\fR`, as shown in Listing 19\-15\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::ops::Add;

struct Millimeters(u32);
struct Meters(u32);

impl Add<Meters> for Millimeters {
    type Output = Millimeters;

    fn add(self, other: Meters) \-> Millimeters {
        Millimeters(self\.0 + (other\.0 * 1000))
    }
}

.EE

.RE
Listing 19\-15: Implementing the `\fIAdd\fR` trait on`\fIMillimeters\fR` to add `\fIMillimeters\fR` to `\fIMeters\fR`
.P
To add `\fIMillimeters\fR` and `\fIMeters\fR`, we specify `\fIimpl Add<Meters>\fR` to set thevalue of the `\fIRhs\fR` type parameter instead of using the default of `\fISelf\fR`\.
.P
You‚Äôll use default type parameters in two main ways:
.P
To extend a type without breaking existing code
.P
To allow customization in specific cases most users won‚Äôt need
.P
The standard library‚Äôs `\fIAdd\fR` trait is an example of the second purpose:usually, you‚Äôll add two like types, but the `\fIAdd\fR` trait provides the ability tocustomize beyond that\. Using a default type parameter in the `\fIAdd\fR` traitdefinition means you don‚Äôt have to specify the extra parameter most of thetime\. In other words, a bit of implementation boilerplate isn‚Äôt needed, makingit easier to use the trait\.
.P
The first purpose is similar to the second but in reverse: if you want to add atype parameter to an existing trait, you can give it a default to allowextension of the functionality of the trait without breaking the existingimplementation code\.
.br

.br
\fBFully Qualified Syntax for Disambiguation: Calling Methods with the Same Name\fR
.br
===============================================================================
.br

.P
Nothing in Rust prevents a trait from having a method with the same name asanother trait‚Äôs method, nor does Rust prevent you from implementing both traitson one type\. It‚Äôs also possible to implement a method directly on the type withthe same name as methods from traits\.
.P
When calling methods with the same name, you‚Äôll need to tell Rust which one youwant to use\. Consider the code in Listing 19\-16 where we‚Äôve defined two traits,`\fIPilot\fR` and `\fIWizard\fR`, that both have a method called `\fIfly\fR`\. We then implementboth traits on a type `\fIHuman\fR` that already has a method named `\fIfly\fR` implementedon it\. Each `\fIfly\fR` method does something different\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
trait Pilot {
    fn fly(&self);
}

trait Wizard {
    fn fly(&self);
}

struct Human;

impl Pilot for Human {
    fn fly(&self) {
        println!("This is your captain speaking\.");
    }
}

impl Wizard for Human {
    fn fly(&self) {
        println!("Up!");
    }
}

impl Human {
    fn fly(&self) {
        println!("*waving arms furiously*");
    }
}
# 
# fn main() {}

.EE

.RE
Listing 19\-16: Two traits are defined to have a `\fIfly\fR`method and are implemented on the `\fIHuman\fR` type, and a `\fIfly\fR` method isimplemented on `\fIHuman\fR` directly
.P
When we call `\fIfly\fR` on an instance of `\fIHuman\fR`, the compiler defaults to callingthe method that is directly implemented on the type, as shown in Listing 19\-17\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# trait Pilot {
#     fn fly(&self);
# }
# 
# trait Wizard {
#     fn fly(&self);
# }
# 
# struct Human;
# 
# impl Pilot for Human {
#     fn fly(&self) {
#         println!("This is your captain speaking\.");
#     }
# }
# 
# impl Wizard for Human {
#     fn fly(&self) {
#         println!("Up!");
#     }
# }
# 
# impl Human {
#     fn fly(&self) {
#         println!("*waving arms furiously*");
#     }
# }
# 
fn main() {
    let person = Human;
    person\.fly();
}

.EE

.RE
Listing 19\-17: Calling `\fIfly\fR` on an instance of`\fIHuman\fR`
.P
Running this code will print `\fI*waving arms furiously*\fR`, showing that Rustcalled the `\fIfly\fR` method implemented on `\fIHuman\fR` directly\.
.P
To call the `\fIfly\fR` methods from either the `\fIPilot\fR` trait or the `\fIWizard\fR` trait,we need to use more explicit syntax to specify which `\fIfly\fR` method we mean\.Listing 19\-18 demonstrates this syntax\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# trait Pilot {
#     fn fly(&self);
# }
# 
# trait Wizard {
#     fn fly(&self);
# }
# 
# struct Human;
# 
# impl Pilot for Human {
#     fn fly(&self) {
#         println!("This is your captain speaking\.");
#     }
# }
# 
# impl Wizard for Human {
#     fn fly(&self) {
#         println!("Up!");
#     }
# }
# 
# impl Human {
#     fn fly(&self) {
#         println!("*waving arms furiously*");
#     }
# }
# 
fn main() {
    let person = Human;
    Pilot::fly(&person);
    Wizard::fly(&person);
    person\.fly();
}

.EE

.RE
Listing 19\-18: Specifying which trait‚Äôs `\fIfly\fR` method wewant to call
.P
Specifying the trait name before the method name clarifies to Rust whichimplementation of `\fIfly\fR` we want to call\. We could also write`\fIHuman::fly(&person)\fR`, which is equivalent to the `\fIperson\.fly()\fR` that we usedin Listing 19\-18, but this is a bit longer to write if we don‚Äôt need todisambiguate\.
.P
Running this code prints the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.46s
     Running `target/debug/traits\-example`
This is your captain speaking\.
Up!
*waving arms furiously*

.EE

.RE
.P
Because the `\fIfly\fR` method takes a `\fIself\fR` parameter, if we had two \fItypes\fR thatboth implement one \fItrait\fR, Rust could figure out which implementation of atrait to use based on the type of `\fIself\fR`\.
.P
However, associated functions that are not methods don‚Äôt have a `\fIself\fR`parameter\. When there are multiple types or traits that define non\-methodfunctions with the same function name, Rust doesn't always know which type youmean unless you use \fIfully qualified syntax\fR\. For example, in Listing 19\-19 wecreate a trait for an animal shelter that wants to name all baby dogs \fISpot\fR\.We make an `\fIAnimal\fR` trait with an associated non\-method function `\fIbaby_name\fR`\.The `\fIAnimal\fR` trait is implemented for the struct `\fIDog\fR`, on which we alsoprovide an associated non\-method function `\fIbaby_name\fR` directly\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
trait Animal {
    fn baby_name() \-> String;
}

struct Dog;

impl Dog {
    fn baby_name() \-> String {
        String::from("Spot")
    }
}

impl Animal for Dog {
    fn baby_name() \-> String {
        String::from("puppy")
    }
}

fn main() {
    println!("A baby dog is called a {}", Dog::baby_name());
}

.EE

.RE
Listing 19\-19: A trait with an associated function and atype with an associated function of the same name that also implements thetrait
.P
We implement the code for naming all puppies Spot in the `\fIbaby_name\fR` associatedfunction that is defined on `\fIDog\fR`\. The `\fIDog\fR` type also implements the trait`\fIAnimal\fR`, which describes characteristics that all animals have\. Baby dogs arecalled puppies, and that is expressed in the implementation of the `\fIAnimal\fR`trait on `\fIDog\fR` in the `\fIbaby_name\fR` function associated with the `\fIAnimal\fR` trait\.
.P
In `\fImain\fR`, we call the `\fIDog::baby_name\fR` function, which calls the associatedfunction defined on `\fIDog\fR` directly\. This code prints the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.54s
     Running `target/debug/traits\-example`
A baby dog is called a Spot

.EE

.RE
.P
This output isn‚Äôt what we wanted\. We want to call the `\fIbaby_name\fR` function thatis part of the `\fIAnimal\fR` trait that we implemented on `\fIDog\fR` so the code prints`\fIA baby dog is called a puppy\fR`\. The technique of specifying the trait name thatwe used in Listing 19\-18 doesn‚Äôt help here; if we change `\fImain\fR` to the code inListing 19\-20, we‚Äôll get a compilation error\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# trait Animal {
#     fn baby_name() \-> String;
# }
# 
# struct Dog;
# 
# impl Dog {
#     fn baby_name() \-> String {
#         String::from("Spot")
#     }
# }
# 
# impl Animal for Dog {
#     fn baby_name() \-> String {
#         String::from("puppy")
#     }
# }
# 
fn main() {
    println!("A baby dog is called a {}", Animal::baby_name());
}

.EE

.RE
Listing 19\-20: Attempting to call the `\fIbaby_name\fR`function from the `\fIAnimal\fR` trait, but Rust doesn‚Äôt know which implementation touse
.P
Because `\fIAnimal::baby_name\fR` doesn‚Äôt have a `\fIself\fR` parameter, and there could beother types that implement the `\fIAnimal\fR` trait, Rust can‚Äôt figure out whichimplementation of `\fIAnimal::baby_name\fR` we want\. We‚Äôll get this compiler error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
error[E0283]: type annotations needed
  \-\-> src/main\.rs:20:43
   |
20 |     println!("A baby dog is called a {}", Animal::baby_name());
   |                                           ^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: cannot satisfy `_: Animal`

For more information about this error, try `rustc \-\-explain E0283`\.
error: could not compile `traits\-example` due to previous error

.EE

.RE
.P
To disambiguate and tell Rust that we want to use the implementation of`\fIAnimal\fR` for `\fIDog\fR` as opposed to the implementation of `\fIAnimal\fR` for some othertype, we need to use fully qualified syntax\. Listing 19\-21 demonstrates how touse fully qualified syntax\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# trait Animal {
#     fn baby_name() \-> String;
# }
# 
# struct Dog;
# 
# impl Dog {
#     fn baby_name() \-> String {
#         String::from("Spot")
#     }
# }
# 
# impl Animal for Dog {
#     fn baby_name() \-> String {
#         String::from("puppy")
#     }
# }
# 
fn main() {
    println!("A baby dog is called a {}", <Dog as Animal>::baby_name());
}

.EE

.RE
Listing 19\-21: Using fully qualified syntax to specifythat we want to call the `\fIbaby_name\fR` function from the `\fIAnimal\fR` trait asimplemented on `\fIDog\fR`
.P
We‚Äôre providing Rust with a type annotation within the angle brackets, whichindicates we want to call the `\fIbaby_name\fR` method from the `\fIAnimal\fR` trait asimplemented on `\fIDog\fR` by saying that we want to treat the `\fIDog\fR` type as an`\fIAnimal\fR` for this function call\. This code will now print what we want:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.48s
     Running `target/debug/traits\-example`
A baby dog is called a puppy

.EE

.RE
.P
In general, fully qualified syntax is defined as follows:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
<Type as Trait>::function(receiver_if_method, next_arg, \.\.\.);

.EE

.RE
.P
For associated functions that aren‚Äôt methods, there would not be a `\fIreceiver\fR`:there would only be the list of other arguments\. You could use fully qualifiedsyntax everywhere that you call functions or methods\. However, you‚Äôre allowedto omit any part of this syntax that Rust can figure out from other informationin the program\. You only need to use this more verbose syntax in cases wherethere are multiple implementations that use the same name and Rust needs helpto identify which implementation you want to call\.
.br

.br
\fBUsing Supertraits to Require One Trait‚Äôs Functionality Within Another Trait\fR
.br
===============================================================================
.br

.P
Sometimes, you might write a trait definition that depends on another trait:for a type to implement the first trait, you want to require that type to alsoimplement the second trait\. You would do this so that your trait definition canmake use of the associated items of the second trait\. The trait your traitdefinition is relying on is called a \fIsupertrait\fR of your trait\.
.P
For example, let‚Äôs say we want to make an `\fIOutlinePrint\fR` trait with an`\fIoutline_print\fR` method that will print a given value formatted so that it'sframed in asterisks\. That is, given a `\fIPoint\fR` struct that implements thestandard library trait `\fIDisplay\fR` to result in `\fI(x, y)\fR`, when we call`\fIoutline_print\fR` on a `\fIPoint\fR` instance that has `\fI1\fR` for `\fIx\fR` and `\fI3\fR` for `\fIy\fR`, itshould print the following:
.RS
.IP \fBtext\fR 2

.br
.EX
**********
*        *
* (1, 3) *
*        *
**********

.EE

.RE
.P
In the implementation of the `\fIoutline_print\fR` method, we want to use the`\fIDisplay\fR` trait‚Äôs functionality\. Therefore, we need to specify that the`\fIOutlinePrint\fR` trait will work only for types that also implement `\fIDisplay\fR` andprovide the functionality that `\fIOutlinePrint\fR` needs\. We can do that in thetrait definition by specifying `\fIOutlinePrint: Display\fR`\. This technique issimilar to adding a trait bound to the trait\. Listing 19\-22 shows animplementation of the `\fIOutlinePrint\fR` trait\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fmt;

trait OutlinePrint: fmt::Display {
    fn outline_print(&self) {
        let output = self\.to_string();
        let len = output\.len();
        println!("{}", "*"\.repeat(len + 4));
        println!("*{}*", " "\.repeat(len + 2));
        println!("* {} *", output);
        println!("*{}*", " "\.repeat(len + 2));
        println!("{}", "*"\.repeat(len + 4));
    }
}
# 
# fn main() {}

.EE

.RE
Listing 19\-22: Implementing the `\fIOutlinePrint\fR` trait thatrequires the functionality from `\fIDisplay\fR`
.P
Because we‚Äôve specified that `\fIOutlinePrint\fR` requires the `\fIDisplay\fR` trait, wecan use the `\fIto_string\fR` function that is automatically implemented for any typethat implements `\fIDisplay\fR`\. If we tried to use `\fIto_string\fR` without adding acolon and specifying the `\fIDisplay\fR` trait after the trait name, we‚Äôd get anerror saying that no method named `\fIto_string\fR` was found for the type `\fI&Self\fR` inthe current scope\.
.P
Let‚Äôs see what happens when we try to implement `\fIOutlinePrint\fR` on a type thatdoesn‚Äôt implement `\fIDisplay\fR`, such as the `\fIPoint\fR` struct:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::fmt;
# 
# trait OutlinePrint: fmt::Display {
#     fn outline_print(&self) {
#         let output = self\.to_string();
#         let len = output\.len();
#         println!("{}", "*"\.repeat(len + 4));
#         println!("*{}*", " "\.repeat(len + 2));
#         println!("* {} *", output);
#         println!("*{}*", " "\.repeat(len + 2));
#         println!("{}", "*"\.repeat(len + 4));
#     }
# }
# 
struct Point {
    x: i32,
    y: i32,
}

impl OutlinePrint for Point {}
# 
# fn main() {
#     let p = Point { x: 1, y: 3 };
#     p\.outline_print();
# }

.EE

.RE
.P
We get an error saying that `\fIDisplay\fR` is required but not implemented:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
error[E0277]: `Point` doesn't implement `std::fmt::Display`
  \-\-> src/main\.rs:20:6
   |
20 | impl OutlinePrint for Point {}
   |      ^^^^^^^^^^^^ `Point` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `Point`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty\-print) instead
note: required by a bound in `OutlinePrint`
  \-\-> src/main\.rs:3:21
   |
3  | trait OutlinePrint: fmt::Display {
   |                     ^^^^^^^^^^^^ required by this bound in `OutlinePrint`

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `traits\-example` due to previous error

.EE

.RE
.P
To fix this, we implement `\fIDisplay\fR` on `\fIPoint\fR` and satisfy the constraint that`\fIOutlinePrint\fR` requires, like so:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# trait OutlinePrint: fmt::Display {
#     fn outline_print(&self) {
#         let output = self\.to_string();
#         let len = output\.len();
#         println!("{}", "*"\.repeat(len + 4));
#         println!("*{}*", " "\.repeat(len + 2));
#         println!("* {} *", output);
#         println!("*{}*", " "\.repeat(len + 2));
#         println!("{}", "*"\.repeat(len + 4));
#     }
# }
# 
# struct Point {
#     x: i32,
#     y: i32,
# }
# 
# impl OutlinePrint for Point {}
# 
use std::fmt;

impl fmt::Display for Point {
    fn fmt(&self, f: &mut fmt::Formatter) \-> fmt::Result {
        write!(f, "({}, {})", self\.x, self\.y)
    }
}
# 
# fn main() {
#     let p = Point { x: 1, y: 3 };
#     p\.outline_print();
# }

.EE

.RE
.P
Then implementing the `\fIOutlinePrint\fR` trait on `\fIPoint\fR` will compilesuccessfully, and we can call `\fIoutline_print\fR` on a `\fIPoint\fR` instance to displayit within an outline of asterisks\.
.br

.br
\fBUsing the Newtype Pattern to Implement External Traits on External Types\fR
.br
==========================================================================
.br

.P
In Chapter 10 in the 
.UR ch10\-02\-traits\.html#implementing\-a\-trait\-on\-a\-type
.UE
‚ÄúImplementing a Trait on aType‚Äù section, we mentioned theorphan rule that states we‚Äôre only allowed to implement a trait on a type ifeither the trait or the type are local to our crate\. It‚Äôs possible to getaround this restriction using the \fInewtype pattern\fR, which involves creating anew type in a tuple struct\. (We covered tuple structs in the 
.UR ch05\-01\-defining\-structs\.html#using\-tuple\-structs\-without\-named\-fields\-to\-create\-different\-types
.UE
‚ÄúUsing TupleStructs without Named Fields to Create Different Types‚Äù section of Chapter 5\.) The tuple struct will have one field and be athin wrapper around the type we want to implement a trait for\. Then the wrappertype is local to our crate, and we can implement the trait on the wrapper\.\fINewtype\fR is a term that originates from the Haskell programming language\.There is no runtime performance penalty for using this pattern, and the wrappertype is elided at compile time\.
.P
As an example, let‚Äôs say we want to implement `\fIDisplay\fR` on `\fIVec<T>\fR`, which theorphan rule prevents us from doing directly because the `\fIDisplay\fR` trait and the`\fIVec<T>\fR` type are defined outside our crate\. We can make a `\fIWrapper\fR` structthat holds an instance of `\fIVec<T>\fR`; then we can implement `\fIDisplay\fR` on`\fIWrapper\fR` and use the `\fIVec<T>\fR` value, as shown in Listing 19\-23\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fmt;

struct Wrapper(Vec<String>);

impl fmt::Display for Wrapper {
    fn fmt(&self, f: &mut fmt::Formatter) \-> fmt::Result {
        write!(f, "[{}]", self\.0\.join(", "))
    }
}

fn main() {
    let w = Wrapper(vec![String::from("hello"), String::from("world")]);
    println!("w = {}", w);
}

.EE

.RE
Listing 19\-23: Creating a `\fIWrapper\fR` type around`\fIVec<String>\fR` to implement `\fIDisplay\fR`
.P
The implementation of `\fIDisplay\fR` uses `\fIself\.0\fR` to access the inner `\fIVec<T>\fR`,because `\fIWrapper\fR` is a tuple struct and `\fIVec<T>\fR` is the item at index 0 in thetuple\. Then we can use the functionality of the `\fIDisplay\fR` type on `\fIWrapper\fR`\.
.P
The downside of using this technique is that `\fIWrapper\fR` is a new type, so itdoesn‚Äôt have the methods of the value it‚Äôs holding\. We would have to implementall the methods of `\fIVec<T>\fR` directly on `\fIWrapper\fR` such that the methodsdelegate to `\fIself\.0\fR`, which would allow us to treat `\fIWrapper\fR` exactly like a`\fIVec<T>\fR`\. If we wanted the new type to have every method the inner type has,implementing the `\fIDeref\fR` trait (discussed in Chapter 15 in the 
.UR ch15\-02\-deref\.html#treating\-smart\-pointers\-like\-regular\-references\-with\-the\-deref\-trait
.UE
‚ÄúTreating SmartPointers Like Regular References with the `\fIDeref\fR`Trait‚Äù section) on the `\fIWrapper\fR` to returnthe inner type would be a solution\. If we don‚Äôt want the `\fIWrapper\fR` type to haveall the methods of the inner type‚Äîfor example, to restrict the `\fIWrapper\fR` type‚Äôsbehavior‚Äîwe would have to implement just the methods we do want manually\.
.P
This newtype pattern is also useful even when traits are not involved\. Let‚Äôsswitch focus and look at some advanced ways to interact with Rust‚Äôs type system\.
.SH "Advanced Types"

.br

.br
\fBAdvanced Types\fR
.br
================
.br

.P
The Rust type system has some features that we‚Äôve so far mentioned but haven‚Äôtyet discussed\. We‚Äôll start by discussing newtypes in general as we examine whynewtypes are useful as types\. Then we‚Äôll move on to type aliases, a featuresimilar to newtypes but with slightly different semantics\. We‚Äôll also discussthe `\fI!\fR` type and dynamically sized types\.
.br

.br
\fBUsing the Newtype Pattern for Type Safety and Abstraction\fR
.br
===========================================================
.br

.P
Note: This section assumes you‚Äôve read the earlier section 
.UR ch19\-03\-advanced\-traits\.html#using\-the\-newtype\-pattern\-to\-implement\-external\-traits\-on\-external\-types
.UE
‚ÄúUsing theNewtype Pattern to Implement External Traits on ExternalTypes\.‚Äù
.P
The newtype pattern is also useful for tasks beyond those we‚Äôve discussed sofar, including statically enforcing that values are never confused andindicating the units of a value\. You saw an example of using newtypes toindicate units in Listing 19\-15: recall that the `\fIMillimeters\fR` and `\fIMeters\fR`structs wrapped `\fIu32\fR` values in a newtype\. If we wrote a function with aparameter of type `\fIMillimeters\fR`, we couldn‚Äôt compile a program thataccidentally tried to call that function with a value of type `\fIMeters\fR` or aplain `\fIu32\fR`\.
.P
We can also use the newtype pattern to abstract away some implementationdetails of a type: the new type can expose a public API that is different fromthe API of the private inner type\.
.P
Newtypes can also hide internal implementation\. For example, we could provide a`\fIPeople\fR` type to wrap a `\fIHashMap<i32, String>\fR` that stores a person‚Äôs IDassociated with their name\. Code using `\fIPeople\fR` would only interact with thepublic API we provide, such as a method to add a name string to the `\fIPeople\fR`collection; that code wouldn‚Äôt need to know that we assign an `\fIi32\fR` ID to namesinternally\. The newtype pattern is a lightweight way to achieve encapsulationto hide implementation details, which we discussed in the 
.UR ch17\-01\-what\-is\-oo\.html#encapsulation\-that\-hides\-implementation\-details
.UE
‚ÄúEncapsulation thatHides ImplementationDetails‚Äùsection of Chapter 17\.
.br

.br
\fBCreating Type Synonyms with Type Aliases\fR
.br
==========================================
.br

.P
Rust provides the ability to declare a \fItype alias\fR to give an existing typeanother name\. For this we use the `\fItype\fR` keyword\. For example, we can createthe alias `\fIKilometers\fR` to `\fIi32\fR` like so:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    type Kilometers = i32;
# 
#     let x: i32 = 5;
#     let y: Kilometers = 5;
# 
#     println!("x + y = {}", x + y);
# }

.EE

.RE
.P
Now, the alias `\fIKilometers\fR` is a \fIsynonym\fR for `\fIi32\fR`; unlike the `\fIMillimeters\fR`and `\fIMeters\fR` types we created in Listing 19\-15, `\fIKilometers\fR` is not a separate,new type\. Values that have the type `\fIKilometers\fR` will be treated the same asvalues of type `\fIi32\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    type Kilometers = i32;

    let x: i32 = 5;
    let y: Kilometers = 5;

    println!("x + y = {}", x + y);
# }

.EE

.RE
.P
Because `\fIKilometers\fR` and `\fIi32\fR` are the same type, we can add values of bothtypes and we can pass `\fIKilometers\fR` values to functions that take `\fIi32\fR`parameters\. However, using this method, we don‚Äôt get the type checking benefitsthat we get from the newtype pattern discussed earlier\. In other words, if wemix up `\fIKilometers\fR` and `\fIi32\fR` values somewhere, the compiler will not give usan error\.
.P
The main use case for type synonyms is to reduce repetition\. For example, wemight have a lengthy type like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
Box<dyn Fn() + Send + 'static>

.EE

.RE
.P
Writing this lengthy type in function signatures and as type annotations allover the code can be tiresome and error prone\. Imagine having a project full ofcode like that in Listing 19\-24\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let f: Box<dyn Fn() + Send + 'static> = Box::new(|| println!("hi"));

    fn takes_long_type(f: Box<dyn Fn() + Send + 'static>) {
        // \-\-snip\-\-
    }

    fn returns_long_type() \-> Box<dyn Fn() + Send + 'static> {
        // \-\-snip\-\-
#         Box::new(|| ())
    }
# }

.EE

.RE
Listing 19\-24: Using a long type in many places
.P
A type alias makes this code more manageable by reducing the repetition\. InListing 19\-25, we‚Äôve introduced an alias named `\fIThunk\fR` for the verbose type andcan replace all uses of the type with the shorter alias `\fIThunk\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    type Thunk = Box<dyn Fn() + Send + 'static>;

    let f: Thunk = Box::new(|| println!("hi"));

    fn takes_long_type(f: Thunk) {
        // \-\-snip\-\-
    }

    fn returns_long_type() \-> Thunk {
        // \-\-snip\-\-
#         Box::new(|| ())
    }
# }

.EE

.RE
Listing 19\-25: Introducing a type alias `\fIThunk\fR` to reducerepetition
.P
This code is much easier to read and write! Choosing a meaningful name for atype alias can help communicate your intent as well (\fIthunk\fR is a word for codeto be evaluated at a later time, so it‚Äôs an appropriate name for a closure thatgets stored)\.
.P
Type aliases are also commonly used with the `\fIResult<T, E>\fR` type for reducingrepetition\. Consider the `\fIstd::io\fR` module in the standard library\. I/Ooperations often return a `\fIResult<T, E>\fR` to handle situations when operationsfail to work\. This library has a `\fIstd::io::Error\fR` struct that represents allpossible I/O errors\. Many of the functions in `\fIstd::io\fR` will be returning`\fIResult<T, E>\fR` where the `\fIE\fR` is `\fIstd::io::Error\fR`, such as these functions inthe `\fIWrite\fR` trait:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::fmt;
use std::io::Error;

pub trait Write {
    fn write(&mut self, buf: &[u8]) \-> Result<usize, Error>;
    fn flush(&mut self) \-> Result<(), Error>;

    fn write_all(&mut self, buf: &[u8]) \-> Result<(), Error>;
    fn write_fmt(&mut self, fmt: fmt::Arguments) \-> Result<(), Error>;
}

.EE

.RE
.P
The `\fIResult<\.\.\., Error>\fR` is repeated a lot\. As such, `\fIstd::io\fR` has this typealias declaration:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::fmt;
# 
type Result<T> = std::result::Result<T, std::io::Error>;
# 
# pub trait Write {
#     fn write(&mut self, buf: &[u8]) \-> Result<usize>;
#     fn flush(&mut self) \-> Result<()>;
# 
#     fn write_all(&mut self, buf: &[u8]) \-> Result<()>;
#     fn write_fmt(&mut self, fmt: fmt::Arguments) \-> Result<()>;
# }

.EE

.RE
.P
Because this declaration is in the `\fIstd::io\fR` module, we can use the fullyqualified alias `\fIstd::io::Result<T>\fR`; that is, a `\fIResult<T, E>\fR` with the `\fIE\fR`filled in as `\fIstd::io::Error\fR`\. The `\fIWrite\fR` trait function signatures end uplooking like this:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::fmt;
# 
# type Result<T> = std::result::Result<T, std::io::Error>;
# 
pub trait Write {
    fn write(&mut self, buf: &[u8]) \-> Result<usize>;
    fn flush(&mut self) \-> Result<()>;

    fn write_all(&mut self, buf: &[u8]) \-> Result<()>;
    fn write_fmt(&mut self, fmt: fmt::Arguments) \-> Result<()>;
}

.EE

.RE
.P
The type alias helps in two ways: it makes code easier to write \fIand\fR it givesus a consistent interface across all of `\fIstd::io\fR`\. Because it‚Äôs an alias, it‚Äôsjust another `\fIResult<T, E>\fR`, which means we can use any methods that work on`\fIResult<T, E>\fR` with it, as well as special syntax like the `\fI?\fR` operator\.
.br

.br
\fBThe Never Type that Never Returns\fR
.br
===================================
.br

.P
Rust has a special type named `\fI!\fR` that‚Äôs known in type theory lingo as the\fIempty type\fR because it has no values\. We prefer to call it the \fInever type\fRbecause it stands in the place of the return type when a function will neverreturn\. Here is an example:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
fn bar() \-> ! {
    // \-\-snip\-\-
#     panic!();
}

.EE

.RE
.P
This code is read as ‚Äúthe function `\fIbar\fR` returns never\.‚Äù Functions that returnnever are called \fIdiverging functions\fR\. We can‚Äôt create values of the type `\fI!\fR`so `\fIbar\fR` can never possibly return\.
.P
But what use is a type you can never create values for? Recall the code fromListing 2\-5, part of the number guessing game; we‚Äôve reproduced a bit of ithere in Listing 19\-26\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.=100);
# 
#     println!("The secret number is: {secret_number}");
# 
#     loop {
#         println!("Please input your guess\.");
# 
#         let mut guess = String::new();
# 
#         // \-\-snip\-\-
# 
#         io::stdin()
#             \.read_line(&mut guess)
#             \.expect("Failed to read line");
# 
        let guess: u32 = match guess\.trim()\.parse() {
            Ok(num) => num,
            Err(_) => continue,
        };
# 
#         println!("You guessed: {guess}");
# 
#         // \-\-snip\-\-
# 
#         match guess\.cmp(&secret_number) {
#             Ordering::Less => println!("Too small!"),
#             Ordering::Greater => println!("Too big!"),
#             Ordering::Equal => {
#                 println!("You win!");
#                 break;
#             }
#         }
#     }
# }

.EE

.RE
Listing 19\-26: A `\fImatch\fR` with an arm that ends in`\fIcontinue\fR`
.P
At the time, we skipped over some details in this code\. In Chapter 6 in 
.UR ch06\-02\-match\.html#the\-match\-control\-flow\-operator
.UE
‚ÄúThe`\fImatch\fR` Control Flow Operator‚Äùsection, we discussed that `\fImatch\fR` arms must all return the same type\. So, forexample, the following code doesn‚Äôt work:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let guess = "3";
    let guess = match guess\.trim()\.parse() {
        Ok(_) => 5,
        Err(_) => "hello",
    };
# }

.EE

.RE
.P
The type of `\fIguess\fR` in this code would have to be an integer \fIand\fR a string,and Rust requires that `\fIguess\fR` have only one type\. So what does `\fIcontinue\fR`return? How were we allowed to return a `\fIu32\fR` from one arm and have another armthat ends with `\fIcontinue\fR` in Listing 19\-26?
.P
As you might have guessed, `\fIcontinue\fR` has a `\fI!\fR` value\. That is, when Rustcomputes the type of `\fIguess\fR`, it looks at both match arms, the former with avalue of `\fIu32\fR` and the latter with a `\fI!\fR` value\. Because `\fI!\fR` can never have avalue, Rust decides that the type of `\fIguess\fR` is `\fIu32\fR`\.
.P
The formal way of describing this behavior is that expressions of type `\fI!\fR` canbe coerced into any other type\. We‚Äôre allowed to end this `\fImatch\fR` arm with`\fIcontinue\fR` because `\fIcontinue\fR` doesn‚Äôt return a value; instead, it moves controlback to the top of the loop, so in the `\fIErr\fR` case, we never assign a value to`\fIguess\fR`\.
.P
The never type is useful with the `\fIpanic!\fR` macro as well\. Recall the `\fIunwrap\fR`function that we call on `\fIOption<T>\fR` values to produce a value or panic withthis definition:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# enum Option<T> {
#     Some(T),
#     None,
# }
# 
# use crate::Option::*;
# 
impl<T> Option<T> {
    pub fn unwrap(self) \-> T {
        match self {
            Some(val) => val,
            None => panic!("called `Option::unwrap()` on a `None` value"),
        }
    }
}

.EE

.RE
.P
In this code, the same thing happens as in the `\fImatch\fR` in Listing 19\-26: Rustsees that `\fIval\fR` has the type `\fIT\fR` and `\fIpanic!\fR` has the type `\fI!\fR`, so the resultof the overall `\fImatch\fR` expression is `\fIT\fR`\. This code works because `\fIpanic!\fR`doesn‚Äôt produce a value; it ends the program\. In the `\fINone\fR` case, we won‚Äôt bereturning a value from `\fIunwrap\fR`, so this code is valid\.
.P
One final expression that has the type `\fI!\fR` is a `\fIloop\fR`:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
    print!("forever ");

    loop {
        print!("and ever ");
    }
# }

.EE

.RE
.P
Here, the loop never ends, so `\fI!\fR` is the value of the expression\. However, thiswouldn‚Äôt be true if we included a `\fIbreak\fR`, because the loop would terminatewhen it got to the `\fIbreak\fR`\.
.br

.br
\fBDynamically Sized Types and the \fR
.br
==================================
.br
`\fISized\fR` Trait
.P
Rust needs to know certain details about its types, such as how much space toallocate for a value of a particular type\. This leaves one corner of its typesystem a little confusing at first: the concept of \fIdynamically sized types\fR\.Sometimes referred to as \fIDSTs\fR or \fIunsized types\fR, these types let us writecode using values whose size we can know only at runtime\.
.P
Let‚Äôs dig into the details of a dynamically sized type called `\fIstr\fR`, whichwe‚Äôve been using throughout the book\. That‚Äôs right, not `\fI&str\fR`, but `\fIstr\fR` onits own, is a DST\. We can‚Äôt know how long the string is until runtime, meaningwe can‚Äôt create a variable of type `\fIstr\fR`, nor can we take an argument of type`\fIstr\fR`\. Consider the following code, which does not work:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let s1: str = "Hello there!";
    let s2: str = "How's it going?";
# }

.EE

.RE
.P
Rust needs to know how much memory to allocate for any value of a particulartype, and all values of a type must use the same amount of memory\. If Rustallowed us to write this code, these two `\fIstr\fR` values would need to take up thesame amount of space\. But they have different lengths: `\fIs1\fR` needs 12 bytes ofstorage and `\fIs2\fR` needs 15\. This is why it‚Äôs not possible to create a variableholding a dynamically sized type\.
.P
So what do we do? In this case, you already know the answer: we make the typesof `\fIs1\fR` and `\fIs2\fR` a `\fI&str\fR` rather than a `\fIstr\fR`\. Recall from the 
.UR ch04\-03\-slices\.html#string\-slices
.UE
‚ÄúStringSlices‚Äù section of Chapter 4 that the slice datastructure just stores the starting position and the length of the slice\. Soalthough a `\fI&T\fR` is a single value that stores the memory address of where the`\fIT\fR` is located, a `\fI&str\fR` is \fItwo\fR values: the address of the `\fIstr\fR` and itslength\. As such, we can know the size of a `\fI&str\fR` value at compile time: it‚Äôstwice the length of a `\fIusize\fR`\. That is, we always know the size of a `\fI&str\fR`, nomatter how long the string it refers to is\. In general, this is the way inwhich dynamically sized types are used in Rust: they have an extra bit ofmetadata that stores the size of the dynamic information\. The golden rule ofdynamically sized types is that we must always put values of dynamically sizedtypes behind a pointer of some kind\.
.P
We can combine `\fIstr\fR` with all kinds of pointers: for example, `\fIBox<str>\fR` or`\fIRc<str>\fR`\. In fact, you‚Äôve seen this before but with a different dynamicallysized type: traits\. Every trait is a dynamically sized type we can refer to byusing the name of the trait\. In Chapter 17 in the 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
‚ÄúUsing Trait Objects ThatAllow for Values of DifferentTypes‚Äù section, we mentioned that to use traits as trait objects, we mustput them behind a pointer, such as `\fI&dyn Trait\fR` or `\fIBox<dyn Trait>\fR` (`\fIRc<dyn Trait>\fR` would work too)\.
.P
To work with DSTs, Rust provides the `\fISized\fR` trait to determine whether or nota type‚Äôs size is known at compile time\. This trait is automatically implementedfor everything whose size is known at compile time\. In addition, Rustimplicitly adds a bound on `\fISized\fR` to every generic function\. That is, ageneric function definition like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn generic<T>(t: T) {
    // \-\-snip\-\-
}

.EE

.RE
.P
is actually treated as though we had written this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn generic<T: Sized>(t: T) {
    // \-\-snip\-\-
}

.EE

.RE
.P
By default, generic functions will work only on types that have a known size atcompile time\. However, you can use the following special syntax to relax thisrestriction:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn generic<T: ?Sized>(t: &T) {
    // \-\-snip\-\-
}

.EE

.RE
.P
A trait bound on `\fI?Sized\fR` means ‚Äú`\fIT\fR` may or may not be `\fISized\fR`‚Äù and thisnotation overrides the default that generic types must have a known size atcompile time\. The `\fI?Trait\fR` syntax with this meaning is only available for`\fISized\fR`, not any other traits\.
.P
Also note that we switched the type of the `\fIt\fR` parameter from `\fIT\fR` to `\fI&T\fR`\.Because the type might not be `\fISized\fR`, we need to use it behind some kind ofpointer\. In this case, we‚Äôve chosen a reference\.
.P
Next, we‚Äôll talk about functions and closures!
.SH "Advanced Functions and Closures"

.br

.br
\fBAdvanced Functions and Closures\fR
.br
=================================
.br

.P
This section explores some advanced features related to functions and closures,including function pointers and returning closures\.
.br

.br
\fBFunction Pointers\fR
.br
===================
.br

.P
We‚Äôve talked about how to pass closures to functions; you can also pass regularfunctions to functions! This technique is useful when you want to pass afunction you‚Äôve already defined rather than defining a new closure\. Functionscoerce to the type `\fIfn\fR` (with a lowercase f), not to be confused with the `\fIFn\fR`closure trait\. The `\fIfn\fR` type is called a \fIfunction pointer\fR\. Passing functionswith function pointers will allow you to use functions as arguments to otherfunctions\.
.P
The syntax for specifying that a parameter is a function pointer is similar tothat of closures, as shown in Listing 19\-27, where we‚Äôve defined a function`\fIadd_one\fR` that adds one to its parameter\. The function `\fIdo_twice\fR` takes twoparameters: a function pointer to any function that takes an `\fIi32\fR` parameterand returns an `\fIi32\fR`, and one `\fIi32 value\fR`\. The `\fIdo_twice\fR` function calls thefunction `\fIf\fR` twice, passing it the `\fIarg\fR` value, then adds the two function callresults together\. The `\fImain\fR` function calls `\fIdo_twice\fR` with the arguments`\fIadd_one\fR` and `\fI5\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn add_one(x: i32) \-> i32 {
    x + 1
}

fn do_twice(f: fn(i32) \-> i32, arg: i32) \-> i32 {
    f(arg) + f(arg)
}

fn main() {
    let answer = do_twice(add_one, 5);

    println!("The answer is: {}", answer);
}

.EE

.RE
Listing 19\-27: Using the `\fIfn\fR` type to accept a functionpointer as an argument
.P
This code prints `\fIThe answer is: 12\fR`\. We specify that the parameter `\fIf\fR` in`\fIdo_twice\fR` is an `\fIfn\fR` that takes one parameter of type `\fIi32\fR` and returns an`\fIi32\fR`\. We can then call `\fIf\fR` in the body of `\fIdo_twice\fR`\. In `\fImain\fR`, we can passthe function name `\fIadd_one\fR` as the first argument to `\fIdo_twice\fR`\.
.P
Unlike closures, `\fIfn\fR` is a type rather than a trait, so we specify `\fIfn\fR` as theparameter type directly rather than declaring a generic type parameter with oneof the `\fIFn\fR` traits as a trait bound\.
.P
Function pointers implement all three of the closure traits (`\fIFn\fR`, `\fIFnMut\fR`, and`\fIFnOnce\fR`), meaning you can always pass a function pointer as an argument for afunction that expects a closure\. It‚Äôs best to write functions using a generictype and one of the closure traits so your functions can accept eitherfunctions or closures\.
.P
That said, one example of where you would want to only accept `\fIfn\fR` and notclosures is when interfacing with external code that doesn‚Äôt have closures: Cfunctions can accept functions as arguments, but C doesn‚Äôt have closures\.
.P
As an example of where you could use either a closure defined inline or a namedfunction, let‚Äôs look at a use of the `\fImap\fR` method provided by the `\fIIterator\fR`trait in the standard library\. To use the `\fImap\fR` function to turn a vector ofnumbers into a vector of strings, we could use a closure, like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let list_of_numbers = vec![1, 2, 3];
    let list_of_strings: Vec<String> =
        list_of_numbers\.iter()\.map(|i| i\.to_string())\.collect();
# }

.EE

.RE
.P
Or we could name a function as the argument to `\fImap\fR` instead of the closure,like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let list_of_numbers = vec![1, 2, 3];
    let list_of_strings: Vec<String> =
        list_of_numbers\.iter()\.map(ToString::to_string)\.collect();
# }

.EE

.RE
.P
Note that we must use the fully qualified syntax that we talked about earlierin the 
.UR ch19\-03\-advanced\-traits\.html#advanced\-traits
.UE
‚ÄúAdvanced Traits‚Äù section becausethere are multiple functions available named `\fIto_string\fR`\. Here, we‚Äôre using the`\fIto_string\fR` function defined in the `\fIToString\fR` trait, which the standardlibrary has implemented for any type that implements `\fIDisplay\fR`\.
.P
Recall from the 
.UR ch06\-01\-defining\-an\-enum\.html#enum\-values
.UE
‚ÄúEnum values‚Äù section of Chapter6 that the name of each enum variant that we define also becomes an initializerfunction\. We can use these initializer functions as function pointers thatimplement the closure traits, which means we can specify the initializerfunctions as arguments for methods that take closures, like so:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum Status {
        Value(u32),
        Stop,
    }

    let list_of_statuses: Vec<Status> = (0u32\.\.20)\.map(Status::Value)\.collect();
# }

.EE

.RE
.P
Here we create `\fIStatus::Value\fR` instances using each `\fIu32\fR` value in the rangethat `\fImap\fR` is called on by using the initializer function of `\fIStatus::Value\fR`\.Some people prefer this style, and some people prefer to use closures\. Theycompile to the same code, so use whichever style is clearer to you\.
.br

.br
\fBReturning Closures\fR
.br
====================
.br

.P
Closures are represented by traits, which means you can‚Äôt return closuresdirectly\. In most cases where you might want to return a trait, you can insteaduse the concrete type that implements the trait as the return value of thefunction\. However, you can‚Äôt do that with closures because they don‚Äôt have aconcrete type that is returnable; you‚Äôre not allowed to use the functionpointer `\fIfn\fR` as a return type, for example\.
.P
The following code tries to return a closure directly, but it won‚Äôt compile:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn returns_closure() \-> dyn Fn(i32) \-> i32 {
    |x| x + 1
}

.EE

.RE
.P
The compiler error is as follows:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling functions\-example v0\.1\.0 (file:///projects/functions\-example)
error[E0746]: return type cannot have an unboxed trait object
 \-\-> src/lib\.rs:1:25
  |
1 | fn returns_closure() \-> dyn Fn(i32) \-> i32 {
  |                         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile\-time
  |
  = note: for information on `impl Trait`, see <https://doc\.rust\-lang\.org/book/ch10\-02\-traits\.html#returning\-types\-that\-implement\-traits>
help: use `impl Fn(i32) \-> i32` as the return type, as all return paths are of type `[closure@src/lib\.rs:2:5: 2:14]`, which implements `Fn(i32) \-> i32`
  |
1 | fn returns_closure() \-> impl Fn(i32) \-> i32 {
  |                         ~~~~~~~~~~~~~~~~~~~

For more information about this error, try `rustc \-\-explain E0746`\.
error: could not compile `functions\-example` due to previous error

.EE

.RE
.P
The error references the `\fISized\fR` trait again! Rust doesn‚Äôt know how much spaceit will need to store the closure\. We saw a solution to this problem earlier\.We can use a trait object:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
fn returns_closure() \-> Box<dyn Fn(i32) \-> i32> {
    Box::new(|x| x + 1)
}

.EE

.RE
.P
This code will compile just fine\. For more about trait objects, refer to thesection 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
‚ÄúUsing Trait Objects That Allow for Values of DifferentTypes‚Äù in Chapter 17\.
.P
Next, let‚Äôs look at macros!
.SH Macros

.br

.br
\fBMacros\fR
.br
========
.br

.P
We‚Äôve used macros like `\fIprintln!\fR` throughout this book, but we haven‚Äôt fullyexplored what a macro is and how it works\. The term \fImacro\fR refers to a familyof features in Rust: \fIdeclarative\fR macros with `\fImacro_rules!\fR` and three kindsof \fIprocedural\fR macros:
.P
Custom `\fI#[derive]\fR` macros that specify code added with the `\fIderive\fR` attributeused on structs and enums
.P
Attribute\-like macros that define custom attributes usable on any item
.P
Function\-like macros that look like function calls but operate on the tokensspecified as their argument
.P
We‚Äôll talk about each of these in turn, but first, let‚Äôs look at why we evenneed macros when we already have functions\.
.br

.br
\fBThe Difference Between Macros and Functions\fR
.br
=============================================
.br

.P
Fundamentally, macros are a way of writing code that writes other code, whichis known as \fImetaprogramming\fR\. In Appendix C, we discuss the `\fIderive\fR`attribute, which generates an implementation of various traits for you\. We‚Äôvealso used the `\fIprintln!\fR` and `\fIvec!\fR` macros throughout the book\. All of thesemacros \fIexpand\fR to produce more code than the code you‚Äôve written manually\.
.P
Metaprogramming is useful for reducing the amount of code you have to write andmaintain, which is also one of the roles of functions\. However, macros havesome additional powers that functions don‚Äôt\.
.P
A function signature must declare the number and type of parameters thefunction has\. Macros, on the other hand, can take a variable number ofparameters: we can call `\fIprintln!("hello")\fR` with one argument or`\fIprintln!("hello {}", name)\fR` with two arguments\. Also, macros are expandedbefore the compiler interprets the meaning of the code, so a macro can, forexample, implement a trait on a given type\. A function can‚Äôt, because it getscalled at runtime and a trait needs to be implemented at compile time\.
.P
The downside to implementing a macro instead of a function is that macrodefinitions are more complex than function definitions because you‚Äôre writingRust code that writes Rust code\. Due to this indirection, macro definitions aregenerally more difficult to read, understand, and maintain than functiondefinitions\.
.P
Another important difference between macros and functions is that you mustdefine macros or bring them into scope \fIbefore\fR you call them in a file, asopposed to functions you can define anywhere and call anywhere\.
.br

.br
\fBDeclarative Macros with \fR
.br
==========================
.br
`\fImacro_rules!\fR` for General Metaprogramming
.P
The most widely used form of macros in Rust is the \fIdeclarative macro\fR\. Theseare also sometimes referred to as ‚Äúmacros by example,‚Äù ‚Äú`\fImacro_rules!\fR` macros,‚Äùor just plain ‚Äúmacros\.‚Äù At their core, declarative macros allow you to writesomething similar to a Rust `\fImatch\fR` expression\. As discussed in Chapter 6,`\fImatch\fR` expressions are control structures that take an expression, compare theresulting value of the expression to patterns, and then run the code associatedwith the matching pattern\. Macros also compare a value to patterns that areassociated with particular code: in this situation, the value is the literalRust source code passed to the macro; the patterns are compared with thestructure of that source code; and the code associated with each pattern, whenmatched, replaces the code passed to the macro\. This all happens duringcompilation\.
.P
To define a macro, you use the `\fImacro_rules!\fR` construct\. Let‚Äôs explore how touse `\fImacro_rules!\fR` by looking at how the `\fIvec!\fR` macro is defined\. Chapter 8covered how we can use the `\fIvec!\fR` macro to create a new vector with particularvalues\. For example, the following macro creates a new vector containing threeintegers:
.RS
.IP \fBrust\fR 2

.br
.EX
let v: Vec<u32> = vec![1, 2, 3];

.EE

.RE
.P
We could also use the `\fIvec!\fR` macro to make a vector of two integers or a vectorof five string slices\. We wouldn‚Äôt be able to use a function to do the samebecause we wouldn‚Äôt know the number or type of values up front\.
.P
Listing 19\-28 shows a slightly simplified definition of the `\fIvec!\fR` macro\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[macro_export]
macro_rules! vec {
    ( $( $x:expr ),* ) => {
        {
            let mut temp_vec = Vec::new();
            $(
                temp_vec\.push($x);
            )*
            temp_vec
        }
    };
}

.EE

.RE
Listing 19\-28: A simplified version of the `\fIvec!\fR` macrodefinition
.P
Note: The actual definition of the `\fIvec!\fR` macro in the standard libraryincludes code to preallocate the correct amount of memory up front\. That codeis an optimization that we don‚Äôt include here to make the example simpler\.
.P
The `\fI#[macro_export]\fR` annotation indicates that this macro should be madeavailable whenever the crate in which the macro is defined is brought intoscope\. Without this annotation, the macro can‚Äôt be brought into scope\.
.P
We then start the macro definition with `\fImacro_rules!\fR` and the name of themacro we‚Äôre defining \fIwithout\fR the exclamation mark\. The name, in this case`\fIvec\fR`, is followed by curly brackets denoting the body of the macro definition\.
.P
The structure in the `\fIvec!\fR` body is similar to the structure of a `\fImatch\fR`expression\. Here we have one arm with the pattern `\fI( $( $x:expr ),* )\fR`,followed by `\fI=>\fR` and the block of code associated with this pattern\. If thepattern matches, the associated block of code will be emitted\. Given that thisis the only pattern in this macro, there is only one valid way to match; anyother pattern will result in an error\. More complex macros will have more thanone arm\.
.P
Valid pattern syntax in macro definitions is different than the pattern syntaxcovered in Chapter 18 because macro patterns are matched against Rust codestructure rather than values\. Let‚Äôs walk through what the pattern pieces inListing 19\-28 mean; for the full macro pattern syntax, see the 
.UR \.\./reference/macros\-by\-example\.html
.UE
RustReference\.
.P
First, we use a set of parentheses to encompass the whole pattern\. We use adollar sign (`\fI$\fR`) to declare a variable in the macro system that will containthe Rust code matching the pattern\. The dollar sign makes it clear this is amacro variable as opposed to a regular Rust variable\. Next comes a set ofparentheses that captures values that match the pattern within the parenthesesfor use in the replacement code\. Within `\fI$()\fR` is `\fI$x:expr\fR`, which matches anyRust expression and gives the expression the name `\fI$x\fR`\.
.P
The comma following `\fI$()\fR` indicates that a literal comma separator charactercould optionally appear after the code that matches the code in `\fI$()\fR`\. The `\fI*\fR`specifies that the pattern matches zero or more of whatever precedes the `\fI*\fR`\.
.P
When we call this macro with `\fIvec![1, 2, 3];\fR`, the `\fI$x\fR` pattern matches threetimes with the three expressions `\fI1\fR`, `\fI2\fR`, and `\fI3\fR`\.
.P
Now let‚Äôs look at the pattern in the body of the code associated with this arm:`\fItemp_vec\.push()\fR` within `\fI$()*\fR` is generated for each part that matches `\fI$()\fR`in the pattern zero or more times depending on how many times the patternmatches\. The `\fI$x\fR` is replaced with each expression matched\. When we call thismacro with `\fIvec![1, 2, 3];\fR`, the code generated that replaces this macro callwill be the following:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
{
    let mut temp_vec = Vec::new();
    temp_vec\.push(1);
    temp_vec\.push(2);
    temp_vec\.push(3);
    temp_vec
}

.EE

.RE
.P
We‚Äôve defined a macro that can take any number of arguments of any type and cangenerate code to create a vector containing the specified elements\.
.P
To learn more about how to write macros, consult the online documentation orother resources, such as 
.UR https://veykril\.github\.io/tlborm/
.UE
‚ÄúThe Little Book of Rust Macros‚Äù started byDaniel Keep and continued by Lukas Wirth\.
.br

.br
\fBProcedural Macros for Generating Code from Attributes\fR
.br
=======================================================
.br

.P
The second form of macros is the \fIprocedural macro\fR, which acts more like afunction (and is a type of procedure)\. Procedural macros accept some code as aninput, operate on that code, and produce some code as an output rather thanmatching against patterns and replacing the code with other code as declarativemacros do\. The three kinds of procedural macros are custom derive,attribute\-like, and function\-like, and all work in a similar fashion\.
.P
When creating procedural macros, the definitions must reside in their own cratewith a special crate type\. This is for complex technical reasons that we hopeto eliminate in the future\. In Listing 19\-29, we show how to define aprocedural macro, where `\fIsome_attribute\fR` is a placeholder for using a specificmacro variety\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use proc_macro;

#[some_attribute]
pub fn some_name(input: TokenStream) \-> TokenStream {
}

.EE

.RE
Listing 19\-29: An example of defining a proceduralmacro
.P
The function that defines a procedural macro takes a `\fITokenStream\fR` as an inputand produces a `\fITokenStream\fR` as an output\. The `\fITokenStream\fR` type is defined bythe `\fIproc_macro\fR` crate that is included with Rust and represents a sequence oftokens\. This is the core of the macro: the source code that the macro isoperating on makes up the input `\fITokenStream\fR`, and the code the macro producesis the output `\fITokenStream\fR`\. The function also has an attribute attached to itthat specifies which kind of procedural macro we‚Äôre creating\. We can havemultiple kinds of procedural macros in the same crate\.
.P
Let‚Äôs look at the different kinds of procedural macros\. We‚Äôll start with acustom derive macro and then explain the small dissimilarities that make theother forms different\.
.br

.br
\fBHow to Write a Custom \fR
.br
========================
.br
`\fIderive\fR` Macro
.P
Let‚Äôs create a crate named `\fIhello_macro\fR` that defines a trait named`\fIHelloMacro\fR` with one associated function named `\fIhello_macro\fR`\. Rather thanmaking our users implement the `\fIHelloMacro\fR` trait for each of their types,we‚Äôll provide a procedural macro so users can annotate their type with`\fI#[derive(HelloMacro)]\fR` to get a default implementation of the `\fIhello_macro\fR`function\. The default implementation will print `\fIHello, Macro! My name is TypeName!\fR` where `\fITypeName\fR` is the name of the type on which this trait hasbeen defined\. In other words, we‚Äôll write a crate that enables anotherprogrammer to write code like Listing 19\-30 using our crate\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use hello_macro::HelloMacro;
use hello_macro_derive::HelloMacro;

#[derive(HelloMacro)]
struct Pancakes;

fn main() {
    Pancakes::hello_macro();
}

.EE

.RE
Listing 19\-30: The code a user of our crate will be ableto write when using our procedural macro
.P
This code will print `\fIHello, Macro! My name is Pancakes!\fR` when we‚Äôre done\. Thefirst step is to make a new library crate, like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new hello_macro \-\-lib

.EE

.RE
.P
Next, we‚Äôll define the `\fIHelloMacro\fR` trait and its associated function:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait HelloMacro {
    fn hello_macro();
}

.EE

.RE
.P
We have a trait and its function\. At this point, our crate user could implementthe trait to achieve the desired functionality, like so:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use hello_macro::HelloMacro;

struct Pancakes;

impl HelloMacro for Pancakes {
    fn hello_macro() {
        println!("Hello, Macro! My name is Pancakes!");
    }
}

fn main() {
    Pancakes::hello_macro();
}

.EE

.RE
.P
However, they would need to write the implementation block for each type theywanted to use with `\fIhello_macro\fR`; we want to spare them from having to do thiswork\.
.P
Additionally, we can‚Äôt yet provide the `\fIhello_macro\fR` function with defaultimplementation that will print the name of the type the trait is implementedon: Rust doesn‚Äôt have reflection capabilities, so it can‚Äôt look up the type‚Äôsname at runtime\. We need a macro to generate code at compile time\.
.P
The next step is to define the procedural macro\. At the time of this writing,procedural macros need to be in their own crate\. Eventually, this restrictionmight be lifted\. The convention for structuring crates and macro crates is asfollows: for a crate named `\fIfoo\fR`, a custom derive procedural macro crate iscalled `\fIfoo_derive\fR`\. Let‚Äôs start a new crate called `\fIhello_macro_derive\fR` insideour `\fIhello_macro\fR` project:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new hello_macro_derive \-\-lib

.EE

.RE
.P
Our two crates are tightly related, so we create the procedural macro cratewithin the directory of our `\fIhello_macro\fR` crate\. If we change the traitdefinition in `\fIhello_macro\fR`, we‚Äôll have to change the implementation of theprocedural macro in `\fIhello_macro_derive\fR` as well\. The two crates will need tobe published separately, and programmers using these crates will need to addboth as dependencies and bring them both into scope\. We could instead have the`\fIhello_macro\fR` crate use `\fIhello_macro_derive\fR` as a dependency and re\-export theprocedural macro code\. However, the way we‚Äôve structured the project makes itpossible for programmers to use `\fIhello_macro\fR` even if they don‚Äôt want the`\fIderive\fR` functionality\.
.P
We need to declare the `\fIhello_macro_derive\fR` crate as a procedural macro crate\.We‚Äôll also need functionality from the `\fIsyn\fR` and `\fIquote\fR` crates, as you‚Äôll seein a moment, so we need to add them as dependencies\. Add the following to the\fICargo\.toml\fR file for `\fIhello_macro_derive\fR`:Filename: hello_macro_derive/Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[lib]
proc\-macro = true

[dependencies]
syn = "1\.0"
quote = "1\.0"

.EE

.RE
.P
To start defining the procedural macro, place the code in Listing 19\-31 intoyour \fIsrc/lib\.rs\fR file for the `\fIhello_macro_derive\fR` crate\. Note that this codewon‚Äôt compile until we add a definition for the `\fIimpl_hello_macro\fR` function\.Filename: hello_macro_derive/src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use proc_macro::TokenStream;
use quote::quote;
use syn;

#[proc_macro_derive(HelloMacro)]
pub fn hello_macro_derive(input: TokenStream) \-> TokenStream {
    // Construct a representation of Rust code as a syntax tree
    // that we can manipulate
    let ast = syn::parse(input)\.unwrap();

    // Build the trait implementation
    impl_hello_macro(&ast)
}

.EE

.RE
Listing 19\-31: Code that most procedural macro crateswill require in order to process Rust code
.P
Notice that we‚Äôve split the code into the `\fIhello_macro_derive\fR` function, whichis responsible for parsing the `\fITokenStream\fR`, and the `\fIimpl_hello_macro\fR`function, which is responsible for transforming the syntax tree: this makeswriting a procedural macro more convenient\. The code in the outer function(`\fIhello_macro_derive\fR` in this case) will be the same for almost everyprocedural macro crate you see or create\. The code you specify in the body ofthe inner function (`\fIimpl_hello_macro\fR` in this case) will be differentdepending on your procedural macro‚Äôs purpose\.
.P
We‚Äôve introduced three new crates: `\fIproc_macro\fR`, 
.UR https://crates\.io/crates/syn
.UE
`\fIsyn\fR`, and 
.UR https://crates\.io/crates/quote
.UE
`\fIquote\fR`\. The`\fIproc_macro\fR` crate comes with Rust, so we didn‚Äôt need to add that to thedependencies in \fICargo\.toml\fR\. The `\fIproc_macro\fR` crate is the compiler‚Äôs API thatallows us to read and manipulate Rust code from our code\.
.P
The `\fIsyn\fR` crate parses Rust code from a string into a data structure that wecan perform operations on\. The `\fIquote\fR` crate turns `\fIsyn\fR` data structures backinto Rust code\. These crates make it much simpler to parse any sort of Rustcode we might want to handle: writing a full parser for Rust code is no simpletask\.
.P
The `\fIhello_macro_derive\fR` function will be called when a user of our libraryspecifies `\fI#[derive(HelloMacro)]\fR` on a type\. This is possible because we‚Äôveannotated the `\fIhello_macro_derive\fR` function here with `\fIproc_macro_derive\fR` andspecified the name `\fIHelloMacro\fR`, which matches our trait name; this is theconvention most procedural macros follow\.
.P
The `\fIhello_macro_derive\fR` function first converts the `\fIinput\fR` from a`\fITokenStream\fR` to a data structure that we can then interpret and performoperations on\. This is where `\fIsyn\fR` comes into play\. The `\fIparse\fR` function in`\fIsyn\fR` takes a `\fITokenStream\fR` and returns a `\fIDeriveInput\fR` struct representing theparsed Rust code\. Listing 19\-32 shows the relevant parts of the `\fIDeriveInput\fR`struct we get from parsing the `\fIstruct Pancakes;\fR` string:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
DeriveInput {
    // \-\-snip\-\-

    ident: Ident {
        ident: "Pancakes",
        span: #0 bytes(95\.\.103)
    },
    data: Struct(
        DataStruct {
            struct_token: Struct,
            fields: Unit,
            semi_token: Some(
                Semi
            )
        }
    )
}

.EE

.RE
Listing 19\-32: The `\fIDeriveInput\fR` instance we get whenparsing the code that has the macro‚Äôs attribute in Listing 19\-30
.P
The fields of this struct show that the Rust code we‚Äôve parsed is a unit structwith the `\fIident\fR` (identifier, meaning the name) of `\fIPancakes\fR`\. There are morefields on this struct for describing all sorts of Rust code; check the 
.UR https://docs\.rs/syn/1\.0/syn/struct\.DeriveInput\.html
.UE
`\fIsyn\fR`documentation for `\fIDeriveInput\fR` for more information\.
.P
Soon we‚Äôll define the `\fIimpl_hello_macro\fR` function, which is where we‚Äôll buildthe new Rust code we want to include\. But before we do, note that the outputfor our derive macro is also a `\fITokenStream\fR`\. The returned `\fITokenStream\fR` isadded to the code that our crate users write, so when they compile their crate,they‚Äôll get the extra functionality that we provide in the modified`\fITokenStream\fR`\.
.P
You might have noticed that we‚Äôre calling `\fIunwrap\fR` to cause the`\fIhello_macro_derive\fR` function to panic if the call to the `\fIsyn::parse\fR` functionfails here\. It‚Äôs necessary for our procedural macro to panic on errors because`\fIproc_macro_derive\fR` functions must return `\fITokenStream\fR` rather than `\fIResult\fR` toconform to the procedural macro API\. We‚Äôve simplified this example by using`\fIunwrap\fR`; in production code, you should provide more specific error messagesabout what went wrong by using `\fIpanic!\fR` or `\fIexpect\fR`\.
.P
Now that we have the code to turn the annotated Rust code from a `\fITokenStream\fR`into a `\fIDeriveInput\fR` instance, let‚Äôs generate the code that implements the`\fIHelloMacro\fR` trait on the annotated type, as shown in Listing 19\-33\.Filename: hello_macro_derive/src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use proc_macro::TokenStream;
# use quote::quote;
# use syn;
# 
# #[proc_macro_derive(HelloMacro)]
# pub fn hello_macro_derive(input: TokenStream) \-> TokenStream {
#     // Construct a representation of Rust code as a syntax tree
#     // that we can manipulate
#     let ast = syn::parse(input)\.unwrap();
# 
#     // Build the trait implementation
#     impl_hello_macro(&ast)
# }
# 
fn impl_hello_macro(ast: &syn::DeriveInput) \-> TokenStream {
    let name = &ast\.ident;
    let gen = quote! {
        impl HelloMacro for #name {
            fn hello_macro() {
                println!("Hello, Macro! My name is {}!", stringify!(#name));
            }
        }
    };
    gen\.into()
}

.EE

.RE
Listing 19\-33: Implementing the `\fIHelloMacro\fR` trait usingthe parsed Rust code
.P
We get an `\fIIdent\fR` struct instance containing the name (identifier) of theannotated type using `\fIast\.ident\fR`\. The struct in Listing 19\-32 shows that whenwe run the `\fIimpl_hello_macro\fR` function on the code in Listing 19\-30, the`\fIident\fR` we get will have the `\fIident\fR` field with a value of `\fI"Pancakes"\fR`\. Thus,the `\fIname\fR` variable in Listing 19\-33 will contain an `\fIIdent\fR` struct instancethat, when printed, will be the string `\fI"Pancakes"\fR`, the name of the struct inListing 19\-30\.
.P
The `\fIquote!\fR` macro lets us define the Rust code that we want to return\. Thecompiler expects something different to the direct result of the `\fIquote!\fR`macro‚Äôs execution, so we need to convert it to a `\fITokenStream\fR`\. We do this bycalling the `\fIinto\fR` method, which consumes this intermediate representation andreturns a value of the required `\fITokenStream\fR` type\.
.P
The `\fIquote!\fR` macro also provides some very cool templating mechanics: we canenter `\fI#name\fR`, and `\fIquote!\fR` will replace it with the value in the variable`\fIname\fR`\. You can even do some repetition similar to the way regular macros work\.Check out 
.UR https://docs\.rs/quote
.UE
the `\fIquote\fR` crate‚Äôs docs for a thorough introduction\.
.P
We want our procedural macro to generate an implementation of our `\fIHelloMacro\fR`trait for the type the user annotated, which we can get by using `\fI#name\fR`\. Thetrait implementation has the one function `\fIhello_macro\fR`, whose body contains thefunctionality we want to provide: printing `\fIHello, Macro! My name is\fR` and thenthe name of the annotated type\.
.P
The `\fIstringify!\fR` macro used here is built into Rust\. It takes a Rustexpression, such as `\fI1 + 2\fR`, and at compile time turns the expression into astring literal, such as `\fI"1 + 2"\fR`\. This is different than `\fIformat!\fR` or`\fIprintln!\fR`, macros which evaluate the expression and then turn the result intoa `\fIString\fR`\. There is a possibility that the `\fI#name\fR` input might be anexpression to print literally, so we use `\fIstringify!\fR`\. Using `\fIstringify!\fR` alsosaves an allocation by converting `\fI#name\fR` to a string literal at compile time\.
.P
At this point, `\fIcargo build\fR` should complete successfully in both `\fIhello_macro\fR`and `\fIhello_macro_derive\fR`\. Let‚Äôs hook up these crates to the code in Listing19\-30 to see the procedural macro in action! Create a new binary project inyour \fIprojects\fR directory using `\fIcargo new pancakes\fR`\. We need to add`\fIhello_macro\fR` and `\fIhello_macro_derive\fR` as dependencies in the `\fIpancakes\fR`crate‚Äôs \fICargo\.toml\fR\. If you‚Äôre publishing your versions of `\fIhello_macro\fR` and`\fIhello_macro_derive\fR` to 
.UR https://crates\.io/
.UE
crates\.io, they would be regulardependencies; if not, you can specify them as `\fIpath\fR` dependencies as follows:
.RS
.IP \fBtoml\fR 2

.br
.EX
hello_macro = { path = "\.\./hello_macro" }
hello_macro_derive = { path = "\.\./hello_macro/hello_macro_derive" }

.EE

.RE
.P
Put the code in Listing 19\-30 into \fIsrc/main\.rs\fR, and run `\fIcargo run\fR`: itshould print `\fIHello, Macro! My name is Pancakes!\fR` The implementation of the`\fIHelloMacro\fR` trait from the procedural macro was included without the`\fIpancakes\fR` crate needing to implement it; the `\fI#[derive(HelloMacro)]\fR` added thetrait implementation\.
.P
Next, let‚Äôs explore how the other kinds of procedural macros differ from customderive macros\.
.br

.br
\fBAttribute\-like macros\fR
.br
=======================
.br

.P
Attribute\-like macros are similar to custom derive macros, but instead ofgenerating code for the `\fIderive\fR` attribute, they allow you to create newattributes\. They‚Äôre also more flexible: `\fIderive\fR` only works for structs andenums; attributes can be applied to other items as well, such as functions\.Here‚Äôs an example of using an attribute\-like macro: say you have an attributenamed `\fIroute\fR` that annotates functions when using a web application framework:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
#[route(GET, "/")]
fn index() {

.EE

.RE
.P
This `\fI#[route]\fR` attribute would be defined by the framework as a proceduralmacro\. The signature of the macro definition function would look like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
#[proc_macro_attribute]
pub fn route(attr: TokenStream, item: TokenStream) \-> TokenStream {

.EE

.RE
.P
Here, we have two parameters of type `\fITokenStream\fR`\. The first is for thecontents of the attribute: the `\fIGET, "/"\fR` part\. The second is the body of theitem the attribute is attached to: in this case, `\fIfn index() {}\fR` and the restof the function‚Äôs body\.
.P
Other than that, attribute\-like macros work the same way as custom derivemacros: you create a crate with the `\fIproc\-macro\fR` crate type and implement afunction that generates the code you want!
.br

.br
\fBFunction\-like macros\fR
.br
======================
.br

.P
Function\-like macros define macros that look like function calls\. Similarly to`\fImacro_rules!\fR` macros, they‚Äôre more flexible than functions; for example, theycan take an unknown number of arguments\. However, `\fImacro_rules!\fR` macros can bedefined only using the match\-like syntax we discussed in the section
.UR #declarative\-macros\-with\-macro_rules\-for\-general\-metaprogramming
.UE
‚ÄúDeclarative Macros with `\fImacro_rules!\fR` for GeneralMetaprogramming‚Äù earlier\. Function\-like macros take a`\fITokenStream\fR` parameter and their definition manipulates that `\fITokenStream\fR`using Rust code as the other two types of procedural macros do\. An example of afunction\-like macro is an `\fIsql!\fR` macro that might be called like so:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let sql = sql!(SELECT * FROM posts WHERE id=1);

.EE

.RE
.P
This macro would parse the SQL statement inside it and check that it‚Äôssyntactically correct, which is much more complex processing than a`\fImacro_rules!\fR` macro can do\. The `\fIsql!\fR` macro would be defined like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
#[proc_macro]
pub fn sql(input: TokenStream) \-> TokenStream {

.EE

.RE
.P
This definition is similar to the custom derive macro‚Äôs signature: we receivethe tokens that are inside the parentheses and return the code we wanted togenerate\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Whew! Now you have some Rust features in your toolbox that you likely won‚Äôt useoften, but you‚Äôll know they‚Äôre available in very particular circumstances\.We‚Äôve introduced several complex topics so that when you encounter them inerror message suggestions or in other peoples‚Äô code, you‚Äôll be able torecognize these concepts and syntax\. Use this chapter as a reference to guideyou to solutions\.
.P
Next, we‚Äôll put everything we‚Äôve discussed throughout the book into practiceand do one more project!
.SH "Final Project: Building a Multithreaded Web Server"

.br

.br
\fBFinal Project: Building a Multithreaded Web Server\fR
.br
====================================================
.br

.P
It‚Äôs been a long journey, but we‚Äôve reached the end of the book\. In thischapter, we‚Äôll build one more project together to demonstrate some of theconcepts we covered in the final chapters, as well as recap some earlierlessons\.
.P
For our final project, we‚Äôll make a web server that says ‚Äúhello‚Äù and looks likeFigure 20\-1 in a web browser\.
.UR img/trpl20\-01\.png
.UE
hello from rustFigure 20\-1: Our final shared project
.P
Here is our plan for building the web server:
.P
Learn a bit about TCP and HTTP\.
.P
Listen for TCP connections on a socket\.
.P
Parse a small number of HTTP requests\.
.P
Create a proper HTTP response\.
.P
Improve the throughput of our server with a thread pool\.
.P
Before we get started, we should mention one detail: the method we‚Äôll use won‚Äôtbe the best way to build a web server with Rust\. Community members havepublished a number of production\-ready crates available on
.UR https://crates\.io/
.UE
crates\.io that provide more complete web server andthread pool implementations than we‚Äôll build\. However, our intention in thischapter is to help you learn, not to take the easy route\. Because Rust is asystems programming language, we can choose the level of abstraction we want towork with and can go to a lower level than is possible or practical in otherlanguages\. We‚Äôll therefore write the basic HTTP server and thread pool manuallyso you can learn the general ideas and techniques behind the crates you mightuse in the future\.
.SH "Building a Single\-Threaded Web Server"

.br

.br
\fBBuilding a Single\-Threaded Web Server\fR
.br
=======================================
.br

.P
We‚Äôll start by getting a single\-threaded web server working\. Before we begin,let‚Äôs look at a quick overview of the protocols involved in building webservers\. The details of these protocols are beyond the scope of this book, buta brief overview will give you the information you need\.
.P
The two main protocols involved in web servers are \fIHypertext Transfer\fRProtocol \fI(HTTP)\fR and \fITransmission Control Protocol\fR \fI(TCP)\fR\. Both protocolsare \fIrequest\-response\fR protocols, meaning a \fIclient\fR initiates requests and a\fIserver\fR listens to the requests and provides a response to the client\. Thecontents of those requests and responses are defined by the protocols\.
.P
TCP is the lower\-level protocol that describes the details of how informationgets from one server to another but doesn‚Äôt specify what that information is\.HTTP builds on top of TCP by defining the contents of the requests andresponses\. It‚Äôs technically possible to use HTTP with other protocols, but inthe vast majority of cases, HTTP sends its data over TCP\. We‚Äôll work with theraw bytes of TCP and HTTP requests and responses\.
.br

.br
\fBListening to the TCP Connection\fR
.br
=================================
.br

.P
Our web server needs to listen to a TCP connection, so that‚Äôs the first partwe‚Äôll work on\. The standard library offers a `\fIstd::net\fR` module that lets us dothis\. Let‚Äôs make a new project in the usual fashion:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new hello
     Created binary (application) `hello` project
$ cd hello

.EE

.RE
.P
Now enter the code in Listing 20\-1 in \fIsrc/main\.rs\fR to start\. This code willlisten at the local address `\fI127\.0\.0\.1:7878\fR` for incoming TCP streams\. When itgets an incoming stream, it will print `\fIConnection established!\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
use std::net::TcpListener;

fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        println!("Connection established!");
    }
}

.EE

.RE
Listing 20\-1: Listening for incoming streams and printinga message when we receive a stream
.P
Using `\fITcpListener\fR`, we can listen for TCP connections at the address`\fI127\.0\.0\.1:7878\fR`\. In the address, the section before the colon is an IP addressrepresenting your computer (this is the same on every computer and doesn‚Äôtrepresent the authors‚Äô computer specifically), and `\fI7878\fR` is the port\. We‚Äôvechosen this port for two reasons: HTTP isn‚Äôt normally accepted on this port soour server is unlikely to conflict with any other web server you might haverunning on your machine, and 7878 is \fIrust\fR typed on a telephone\.
.P
The `\fIbind\fR` function in this scenario works like the `\fInew\fR` function in that itwill return a new `\fITcpListener\fR` instance\. The function is called `\fIbind\fR`because, in networking, connecting to a port to listen to is known as ‚Äúbindingto a port\.‚Äù
.P
The `\fIbind\fR` function returns a `\fIResult<T, E>\fR`, which indicates that it‚Äôspossible for binding to fail\. For example, connecting to port 80 requiresadministrator privileges (nonadministrators can listen only on ports higherthan 1023), so if we tried to connect to port 80 without being anadministrator, binding wouldn‚Äôt work\. Binding also wouldn‚Äôt work, for example,if we ran two instances of our program and so had two programs listening to thesame port\. Because we‚Äôre writing a basic server just for learning purposes, wewon‚Äôt worry about handling these kinds of errors; instead, we use `\fIunwrap\fR` tostop the program if errors happen\.
.P
The `\fIincoming\fR` method on `\fITcpListener\fR` returns an iterator that gives us asequence of streams (more specifically, streams of type `\fITcpStream\fR`)\. A single\fIstream\fR represents an open connection between the client and the server\. A\fIconnection\fR is the name for the full request and response process in which aclient connects to the server, the server generates a response, and the servercloses the connection\. As such, we will read from the `\fITcpStream\fR` to see whatthe client sent and then write our response to the stream to send data back tothe client\. Overall, this `\fIfor\fR` loop will process each connection in turn andproduce a series of streams for us to handle\.
.P
For now, our handling of the stream consists of calling `\fIunwrap\fR` to terminateour program if the stream has any errors; if there aren‚Äôt any errors, theprogram prints a message\. We‚Äôll add more functionality for the success case inthe next listing\. The reason we might receive errors from the `\fIincoming\fR` methodwhen a client connects to the server is that we‚Äôre not actually iterating overconnections\. Instead, we‚Äôre iterating over \fIconnection attempts\fR\. Theconnection might not be successful for a number of reasons, many of themoperating system specific\. For example, many operating systems have a limit tothe number of simultaneous open connections they can support; new connectionattempts beyond that number will produce an error until some of the openconnections are closed\.
.P
Let‚Äôs try running this code! Invoke `\fIcargo run\fR` in the terminal and then load\fI127\.0\.0\.1:7878\fR in a web browser\. The browser should show an error messagelike ‚ÄúConnection reset,‚Äù because the server isn‚Äôt currently sending back anydata\. But when you look at your terminal, you should see several messages thatwere printed when the browser connected to the server!
.RS
.IP \fBtext\fR 2

.br
.EX
     Running `target/debug/hello`
Connection established!
Connection established!
Connection established!

.EE

.RE
.P
Sometimes, you‚Äôll see multiple messages printed for one browser request; thereason might be that the browser is making a request for the page as well as arequest for other resources, like the \fIfavicon\.ico\fR icon that appears in thebrowser tab\.
.P
It could also be that the browser is trying to connect to the server multipletimes because the server isn‚Äôt responding with any data\. When `\fIstream\fR` goes outof scope and is dropped at the end of the loop, the connection is closed aspart of the `\fIdrop\fR` implementation\. Browsers sometimes deal with closedconnections by retrying, because the problem might be temporary\. The importantfactor is that we‚Äôve successfully gotten a handle to a TCP connection!
.P
Remember to stop the program by pressing ctrl\-cwhen you‚Äôre done running a particular version of the code\. Then restart theprogram by invoking the `\fIcargo run\fR` command after you‚Äôve made each set of codechanges to make sure you‚Äôre running the newest code\.
.br

.br
\fBReading the Request\fR
.br
=====================
.br

.P
Let‚Äôs implement the functionality to read the request from the browser! Toseparate the concerns of first getting a connection and then taking some actionwith the connection, we‚Äôll start a new function for processing connections\. Inthis new `\fIhandle_connection\fR` function, we‚Äôll read data from the TCP stream andprint it so we can see the data being sent from the browser\. Change the code tolook like Listing 20\-2\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
use std::{
    io::{prelude::*, BufReader},
    net::{TcpListener, TcpStream},
};

fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        handle_connection(stream);
    }
}

fn handle_connection(mut stream: TcpStream) {
    let buf_reader = BufReader::new(&mut stream);
    let http_request: Vec<_> = buf_reader
        \.lines()
        \.map(|result| result\.unwrap())
        \.take_while(|line| !line\.is_empty())
        \.collect();

    println!("Request: {:#?}", http_request);
}

.EE

.RE
Listing 20\-2: Reading from the `\fITcpStream\fR` and printingthe data
.P
We bring `\fIstd::io::prelude\fR` and `\fIstd::io::BufReader\fR` into scope to get accessto traits and types that let us read from and write to the stream\. In the `\fIfor\fR`loop in the `\fImain\fR` function, instead of printing a message that says we made aconnection, we now call the new `\fIhandle_connection\fR` function and pass the`\fIstream\fR` to it\.
.P
In the `\fIhandle_connection\fR` function, we create a new `\fIBufReader\fR` instance thatwraps a mutable reference to the `\fIstream\fR`\. `\fIBufReader\fR` adds buffering bymanaging calls to the `\fIstd::io::Read\fR` trait methods for us\.
.P
We create a variable named `\fIhttp_request\fR` to collect the lines of the requestthe browser sends to our server\. We indicate that we want to collect theselines in a vector by adding the `\fIVec<_>\fR` type annotation\.`\fIBufReader\fR` implements the `\fIstd::io::BufRead\fR` trait, which provides the `\fIlines\fR`method\. The `\fIlines\fR` method returns an iterator of `\fIResult<String, std::io::Error>\fR` by splitting the stream of data whenever it sees a newlinebyte\. To get each `\fIString\fR`, we map and `\fIunwrap\fR` each `\fIResult\fR`\. The `\fIResult\fR`might be an error if the data isn‚Äôt valid UTF\-8 or if there was a problemreading from the stream\. Again, a production program should handle these errorsmore gracefully, but we‚Äôre choosing to stop the program in the error case forsimplicity\.
.P
The browser signals the end of an HTTP request by sending two newlinecharacters in a row, so to get one request from the stream, we take lines untilwe get a line that is the empty string\. Once we‚Äôve collected the lines into thevector, we‚Äôre printing them out using pretty debug formatting so we can take alook at the instructions the web browser is sending to our server\.
.P
Let‚Äôs try this code! Start the program and make a request in a web browseragain\. Note that we‚Äôll still get an error page in the browser, but ourprogram‚Äôs output in the terminal will now look similar to this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling hello v0\.1\.0 (file:///projects/hello)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.42s
     Running `target/debug/hello`
Request: [
    "GET / HTTP/1\.1",
    "Host: 127\.0\.0\.1:7878",
    "User\-Agent: Mozilla/5\.0 (Macintosh; Intel Mac OS X 10\.15; rv:99\.0) Gecko/20100101 Firefox/99\.0",
    "Accept: text/html,application/xhtml+xml,application/xml;q=0\.9,image/avif,image/webp,*/*;q=0\.8",
    "Accept\-Language: en\-US,en;q=0\.5",
    "Accept\-Encoding: gzip, deflate, br",
    "DNT: 1",
    "Connection: keep\-alive",
    "Upgrade\-Insecure\-Requests: 1",
    "Sec\-Fetch\-Dest: document",
    "Sec\-Fetch\-Mode: navigate",
    "Sec\-Fetch\-Site: none",
    "Sec\-Fetch\-User: ?1",
    "Cache\-Control: max\-age=0",
]

.EE

.RE
.P
Depending on your browser, you might get slightly different output\. Now thatwe‚Äôre printing the request data, we can see why we get multiple connectionsfrom one browser request by looking at the path after `\fIGET\fR` in the first lineof the request\. If the repeated connections are all requesting \fI/\fR, we know thebrowser is trying to fetch \fI/\fR repeatedly because it‚Äôs not getting a responsefrom our program\.
.P
Let‚Äôs break down this request data to understand what the browser is asking ofour program\.
.br

.br
\fBA Closer Look at an HTTP Request\fR
.br
==================================
.br

.P
HTTP is a text\-based protocol, and a request takes this format:
.RS
.IP \fBtext\fR 2

.br
.EX
Method Request\-URI HTTP\-Version CRLF
headers CRLF
message\-body

.EE

.RE
.P
The first line is the \fIrequest line\fR that holds information about what theclient is requesting\. The first part of the request line indicates the \fImethod\fRbeing used, such as `\fIGET\fR` or `\fIPOST\fR`, which describes how the client is makingthis request\. Our client used a `\fIGET\fR` request, which means it is asking forinformation\.
.P
The next part of the request line is \fI/\fR, which indicates the \fIUniform Resource\fRIdentifier \fI(URI)\fR the client is requesting: a URI is almost, but not quite,the same as a \fIUniform Resource Locator\fR \fI(URL)\fR\. The difference between URIsand URLs isn‚Äôt important for our purposes in this chapter, but the HTTP specuses the term URI, so we can just mentally substitute URL for URI here\.
.P
The last part is the HTTP version the client uses, and then the request lineends in a \fICRLF sequence\fR\. (CRLF stands for \fIcarriage return\fR and \fIline feed\fR,which are terms from the typewriter days!) The CRLF sequence can also bewritten as `\fI\r\n\fR`, where `\fI\r\fR` is a carriage return and `\fI\n\fR` is a line feed\. TheCRLF sequence separates the request line from the rest of the request data\.Note that when the CRLF is printed, we see a new line start rather than `\fI\r\n\fR`\.
.P
Looking at the request line data we received from running our program so far,we see that `\fIGET\fR` is the method, \fI/\fR is the request URI, and `\fIHTTP/1\.1\fR` is theversion\.
.P
After the request line, the remaining lines starting from `\fIHost:\fR` onward areheaders\. `\fIGET\fR` requests have no body\.
.P
Try making a request from a different browser or asking for a differentaddress, such as \fI127\.0\.0\.1:7878/test\fR, to see how the request data changes\.
.P
Now that we know what the browser is asking for, let‚Äôs send back some data!
.br

.br
\fBWriting a Response\fR
.br
====================
.br

.P
We‚Äôre going to implement sending data in response to a client request\.Responses have the following format:
.RS
.IP \fBtext\fR 2

.br
.EX
HTTP\-Version Status\-Code Reason\-Phrase CRLF
headers CRLF
message\-body

.EE

.RE
.P
The first line is a \fIstatus line\fR that contains the HTTP version used in theresponse, a numeric status code that summarizes the result of the request, anda reason phrase that provides a text description of the status code\. After theCRLF sequence are any headers, another CRLF sequence, and the body of theresponse\.
.P
Here is an example response that uses HTTP version 1\.1, has a status code of200, an OK reason phrase, no headers, and no body:
.RS
.IP \fBtext\fR 2

.br
.EX
HTTP/1\.1 200 OK\r\n\r\n

.EE

.RE
.P
The status code 200 is the standard success response\. The text is a tinysuccessful HTTP response\. Let‚Äôs write this to the stream as our response to asuccessful request! From the `\fIhandle_connection\fR` function, remove the`\fIprintln!\fR` that was printing the request data and replace it with the code inListing 20\-3\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::{
#     io::{prelude::*, BufReader},
#     net::{TcpListener, TcpStream},
# };
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
# 
fn handle_connection(mut stream: TcpStream) {
    let buf_reader = BufReader::new(&mut stream);
    let http_request: Vec<_> = buf_reader
        \.lines()
        \.map(|result| result\.unwrap())
        \.take_while(|line| !line\.is_empty())
        \.collect();

    let response = "HTTP/1\.1 200 OK\r\n\r\n";

    stream\.write_all(response\.as_bytes())\.unwrap();
}

.EE

.RE
Listing 20\-3: Writing a tiny successful HTTP response tothe stream
.P
The first new line defines the `\fIresponse\fR` variable that holds the successmessage‚Äôs data\. Then we call `\fIas_bytes\fR` on our `\fIresponse\fR` to convert the stringdata to bytes\. The `\fIwrite_all\fR` method on `\fIstream\fR` takes a `\fI&[u8]\fR` and sendsthose bytes directly down the connection\. Because the `\fIwrite_all\fR` operationcould fail, we use `\fIunwrap\fR` on any error result as before\. Again, in a realapplication you would add error handling here\.
.P
With these changes, let‚Äôs run our code and make a request\. We‚Äôre no longerprinting any data to the terminal, so we won‚Äôt see any output other than theoutput from Cargo\. When you load \fI127\.0\.0\.1:7878\fR in a web browser, you shouldget a blank page instead of an error\. You‚Äôve just hand\-coded receiving an HTTPrequest and sending a response!
.br

.br
\fBReturning Real HTML\fR
.br
=====================
.br

.P
Let‚Äôs implement the functionality for returning more than a blank page\. Createthe new file \fIhello\.html\fR in the root of your project directory, not in the\fIsrc\fR directory\. You can input any HTML you want; Listing 20\-4 shows onepossibility\.Filename: hello\.html
.RS
.IP \fBhtml\fR 2

.br
.EX
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf\-8">
    <title>Hello!</title>
  </head>
  <body>
    <h1>Hello!</h1>
    <p>Hi from Rust</p>
  </body>
</html>

.EE

.RE
Listing 20\-4: A sample HTML file to return in aresponse
.P
This is a minimal HTML5 document with a heading and some text\. To return thisfrom the server when a request is received, we‚Äôll modify `\fIhandle_connection\fR` asshown in Listing 20\-5 to read the HTML file, add it to the response as a body,and send it\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
use std::{
    fs,
    io::{prelude::*, BufReader},
    net::{TcpListener, TcpStream},
};
// \-\-snip\-\-

# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
# 
fn handle_connection(mut stream: TcpStream) {
    let buf_reader = BufReader::new(&mut stream);
    let http_request: Vec<_> = buf_reader
        \.lines()
        \.map(|result| result\.unwrap())
        \.take_while(|line| !line\.is_empty())
        \.collect();

    let status_line = "HTTP/1\.1 200 OK";
    let contents = fs::read_to_string("hello\.html")\.unwrap();
    let length = contents\.len();

    let response =
        format!("{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}");

    stream\.write_all(response\.as_bytes())\.unwrap();
}

.EE

.RE
Listing 20\-5: Sending the contents of \fIhello\.html\fR as thebody of the response
.P
We‚Äôve added `\fIfs\fR` to the `\fIuse\fR` statement to bring the standard library‚Äôsfilesystem module into scope\. The code for reading the contents of a file to astring should look familiar; we used it in Chapter 12 when we read the contentsof a file for our I/O project in Listing 12\-4\.
.P
Next, we use `\fIformat!\fR` to add the file‚Äôs contents as the body of the successresponse\. To ensure a valid HTTP response, we add the `\fIContent\-Length\fR` headerwhich is set to the size of our response body, in this case the size of`\fIhello\.html\fR`\.
.P
Run this code with `\fIcargo run\fR` and load \fI127\.0\.0\.1:7878\fR in your browser; youshould see your HTML rendered!
.P
Currently, we‚Äôre ignoring the request data in `\fIhttp_request\fR` and just sendingback the contents of the HTML file unconditionally\. That means if you tryrequesting \fI127\.0\.0\.1:7878/something\-else\fR in your browser, you‚Äôll still getback this same HTML response\. At the moment, our server is very limited anddoes not do what most web servers do\. We want to customize our responsesdepending on the request and only send back the HTML file for a well\-formedrequest to \fI/\fR\.
.br

.br
\fBValidating the Request and Selectively Responding\fR
.br
===================================================
.br

.P
Right now, our web server will return the HTML in the file no matter what theclient requested\. Let‚Äôs add functionality to check that the browser isrequesting \fI/\fR before returning the HTML file and return an error if thebrowser requests anything else\. For this we need to modify `\fIhandle_connection\fR`,as shown in Listing 20\-6\. This new code checks the content of the requestreceived against what we know a request for \fI/\fR looks like and adds `\fIif\fR` and`\fIelse\fR` blocks to treat requests differently\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::{
#     fs,
#     io::{prelude::*, BufReader},
#     net::{TcpListener, TcpStream},
# };
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
// \-\-snip\-\-

fn handle_connection(mut stream: TcpStream) {
    let buf_reader = BufReader::new(&mut stream);
    let request_line = buf_reader\.lines()\.next()\.unwrap()\.unwrap();

    if request_line == "GET / HTTP/1\.1" {
        let status_line = "HTTP/1\.1 200 OK";
        let contents = fs::read_to_string("hello\.html")\.unwrap();
        let length = contents\.len();

        let response = format!(
            "{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}"
        );

        stream\.write_all(response\.as_bytes())\.unwrap();
    } else {
        // some other request
    }
}

.EE

.RE
Listing 20\-6: Handling requests to \fI/\fR differently fromother requests
.P
We‚Äôre only going to be looking at the first line of the HTTP request, so ratherthan reading the entire request into a vector, we‚Äôre calling `\fInext\fR` to get thefirst item from the iterator\. The first `\fIunwrap\fR` takes care of the `\fIOption\fR` andstops the program if the iterator has no items\. The second `\fIunwrap\fR` handles the`\fIResult\fR` and has the same effect as the `\fIunwrap\fR` that was in the `\fImap\fR` added inListing 20\-2\.
.P
Next, we check the `\fIrequest_line\fR` to see if it equals the request line of a GETrequest to the \fI/\fR path\. If it does, the `\fIif\fR` block returns the contents of ourHTML file\.
.P
If the `\fIrequest_line\fR` does \fInot\fR equal the GET request to the \fI/\fR path, itmeans we‚Äôve received some other request\. We‚Äôll add code to the `\fIelse\fR` block ina moment to respond to all other requests\.
.P
Run this code now and request \fI127\.0\.0\.1:7878\fR; you should get the HTML in\fIhello\.html\fR\. If you make any other request, such as\fI127\.0\.0\.1:7878/something\-else\fR, you‚Äôll get a connection error like those yousaw when running the code in Listing 20\-1 and Listing 20\-2\.
.P
Now let‚Äôs add the code in Listing 20\-7 to the `\fIelse\fR` block to return a responsewith the status code 404, which signals that the content for the request wasnot found\. We‚Äôll also return some HTML for a page to render in the browserindicating the response to the end user\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::{
#     fs,
#     io::{prelude::*, BufReader},
#     net::{TcpListener, TcpStream},
# };
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
# 
# fn handle_connection(mut stream: TcpStream) {
#     let buf_reader = BufReader::new(&mut stream);
#     let request_line = buf_reader\.lines()\.next()\.unwrap()\.unwrap();
# 
#     if request_line == "GET / HTTP/1\.1" {
#         let status_line = "HTTP/1\.1 200 OK";
#         let contents = fs::read_to_string("hello\.html")\.unwrap();
#         let length = contents\.len();
# 
#         let response = format!(
#             "{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}"
#         );
# 
#         stream\.write_all(response\.as_bytes())\.unwrap();
    // \-\-snip\-\-
    } else {
        let status_line = "HTTP/1\.1 404 NOT FOUND";
        let contents = fs::read_to_string("404\.html")\.unwrap();
        let length = contents\.len();

        let response = format!(
            "{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}"
        );

        stream\.write_all(response\.as_bytes())\.unwrap();
    }
# }

.EE

.RE
Listing 20\-7: Responding with status code 404 and anerror page if anything other than \fI/\fR was requested
.P
Here, our response has a status line with status code 404 and the reason phrase`\fINOT FOUND\fR`\. The body of the response will be the HTML in the file \fI404\.html\fR\.You‚Äôll need to create a \fI404\.html\fR file next to \fIhello\.html\fR for the errorpage; again feel free to use any HTML you want or use the example HTML inListing 20\-8\.Filename: 404\.html
.RS
.IP \fBhtml\fR 2

.br
.EX
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf\-8">
    <title>Hello!</title>
  </head>
  <body>
    <h1>Oops!</h1>
    <p>Sorry, I don't know what you're asking for\.</p>
  </body>
</html>

.EE

.RE
Listing 20\-8: Sample content for the page to send backwith any 404 response
.P
With these changes, run your server again\. Requesting \fI127\.0\.0\.1:7878\fR shouldreturn the contents of \fIhello\.html\fR, and any other request, like\fI127\.0\.0\.1:7878/foo\fR, should return the error HTML from \fI404\.html\fR\.
.br

.br
\fBA Touch of Refactoring\fR
.br
========================
.br

.P
At the moment the `\fIif\fR` and `\fIelse\fR` blocks have a lot of repetition: they‚Äôre bothreading files and writing the contents of the files to the stream\. The onlydifferences are the status line and the filename\. Let‚Äôs make the code moreconcise by pulling out those differences into separate `\fIif\fR` and `\fIelse\fR` linesthat will assign the values of the status line and the filename to variables;we can then use those variables unconditionally in the code to read the fileand write the response\. Listing 20\-9 shows the resulting code after replacingthe large `\fIif\fR` and `\fIelse\fR` blocks\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::{
#     fs,
#     io::{prelude::*, BufReader},
#     net::{TcpListener, TcpStream},
# };
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
// \-\-snip\-\-

fn handle_connection(mut stream: TcpStream) {
    // \-\-snip\-\-
#     let buf_reader = BufReader::new(&mut stream);
#     let request_line = buf_reader\.lines()\.next()\.unwrap()\.unwrap();

    let (status_line, filename) = if request_line == "GET / HTTP/1\.1" {
        ("HTTP/1\.1 200 OK", "hello\.html")
    } else {
        ("HTTP/1\.1 404 NOT FOUND", "404\.html")
    };

    let contents = fs::read_to_string(filename)\.unwrap();
    let length = contents\.len();

    let response =
        format!("{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}");

    stream\.write_all(response\.as_bytes())\.unwrap();
}

.EE

.RE
Listing 20\-9: Refactoring the `\fIif\fR` and `\fIelse\fR` blocks tocontain only the code that differs between the two cases
.P
Now the `\fIif\fR` and `\fIelse\fR` blocks only return the appropriate values for thestatus line and filename in a tuple; we then use destructuring to assign thesetwo values to `\fIstatus_line\fR` and `\fIfilename\fR` using a pattern in the `\fIlet\fR`statement, as discussed in Chapter 18\.
.P
The previously duplicated code is now outside the `\fIif\fR` and `\fIelse\fR` blocks anduses the `\fIstatus_line\fR` and `\fIfilename\fR` variables\. This makes it easier to seethe difference between the two cases, and it means we have only one place toupdate the code if we want to change how the file reading and response writingwork\. The behavior of the code in Listing 20\-9 will be the same as that inListing 20\-8\.
.P
Awesome! We now have a simple web server in approximately 40 lines of Rust codethat responds to one request with a page of content and responds to all otherrequests with a 404 response\.
.P
Currently, our server runs in a single thread, meaning it can only serve onerequest at a time\. Let‚Äôs examine how that can be a problem by simulating someslow requests\. Then we‚Äôll fix it so our server can handle multiple requests atonce\.
.SH "Turning Our Single\-Threaded Server into a Multithreaded Server"

.br

.br
\fBTurning Our Single\-Threaded Server into a Multithreaded Server\fR
.br
================================================================
.br

.P
Right now, the server will process each request in turn, meaning it won‚Äôtprocess a second connection until the first is finished processing\. If theserver received more and more requests, this serial execution would be less andless optimal\. If the server receives a request that takes a long time toprocess, subsequent requests will have to wait until the long request isfinished, even if the new requests can be processed quickly\. We‚Äôll need to fixthis, but first, we‚Äôll look at the problem in action\.
.br

.br
\fBSimulating a Slow Request in the Current Server Implementation\fR
.br
================================================================
.br

.P
We‚Äôll look at how a slow\-processing request can affect other requests made toour current server implementation\. Listing 20\-10 implements handling a requestto \fI/sleep\fR with a simulated slow response that will cause the server to sleepfor 5 seconds before responding\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
use std::{
    fs,
    io::{prelude::*, BufReader},
    net::{TcpListener, TcpStream},
    thread,
    time::Duration,
};
// \-\-snip\-\-
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }

fn handle_connection(mut stream: TcpStream) {
    // \-\-snip\-\-

#     let buf_reader = BufReader::new(&mut stream);
#     let request_line = buf_reader\.lines()\.next()\.unwrap()\.unwrap();
# 
    let (status_line, filename) = match &request_line[\.\.] {
        "GET / HTTP/1\.1" => ("HTTP/1\.1 200 OK", "hello\.html"),
        "GET /sleep HTTP/1\.1" => {
            thread::sleep(Duration::from_secs(5));
            ("HTTP/1\.1 200 OK", "hello\.html")
        }
        _ => ("HTTP/1\.1 404 NOT FOUND", "404\.html"),
    };

    // \-\-snip\-\-
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
#     let length = contents\.len();
# 
#     let response =
#         format!("{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}");
# 
#     stream\.write_all(response\.as_bytes())\.unwrap();
}

.EE

.RE
Listing 20\-10: Simulating a slow request by sleeping for5 seconds
.P
We switched from `\fIif\fR` to `\fImatch\fR` now that we have three cases\. We need toexplicitly match on a slice of `\fIrequest_line\fR` to pattern match against thestring literal values; `\fImatch\fR` doesn‚Äôt do automatic referencing anddereferencing like the equality method does\.
.P
The first arm is the same as the `\fIif\fR` block from Listing 20\-9\. The second armmatches a request to \fI/sleep\fR\. When that request is received, the server willsleep for 5 seconds before rendering the successful HTML page\. The third arm isthe same as the `\fIelse\fR` block from Listing 20\-9\.
.P
You can see how primitive our server is: real libraries would handle therecognition of multiple requests in a much less verbose way!
.P
Start the server using `\fIcargo run\fR`\. Then open two browser windows: one for\fIhttp://127\.0\.0\.1:7878/\fR and the other for \fIhttp://127\.0\.0\.1:7878/sleep\fR\. Ifyou enter the \fI/\fR URI a few times, as before, you‚Äôll see it respond quickly\.But if you enter \fI/sleep\fR and then load \fI/\fR, you‚Äôll see that \fI/\fR waits until`\fIsleep\fR` has slept for its full 5 seconds before loading\.
.P
There are multiple techniques we could use to avoid requests backing up behinda slow request; the one we‚Äôll implement is a thread pool\.
.br

.br
\fBImproving Throughput with a Thread Pool\fR
.br
=========================================
.br

.P
A \fIthread pool\fR is a group of spawned threads that are waiting and ready tohandle a task\. When the program receives a new task, it assigns one of thethreads in the pool to the task, and that thread will process the task\. Theremaining threads in the pool are available to handle any other tasks that comein while the first thread is processing\. When the first thread is doneprocessing its task, it‚Äôs returned to the pool of idle threads, ready to handlea new task\. A thread pool allows you to process connections concurrently,increasing the throughput of your server\.
.P
We‚Äôll limit the number of threads in the pool to a small number to protect usfrom Denial of Service (DoS) attacks; if we had our program create a new threadfor each request as it came in, someone making 10 million requests to ourserver could create havoc by using up all our server‚Äôs resources and grindingthe processing of requests to a halt\.
.P
Rather than spawning unlimited threads, then, we‚Äôll have a fixed number ofthreads waiting in the pool\. Requests that come in are sent to the pool forprocessing\. The pool will maintain a queue of incoming requests\. Each of thethreads in the pool will pop off a request from this queue, handle the request,and then ask the queue for another request\. With this design, we can process upto `\fIN\fR` requests concurrently, where `\fIN\fR` is the number of threads\. If eachthread is responding to a long\-running request, subsequent requests can stillback up in the queue, but we‚Äôve increased the number of long\-running requestswe can handle before reaching that point\.
.P
This technique is just one of many ways to improve the throughput of a webserver\. Other options you might explore are the \fIfork/join model\fR, the\fIsingle\-threaded async I/O model\fR, or the \fImulti\-threaded async I/O model\fR\. Ifyou‚Äôre interested in this topic, you can read more about other solutions andtry to implement them; with a low\-level language like Rust, all of theseoptions are possible\.
.P
Before we begin implementing a thread pool, let‚Äôs talk about what using thepool should look like\. When you‚Äôre trying to design code, writing the clientinterface first can help guide your design\. Write the API of the code so it‚Äôsstructured in the way you want to call it; then implement the functionalitywithin that structure rather than implementing the functionality and thendesigning the public API\.
.P
Similar to how we used test\-driven development in the project in Chapter 12,we‚Äôll use compiler\-driven development here\. We‚Äôll write the code that calls thefunctions we want, and then we‚Äôll look at errors from the compiler to determinewhat we should change next to get the code to work\. Before we do that, however,we‚Äôll explore the technique we‚Äôre not going to use as a starting point\.
.br

.br
\fBSpawning a Thread for Each Request\fR
.br
====================================
.br

.P
First, let‚Äôs explore how our code might look if it did create a new thread forevery connection\. As mentioned earlier, this isn‚Äôt our final plan due to theproblems with potentially spawning an unlimited number of threads, but it is astarting point to get a working multithreaded server first\. Then we‚Äôll add thethread pool as an improvement, and contrasting the two solutions will beeasier\. Listing 20\-11 shows the changes to make to `\fImain\fR` to spawn a new threadto handle each stream within the `\fIfor\fR` loop\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::{
#     fs,
#     io::{prelude::*, BufReader},
#     net::{TcpListener, TcpStream},
#     thread,
#     time::Duration,
# };
# 
fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        thread::spawn(|| {
            handle_connection(stream);
        });
    }
}
# 
# fn handle_connection(mut stream: TcpStream) {
#     let buf_reader = BufReader::new(&mut stream);
#     let request_line = buf_reader\.lines()\.next()\.unwrap()\.unwrap();
# 
#     let (status_line, filename) = match &request_line[\.\.] {
#         "GET / HTTP/1\.1" => ("HTTP/1\.1 200 OK", "hello\.html"),
#         "GET /sleep HTTP/1\.1" => {
#             thread::sleep(Duration::from_secs(5));
#             ("HTTP/1\.1 200 OK", "hello\.html")
#         }
#         _ => ("HTTP/1\.1 404 NOT FOUND", "404\.html"),
#     };
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
#     let length = contents\.len();
# 
#     let response =
#         format!("{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}");
# 
#     stream\.write_all(response\.as_bytes())\.unwrap();
# }

.EE

.RE
Listing 20\-11: Spawning a new thread for eachstream
.P
As you learned in Chapter 16, `\fIthread::spawn\fR` will create a new thread and thenrun the code in the closure in the new thread\. If you run this code and load\fI/sleep\fR in your browser, then \fI/\fR in two more browser tabs, you‚Äôll indeed seethat the requests to \fI/\fR don‚Äôt have to wait for \fI/sleep\fR to finish\. However, aswe mentioned, this will eventually overwhelm the system because you‚Äôd be makingnew threads without any limit\.
.br

.br
\fBCreating a Finite Number of Threads\fR
.br
=====================================
.br

.P
We want our thread pool to work in a similar, familiar way so switching fromthreads to a thread pool doesn‚Äôt require large changes to the code that usesour API\. Listing 20\-12 shows the hypothetical interface for a `\fIThreadPool\fR`struct we want to use instead of `\fIthread::spawn\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::{
#     fs,
#     io::{prelude::*, BufReader},
#     net::{TcpListener, TcpStream},
#     thread,
#     time::Duration,
# };
# 
fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
    let pool = ThreadPool::new(4);

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        pool\.execute(|| {
            handle_connection(stream);
        });
    }
}
# 
# fn handle_connection(mut stream: TcpStream) {
#     let buf_reader = BufReader::new(&mut stream);
#     let request_line = buf_reader\.lines()\.next()\.unwrap()\.unwrap();
# 
#     let (status_line, filename) = match &request_line[\.\.] {
#         "GET / HTTP/1\.1" => ("HTTP/1\.1 200 OK", "hello\.html"),
#         "GET /sleep HTTP/1\.1" => {
#             thread::sleep(Duration::from_secs(5));
#             ("HTTP/1\.1 200 OK", "hello\.html")
#         }
#         _ => ("HTTP/1\.1 404 NOT FOUND", "404\.html"),
#     };
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
#     let length = contents\.len();
# 
#     let response =
#         format!("{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}");
# 
#     stream\.write_all(response\.as_bytes())\.unwrap();
# }

.EE

.RE
Listing 20\-12: Our ideal `\fIThreadPool\fR` interface
.P
We use `\fIThreadPool::new\fR` to create a new thread pool with a configurable numberof threads, in this case four\. Then, in the `\fIfor\fR` loop, `\fIpool\.execute\fR` has asimilar interface as `\fIthread::spawn\fR` in that it takes a closure the pool shouldrun for each stream\. We need to implement `\fIpool\.execute\fR` so it takes theclosure and gives it to a thread in the pool to run\. This code won‚Äôt yetcompile, but we‚Äôll try so the compiler can guide us in how to fix it\.
.br

.br
\fBBuilding \fR
.br
===========
.br
`\fIThreadPool\fR` Using Compiler Driven Development
.P
Make the changes in Listing 20\-12 to \fIsrc/main\.rs\fR, and then let‚Äôs use thecompiler errors from `\fIcargo check\fR` to drive our development\. Here is the firsterror we get:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0433]: failed to resolve: use of undeclared type `ThreadPool`
  \-\-> src/main\.rs:11:16
   |
11 |     let pool = ThreadPool::new(4);
   |                ^^^^^^^^^^ use of undeclared type `ThreadPool`

For more information about this error, try `rustc \-\-explain E0433`\.
error: could not compile `hello` due to previous error

.EE

.RE
.P
Great! This error tells us we need a `\fIThreadPool\fR` type or module, so we‚Äôllbuild one now\. Our `\fIThreadPool\fR` implementation will be independent of the kindof work our web server is doing\. So, let‚Äôs switch the `\fIhello\fR` crate from abinary crate to a library crate to hold our `\fIThreadPool\fR` implementation\. Afterwe change to a library crate, we could also use the separate thread poollibrary for any work we want to do using a thread pool, not just for servingweb requests\.
.P
Create a \fIsrc/lib\.rs\fR that contains the following, which is the simplestdefinition of a `\fIThreadPool\fR` struct that we can have for now:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct ThreadPool;

.EE

.RE
.P
Then edit \fImain\.rs\fR file to bring `\fIThreadPool\fR` into scope from the librarycrate by adding the following code to the top of \fIsrc/main\.rs\fR:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use hello::ThreadPool;
# use std::{
#     fs,
#     io::{prelude::*, BufReader},
#     net::{TcpListener, TcpStream},
#     thread,
#     time::Duration,
# };
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
#     let pool = ThreadPool::new(4);
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         pool\.execute(|| {
#             handle_connection(stream);
#         });
#     }
# }
# 
# fn handle_connection(mut stream: TcpStream) {
#     let buf_reader = BufReader::new(&mut stream);
#     let request_line = buf_reader\.lines()\.next()\.unwrap()\.unwrap();
# 
#     let (status_line, filename) = match &request_line[\.\.] {
#         "GET / HTTP/1\.1" => ("HTTP/1\.1 200 OK", "hello\.html"),
#         "GET /sleep HTTP/1\.1" => {
#             thread::sleep(Duration::from_secs(5));
#             ("HTTP/1\.1 200 OK", "hello\.html")
#         }
#         _ => ("HTTP/1\.1 404 NOT FOUND", "404\.html"),
#     };
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
#     let length = contents\.len();
# 
#     let response =
#         format!("{status_line}\r\nContent\-Length: {length}\r\n\r\n{contents}");
# 
#     stream\.write_all(response\.as_bytes())\.unwrap();
# }

.EE

.RE
.P
This code still won‚Äôt work, but let‚Äôs check it again to get the next error thatwe need to address:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0599]: no function or associated item named `new` found for struct `ThreadPool` in the current scope
  \-\-> src/main\.rs:12:28
   |
12 |     let pool = ThreadPool::new(4);
   |                            ^^^ function or associated item not found in `ThreadPool`

For more information about this error, try `rustc \-\-explain E0599`\.
error: could not compile `hello` due to previous error

.EE

.RE
.P
This error indicates that next we need to create an associated function named`\fInew\fR` for `\fIThreadPool\fR`\. We also know that `\fInew\fR` needs to have one parameterthat can accept `\fI4\fR` as an argument and should return a `\fIThreadPool\fR` instance\.Let‚Äôs implement the simplest `\fInew\fR` function that will have thosecharacteristics:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct ThreadPool;

impl ThreadPool {
    pub fn new(size: usize) \-> ThreadPool {
        ThreadPool
    }
}

.EE

.RE
.P
We chose `\fIusize\fR` as the type of the `\fIsize\fR` parameter, because we know that anegative number of threads doesn‚Äôt make any sense\. We also know we‚Äôll use this4 as the number of elements in a collection of threads, which is what the`\fIusize\fR` type is for, as discussed in the 
.UR ch03\-02\-data\-types\.html#integer\-types
.UE
‚ÄúInteger Types‚Äù section of Chapter 3\.
.P
Let‚Äôs check the code again:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0599]: no method named `execute` found for struct `ThreadPool` in the current scope
  \-\-> src/main\.rs:17:14
   |
17 |         pool\.execute(|| {
   |              ^^^^^^^ method not found in `ThreadPool`

For more information about this error, try `rustc \-\-explain E0599`\.
error: could not compile `hello` due to previous error

.EE

.RE
.P
Now the error occurs because we don‚Äôt have an `\fIexecute\fR` method on `\fIThreadPool\fR`\.Recall from the 
.UR #creating\-a\-finite\-number\-of\-threads
.UE
‚ÄúCreating a Finite Number ofThreads‚Äù section that wedecided our thread pool should have an interface similar to `\fIthread::spawn\fR`\. Inaddition, we‚Äôll implement the `\fIexecute\fR` function so it takes the closure it‚Äôsgiven and gives it to an idle thread in the pool to run\.
.P
We‚Äôll define the `\fIexecute\fR` method on `\fIThreadPool\fR` to take a closure as aparameter\. Recall from the 
.UR ch13\-01\-closures\.html#moving\-captured\-values\-out\-of\-the\-closure\-and\-the\-fn\-traits
.UE
‚ÄúMoving Captured Values Out of the Closure and the`\fIFn\fR` Traits‚Äù section in Chapter 13 that we can takeclosures as parameters with three different traits: `\fIFn\fR`, `\fIFnMut\fR`, and`\fIFnOnce\fR`\. We need to decide which kind of closure to use here\. We know we‚Äôllend up doing something similar to the standard library `\fIthread::spawn\fR`implementation, so we can look at what bounds the signature of `\fIthread::spawn\fR`has on its parameter\. The documentation shows us the following:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn spawn<F, T>(f: F) \-> JoinHandle<T>
    where
        F: FnOnce() \-> T,
        F: Send + 'static,
        T: Send + 'static,

.EE

.RE
.P
The `\fIF\fR` type parameter is the one we‚Äôre concerned with here; the `\fIT\fR` typeparameter is related to the return value, and we‚Äôre not concerned with that\. Wecan see that `\fIspawn\fR` uses `\fIFnOnce\fR` as the trait bound on `\fIF\fR`\. This is probablywhat we want as well, because we‚Äôll eventually pass the argument we get in`\fIexecute\fR` to `\fIspawn\fR`\. We can be further confident that `\fIFnOnce\fR` is the trait wewant to use because the thread for running a request will only execute thatrequest‚Äôs closure one time, which matches the `\fIOnce\fR` in `\fIFnOnce\fR`\.
.P
The `\fIF\fR` type parameter also has the trait bound `\fISend\fR` and the lifetime bound`\fI'static\fR`, which are useful in our situation: we need `\fISend\fR` to transfer theclosure from one thread to another and `\fI'static\fR` because we don‚Äôt know how longthe thread will take to execute\. Let‚Äôs create an `\fIexecute\fR` method on`\fIThreadPool\fR` that will take a generic parameter of type `\fIF\fR` with these bounds:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct ThreadPool;
# 
impl ThreadPool {
    // \-\-snip\-\-
#     pub fn new(size: usize) \-> ThreadPool {
#         ThreadPool
#     }
# 
    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {
    }
}

.EE

.RE
.P
We still use the `\fI()\fR` after `\fIFnOnce\fR` because this `\fIFnOnce\fR` represents a closurethat takes no parameters and returns the unit type `\fI()\fR`\. Just like functiondefinitions, the return type can be omitted from the signature, but even if wehave no parameters, we still need the parentheses\.
.P
Again, this is the simplest implementation of the `\fIexecute\fR` method: it doesnothing, but we‚Äôre trying only to make our code compile\. Let‚Äôs check it again:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.24s

.EE

.RE
.P
It compiles! But note that if you try `\fIcargo run\fR` and make a request in thebrowser, you‚Äôll see the errors in the browser that we saw at the beginning ofthe chapter\. Our library isn‚Äôt actually calling the closure passed to `\fIexecute\fR`yet!
.P
Note: A saying you might hear about languages with strict compilers, such asHaskell and Rust, is ‚Äúif the code compiles, it works\.‚Äù But this saying is notuniversally true\. Our project compiles, but it does absolutely nothing! If wewere building a real, complete project, this would be a good time to startwriting unit tests to check that the code compiles \fIand\fR has the behavior wewant\.
.br

.br
\fBValidating the Number of Threads in \fR
.br
======================================
.br
`\fInew\fR`
.P
We aren‚Äôt doing anything with the parameters to `\fInew\fR` and `\fIexecute\fR`\. Let‚Äôsimplement the bodies of these functions with the behavior we want\. To start,let‚Äôs think about `\fInew\fR`\. Earlier we chose an unsigned type for the `\fIsize\fR`parameter, because a pool with a negative number of threads makes no sense\.However, a pool with zero threads also makes no sense, yet zero is a perfectlyvalid `\fIusize\fR`\. We‚Äôll add code to check that `\fIsize\fR` is greater than zero beforewe return a `\fIThreadPool\fR` instance and have the program panic if it receives azero by using the `\fIassert!\fR` macro, as shown in Listing 20\-13\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct ThreadPool;
# 
impl ThreadPool {
    /// Create a new ThreadPool\.
    ///
    /// The size is the number of threads in the pool\.
    ///
    /// # Panics
    ///
    /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        ThreadPool
    }

    // \-\-snip\-\-
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

.EE

.RE
Listing 20\-13: Implementing `\fIThreadPool::new\fR` to panic if`\fIsize\fR` is zero
.P
We‚Äôve also added some documentation for our `\fIThreadPool\fR` with doc comments\.Note that we followed good documentation practices by adding a section thatcalls out the situations in which our function can panic, as discussed inChapter 14\. Try running `\fIcargo doc \-\-open\fR` and clicking the `\fIThreadPool\fR` structto see what the generated docs for `\fInew\fR` look like!
.P
Instead of adding the `\fIassert!\fR` macro as we‚Äôve done here, we could change `\fInew\fR`into `\fIbuild\fR` and return a `\fIResult\fR` like we did with `\fIConfig::build\fR` in the I/Oproject in Listing 12\-9\. But we‚Äôve decided in this case that trying to create athread pool without any threads should be an unrecoverable error\. If you‚Äôrefeeling ambitious, try to write a function named `\fIbuild\fR` with the followingsignature to compare with the `\fInew\fR` function:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn build(size: usize) \-> Result<ThreadPool, PoolCreationError> {

.EE

.RE

.br

.br
\fBCreating Space to Store the Threads\fR
.br
=====================================
.br

.P
Now that we have a way to know we have a valid number of threads to store inthe pool, we can create those threads and store them in the `\fIThreadPool\fR` structbefore returning the struct\. But how do we ‚Äústore‚Äù a thread? Let‚Äôs take anotherlook at the `\fIthread::spawn\fR` signature:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn spawn<F, T>(f: F) \-> JoinHandle<T>
    where
        F: FnOnce() \-> T,
        F: Send + 'static,
        T: Send + 'static,

.EE

.RE
.P
The `\fIspawn\fR` function returns a `\fIJoinHandle<T>\fR`, where `\fIT\fR` is the type that theclosure returns\. Let‚Äôs try using `\fIJoinHandle\fR` too and see what happens\. In ourcase, the closures we‚Äôre passing to the thread pool will handle the connectionand not return anything, so `\fIT\fR` will be the unit type `\fI()\fR`\.
.P
The code in Listing 20\-14 will compile but doesn‚Äôt create any threads yet\.We‚Äôve changed the definition of `\fIThreadPool\fR` to hold a vector of`\fIthread::JoinHandle<()>\fR` instances, initialized the vector with a capacity of`\fIsize\fR`, set up a `\fIfor\fR` loop that will run some code to create the threads, andreturned a `\fIThreadPool\fR` instance containing them\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,not_desired_behavior\fR 2

.br
.EX
use std::thread;

pub struct ThreadPool {
    threads: Vec<thread::JoinHandle<()>>,
}

impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let mut threads = Vec::with_capacity(size);

        for _ in 0\.\.size {
            // create some threads and store them in the vector
        }

        ThreadPool { threads }
    }
    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

.EE

.RE
Listing 20\-14: Creating a vector for `\fIThreadPool\fR` to holdthe threads
.P
We‚Äôve brought `\fIstd::thread\fR` into scope in the library crate, because we‚Äôreusing `\fIthread::JoinHandle\fR` as the type of the items in the vector in`\fIThreadPool\fR`\.
.P
Once a valid size is received, our `\fIThreadPool\fR` creates a new vector that canhold `\fIsize\fR` items\. The `\fIwith_capacity\fR` function performs the same task as`\fIVec::new\fR` but with an important difference: it preallocates space in thevector\. Because we know we need to store `\fIsize\fR` elements in the vector, doingthis allocation up front is slightly more efficient than using `\fIVec::new\fR`,which resizes itself as elements are inserted\.
.P
When you run `\fIcargo check\fR` again, it should succeed\.
.br

.br
\fBA \fR
.br
====
.br
`\fIWorker\fR` Struct Responsible for Sending Code from the `\fIThreadPool\fR` to a Thread
.P
We left a comment in the `\fIfor\fR` loop in Listing 20\-14 regarding the creation ofthreads\. Here, we‚Äôll look at how we actually create threads\. The standardlibrary provides `\fIthread::spawn\fR` as a way to create threads, and`\fIthread::spawn\fR` expects to get some code the thread should run as soon as thethread is created\. However, in our case, we want to create the threads and havethem \fIwait\fR for code that we‚Äôll send later\. The standard library‚Äôsimplementation of threads doesn‚Äôt include any way to do that; we have toimplement it manually\.
.P
We‚Äôll implement this behavior by introducing a new data structure between the`\fIThreadPool\fR` and the threads that will manage this new behavior\. We‚Äôll callthis data structure \fIWorker\fR, which is a common term in poolingimplementations\. The Worker picks up code that needs to be run and runs thecode in the Worker‚Äôs thread\. Think of people working in the kitchen at arestaurant: the workers wait until orders come in from customers, and thenthey‚Äôre responsible for taking those orders and fulfilling them\.
.P
Instead of storing a vector of `\fIJoinHandle<()>\fR` instances in the thread pool,we‚Äôll store instances of the `\fIWorker\fR` struct\. Each `\fIWorker\fR` will store a single`\fIJoinHandle<()>\fR` instance\. Then we‚Äôll implement a method on `\fIWorker\fR` that willtake a closure of code to run and send it to the already running thread forexecution\. We‚Äôll also give each worker an `\fIid\fR` so we can distinguish betweenthe different workers in the pool when logging or debugging\.
.P
Here is the new process that will happen when we create a `\fIThreadPool\fR`\. We‚Äôllimplement the code that sends the closure to the thread after we have `\fIWorker\fR`set up in this way:
.P
Define a `\fIWorker\fR` struct that holds an `\fIid\fR` and a `\fIJoinHandle<()>\fR`\.
.P
Change `\fIThreadPool\fR` to hold a vector of `\fIWorker\fR` instances\.
.P
Define a `\fIWorker::new\fR` function that takes an `\fIid\fR` number and returns a`\fIWorker\fR` instance that holds the `\fIid\fR` and a thread spawned with an emptyclosure\.
.P
In `\fIThreadPool::new\fR`, use the `\fIfor\fR` loop counter to generate an `\fIid\fR`, createa new `\fIWorker\fR` with that `\fIid\fR`, and store the worker in the vector\.
.P
If you‚Äôre up for a challenge, try implementing these changes on your own beforelooking at the code in Listing 20\-15\.
.P
Ready? Here is Listing 20\-15 with one way to make the preceding modifications\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::thread;

pub struct ThreadPool {
    workers: Vec<Worker>,
}

impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id));
        }

        ThreadPool { workers }
    }
    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

struct Worker {
    id: usize,
    thread: thread::JoinHandle<()>,
}

impl Worker {
    fn new(id: usize) \-> Worker {
        let thread = thread::spawn(|| {});

        Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-15: Modifying `\fIThreadPool\fR` to hold `\fIWorker\fR`instances instead of holding threads directly
.P
We‚Äôve changed the name of the field on `\fIThreadPool\fR` from `\fIthreads\fR` to `\fIworkers\fR`because it‚Äôs now holding `\fIWorker\fR` instances instead of `\fIJoinHandle<()>\fR`instances\. We use the counter in the `\fIfor\fR` loop as an argument to`\fIWorker::new\fR`, and we store each new `\fIWorker\fR` in the vector named `\fIworkers\fR`\.
.P
External code (like our server in \fIsrc/main\.rs\fR) doesn‚Äôt need to know theimplementation details regarding using a `\fIWorker\fR` struct within `\fIThreadPool\fR`,so we make the `\fIWorker\fR` struct and its `\fInew\fR` function private\. The`\fIWorker::new\fR` function uses the `\fIid\fR` we give it and stores a `\fIJoinHandle<()>\fR`instance that is created by spawning a new thread using an empty closure\.
.P
Note: If the operating system can‚Äôt create a thread because there aren‚Äôtenough system resources, `\fIthread::spawn\fR` will panic\. That will cause ourwhole server to panic, even though the creation of some threads mightsucceed\. For simplicity‚Äôs sake, this behavior is fine, but in a productionthread pool implementation, you‚Äôd likely want to use
.UR \.\./std/thread/struct\.Builder\.html
.UE
`\fIstd::thread::Builder\fR` and its
.UR \.\./std/thread/struct\.Builder\.html#method\.spawn
.UE
`\fIspawn\fR` method that returns `\fIResult\fR` instead\.
.P
This code will compile and will store the number of `\fIWorker\fR` instances wespecified as an argument to `\fIThreadPool::new\fR`\. But we‚Äôre \fIstill\fR not processingthe closure that we get in `\fIexecute\fR`\. Let‚Äôs look at how to do that next\.
.br

.br
\fBSending Requests to Threads via Channels\fR
.br
==========================================
.br

.P
The next problem we‚Äôll tackle is that the closures given to `\fIthread::spawn\fR` doabsolutely nothing\. Currently, we get the closure we want to execute in the`\fIexecute\fR` method\. But we need to give `\fIthread::spawn\fR` a closure to run when wecreate each `\fIWorker\fR` during the creation of the `\fIThreadPool\fR`\.
.P
We want the `\fIWorker\fR` structs that we just created to fetch the code to run froma queue held in the `\fIThreadPool\fR` and send that code to its thread to run\.
.P
The channels we learned about in Chapter 16‚Äîa simple way to communicate betweentwo threads‚Äîwould be perfect for this use case\. We‚Äôll use a channel to functionas the queue of jobs, and `\fIexecute\fR` will send a job from the `\fIThreadPool\fR` tothe `\fIWorker\fR` instances, which will send the job to its thread\. Here is the plan:
.P
The `\fIThreadPool\fR` will create a channel and hold on to the sender\.
.P
Each `\fIWorker\fR` will hold on to the receiver\.
.P
We‚Äôll create a new `\fIJob\fR` struct that will hold the closures we want to senddown the channel\.
.P
The `\fIexecute\fR` method will send the job it wants to execute through thesender\.
.P
In its thread, the `\fIWorker\fR` will loop over its receiver and execute theclosures of any jobs it receives\.
.P
Let‚Äôs start by creating a channel in `\fIThreadPool::new\fR` and holding the senderin the `\fIThreadPool\fR` instance, as shown in Listing 20\-16\. The `\fIJob\fR` structdoesn‚Äôt hold anything for now but will be the type of item we‚Äôre sending downthe channel\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::{sync::mpsc, thread};

pub struct ThreadPool {
    workers: Vec<Worker>,
    sender: mpsc::Sender<Job>,
}

struct Job;

impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id));
        }

        ThreadPool { workers, sender }
    }
    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
# impl Worker {
#     fn new(id: usize) \-> Worker {
#         let thread = thread::spawn(|| {});
# 
#         Worker { id, thread }
#     }
# }

.EE

.RE
Listing 20\-16: Modifying `\fIThreadPool\fR` to store thesender of a channel that transmits `\fIJob\fR` instances
.P
In `\fIThreadPool::new\fR`, we create our new channel and have the pool hold thesender\. This will successfully compile\.
.P
Let‚Äôs try passing a receiver of the channel into each worker as the thread poolcreates the channel\. We know we want to use the receiver in the thread that theworkers spawn, so we‚Äôll reference the `\fIreceiver\fR` parameter in the closure\. Thecode in Listing 20\-17 won‚Äôt quite compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::{sync::mpsc, thread};
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# struct Job;
# 
impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id, receiver));
        }

        ThreadPool { workers, sender }
    }
    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

// \-\-snip\-\-

# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
impl Worker {
    fn new(id: usize, receiver: mpsc::Receiver<Job>) \-> Worker {
        let thread = thread::spawn(|| {
            receiver;
        });

        Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-17: Passing the receiver to the workers
.P
We‚Äôve made some small and straightforward changes: we pass the receiver into`\fIWorker::new\fR`, and then we use it inside the closure\.
.P
When we try to check this code, we get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0382]: use of moved value: `receiver`
  \-\-> src/lib\.rs:26:42
   |
21 |         let (sender, receiver) = mpsc::channel();
   |                      \-\-\-\-\-\-\-\- move occurs because `receiver` has type `std::sync::mpsc::Receiver<Job>`, which does not implement the `Copy` trait
\.\.\.
26 |             workers\.push(Worker::new(id, receiver));
   |                                          ^^^^^^^^ value moved here, in previous iteration of loop

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `hello` due to previous error

.EE

.RE
.P
The code is trying to pass `\fIreceiver\fR` to multiple `\fIWorker\fR` instances\. Thiswon‚Äôt work, as you‚Äôll recall from Chapter 16: the channel implementation thatRust provides is multiple \fIproducer\fR, single \fIconsumer\fR\. This means we can‚Äôtjust clone the consuming end of the channel to fix this code\. We also don‚Äôtwant to send a message multiple times to multiple consumers; we want one listof messages with multiple workers such that each message gets processed once\.
.P
Additionally, taking a job off the channel queue involves mutating the`\fIreceiver\fR`, so the threads need a safe way to share and modify `\fIreceiver\fR`;otherwise, we might get race conditions (as covered in Chapter 16)\.
.P
Recall the thread\-safe smart pointers discussed in Chapter 16: to shareownership across multiple threads and allow the threads to mutate the value, weneed to use `\fIArc<Mutex<T>>\fR`\. The `\fIArc\fR` type will let multiple workers own thereceiver, and `\fIMutex\fR` will ensure that only one worker gets a job from thereceiver at a time\. Listing 20\-18 shows the changes we need to make\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::{
    sync::{mpsc, Arc, Mutex},
    thread,
};
// \-\-snip\-\-

# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# struct Job;
# 
impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let receiver = Arc::new(Mutex::new(receiver));

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id, Arc::clone(&receiver)));
        }

        ThreadPool { workers, sender }
    }

    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

// \-\-snip\-\-

# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        // \-\-snip\-\-
#         let thread = thread::spawn(|| {
#             receiver;
#         });
# 
#         Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-18: Sharing the receiver among the workersusing `\fIArc\fR` and `\fIMutex\fR`
.P
In `\fIThreadPool::new\fR`, we put the receiver in an `\fIArc\fR` and a `\fIMutex\fR`\. For eachnew worker, we clone the `\fIArc\fR` to bump the reference count so the workers canshare ownership of the receiver\.
.P
With these changes, the code compiles! We‚Äôre getting there!
.br

.br
\fBImplementing the \fR
.br
===================
.br
`\fIexecute\fR` Method
.P
Let‚Äôs finally implement the `\fIexecute\fR` method on `\fIThreadPool\fR`\. We‚Äôll also change`\fIJob\fR` from a struct to a type alias for a trait object that holds the type ofclosure that `\fIexecute\fR` receives\. As discussed in the 
.UR ch19\-04\-advanced\-types\.html#creating\-type\-synonyms\-with\-type\-aliases
.UE
‚ÄúCreating Type Synonymswith Type Aliases‚Äùsection of Chapter 19, type aliases allow us to make long types shorter forease of use\. Look at Listing 20\-19\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
// \-\-snip\-\-

type Job = Box<dyn FnOnce() + Send + 'static>;

impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }

    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {
        let job = Box::new(f);

        self\.sender\.send(job)\.unwrap();
    }
}

// \-\-snip\-\-
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(|| {
#             receiver;
#         });
# 
#         Worker { id, thread }
#     }
# }

.EE

.RE
Listing 20\-19: Creating a `\fIJob\fR` type alias for a `\fIBox\fR`that holds each closure and then sending the job down the channel
.P
After creating a new `\fIJob\fR` instance using the closure we get in `\fIexecute\fR`, wesend that job down the sending end of the channel\. We‚Äôre calling `\fIunwrap\fR` on`\fIsend\fR` for the case that sending fails\. This might happen if, for example, westop all our threads from executing, meaning the receiving end has stoppedreceiving new messages\. At the moment, we can‚Äôt stop our threads fromexecuting: our threads continue executing as long as the pool exists\. Thereason we use `\fIunwrap\fR` is that we know the failure case won‚Äôt happen, but thecompiler doesn‚Äôt know that\.
.P
But we‚Äôre not quite done yet! In the worker, our closure being passed to`\fIthread::spawn\fR` still only \fIreferences\fR the receiving end of the channel\.Instead, we need the closure to loop forever, asking the receiving end of thechannel for a job and running the job when it gets one\. Let‚Äôs make the changeshown in Listing 20\-20 to `\fIWorker::new\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
// \-\-snip\-\-

impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        let thread = thread::spawn(move || loop {
            let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();

            println!("Worker {id} got a job; executing\.");

            job();
        });

        Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-20: Receiving and executing the jobs in theworker‚Äôs thread
.P
Here, we first call `\fIlock\fR` on the `\fIreceiver\fR` to acquire the mutex, and then wecall `\fIunwrap\fR` to panic on any errors\. Acquiring a lock might fail if the mutexis in a \fIpoisoned\fR state, which can happen if some other thread panicked whileholding the lock rather than releasing the lock\. In this situation, calling`\fIunwrap\fR` to have this thread panic is the correct action to take\. Feel free tochange this `\fIunwrap\fR` to an `\fIexpect\fR` with an error message that is meaningful toyou\.
.P
If we get the lock on the mutex, we call `\fIrecv\fR` to receive a `\fIJob\fR` from thechannel\. A final `\fIunwrap\fR` moves past any errors here as well, which might occurif the thread holding the sender has shut down, similar to how the `\fIsend\fR`method returns `\fIErr\fR` if the receiver shuts down\.
.P
The call to `\fIrecv\fR` blocks, so if there is no job yet, the current thread willwait until a job becomes available\. The `\fIMutex<T>\fR` ensures that only one`\fIWorker\fR` thread at a time is trying to request a job\.
.P
Our thread pool is now in a working state! Give it a `\fIcargo run\fR` and make somerequests:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling hello v0\.1\.0 (file:///projects/hello)
warning: field is never read: `workers`
 \-\-> src/lib\.rs:7:5
  |
7 |     workers: Vec<Worker>,
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: field is never read: `id`
  \-\-> src/lib\.rs:48:5
   |
48 |     id: usize,
   |     ^^^^^^^^^

warning: field is never read: `thread`
  \-\-> src/lib\.rs:49:5
   |
49 |     thread: thread::JoinHandle<()>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `hello` (lib) generated 3 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 1\.40s
     Running `target/debug/hello`
Worker 0 got a job; executing\.
Worker 2 got a job; executing\.
Worker 1 got a job; executing\.
Worker 3 got a job; executing\.
Worker 0 got a job; executing\.
Worker 2 got a job; executing\.
Worker 1 got a job; executing\.
Worker 3 got a job; executing\.
Worker 0 got a job; executing\.
Worker 2 got a job; executing\.

.EE

.RE
.P
Success! We now have a thread pool that executes connections asynchronously\.There are never more than four threads created, so our system won‚Äôt getoverloaded if the server receives a lot of requests\. If we make a request to\fI/sleep\fR, the server will be able to serve other requests by having anotherthread run them\.
.P
Note: if you open \fI/sleep\fR in multiple browser windows simultaneously, theymight load one at a time in 5 second intervals\. Some web browsers executemultiple instances of the same request sequentially for caching reasons\. Thislimitation is not caused by our web server\.
.P
After learning about the `\fIwhile let\fR` loop in Chapter 18, you might be wonderingwhy we didn‚Äôt write the worker thread code as shown in Listing 20\-21\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,not_desired_behavior\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
// \-\-snip\-\-

impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        let thread = thread::spawn(move || {
            while let Ok(job) = receiver\.lock()\.unwrap()\.recv() {
                println!("Worker {id} got a job; executing\.");

                job();
            }
        });

        Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-21: An alternative implementation of`\fIWorker::new\fR` using `\fIwhile let\fR`
.P
This code compiles and runs but doesn‚Äôt result in the desired threadingbehavior: a slow request will still cause other requests to wait to beprocessed\. The reason is somewhat subtle: the `\fIMutex\fR` struct has no public`\fIunlock\fR` method because the ownership of the lock is based on the lifetime ofthe `\fIMutexGuard<T>\fR` within the `\fILockResult<MutexGuard<T>>\fR` that the `\fIlock\fR`method returns\. At compile time, the borrow checker can then enforce the rulethat a resource guarded by a `\fIMutex\fR` cannot be accessed unless we hold thelock\. However, this implementation can also result in the lock being heldlonger than intended if we aren‚Äôt mindful of the lifetime of the`\fIMutexGuard<T>\fR`\.
.P
The code in Listing 20\-20 that uses `\fIlet job = receiver\.lock()\.unwrap()\.recv()\.unwrap();\fR` works because with `\fIlet\fR`, anytemporary values used in the expression on the right hand side of the equalssign are immediately dropped when the `\fIlet\fR` statement ends\. However, `\fIwhile let\fR` (and `\fIif let\fR` and `\fImatch\fR`) does not drop temporary values until the end ofthe associated block\. In Listing 20\-21, the lock remains held for the durationof the call to `\fIjob()\fR`, meaning other workers cannot receive jobs\.
.SH "Graceful Shutdown and Cleanup"

.br

.br
\fBGraceful Shutdown and Cleanup\fR
.br
===============================
.br

.P
The code in Listing 20\-20 is responding to requests asynchronously through theuse of a thread pool, as we intended\. We get some warnings about the `\fIworkers\fR`,`\fIid\fR`, and `\fIthread\fR` fields that we‚Äôre not using in a direct way that reminds uswe‚Äôre not cleaning up anything\. When we use the less elegant ctrl\-c method to halt the main thread, all otherthreads are stopped immediately as well, even if they‚Äôre in the middle ofserving a request\.
.P
Next, then, we‚Äôll implement the `\fIDrop\fR` trait to call `\fIjoin\fR` on each of thethreads in the pool so they can finish the requests they‚Äôre working on beforeclosing\. Then we‚Äôll implement a way to tell the threads they should stopaccepting new requests and shut down\. To see this code in action, we‚Äôll modifyour server to accept only two requests before gracefully shutting down itsthread pool\.
.br

.br
\fBImplementing the \fR
.br
===================
.br
`\fIDrop\fR` Trait on `\fIThreadPool\fR`
.P
Let‚Äôs start with implementing `\fIDrop\fR` on our thread pool\. When the pool isdropped, our threads should all join to make sure they finish their work\.Listing 20\-22 shows a first attempt at a `\fIDrop\fR` implementation; this code won‚Äôtquite work yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
impl Drop for ThreadPool {
    fn drop(&mut self) {
        for worker in &mut self\.workers {
            println!("Shutting down worker {}", worker\.id);

            worker\.thread\.join()\.unwrap();
        }
    }
}
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {id} got a job; executing\.");
# 
#             job();
#         });
# 
#         Worker { id, thread }
#     }
# }

.EE

.RE
Listing 20\-22: Joining each thread when the thread poolgoes out of scope
.P
First, we loop through each of the thread pool `\fIworkers\fR`\. We use `\fI&mut\fR` forthis because `\fIself\fR` is a mutable reference, and we also need to be able tomutate `\fIworker\fR`\. For each worker, we print a message saying that thisparticular worker is shutting down, and then we call `\fIjoin\fR` on that worker‚Äôsthread\. If the call to `\fIjoin\fR` fails, we use `\fIunwrap\fR` to make Rust panic and gointo an ungraceful shutdown\.
.P
Here is the error we get when we compile this code:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0507]: cannot move out of `worker\.thread` which is behind a mutable reference
    \-\-> src/lib\.rs:52:13
     |
52   |             worker\.thread\.join()\.unwrap();
     |             ^^^^^^^^^^^^^ \-\-\-\-\-\- `worker\.thread` moved due to this method call
     |             |
     |             move occurs because `worker\.thread` has type `JoinHandle<()>`, which does not implement the `Copy` trait
     |
note: this function takes ownership of the receiver `self`, which moves `worker\.thread`

For more information about this error, try `rustc \-\-explain E0507`\.
error: could not compile `hello` due to previous error

.EE

.RE
.P
The error tells us we can‚Äôt call `\fIjoin\fR` because we only have a mutable borrowof each `\fIworker\fR` and `\fIjoin\fR` takes ownership of its argument\. To solve thisissue, we need to move the thread out of the `\fIWorker\fR` instance that owns`\fIthread\fR` so `\fIjoin\fR` can consume the thread\. We did this in Listing 17\-15: if`\fIWorker\fR` holds an `\fIOption<thread::JoinHandle<()>>\fR` instead, we can call the`\fItake\fR` method on the `\fIOption\fR` to move the value out of the `\fISome\fR` variant andleave a `\fINone\fR` variant in its place\. In other words, a `\fIWorker\fR` that is runningwill have a `\fISome\fR` variant in `\fIthread\fR`, and when we want to clean up a`\fIWorker\fR`, we‚Äôll replace `\fISome\fR` with `\fINone\fR` so the `\fIWorker\fR` doesn‚Äôt have athread to run\.
.P
So we know we want to update the definition of `\fIWorker\fR` like this:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# impl Drop for ThreadPool {
#     fn drop(&mut self) {
#         for worker in &mut self\.workers {
#             println!("Shutting down worker {}", worker\.id);
# 
#             worker\.thread\.join()\.unwrap();
#         }
#     }
# }
# 
struct Worker {
    id: usize,
    thread: Option<thread::JoinHandle<()>>,
}
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {id} got a job; executing\.");
# 
#             job();
#         });
# 
#         Worker { id, thread }
#     }
# }

.EE

.RE
.P
Now let‚Äôs lean on the compiler to find the other places that need to change\.Checking this code, we get two errors:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0599]: no method named `join` found for enum `Option` in the current scope
  \-\-> src/lib\.rs:52:27
   |
52 |             worker\.thread\.join()\.unwrap();
   |                           ^^^^ method not found in `Option<JoinHandle<()>>`

error[E0308]: mismatched types
  \-\-> src/lib\.rs:72:22
   |
72 |         Worker { id, thread }
   |                      ^^^^^^ expected enum `Option`, found struct `JoinHandle`
   |
   = note: expected enum `Option<JoinHandle<()>>`
            found struct `JoinHandle<_>`
help: try wrapping the expression in `Some`
   |
72 |         Worker { id, thread: Some(thread) }
   |                      +++++++++++++      +

Some errors have detailed explanations: E0308, E0599\.
For more information about an error, try `rustc \-\-explain E0308`\.
error: could not compile `hello` due to 2 previous errors

.EE

.RE
.P
Let‚Äôs address the second error, which points to the code at the end of`\fIWorker::new\fR`; we need to wrap the `\fIthread\fR` value in `\fISome\fR` when we create anew `\fIWorker\fR`\. Make the following changes to fix this error:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# impl Drop for ThreadPool {
#     fn drop(&mut self) {
#         for worker in &mut self\.workers {
#             println!("Shutting down worker {}", worker\.id);
# 
#             worker\.thread\.join()\.unwrap();
#         }
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        // \-\-snip\-\-

#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {id} got a job; executing\.");
# 
#             job();
#         });
# 
        Worker {
            id,
            thread: Some(thread),
        }
    }
}

.EE

.RE
.P
The first error is in our `\fIDrop\fR` implementation\. We mentioned earlier that weintended to call `\fItake\fR` on the `\fIOption\fR` value to move `\fIthread\fR` out of `\fIworker\fR`\.The following changes will do so:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,not_desired_behavior\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
impl Drop for ThreadPool {
    fn drop(&mut self) {
        for worker in &mut self\.workers {
            println!("Shutting down worker {}", worker\.id);

            if let Some(thread) = worker\.thread\.take() {
                thread\.join()\.unwrap();
            }
        }
    }
}
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {id} got a job; executing\.");
# 
#             job();
#         });
# 
#         Worker {
#             id,
#             thread: Some(thread),
#         }
#     }
# }

.EE

.RE
.P
As discussed in Chapter 17, the `\fItake\fR` method on `\fIOption\fR` takes the `\fISome\fR`variant out and leaves `\fINone\fR` in its place\. We‚Äôre using `\fIif let\fR` to destructurethe `\fISome\fR` and get the thread; then we call `\fIjoin\fR` on the thread\. If a worker‚Äôsthread is already `\fINone\fR`, we know that worker has already had its threadcleaned up, so nothing happens in that case\.
.br

.br
\fBSignaling to the Threads to Stop Listening for Jobs\fR
.br
=====================================================
.br

.P
With all the changes we‚Äôve made, our code compiles without any warnings\.However, the bad news is this code doesn‚Äôt function the way we want it to yet\.The key is the logic in the closures run by the threads of the `\fIWorker\fR`instances: at the moment, we call `\fIjoin\fR`, but that won‚Äôt shut down the threadsbecause they `\fIloop\fR` forever looking for jobs\. If we try to drop our`\fIThreadPool\fR` with our current implementation of `\fIdrop\fR`, the main thread willblock forever waiting for the first thread to finish\.
.P
To fix this problem, we‚Äôll need a change in the `\fIThreadPool\fR` `\fIdrop\fR`implementation and then a change in the `\fIWorker\fR` loop\.
.P
First, we‚Äôll change the `\fIThreadPool\fR` `\fIdrop\fR` implementation to explicitly dropthe `\fIsender\fR` before waiting for the threads to finish\. Listing 20\-23 shows thechanges to `\fIThreadPool\fR` to explicitly drop `\fIsender\fR`\. We use the same `\fIOption\fR`and `\fItake\fR` technique as we did with the thread to be able to move `\fIsender\fR` outof `\fIThreadPool\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,not_desired_behavior\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
pub struct ThreadPool {
    workers: Vec<Worker>,
    sender: Option<mpsc::Sender<Job>>,
}
// \-\-snip\-\-
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        // \-\-snip\-\-

#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
        ThreadPool {
            workers,
            sender: Some(sender),
        }
    }

    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {
        let job = Box::new(f);

        self\.sender\.as_ref()\.unwrap()\.send(job)\.unwrap();
    }
}

impl Drop for ThreadPool {
    fn drop(&mut self) {
        drop(self\.sender\.take());

        for worker in &mut self\.workers {
            println!("Shutting down worker {}", worker\.id);

            if let Some(thread) = worker\.thread\.take() {
                thread\.join()\.unwrap();
            }
        }
    }
}
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {id} got a job; executing\.");
# 
#             job();
#         });
# 
#         Worker {
#             id,
#             thread: Some(thread),
#         }
#     }
# }

.EE

.RE
Listing 20\-23: Explicitly drop `\fIsender\fR` before joiningthe worker threads
.P
Dropping `\fIsender\fR` closes the channel, which indicates no more messages will besent\. When that happens, all the calls to `\fIrecv\fR` that the workers do in theinfinite loop will return an error\. In Listing 20\-24, we change the `\fIWorker\fR`loop to gracefully exit the loop in that case, which means the threads willfinish when the `\fIThreadPool\fR` `\fIdrop\fR` implementation calls `\fIjoin\fR` on them\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::{
#     sync::{mpsc, Arc, Mutex},
#     thread,
# };
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: Option<mpsc::Sender<Job>>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool {
#             workers,
#             sender: Some(sender),
#         }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.as_ref()\.unwrap()\.send(job)\.unwrap();
#     }
# }
# 
# impl Drop for ThreadPool {
#     fn drop(&mut self) {
#         drop(self\.sender\.take());
# 
#         for worker in &mut self\.workers {
#             println!("Shutting down worker {}", worker\.id);
# 
#             if let Some(thread) = worker\.thread\.take() {
#                 thread\.join()\.unwrap();
#             }
#         }
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        let thread = thread::spawn(move || loop {
            let message = receiver\.lock()\.unwrap()\.recv();

            match message {
                Ok(job) => {
                    println!("Worker {id} got a job; executing\.");

                    job();
                }
                Err(_) => {
                    println!("Worker {id} disconnected; shutting down\.");
                    break;
                }
            }
        });

        Worker {
            id,
            thread: Some(thread),
        }
    }
}

.EE

.RE
Listing 20\-24: Explicitly break out of the loop when`\fIrecv\fR` returns an error
.P
To see this code in action, let‚Äôs modify `\fImain\fR` to accept only two requestsbefore gracefully shutting down the server, as shown in Listing 20\-25\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use hello::ThreadPool;
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# use std::thread;
# use std::time::Duration;
# 
fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
    let pool = ThreadPool::new(4);

    for stream in listener\.incoming()\.take(2) {
        let stream = stream\.unwrap();

        pool\.execute(|| {
            handle_connection(stream);
        });
    }

    println!("Shutting down\.");
}
# 
# fn handle_connection(mut stream: TcpStream) {
#     let mut buffer = [0; 1024];
#     stream\.read(&mut buffer)\.unwrap();
# 
#     let get = b"GET / HTTP/1\.1\r\n";
#     let sleep = b"GET /sleep HTTP/1\.1\r\n";
# 
#     let (status_line, filename) = if buffer\.starts_with(get) {
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else if buffer\.starts_with(sleep) {
#         thread::sleep(Duration::from_secs(5));
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else {
#         ("HTTP/1\.1 404 NOT FOUND", "404\.html")
#     };
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
# 
#     let response = format!(
#         "{}\r\nContent\-Length: {}\r\n\r\n{}",
#         status_line,
#         contents\.len(),
#         contents
#     );
# 
#     stream\.write_all(response\.as_bytes())\.unwrap();
#     stream\.flush()\.unwrap();
# }

.EE

.RE
Listing 20\-25: Shut down the server after serving tworequests by exiting the loop
.P
You wouldn‚Äôt want a real\-world web server to shut down after serving only tworequests\. This code just demonstrates that the graceful shutdown and cleanup isin working order\.
.P
The `\fItake\fR` method is defined in the `\fIIterator\fR` trait and limits the iterationto the first two items at most\. The `\fIThreadPool\fR` will go out of scope at theend of `\fImain\fR`, and the `\fIdrop\fR` implementation will run\.
.P
Start the server with `\fIcargo run\fR`, and make three requests\. The third requestshould error, and in your terminal you should see output similar to this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling hello v0\.1\.0 (file:///projects/hello)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.0s
     Running `target/debug/hello`
Worker 0 got a job; executing\.
Shutting down\.
Shutting down worker 0
Worker 3 got a job; executing\.
Worker 1 disconnected; shutting down\.
Worker 2 disconnected; shutting down\.
Worker 3 disconnected; shutting down\.
Worker 0 disconnected; shutting down\.
Shutting down worker 1
Shutting down worker 2
Shutting down worker 3

.EE

.RE
.P
You might see a different ordering of workers and messages printed\. We can seehow this code works from the messages: workers 0 and 3 got the first tworequests\. The server stopped accepting connections after the second connection,and the `\fIDrop\fR` implementation on `\fIThreadPool\fR` starts executing before worker 3even starts its job\. Dropping the `\fIsender\fR` disconnects all the workers andtells them to shut down\. The workers each print a message when they disconnect,and then the thread pool calls `\fIjoin\fR` to wait for each worker thread to finish\.
.P
Notice one interesting aspect of this particular execution: the `\fIThreadPool\fR`dropped the `\fIsender\fR`, and before any worker received an error, we tried to joinworker 0\. Worker 0 had not yet gotten an error from `\fIrecv\fR`, so the main threadblocked waiting for worker 0 to finish\. In the meantime, worker 3 received ajob and then all threads received an error\. When worker 0 finished, the mainthread waited for the rest of the workers to finish\. At that point, they hadall exited their loops and stopped\.
.P
Congrats! We‚Äôve now completed our project; we have a basic web server that usesa thread pool to respond asynchronously\. We‚Äôre able to perform a gracefulshutdown of the server, which cleans up all the threads in the pool\.
.P
Here‚Äôs the full code for reference:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use hello::ThreadPool;
use std::fs;
use std::io::prelude::*;
use std::net::TcpListener;
use std::net::TcpStream;
use std::thread;
use std::time::Duration;

fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
    let pool = ThreadPool::new(4);

    for stream in listener\.incoming()\.take(2) {
        let stream = stream\.unwrap();

        pool\.execute(|| {
            handle_connection(stream);
        });
    }

    println!("Shutting down\.");
}

fn handle_connection(mut stream: TcpStream) {
    let mut buffer = [0; 1024];
    stream\.read(&mut buffer)\.unwrap();

    let get = b"GET / HTTP/1\.1\r\n";
    let sleep = b"GET /sleep HTTP/1\.1\r\n";

    let (status_line, filename) = if buffer\.starts_with(get) {
        ("HTTP/1\.1 200 OK", "hello\.html")
    } else if buffer\.starts_with(sleep) {
        thread::sleep(Duration::from_secs(5));
        ("HTTP/1\.1 200 OK", "hello\.html")
    } else {
        ("HTTP/1\.1 404 NOT FOUND", "404\.html")
    };

    let contents = fs::read_to_string(filename)\.unwrap();

    let response = format!(
        "{}\r\nContent\-Length: {}\r\n\r\n{}",
        status_line,
        contents\.len(),
        contents
    );

    stream\.write_all(response\.as_bytes())\.unwrap();
    stream\.flush()\.unwrap();
}

.EE

.RE
Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::{
    sync::{mpsc, Arc, Mutex},
    thread,
};

pub struct ThreadPool {
    workers: Vec<Worker>,
    sender: Option<mpsc::Sender<Job>>,
}

type Job = Box<dyn FnOnce() + Send + 'static>;

impl ThreadPool {
    /// Create a new ThreadPool\.
    ///
    /// The size is the number of threads in the pool\.
    ///
    /// # Panics
    ///
    /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let receiver = Arc::new(Mutex::new(receiver));

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id, Arc::clone(&receiver)));
        }

        ThreadPool {
            workers,
            sender: Some(sender),
        }
    }

    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {
        let job = Box::new(f);

        self\.sender\.as_ref()\.unwrap()\.send(job)\.unwrap();
    }
}

impl Drop for ThreadPool {
    fn drop(&mut self) {
        drop(self\.sender\.take());

        for worker in &mut self\.workers {
            println!("Shutting down worker {}", worker\.id);

            if let Some(thread) = worker\.thread\.take() {
                thread\.join()\.unwrap();
            }
        }
    }
}

struct Worker {
    id: usize,
    thread: Option<thread::JoinHandle<()>>,
}

impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        let thread = thread::spawn(move || loop {
            let message = receiver\.lock()\.unwrap()\.recv();

            match message {
                Ok(job) => {
                    println!("Worker {id} got a job; executing\.");

                    job();
                }
                Err(_) => {
                    println!("Worker {id} disconnected; shutting down\.");
                    break;
                }
            }
        });

        Worker {
            id,
            thread: Some(thread),
        }
    }
}

.EE

.RE
.P
We could do more here! If you want to continue enhancing this project, here aresome ideas:
.P
Add more documentation to `\fIThreadPool\fR` and its public methods\.
.P
Add tests of the library‚Äôs functionality\.
.P
Change calls to `\fIunwrap\fR` to more robust error handling\.
.P
Use `\fIThreadPool\fR` to perform some task other than serving web requests\.
.P
Find a thread pool crate on 
.UR https://crates\.io/
.UE
crates\.io and implement asimilar web server using the crate instead\. Then compare its API androbustness to the thread pool we implemented\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Well done! You‚Äôve made it to the end of the book! We want to thank you forjoining us on this tour of Rust\. You‚Äôre now ready to implement your own Rustprojects and help with other peoples‚Äô projects\. Keep in mind that there is awelcoming community of other Rustaceans who would love to help you with anychallenges you encounter on your Rust journey\.
.SH Appendix

.br

.br
\fBAppendix\fR
.br
==========
.br

.P
The following sections contain reference material you may find useful in yourRust journey\.
.SH "A \- Keywords"

.br

.br
\fBAppendix A: Keywords\fR
.br
======================
.br

.P
The following list contains keywords that are reserved for current or futureuse by the Rust language\. As such, they cannot be used as identifiers (exceptas raw identifiers as we‚Äôll discuss in the ‚Äú
.UR #raw\-identifiers
.UE
RawIdentifiers‚Äù section)\. Identifiers are namesof functions, variables, parameters, struct fields, modules, crates, constants,macros, static values, attributes, types, traits, or lifetimes\.
.br

.br
\fBKeywords Currently in Use\fR
.br
===========================
.br

.P
The following is a list of keywords currently in use, with their functionalitydescribed\.`\fIas\fR` \- perform primitive casting, disambiguate the specific trait containingan item, or rename items in `\fIuse\fR` statements`\fIasync\fR` \-  return a `\fIFuture\fR` instead of blocking the current thread`\fIawait\fR` \- suspend execution until the result of a `\fIFuture\fR` is ready`\fIbreak\fR` \- exit a loop immediately`\fIconst\fR` \- define constant items or constant raw pointers`\fIcontinue\fR` \- continue to the next loop iteration`\fIcrate\fR` \- in a module path, refers to the crate root`\fIdyn\fR` \- dynamic dispatch to a trait object`\fIelse\fR` \- fallback for `\fIif\fR` and `\fIif let\fR` control flow constructs`\fIenum\fR` \- define an enumeration`\fIextern\fR` \- link an external function or variable`\fIfalse\fR` \- Boolean false literal`\fIfn\fR` \- define a function or the function pointer type`\fIfor\fR` \- loop over items from an iterator, implement a trait, or specify ahigher\-ranked lifetime`\fIif\fR` \- branch based on the result of a conditional expression`\fIimpl\fR` \- implement inherent or trait functionality`\fIin\fR` \- part of `\fIfor\fR` loop syntax`\fIlet\fR` \- bind a variable`\fIloop\fR` \- loop unconditionally`\fImatch\fR` \- match a value to patterns`\fImod\fR` \- define a module`\fImove\fR` \- make a closure take ownership of all its captures`\fImut\fR` \- denote mutability in references, raw pointers, or pattern bindings`\fIpub\fR` \- denote public visibility in struct fields, `\fIimpl\fR` blocks, or modules`\fIref\fR` \- bind by reference`\fIreturn\fR` \- return from function`\fISelf\fR` \- a type alias for the type we are defining or implementing`\fIself\fR` \- method subject or current module`\fIstatic\fR` \- global variable or lifetime lasting the entire program execution`\fIstruct\fR` \- define a structure`\fIsuper\fR` \- parent module of the current module`\fItrait\fR` \- define a trait`\fItrue\fR` \- Boolean true literal`\fItype\fR` \- define a type alias or associated type`\fIunion\fR` \- define a 
.UR \.\./reference/items/unions\.html
.UE
union; is only a keyword when usedin a union declaration`\fIunsafe\fR` \- denote unsafe code, functions, traits, or implementations`\fIuse\fR` \- bring symbols into scope`\fIwhere\fR` \- denote clauses that constrain a type`\fIwhile\fR` \- loop conditionally based on the result of an expression
.br

.br
\fBKeywords Reserved for Future Use\fR
.br
==================================
.br

.P
The following keywords do not yet have any functionality but are reserved byRust for potential future use\.`\fIabstract\fR``\fIbecome\fR``\fIbox\fR``\fIdo\fR``\fIfinal\fR``\fImacro\fR``\fIoverride\fR``\fIpriv\fR``\fItry\fR``\fItypeof\fR``\fIunsized\fR``\fIvirtual\fR``\fIyield\fR`
.br

.br
\fBRaw Identifiers\fR
.br
=================
.br
\fIRaw identifiers\fR are the syntax that lets you use keywords where they wouldn‚Äôtnormally be allowed\. You use a raw identifier by prefixing a keyword with `\fIr#\fR`\.
.P
For example, `\fImatch\fR` is a keyword\. If you try to compile the following functionthat uses `\fImatch\fR` as its name:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn match(needle: &str, haystack: &str) \-> bool {
    haystack\.contains(needle)
}

.EE

.RE
.P
you‚Äôll get this error:
.RS
.IP \fBtext\fR 2

.br
.EX
error: expected identifier, found keyword `match`
 \-\-> src/main\.rs:4:4
  |
4 | fn match(needle: &str, haystack: &str) \-> bool {
  |    ^^^^^ expected identifier, found keyword

.EE

.RE
.P
The error shows that you can‚Äôt use the keyword `\fImatch\fR` as the functionidentifier\. To use `\fImatch\fR` as a function name, you need to use the rawidentifier syntax, like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn r#match(needle: &str, haystack: &str) \-> bool {
    haystack\.contains(needle)
}

fn main() {
    assert!(r#match("foo", "foobar"));
}

.EE

.RE
.P
This code will compile without any errors\. Note the `\fIr#\fR` prefix on the functionname in its definition as well as where the function is called in `\fImain\fR`\.
.P
Raw identifiers allow you to use any word you choose as an identifier, even ifthat word happens to be a reserved keyword\. This gives us more freedom tochoose identifier names, as well as lets us integrate with programs written ina language where these words aren‚Äôt keywords\. In addition, raw identifiersallow you to use libraries written in a different Rust edition than your crateuses\. For example, `\fItry\fR` isn‚Äôt a keyword in the 2015 edition but is in the 2018edition\. If you depend on a library that‚Äôs written using the 2015 edition andhas a `\fItry\fR` function, you‚Äôll need to use the raw identifier syntax, `\fIr#try\fR` inthis case, to call that function from your 2018 edition code\. See 
.UR appendix\-05\-editions\.html
.UE
AppendixE for more information on editions\.
.SH "B \- Operators and Symbols"

.br

.br
\fBAppendix B: Operators and Symbols\fR
.br
===================================
.br

.P
This appendix contains a glossary of Rust‚Äôs syntax, including operators andother symbols that appear by themselves or in the context of paths, generics,trait bounds, macros, attributes, comments, tuples, and brackets\.
.br

.br
\fBOperators\fR
.br
===========
.br

.P
Table B\-1 contains the operators in Rust, an example of how the operator wouldappear in context, a short explanation, and whether that operator isoverloadable\. If an operator is overloadable, the relevant trait to use tooverload that operator is listed\.Table B\-1: Operators
.P
| Operator | Example | Explanation | Overloadable? ||\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI!\fR` | `\fIident!(\.\.\.)\fR`, `\fIident!{\.\.\.}\fR`, `\fIident![\.\.\.]\fR` | Macro expansion | || `\fI!\fR` | `\fI!expr\fR` | Bitwise or logical complement | `\fINot\fR` || `\fI!=\fR` | `\fIexpr != expr\fR` | Nonequality comparison | `\fIPartialEq\fR` || `\fI%\fR` | `\fIexpr % expr\fR` | Arithmetic remainder | `\fIRem\fR` || `\fI%=\fR` | `\fIvar %= expr\fR` | Arithmetic remainder and assignment | `\fIRemAssign\fR` || `\fI&\fR` | `\fI&expr\fR`, `\fI&mut expr\fR` | Borrow | || `\fI&\fR` | `\fI&type\fR`, `\fI&mut type\fR`, `\fI&'a type\fR`, `\fI&'a mut type\fR` | Borrowed pointer type | || `\fI&\fR` | `\fIexpr & expr\fR` | Bitwise AND | `\fIBitAnd\fR` || `\fI&=\fR` | `\fIvar &= expr\fR` | Bitwise AND and assignment | `\fIBitAndAssign\fR` || `\fI&&\fR` | `\fIexpr && expr\fR` | Short\-circuiting logical AND | || `\fI*\fR` | `\fIexpr * expr\fR` | Arithmetic multiplication | `\fIMul\fR` || `\fI*=\fR` | `\fIvar *= expr\fR` | Arithmetic multiplication and assignment | `\fIMulAssign\fR` || `\fI*\fR` | `\fI*expr\fR` | Dereference | `\fIDeref\fR` || `\fI*\fR` | `\fI*const type\fR`, `\fI*mut type\fR` | Raw pointer | || `\fI+\fR` | `\fItrait + trait\fR`, `\fI'a + trait\fR` | Compound type constraint | || `\fI+\fR` | `\fIexpr + expr\fR` | Arithmetic addition | `\fIAdd\fR` || `\fI+=\fR` | `\fIvar += expr\fR` | Arithmetic addition and assignment | `\fIAddAssign\fR` || `\fI,\fR` | `\fIexpr, expr\fR` | Argument and element separator | || `\fI\-\fR` | `\fI\- expr\fR` | Arithmetic negation | `\fINeg\fR` || `\fI\-\fR` | `\fIexpr \- expr\fR` | Arithmetic subtraction | `\fISub\fR` || `\fI\-=\fR` | `\fIvar \-= expr\fR` | Arithmetic subtraction and assignment | `\fISubAssign\fR` || `\fI\->\fR` | `\fIfn(\.\.\.) \-> type\fR`, |\.\.\.| \-> type | Function and closure return type | || `\fI\.\fR` | `\fIexpr\.ident\fR` | Member access | || `\fI\.\.\fR` | `\fI\.\.\fR`, `\fIexpr\.\.\fR`, `\fI\.\.expr\fR`, `\fIexpr\.\.expr\fR` | Right\-exclusive range literal | `\fIPartialOrd\fR` || `\fI\.\.=\fR` | `\fI\.\.=expr\fR`, `\fIexpr\.\.=expr\fR` | Right\-inclusive range literal | `\fIPartialOrd\fR` || `\fI\.\.\fR` | `\fI\.\.expr\fR` | Struct literal update syntax | || `\fI\.\.\fR` | `\fIvariant(x, \.\.)\fR`, `\fIstruct_type { x, \.\. }\fR` | ‚ÄúAnd the rest‚Äù pattern binding | || `\fI\.\.\.\fR` | `\fIexpr\.\.\.expr\fR` | (Deprecated, use `\fI\.\.=\fR` instead) In a pattern: inclusive range pattern | || `\fI/\fR` | `\fIexpr / expr\fR` | Arithmetic division | `\fIDiv\fR` || `\fI/=\fR` | `\fIvar /= expr\fR` | Arithmetic division and assignment | `\fIDivAssign\fR` || `\fI:\fR` | `\fIpat: type\fR`, `\fIident: type\fR` | Constraints | || `\fI:\fR` | `\fIident: expr\fR` | Struct field initializer | || `\fI:\fR` | `\fI'a: loop {\.\.\.}\fR` | Loop label | || `\fI;\fR` | `\fIexpr;\fR` | Statement and item terminator | || `\fI;\fR` | `\fI[\.\.\.; len]\fR` | Part of fixed\-size array syntax | || `\fI<<\fR` | `\fIexpr << expr\fR` | Left\-shift | `\fIShl\fR` || `\fI<<=\fR` | `\fIvar <<= expr\fR` | Left\-shift and assignment | `\fIShlAssign\fR` || `\fI<\fR` | `\fIexpr < expr\fR` | Less than comparison | `\fIPartialOrd\fR` || `\fI<=\fR` | `\fIexpr <= expr\fR` | Less than or equal to comparison | `\fIPartialOrd\fR` || `\fI=\fR` | `\fIvar = expr\fR`, `\fIident = type\fR` | Assignment/equivalence | || `\fI==\fR` | `\fIexpr == expr\fR` | Equality comparison | `\fIPartialEq\fR` || `\fI=>\fR` | `\fIpat => expr\fR` | Part of match arm syntax | || `\fI>\fR` | `\fIexpr > expr\fR` | Greater than comparison | `\fIPartialOrd\fR` || `\fI>=\fR` | `\fIexpr >= expr\fR` | Greater than or equal to comparison | `\fIPartialOrd\fR` || `\fI>>\fR` | `\fIexpr >> expr\fR` | Right\-shift | `\fIShr\fR` || `\fI>>=\fR` | `\fIvar >>= expr\fR` | Right\-shift and assignment | `\fIShrAssign\fR` || `\fI@\fR` | `\fIident @ pat\fR` | Pattern binding | || `\fI^\fR` | `\fIexpr ^ expr\fR` | Bitwise exclusive OR | `\fIBitXor\fR` || `\fI^=\fR` | `\fIvar ^= expr\fR` | Bitwise exclusive OR and assignment | `\fIBitXorAssign\fR` || | | pat | pat | Pattern alternatives | || | | expr | expr | Bitwise OR | `\fIBitOr\fR` || |= | var |= expr | Bitwise OR and assignment | `\fIBitOrAssign\fR` || || | expr || expr | Short\-circuiting logical OR | || `\fI?\fR` | `\fIexpr?\fR` | Error propagation | |
.br

.br
\fBNon\-operator Symbols\fR
.br
======================
.br

.P
The following list contains all symbols that don‚Äôt function as operators; thatis, they don‚Äôt behave like a function or method call\.
.P
Table B\-2 shows symbols that appear on their own and are valid in a variety oflocations\.Table B\-2: Stand\-Alone Syntax
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI'ident\fR` | Named lifetime or loop label || `\fI\.\.\.u8\fR`, `\fI\.\.\.i32\fR`, `\fI\.\.\.f64\fR`, `\fI\.\.\.usize\fR`, etc\. | Numeric literal of specific type || `\fI"\.\.\."\fR` | String literal || `\fIr"\.\.\."\fR`, `\fIr#"\.\.\."#\fR`, `\fIr##"\.\.\."##\fR`, etc\. | Raw string literal, escape characters not processed || `\fIb"\.\.\."\fR` | Byte string literal; constructs an array of bytes instead of a string || `\fIbr"\.\.\."\fR`, `\fIbr#"\.\.\."#\fR`, `\fIbr##"\.\.\."##\fR`, etc\. | Raw byte string literal, combination of raw and byte string literal || `\fI'\.\.\.'\fR` | Character literal || `\fIb'\.\.\.'\fR` | ASCII byte literal || |\.\.\.| expr | Closure || `\fI!\fR` | Always empty bottom type for diverging functions || `\fI_\fR` | ‚ÄúIgnored‚Äù pattern binding; also used to make integer literals readable |
.P
Table B\-3 shows symbols that appear in the context of a path through the modulehierarchy to an item\.Table B\-3: Path\-Related Syntax
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fIident::ident\fR` | Namespace path || `\fI::path\fR` | Path relative to the crate root (i\.e\., an explicitly absolute path) || `\fIself::path\fR` | Path relative to the current module (i\.e\., an explicitly relative path)\.| `\fIsuper::path\fR` | Path relative to the parent of the current module || `\fItype::ident\fR`, `\fI<type as trait>::ident\fR` | Associated constants, functions, and types || `\fI<type>::\.\.\.\fR` | Associated item for a type that cannot be directly named (e\.g\., `\fI<&T>::\.\.\.\fR`, `\fI<[T]>::\.\.\.\fR`, etc\.) || `\fItrait::method(\.\.\.)\fR` | Disambiguating a method call by naming the trait that defines it || `\fItype::method(\.\.\.)\fR` | Disambiguating a method call by naming the type for which it‚Äôs defined || `\fI<type as trait>::method(\.\.\.)\fR` | Disambiguating a method call by naming the trait and type |
.P
Table B\-4 shows symbols that appear in the context of using generic typeparameters\.Table B\-4: Generics
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fIpath<\.\.\.>\fR` | Specifies parameters to generic type in a type (e\.g\., `\fIVec<u8>\fR`) || `\fIpath::<\.\.\.>\fR`, `\fImethod::<\.\.\.>\fR` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e\.g\., `\fI"42"\.parse::<i32>()\fR`) || `\fIfn ident<\.\.\.> \.\.\.\fR` | Define generic function || `\fIstruct ident<\.\.\.> \.\.\.\fR` | Define generic structure || `\fIenum ident<\.\.\.> \.\.\.\fR` | Define generic enumeration || `\fIimpl<\.\.\.> \.\.\.\fR` | Define generic implementation || `\fIfor<\.\.\.> type\fR` | Higher\-ranked lifetime bounds || `\fItype<ident=type>\fR` | A generic type where one or more associated types have specific assignments (e\.g\., `\fIIterator<Item=T>\fR`) |
.P
Table B\-5 shows symbols that appear in the context of constraining generic typeparameters with trait bounds\.Table B\-5: Trait Bound Constraints
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fIT: U\fR` | Generic parameter `\fIT\fR` constrained to types that implement `\fIU\fR` || `\fIT: 'a\fR` | Generic type `\fIT\fR` must outlive lifetime `\fI'a\fR` (meaning the type cannot transitively contain any references with lifetimes shorter than `\fI'a\fR`) || `\fIT: 'static\fR` | Generic type `\fIT\fR` contains no borrowed references other than `\fI'static\fR` ones || `\fI'b: 'a\fR` | Generic lifetime `\fI'b\fR` must outlive lifetime `\fI'a\fR` || `\fIT: ?Sized\fR` | Allow generic type parameter to be a dynamically sized type || `\fI'a + trait\fR`, `\fItrait + trait\fR` | Compound type constraint |
.P
Table B\-6 shows symbols that appear in the context of calling or definingmacros and specifying attributes on an item\.Table B\-6: Macros and Attributes
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI#[meta]\fR` | Outer attribute || `\fI#![meta]\fR` | Inner attribute || `\fI$ident\fR` | Macro substitution || `\fI$ident:kind\fR` | Macro capture || `\fI$(‚Ä¶)‚Ä¶\fR` | Macro repetition || `\fIident!(\.\.\.)\fR`, `\fIident!{\.\.\.}\fR`, `\fIident![\.\.\.]\fR` | Macro invocation |
.P
Table B\-7 shows symbols that create comments\.Table B\-7: Comments
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI//\fR` | Line comment || `\fI//!\fR` | Inner line doc comment || `\fI///\fR` | Outer line doc comment || `\fI/*\.\.\.*/\fR` | Block comment || `\fI/*!\.\.\.*/\fR` | Inner block doc comment || `\fI/**\.\.\.*/\fR` | Outer block doc comment |
.P
Table B\-8 shows symbols that appear in the context of using tuples\.Table B\-8: Tuples
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI()\fR` | Empty tuple (aka unit), both literal and type || `\fI(expr)\fR` | Parenthesized expression || `\fI(expr,)\fR` | Single\-element tuple expression || `\fI(type,)\fR` | Single\-element tuple type || `\fI(expr, \.\.\.)\fR` | Tuple expression || `\fI(type, \.\.\.)\fR` | Tuple type || `\fIexpr(expr, \.\.\.)\fR` | Function call expression; also used to initialize tuple `\fIstruct\fR`s and tuple `\fIenum\fR` variants || `\fIexpr\.0\fR`, `\fIexpr\.1\fR`, etc\. | Tuple indexing |
.P
Table B\-9 shows the contexts in which curly braces are used\.Table B\-9: Curly Brackets
.P
| Context | Explanation ||\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI{\.\.\.}\fR` | Block expression || `\fIType {\.\.\.}\fR` | `\fIstruct\fR` literal |
.P
Table B\-10 shows the contexts in which square brackets are used\.Table B\-10: Square Brackets
.P
| Context | Explanation ||\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI[\.\.\.]\fR` | Array literal || `\fI[expr; len]\fR` | Array literal containing `\fIlen\fR` copies of `\fIexpr\fR` || `\fI[type; len]\fR` | Array type containing `\fIlen\fR` instances of `\fItype\fR` || `\fIexpr[expr]\fR` | Collection indexing\. Overloadable (`\fIIndex\fR`, `\fIIndexMut\fR`) || `\fIexpr[\.\.]\fR`, `\fIexpr[a\.\.]\fR`, `\fIexpr[\.\.b]\fR`, `\fIexpr[a\.\.b]\fR` | Collection indexing pretending to be collection slicing, using `\fIRange\fR`, `\fIRangeFrom\fR`, `\fIRangeTo\fR`, or `\fIRangeFull\fR` as the ‚Äúindex‚Äù |
.SH "C \- Derivable Traits"

.br

.br
\fBAppendix C: Derivable Traits\fR
.br
==============================
.br

.P
In various places in the book, we‚Äôve discussed the `\fIderive\fR` attribute, whichyou can apply to a struct or enum definition\. The `\fIderive\fR` attribute generatescode that will implement a trait with its own default implementation on thetype you‚Äôve annotated with the `\fIderive\fR` syntax\.
.P
In this appendix, we provide a reference of all the traits in the standardlibrary that you can use with `\fIderive\fR`\. Each section covers:
.P
What operators and methods deriving this trait will enable
.P
What the implementation of the trait provided by `\fIderive\fR` does
.P
What implementing the trait signifies about the type
.P
The conditions in which you‚Äôre allowed or not allowed to implement the trait
.P
Examples of operations that require the trait
.P
If you want different behavior from that provided by the `\fIderive\fR` attribute,consult the 
.UR \.\./std/index\.html
.UE
standard library documentationfor each trait for details of how to manually implement them\.
.P
These traits listed here are the only ones defined by the standard library thatcan be implemented on your types using `\fIderive\fR`\. Other traits defined in thestandard library don‚Äôt have sensible default behavior, so it‚Äôs up to you toimplement them in the way that makes sense for what you‚Äôre trying to accomplish\.
.P
An example of a trait that can‚Äôt be derived is `\fIDisplay\fR`, which handlesformatting for end users\. You should always consider the appropriate way todisplay a type to an end user\. What parts of the type should an end user beallowed to see? What parts would they find relevant? What format of the datawould be most relevant to them? The Rust compiler doesn‚Äôt have this insight, soit can‚Äôt provide appropriate default behavior for you\.
.P
The list of derivable traits provided in this appendix is not comprehensive:libraries can implement `\fIderive\fR` for their own traits, making the list oftraits you can use `\fIderive\fR` with truly open\-ended\. Implementing `\fIderive\fR`involves using a procedural macro, which is covered in the
.UR ch19\-06\-macros\.html#macros
.UE
‚ÄúMacros‚Äù section of Chapter 19\.`\fIDebug\fR` for Programmer Output
.P
The `\fIDebug\fR` trait enables debug formatting in format strings, which youindicate by adding `\fI:?\fR` within `\fI{}\fR` placeholders\.
.P
The `\fIDebug\fR` trait allows you to print instances of a type for debuggingpurposes, so you and other programmers using your type can inspect an instanceat a particular point in a program‚Äôs execution\.
.P
The `\fIDebug\fR` trait is required, for example, in use of the `\fIassert_eq!\fR` macro\.This macro prints the values of instances given as arguments if the equalityassertion fails so programmers can see why the two instances weren‚Äôt equal\.`\fIPartialEq\fR` and `\fIEq\fR` for Equality Comparisons
.P
The `\fIPartialEq\fR` trait allows you to compare instances of a type to check forequality and enables use of the `\fI==\fR` and `\fI!=\fR` operators\.
.P
Deriving `\fIPartialEq\fR` implements the `\fIeq\fR` method\. When `\fIPartialEq\fR` is derived onstructs, two instances are equal only if \fIall\fR fields are equal, and theinstances are not equal if any fields are not equal\. When derived on enums,each variant is equal to itself and not equal to the other variants\.
.P
The `\fIPartialEq\fR` trait is required, for example, with the use of the`\fIassert_eq!\fR` macro, which needs to be able to compare two instances of a typefor equality\.
.P
The `\fIEq\fR` trait has no methods\. Its purpose is to signal that for every value ofthe annotated type, the value is equal to itself\. The `\fIEq\fR` trait can only beapplied to types that also implement `\fIPartialEq\fR`, although not all types thatimplement `\fIPartialEq\fR` can implement `\fIEq\fR`\. One example of this is floating pointnumber types: the implementation of floating point numbers states that twoinstances of the not\-a\-number (`\fINaN\fR`) value are not equal to each other\.
.P
An example of when `\fIEq\fR` is required is for keys in a `\fIHashMap<K, V>\fR` so the`\fIHashMap<K, V>\fR` can tell whether two keys are the same\.`\fIPartialOrd\fR` and `\fIOrd\fR` for Ordering Comparisons
.P
The `\fIPartialOrd\fR` trait allows you to compare instances of a type for sortingpurposes\. A type that implements `\fIPartialOrd\fR` can be used with the `\fI<\fR`, `\fI>\fR`,`\fI<=\fR`, and `\fI>=\fR` operators\. You can only apply the `\fIPartialOrd\fR` trait to typesthat also implement `\fIPartialEq\fR`\.
.P
Deriving `\fIPartialOrd\fR` implements the `\fIpartial_cmp\fR` method, which returns an`\fIOption<Ordering>\fR` that will be `\fINone\fR` when the values given don‚Äôt produce anordering\. An example of a value that doesn‚Äôt produce an ordering, even thoughmost values of that type can be compared, is the not\-a\-number (`\fINaN\fR`) floatingpoint value\. Calling `\fIpartial_cmp\fR` with any floating point number and the `\fINaN\fR`floating point value will return `\fINone\fR`\.
.P
When derived on structs, `\fIPartialOrd\fR` compares two instances by comparing thevalue in each field in the order in which the fields appear in the structdefinition\. When derived on enums, variants of the enum declared earlier in theenum definition are considered less than the variants listed later\.
.P
The `\fIPartialOrd\fR` trait is required, for example, for the `\fIgen_range\fR` methodfrom the `\fIrand\fR` crate that generates a random value in the range specified by arange expression\.
.P
The `\fIOrd\fR` trait allows you to know that for any two values of the annotatedtype, a valid ordering will exist\. The `\fIOrd\fR` trait implements the `\fIcmp\fR` method,which returns an `\fIOrdering\fR` rather than an `\fIOption<Ordering>\fR` because a validordering will always be possible\. You can only apply the `\fIOrd\fR` trait to typesthat also implement `\fIPartialOrd\fR` and `\fIEq\fR` (and `\fIEq\fR` requires `\fIPartialEq\fR`)\. Whenderived on structs and enums, `\fIcmp\fR` behaves the same way as the derivedimplementation for `\fIpartial_cmp\fR` does with `\fIPartialOrd\fR`\.
.P
An example of when `\fIOrd\fR` is required is when storing values in a `\fIBTreeSet<T>\fR`,a data structure that stores data based on the sort order of the values\.`\fIClone\fR` and `\fICopy\fR` for Duplicating Values
.P
The `\fIClone\fR` trait allows you to explicitly create a deep copy of a value, andthe duplication process might involve running arbitrary code and copying heapdata\. See the 
.UR ch04\-01\-what\-is\-ownership\.html#ways\-variables\-and\-data\-interact\-clone
.UE
‚ÄúWays Variables and Data Interact:Clone‚Äù section inChapter 4 for more information on `\fIClone\fR`\.
.P
Deriving `\fIClone\fR` implements the `\fIclone\fR` method, which when implemented for thewhole type, calls `\fIclone\fR` on each of the parts of the type\. This means all thefields or values in the type must also implement `\fIClone\fR` to derive `\fIClone\fR`\.
.P
An example of when `\fIClone\fR` is required is when calling the `\fIto_vec\fR` method on aslice\. The slice doesn‚Äôt own the type instances it contains, but the vectorreturned from `\fIto_vec\fR` will need to own its instances, so `\fIto_vec\fR` calls`\fIclone\fR` on each item\. Thus, the type stored in the slice must implement `\fIClone\fR`\.
.P
The `\fICopy\fR` trait allows you to duplicate a value by only copying bits stored onthe stack; no arbitrary code is necessary\. See the 
.UR ch04\-01\-what\-is\-ownership\.html#stack\-only\-data\-copy
.UE
‚ÄúStack\-Only Data:Copy‚Äù section in Chapter 4 for moreinformation on `\fICopy\fR`\.
.P
The `\fICopy\fR` trait doesn‚Äôt define any methods to prevent programmers fromoverloading those methods and violating the assumption that no arbitrary codeis being run\. That way, all programmers can assume that copying a value will bevery fast\.
.P
You can derive `\fICopy\fR` on any type whose parts all implement `\fICopy\fR`\. A type thatimplements `\fICopy\fR` must also implement `\fIClone\fR`, because a type that implements`\fICopy\fR` has a trivial implementation of `\fIClone\fR` that performs the same task as`\fICopy\fR`\.
.P
The `\fICopy\fR` trait is rarely required; types that implement `\fICopy\fR` haveoptimizations available, meaning you don‚Äôt have to call `\fIclone\fR`, which makesthe code more concise\.
.P
Everything possible with `\fICopy\fR` you can also accomplish with `\fIClone\fR`, but thecode might be slower or have to use `\fIclone\fR` in places\.`\fIHash\fR` for Mapping a Value to a Value of Fixed Size
.P
The `\fIHash\fR` trait allows you to take an instance of a type of arbitrary size andmap that instance to a value of fixed size using a hash function\. Deriving`\fIHash\fR` implements the `\fIhash\fR` method\. The derived implementation of the `\fIhash\fR`method combines the result of calling `\fIhash\fR` on each of the parts of the type,meaning all fields or values must also implement `\fIHash\fR` to derive `\fIHash\fR`\.
.P
An example of when `\fIHash\fR` is required is in storing keys in a `\fIHashMap<K, V>\fR`to store data efficiently\.`\fIDefault\fR` for Default Values
.P
The `\fIDefault\fR` trait allows you to create a default value for a type\. Deriving`\fIDefault\fR` implements the `\fIdefault\fR` function\. The derived implementation of the`\fIdefault\fR` function calls the `\fIdefault\fR` function on each part of the type,meaning all fields or values in the type must also implement `\fIDefault\fR` toderive `\fIDefault\fR`\.
.P
The `\fIDefault::default\fR` function is commonly used in combination with the structupdate syntax discussed in the 
.UR ch05\-01\-defining\-structs\.html#creating\-instances\-from\-other\-instances\-with\-struct\-update\-syntax
.UE
‚ÄúCreating Instances From Other Instances WithStruct UpdateSyntax‚Äùsection in Chapter 5\. You can customize a few fields of a struct and thenset and use a default value for the rest of the fields by using`\fI\.\.Default::default()\fR`\.
.P
The `\fIDefault\fR` trait is required when you use the method `\fIunwrap_or_default\fR` on`\fIOption<T>\fR` instances, for example\. If the `\fIOption<T>\fR` is `\fINone\fR`, the method`\fIunwrap_or_default\fR` will return the result of `\fIDefault::default\fR` for the type`\fIT\fR` stored in the `\fIOption<T>\fR`\.
.SH "D \- Useful Development Tools"

.br

.br
\fBAppendix D \- Useful Development Tools\fR
.br
=======================================
.br

.P
In this appendix, we talk about some useful development tools that the Rustproject provides\. We‚Äôll look at automatic formatting, quick ways to applywarning fixes, a linter, and integrating with IDEs\.
.br

.br
\fBAutomatic Formatting with \fR
.br
============================
.br
`\fIrustfmt\fR`
.P
The `\fIrustfmt\fR` tool reformats your code according to the community code style\.Many collaborative projects use `\fIrustfmt\fR` to prevent arguments about whichstyle to use when writing Rust: everyone formats their code using the tool\.
.P
To install `\fIrustfmt\fR`, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup component add rustfmt

.EE

.RE
.P
This command gives you `\fIrustfmt\fR` and `\fIcargo\-fmt\fR`, similar to how Rust gives youboth `\fIrustc\fR` and `\fIcargo\fR`\. To format any Cargo project, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo fmt

.EE

.RE
.P
Running this command reformats all the Rust code in the current crate\. Thisshould only change the code style, not the code semantics\. For more informationon `\fIrustfmt\fR`, see 
.UR https://github\.com/rust\-lang/rustfmt
.UE
its documentation\.
.br

.br
\fBFix Your Code with \fR
.br
=====================
.br
`\fIrustfix\fR`
.P
The rustfix tool is included with Rust installations and can automatically fixcompiler warnings that have a clear way to correct the problem that‚Äôs likelywhat you want\. It‚Äôs likely you‚Äôve seen compiler warnings before\. For example,consider this code:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn do_something() {}

fn main() {
    for i in 0\.\.100 {
        do_something();
    }
}

.EE

.RE
.P
Here, we‚Äôre calling the `\fIdo_something\fR` function 100 times, but we never use thevariable `\fIi\fR` in the body of the `\fIfor\fR` loop\. Rust warns us about that:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling myprogram v0\.1\.0 (file:///projects/myprogram)
warning: unused variable: `i`
 \-\-> src/main\.rs:4:9
  |
4 |     for i in 0\.\.100 {
  |         ^ help: consider using `_i` instead
  |
  = note: #[warn(unused_variables)] on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0\.50s

.EE

.RE
.P
The warning suggests that we use `\fI_i\fR` as a name instead: the underscoreindicates that we intend for this variable to be unused\. We can automaticallyapply that suggestion using the `\fIrustfix\fR` tool by running the command `\fIcargo fix\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo fix
    Checking myprogram v0\.1\.0 (file:///projects/myprogram)
      Fixing src/main\.rs (1 fix)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.59s

.EE

.RE
.P
When we look at \fIsrc/main\.rs\fR again, we‚Äôll see that `\fIcargo fix\fR` has changed thecode:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn do_something() {}

fn main() {
    for _i in 0\.\.100 {
        do_something();
    }
}

.EE

.RE
.P
The `\fIfor\fR` loop variable is now named `\fI_i\fR`, and the warning no longer appears\.
.P
You can also use the `\fIcargo fix\fR` command to transition your code betweendifferent Rust editions\. Editions are covered in Appendix E\.
.br

.br
\fBMore Lints with Clippy\fR
.br
========================
.br

.P
The Clippy tool is a collection of lints to analyze your code so you can catchcommon mistakes and improve your Rust code\.
.P
To install Clippy, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup component add clippy

.EE

.RE
.P
To run Clippy‚Äôs lints on any Cargo project, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo clippy

.EE

.RE
.P
For example, say you write a program that uses an approximation of amathematical constant, such as pi, as this program does:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 3\.1415;
    let r = 8\.0;
    println!("the area of the circle is {}", x * r * r);
}

.EE

.RE
.P
Running `\fIcargo clippy\fR` on this project results in this error:
.RS
.IP \fBtext\fR 2

.br
.EX
error: approximate value of `f{32, 64}::consts::PI` found
 \-\-> src/main\.rs:2:13
  |
2 |     let x = 3\.1415;
  |             ^^^^^^
  |
  = note: `#[deny(clippy::approx_constant)]` on by default
  = help: consider using the constant directly
  = help: for further information visit https://rust\-lang\.github\.io/rust\-clippy/master/index\.html#approx_constant

.EE

.RE
.P
This error lets you know that Rust already has a more precise `\fIPI\fR` constantdefined, and that your program would be more correct if you used the constantinstead\. You would then change your code to use the `\fIPI\fR` constant\. Thefollowing code doesn‚Äôt result in any errors or warnings from Clippy:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = std::f64::consts::PI;
    let r = 8\.0;
    println!("the area of the circle is {}", x * r * r);
}

.EE

.RE
.P
For more information on Clippy, see 
.UR https://github\.com/rust\-lang/rust\-clippy
.UE
its documentation\.
.br

.br
\fBIDE Integration Using \fR
.br
========================
.br
`\fIrust\-analyzer\fR`
.P
To help IDE integration, the Rust community recommends using
.UR https://rust\-analyzer\.github\.io
.UE
`\fIrust\-analyzer\fR`\. This tool is a set ofcompiler\-centric utilities that speaks the 
.UR http://langserver\.org/
.UE
Language Server Protocol, which is a specification for IDEs and programming languages tocommunicate with each other\. Different clients can use `\fIrust\-analyzer\fR`, such as
.UR https://marketplace\.visualstudio\.com/items?itemName=rust\-lang\.rust\-analyzer
.UE
the Rust analyzer plug\-in for Visual Studio Code\.
.P
Visit the `\fIrust\-analyzer\fR` project‚Äôs 
.UR https://rust\-analyzer\.github\.io
.UE
home page for installationinstructions, then install the language server support in your particular IDE\.Your IDE will gain abilities such as autocompletion, jump to definition, andinline errors\.
.SH "E \- Editions"

.br

.br
\fBAppendix E \- Editions\fR
.br
=======================
.br

.P
In Chapter 1, you saw that `\fIcargo new\fR` adds a bit of metadata to your\fICargo\.toml\fR file about an edition\. This appendix talks about what that means!
.P
The Rust language and compiler have a six\-week release cycle, meaning users geta constant stream of new features\. Other programming languages release largerchanges less often; Rust releases smaller updates more frequently\. After awhile, all of these tiny changes add up\. But from release to release, it can bedifficult to look back and say, ‚ÄúWow, between Rust 1\.10 and Rust 1\.31, Rust haschanged a lot!‚Äù
.P
Every two or three years, the Rust team produces a new Rust \fIedition\fR\. Eachedition brings together the features that have landed into a clear package withfully updated documentation and tooling\. New editions ship as part of the usualsix\-week release process\.
.P
Editions serve different purposes for different people:
.P
For active Rust users, a new edition brings together incremental changes intoan easy\-to\-understand package\.
.P
For non\-users, a new edition signals that some major advancements havelanded, which might make Rust worth another look\.
.P
For those developing Rust, a new edition provides a rallying point for theproject as a whole\.
.P
At the time of this writing, three Rust editions are available: Rust 2015, Rust2018, and Rust 2021\. This book is written using Rust 2021 edition idioms\.
.P
The `\fIedition\fR` key in \fICargo\.toml\fR indicates which edition the compiler shoulduse for your code\. If the key doesn‚Äôt exist, Rust uses `\fI2015\fR` as the editionvalue for backward compatibility reasons\.
.P
Each project can opt in to an edition other than the default 2015 edition\.Editions can contain incompatible changes, such as including a new keyword thatconflicts with identifiers in code\. However, unless you opt in to thosechanges, your code will continue to compile even as you upgrade the Rustcompiler version you use\.
.P
All Rust compiler versions support any edition that existed prior to thatcompiler‚Äôs release, and they can link crates of any supported editionstogether\. Edition changes only affect the way the compiler initially parsescode\. Therefore, if you‚Äôre using Rust 2015 and one of your dependencies usesRust 2018, your project will compile and be able to use that dependency\. Theopposite situation, where your project uses Rust 2018 and a dependency usesRust 2015, works as well\.
.P
To be clear: most features will be available on all editions\. Developers usingany Rust edition will continue to see improvements as new stable releases aremade\. However, in some cases, mainly when new keywords are added, some newfeatures might only be available in later editions\. You will need to switcheditions if you want to take advantage of such features\.
.P
For more details, the 
.UR https://doc\.rust\-lang\.org/stable/edition\-guide/
.UE
\fIEdition\fRGuide is a complete bookabout editions that enumerates the differences between editions and explainshow to automatically upgrade your code to a new edition via `\fIcargo fix\fR`\.
.SH "F \- Translations of the Book"

.br

.br
\fBAppendix F: Translations of the Book\fR
.br
======================================
.br

.P
For resources in languages other than English\. Most are still in progress; see
.UR https://github\.com/rust\-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations
.UE
the Translations label to help or let us know about a new translation!
.UR https://github\.com/rust\-br/rust\-book\-pt\-br
.UE
Portugu√™s (BR)
.UR https://github\.com/nunojesus/rust\-book\-pt\-pt
.UE
Portugu√™s (PT)
.UR https://github\.com/KaiserY/trpl\-zh\-cn
.UE
ÁÆÄ‰Ωì‰∏≠Êñá
.UR https://github\.com/rust\-tw/book\-tw
.UE
Ê≠£È´î‰∏≠Êñá
.UR https://github\.com/pavloslav/rust\-book\-uk\-ua
.UE
–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
.UR https://github\.com/thecodix/book
.UE
Espa√±ol, 
.UR https://github\.com/ManRR/rust\-book\-es
.UE
alternate
.UR https://github\.com/Ciro\-Fusco/book_it
.UE
Italiano
.UR https://github\.com/rust\-lang\-ru/book
.UE
–†—É—Å—Å–∫–∏–π
.UR https://github\.com/rinthel/rust\-lang\-book\-ko
.UE
ÌïúÍµ≠Ïñ¥
.UR https://github\.com/rust\-lang\-ja/book\-ja
.UE
Êó•Êú¨Ë™û
.UR https://github\.com/Jimskapt/rust\-book\-fr
.UE
Fran√ßais
.UR https://github\.com/paytchoo/book\-pl
.UE
Polski
.UR https://github\.com/agentzero1/book
.UE
Cebuano
.UR https://github\.com/josephace135/book
.UE
Tagalog
.UR https://github\.com/psychoslave/Rust\-libro
.UE
Esperanto
.UR https://github\.com/TChatzigiannakis/rust\-book\-greek
.UE
ŒµŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ
.UR https://github\.com/sebras/book
.UE
Svenska
.UR https://github\.com/pomokhtari/rust\-book\-fa
.UE
Farsi
.UR https://github\.com/rust\-lang\-de/rustbook\-de
.UE
Deutsch
.UR https://github\.com/RustDili/dokuman/tree/master/ceviriler
.UE
Turkish, 
.UR https://rustdili\.github\.io/
.UE
online
.UR https://github\.com/venkatarun95/rust\-book\-hindi
.UE
‡§π‡§ø‡§Ç‡§¶‡•Ä
.UR https://github\.com/rust\-lang\-th/book\-th
.UE
‡πÑ‡∏ó‡∏¢
.UR https://github\.com/DanKHansen/book\-dk
.UE
Danske
.SH "G \- How Rust is Made and ‚ÄúNightly Rust‚Äù"

.br

.br
\fBAppendix G \- How Rust is Made and ‚ÄúNightly Rust‚Äù\fR
.br
======================================================
.br

.P
This appendix is about how Rust is made and how that affects you as a Rustdeveloper\.
.br

.br
\fBStability Without Stagnation\fR
.br
==============================
.br

.P
As a language, Rust cares a \fIlot\fR about the stability of your code\. We wantRust to be a rock\-solid foundation you can build on, and if things wereconstantly changing, that would be impossible\. At the same time, if we can‚Äôtexperiment with new features, we may not find out important flaws until aftertheir release, when we can no longer change things\.
.P
Our solution to this problem is what we call ‚Äústability without stagnation‚Äù,and our guiding principle is this: you should never have to fear upgrading to anew version of stable Rust\. Each upgrade should be painless, but should alsobring you new features, fewer bugs, and faster compile times\.
.br

.br
\fBChoo, Choo! Release Channels and Riding the Trains\fR
.br
====================================================
.br

.P
Rust development operates on a \fItrain schedule\fR\. That is, all development isdone on the `\fImaster\fR` branch of the Rust repository\. Releases follow a softwarerelease train model, which has been used by Cisco IOS and other softwareprojects\. There are three \fIrelease channels\fR for Rust:
.P
Nightly
.P
Beta
.P
Stable
.P
Most Rust developers primarily use the stable channel, but those who want totry out experimental new features may use nightly or beta\.
.P
Here‚Äôs an example of how the development and release process works: let‚Äôsassume that the Rust team is working on the release of Rust 1\.5\. That releasehappened in December of 2015, but it will provide us with realistic versionnumbers\. A new feature is added to Rust: a new commit lands on the `\fImaster\fR`branch\. Each night, a new nightly version of Rust is produced\. Every day is arelease day, and these releases are created by our release infrastructureautomatically\. So as time passes, our releases look like this, once a night:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- *

.EE

.RE
.P
Every six weeks, it‚Äôs time to prepare a new release! The `\fIbeta\fR` branch of theRust repository branches off from the `\fImaster\fR` branch used by nightly\. Now,there are two releases:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- *
                     |
beta:                *

.EE

.RE
.P
Most Rust users do not use beta releases actively, but test against beta intheir CI system to help Rust discover possible regressions\. In the meantime,there‚Äôs still a nightly release every night:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- * \- \- * \- \- *
                     |
beta:                *

.EE

.RE
.P
Let‚Äôs say a regression is found\. Good thing we had some time to test the betarelease before the regression snuck into a stable release! The fix is appliedto `\fImaster\fR`, so that nightly is fixed, and then the fix is backported to the`\fIbeta\fR` branch, and a new release of beta is produced:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- * \- \- * \- \- * \- \- *
                     |
beta:                * \- \- \- \- \- \- \- \- *

.EE

.RE
.P
Six weeks after the first beta was created, it‚Äôs time for a stable release! The`\fIstable\fR` branch is produced from the `\fIbeta\fR` branch:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- * \- \- * \- \- * \- \- * \- * \- *
                     |
beta:                * \- \- \- \- \- \- \- \- *
                                       |
stable:                                *

.EE

.RE
.P
Hooray! Rust 1\.5 is done! However, we‚Äôve forgotten one thing: because the sixweeks have gone by, we also need a new beta of the \fInext\fR version of Rust, 1\.6\.So after `\fIstable\fR` branches off of `\fIbeta\fR`, the next version of `\fIbeta\fR` branchesoff of `\fInightly\fR` again:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- * \- \- * \- \- * \- \- * \- * \- *
                     |                         |
beta:                * \- \- \- \- \- \- \- \- *       *
                                       |
stable:                                *

.EE

.RE
.P
This is called the ‚Äútrain model‚Äù because every six weeks, a release ‚Äúleaves thestation‚Äù, but still has to take a journey through the beta channel before itarrives as a stable release\.
.P
Rust releases every six weeks, like clockwork\. If you know the date of one Rustrelease, you can know the date of the next one: it‚Äôs six weeks later\. A niceaspect of having releases scheduled every six weeks is that the next train iscoming soon\. If a feature happens to miss a particular release, there‚Äôs no needto worry: another one is happening in a short time! This helps reduce pressureto sneak possibly unpolished features in close to the release deadline\.
.P
Thanks to this process, you can always check out the next build of Rust andverify for yourself that it‚Äôs easy to upgrade to: if a beta release doesn‚Äôtwork as expected, you can report it to the team and get it fixed before thenext stable release happens! Breakage in a beta release is relatively rare, but`\fIrustc\fR` is still a piece of software, and bugs do exist\.
.br

.br
\fBUnstable Features\fR
.br
===================
.br

.P
There‚Äôs one more catch with this release model: unstable features\. Rust uses atechnique called ‚Äúfeature flags‚Äù to determine what features are enabled in agiven release\. If a new feature is under active development, it lands on`\fImaster\fR`, and therefore, in nightly, but behind a \fIfeature flag\fR\. If you, as auser, wish to try out the work\-in\-progress feature, you can, but you must beusing a nightly release of Rust and annotate your source code with theappropriate flag to opt in\.
.P
If you‚Äôre using a beta or stable release of Rust, you can‚Äôt use any featureflags\. This is the key that allows us to get practical use with new featuresbefore we declare them stable forever\. Those who wish to opt into the bleedingedge can do so, and those who want a rock\-solid experience can stick withstable and know that their code won‚Äôt break\. Stability without stagnation\.
.P
This book only contains information about stable features, as in\-progressfeatures are still changing, and surely they‚Äôll be different between when thisbook was written and when they get enabled in stable builds\. You can finddocumentation for nightly\-only features online\.
.br

.br
\fBRustup and the Role of Rust Nightly\fR
.br
=====================================
.br

.P
Rustup makes it easy to change between different release channels of Rust, on aglobal or per\-project basis\. By default, you‚Äôll have stable Rust installed\. Toinstall nightly, for example:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup toolchain install nightly

.EE

.RE
.P
You can see all of the \fItoolchains\fR (releases of Rust and associatedcomponents) you have installed with `\fIrustup\fR` as well\. Here‚Äôs an example on oneof your authors‚Äô Windows computer:
.RS
.IP \fBpowershell\fR 2

.br
.EX
> rustup toolchain list
stable\-x86_64\-pc\-windows\-msvc (default)
beta\-x86_64\-pc\-windows\-msvc
nightly\-x86_64\-pc\-windows\-msvc

.EE

.RE
.P
As you can see, the stable toolchain is the default\. Most Rust users use stablemost of the time\. You might want to use stable most of the time, but usenightly on a specific project, because you care about a cutting\-edge feature\.To do so, you can use `\fIrustup override\fR` in that project‚Äôs directory to set thenightly toolchain as the one `\fIrustup\fR` should use when you‚Äôre in that directory:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cd ~/projects/needs\-nightly
$ rustup override set nightly

.EE

.RE
.P
Now, every time you call `\fIrustc\fR` or `\fIcargo\fR` inside of\fI~/projects/needs\-nightly\fR, `\fIrustup\fR` will make sure that you are using nightlyRust, rather than your default of stable Rust\. This comes in handy when youhave a lot of Rust projects!
.br

.br
\fBThe RFC Process and Teams\fR
.br
===========================
.br

.P
So how do you learn about these new features? Rust‚Äôs development model followsa \fIRequest For Comments (RFC) process\fR\. If you‚Äôd like an improvement in Rust,you can write up a proposal, called an RFC\.
.P
Anyone can write RFCs to improve Rust, and the proposals are reviewed anddiscussed by the Rust team, which is comprised of many topic subteams\. There‚Äôsa full list of the teams 
.UR https://www\.rust\-lang\.org/governance
.UE
on Rust‚Äôswebsite, which includes teams foreach area of the project: language design, compiler implementation,infrastructure, documentation, and more\. The appropriate team reads theproposal and the comments, writes some comments of their own, and eventually,there‚Äôs consensus to accept or reject the feature\.
.P
If the feature is accepted, an issue is opened on the Rust repository, andsomeone can implement it\. The person who implements it very well may not be theperson who proposed the feature in the first place! When the implementation isready, it lands on the `\fImaster\fR` branch behind a feature gate, as we discussedin the 
.UR #unstable\-features
.UE
‚ÄúUnstable Features‚Äù section\.
.P
After some time, once Rust developers who use nightly releases have been ableto try out the new feature, team members will discuss the feature, how it‚Äôsworked out on nightly, and decide if it should make it into stable Rust or not\.If the decision is to move forward, the feature gate is removed, and thefeature is now considered stable! It rides the trains into a new stable releaseof Rust\.