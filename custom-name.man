.TH "The Rust Programming Language" 7
.SH "The Rust Programming Language"

.br

.br
\fBThe Rust Programming Language\fR
.br
===============================
.br
\fIby Steve Klabnik and Carol Nichols, with contributions from the Rust Community\fR
.P
This version of the text assumes you’re using Rust 1\.54 or later with`\fIedition="2018"\fR` in \fICargo\.toml\fR of all projects to use Rust 2018 Editionidioms\. See the 
.UR ch01\-01\-installation\.html
.UE
“Installation” section of Chapter 1to install or update Rust, and see the new 
.UR appendix\-05\-editions\.html
.UE
Appendix E for information on editions\.
.P
The 2018 Edition of the Rust language includes a number of improvements thatmake Rust more ergonomic and easier to learn\. This iteration of the bookcontains a number of changes to reflect those improvements:
.P
Chapter 7, “Managing Growing Projects with Packages, Crates, and Modules,”has been mostly rewritten\. The module system and the way paths work in the2018 Edition were made more consistent\.
.P
Chapter 10 has new sections titled “Traits as Parameters” and “ReturningTypes that Implement Traits” that explain the new `\fIimpl Trait\fR` syntax\.
.P
Chapter 11 has a new section titled “Using `\fIResult<T, E>\fR` in Tests” thatshows how to write tests that use the `\fI?\fR` operator\.
.P
The “Advanced Lifetimes” section in Chapter 19 was removed because compilerimprovements have made the constructs in that section even rarer\.
.P
The previous Appendix D, “Macros,” has been expanded to include proceduralmacros and was moved to the “Macros” section in Chapter 19\.
.P
Appendix A, “Keywords,” also explains the new raw identifiers feature thatenables code written in the 2015 Edition and the 2018 Edition to interoperate\.
.P
Appendix D is now titled “Useful Development Tools” and covers recentlyreleased tools that help you write Rust code\.
.P
We fixed a number of small errors and imprecise wording throughout the book\.Thank you to the readers who reported them!
.P
Note that any code in earlier iterations of \fIThe Rust Programming Language\fRthat compiled will continue to compile without `\fIedition="2018"\fR` in theproject’s \fICargo\.toml\fR, even as you update the Rust compiler version you’reusing\. That’s Rust’s backward compatibility guarantees at work!
.P
The HTML format is available online at
.UR https://doc\.rust\-lang\.org/stable/book/
.UE
https://doc\.rust\-lang\.org/stable/book/and offline with installations of Rust made with `\fIrustup\fR`; run `\fIrustup docs \-\-book\fR` to open\.
.P
This text is available in 
.UR https://nostarch\.com/rust
.UE
paperback and ebook format from No StarchPress\.
.SH Foreword

.br

.br
\fBForeword\fR
.br
==========
.br

.P
It wasn’t always so clear, but the Rust programming language is fundamentallyabout \fIempowerment\fR: no matter what kind of code you are writing now, Rustempowers you to reach farther, to program with confidence in a wider variety ofdomains than you did before\.
.P
Take, for example, “systems\-level” work that deals with low\-level details ofmemory management, data representation, and concurrency\. Traditionally, thisrealm of programming is seen as arcane, accessible only to a select few whohave devoted the necessary years learning to avoid its infamous pitfalls\. Andeven those who practice it do so with caution, lest their code be open toexploits, crashes, or corruption\.
.P
Rust breaks down these barriers by eliminating the old pitfalls and providing afriendly, polished set of tools to help you along the way\. Programmers who needto “dip down” into lower\-level control can do so with Rust, without taking onthe customary risk of crashes or security holes, and without having to learnthe fine points of a fickle toolchain\. Better yet, the language is designed toguide you naturally towards reliable code that is efficient in terms of speedand memory usage\.
.P
Programmers who are already working with low\-level code can use Rust to raisetheir ambitions\. For example, introducing parallelism in Rust is a relativelylow\-risk operation: the compiler will catch the classical mistakes for you\. Andyou can tackle more aggressive optimizations in your code with the confidencethat you won’t accidentally introduce crashes or vulnerabilities\.
.P
But Rust isn’t limited to low\-level systems programming\. It’s expressive andergonomic enough to make CLI apps, web servers, and many other kinds of codequite pleasant to write — you’ll find simple examples of both later in thebook\. Working with Rust allows you to build skills that transfer from onedomain to another; you can learn Rust by writing a web app, then apply thosesame skills to target your Raspberry Pi\.
.P
This book fully embraces the potential of Rust to empower its users\. It’s afriendly and approachable text intended to help you level up not just yourknowledge of Rust, but also your reach and confidence as a programmer ingeneral\. So dive in, get ready to learn—and welcome to the Rust community!
.P
— Nicholas Matsakis and Aaron Turon
.SH Introduction

.br

.br
\fBIntroduction\fR
.br
==============
.br

.P
Note: This edition of the book is the same as 
.UR https://nostarch\.com/rust
.UE
The Rust ProgrammingLanguage available in print and ebook format from 
.UR https://nostarch\.com/
.UE
No StarchPress\.
.P
Welcome to \fIThe Rust Programming Language\fR, an introductory book about Rust\.The Rust programming language helps you write faster, more reliable software\.High\-level ergonomics and low\-level control are often at odds in programminglanguage design; Rust challenges that conflict\. Through balancing powerfultechnical capacity and a great developer experience, Rust gives you the optionto control low\-level details (such as memory usage) without all the hassletraditionally associated with such control\.
.br

.br
\fBWho Rust Is For\fR
.br
=================
.br

.P
Rust is ideal for many people for a variety of reasons\. Let’s look at a few ofthe most important groups\.
.br

.br
\fBTeams of Developers\fR
.br
=====================
.br

.P
Rust is proving to be a productive tool for collaborating among large teams ofdevelopers with varying levels of systems programming knowledge\. Low\-level codeis prone to a variety of subtle bugs, which in most other languages can becaught only through extensive testing and careful code review by experienceddevelopers\. In Rust, the compiler plays a gatekeeper role by refusing tocompile code with these elusive bugs, including concurrency bugs\. By workingalongside the compiler, the team can spend their time focusing on the program’slogic rather than chasing down bugs\.
.P
Rust also brings contemporary developer tools to the systems programming world:
.P
Cargo, the included dependency manager and build tool, makes adding,compiling, and managing dependencies painless and consistent across the Rustecosystem\.
.P
Rustfmt ensures a consistent coding style across developers\.
.P
The Rust Language Server powers Integrated Development Environment (IDE)integration for code completion and inline error messages\.
.P
By using these and other tools in the Rust ecosystem, developers can beproductive while writing systems\-level code\.
.br

.br
\fBStudents\fR
.br
==========
.br

.P
Rust is for students and those who are interested in learning about systemsconcepts\. Using Rust, many people have learned about topics like operatingsystems development\. The community is very welcoming and happy to answerstudent questions\. Through efforts such as this book, the Rust teams want tomake systems concepts more accessible to more people, especially those new toprogramming\.
.br

.br
\fBCompanies\fR
.br
===========
.br

.P
Hundreds of companies, large and small, use Rust in production for a variety oftasks\. Those tasks include command line tools, web services, DevOps tooling,embedded devices, audio and video analysis and transcoding, cryptocurrencies,bioinformatics, search engines, Internet of Things applications, machinelearning, and even major parts of the Firefox web browser\.
.br

.br
\fBOpen Source Developers\fR
.br
========================
.br

.P
Rust is for people who want to build the Rust programming language, community,developer tools, and libraries\. We’d love to have you contribute to the Rustlanguage\.
.br

.br
\fBPeople Who Value Speed and Stability\fR
.br
======================================
.br

.P
Rust is for people who crave speed and stability in a language\. By speed, wemean the speed of the programs that you can create with Rust and the speed atwhich Rust lets you write them\. The Rust compiler’s checks ensure stabilitythrough feature additions and refactoring\. This is in contrast to the brittlelegacy code in languages without these checks, which developers are oftenafraid to modify\. By striving for zero\-cost abstractions, higher\-level featuresthat compile to lower\-level code as fast as code written manually, Rustendeavors to make safe code be fast code as well\.
.P
The Rust language hopes to support many other users as well; those mentionedhere are merely some of the biggest stakeholders\. Overall, Rust’s greatestambition is to eliminate the trade\-offs that programmers have accepted fordecades by providing safety \fIand\fR productivity, speed \fIand\fR ergonomics\. GiveRust a try and see if its choices work for you\.
.br

.br
\fBWho This Book Is For\fR
.br
======================
.br

.P
This book assumes that you’ve written code in another programming language butdoesn’t make any assumptions about which one\. We’ve tried to make the materialbroadly accessible to those from a wide variety of programming backgrounds\. Wedon’t spend a lot of time talking about what programming \fIis\fR or how to thinkabout it\. If you’re entirely new to programming, you would be better served byreading a book that specifically provides an introduction to programming\.
.br

.br
\fBHow to Use This Book\fR
.br
======================
.br

.P
In general, this book assumes that you’re reading it in sequence from front toback\. Later chapters build on concepts in earlier chapters, and earlierchapters might not delve into details on a topic; we typically revisit thetopic in a later chapter\.
.P
You’ll find two kinds of chapters in this book: concept chapters and projectchapters\. In concept chapters, you’ll learn about an aspect of Rust\. In projectchapters, we’ll build small programs together, applying what you’ve learned sofar\. Chapters 2, 12, and 20 are project chapters; the rest are concept chapters\.
.P
Chapter 1 explains how to install Rust, how to write a “Hello, world!” program,and how to use Cargo, Rust’s package manager and build tool\. Chapter 2 is ahands\-on introduction to the Rust language\. Here we cover concepts at a highlevel, and later chapters will provide additional detail\. If you want to getyour hands dirty right away, Chapter 2 is the place for that\. At first, youmight even want to skip Chapter 3, which covers Rust features similar to thoseof other programming languages, and head straight to Chapter 4 to learn aboutRust’s ownership system\. However, if you’re a particularly meticulous learnerwho prefers to learn every detail before moving on to the next, you might wantto skip Chapter 2 and go straight to Chapter 3, returning to Chapter 2 whenyou’d like to work on a project applying the details you’ve learned\.
.P
Chapter 5 discusses structs and methods, and Chapter 6 covers enums, `\fImatch\fR`expressions, and the `\fIif let\fR` control flow construct\. You’ll use structs andenums to make custom types in Rust\.
.P
In Chapter 7, you’ll learn about Rust’s module system and about privacy rulesfor organizing your code and its public Application Programming Interface(API)\. Chapter 8 discusses some common collection data structures that thestandard library provides, such as vectors, strings, and hash maps\. Chapter 9explores Rust’s error\-handling philosophy and techniques\.
.P
Chapter 10 digs into generics, traits, and lifetimes, which give you the powerto define code that applies to multiple types\. Chapter 11 is all about testing,which even with Rust’s safety guarantees is necessary to ensure your program’slogic is correct\. In Chapter 12, we’ll build our own implementation of a subsetof functionality from the `\fIgrep\fR` command line tool that searches for textwithin files\. For this, we’ll use many of the concepts we discussed in theprevious chapters\.
.P
Chapter 13 explores closures and iterators: features of Rust that come fromfunctional programming languages\. In Chapter 14, we’ll examine Cargo in moredepth and talk about best practices for sharing your libraries with others\.Chapter 15 discusses smart pointers that the standard library provides and thetraits that enable their functionality\.
.P
In Chapter 16, we’ll walk through different models of concurrent programmingand talk about how Rust helps you to program in multiple threads fearlessly\.Chapter 17 looks at how Rust idioms compare to object\-oriented programmingprinciples you might be familiar with\.
.P
Chapter 18 is a reference on patterns and pattern matching, which are powerfulways of expressing ideas throughout Rust programs\. Chapter 19 contains asmorgasbord of advanced topics of interest, including unsafe Rust, macros, andmore about lifetimes, traits, types, functions, and closures\.
.P
In Chapter 20, we’ll complete a project in which we’ll implement a low\-levelmultithreaded web server!
.P
Finally, some appendices contain useful information about the language in amore reference\-like format\. Appendix A covers Rust’s keywords, Appendix Bcovers Rust’s operators and symbols, Appendix C covers derivable traitsprovided by the standard library, Appendix D covers some useful developmenttools, and Appendix E explains Rust editions\.
.P
There is no wrong way to read this book: if you want to skip ahead, go for it!You might have to jump back to earlier chapters if you experience anyconfusion\. But do whatever works for you\.
.P
An important part of the process of learning Rust is learning how to read theerror messages the compiler displays: these will guide you toward working code\.As such, we’ll provide many examples that don’t compile along with the errormessage the compiler will show you in each situation\. Know that if you enterand run a random example, it may not compile! Make sure you read thesurrounding text to see whether the example you’re trying to run is meant toerror\. Ferris will also help you distinguish code that isn’t meant to work:
.P
| Ferris                                                                                                           | Meaning                                          ||\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-||             | This code does not compile!                      ||                    | This code panics!                                ||  | This code does not produce the desired behavior\. |
.P
In most situations, we’ll lead you to the correct version of any code thatdoesn’t compile\.
.br

.br
\fBSource Code\fR
.br
=============
.br

.P
The source files from which this book is generated can be found on
.UR https://github\.com/rust\-lang/book/tree/master/src
.UE
GitHub\.
.SH "Getting Started"

.br

.br
\fBGetting Started\fR
.br
=================
.br

.P
Let’s start your Rust journey! There’s a lot to learn, but every journey startssomewhere\. In this chapter, we’ll discuss:
.P
Installing Rust on Linux, macOS, and Windows
.P
Writing a program that prints `\fIHello, world!\fR`
.P
Using `\fIcargo\fR`, Rust’s package manager and build system
.SH Installation

.br

.br
\fBInstallation\fR
.br
==============
.br

.P
The first step is to install Rust\. We’ll download Rust through `\fIrustup\fR`, acommand line tool for managing Rust versions and associated tools\. You’ll needan internet connection for the download\.
.P
Note: If you prefer not to use `\fIrustup\fR` for some reason, please see the
.UR https://forge\.rust\-lang\.org/infra/other\-installation\-methods\.html
.UE
Other Rust Installation Methods page for more options\.
.P
The following steps install the latest stable version of the Rust compiler\.Rust’s stability guarantees ensure that all the examples in the book thatcompile will continue to compile with newer Rust versions\. The output mightdiffer slightly between versions, because Rust often improves error messagesand warnings\. In other words, any newer, stable version of Rust you installusing these steps should work as expected with the content of this book\.
.br

.br
\fBCommand Line Notation\fR
.br
=======================
.br

.P
In this chapter and throughout the book, we’ll show some commands used in theterminal\. Lines that you should enter in a terminal all start with `\fI$\fR`\. Youdon’t need to type in the `\fI$\fR` character; it indicates the start of eachcommand\. Lines that don’t start with `\fI$\fR` typically show the output of theprevious command\. Additionally, PowerShell\-specific examples will use `\fI>\fR`rather than `\fI$\fR`\.
.br

.br
\fBInstalling \fR
.br
=============
.br
`\fIrustup\fR` on Linux or macOS
.P
If you’re using Linux or macOS, open a terminal and enter the following command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ curl \-\-proto '=https' \-\-tlsv1\.2 https://sh\.rustup\.rs \-sSf | sh

.EE

.RE
.P
The command downloads a script and starts the installation of the `\fIrustup\fR`tool, which installs the latest stable version of Rust\. You might be promptedfor your password\. If the install is successful, the following line will appear:
.RS
.IP \fBtext\fR 2

.br
.EX
Rust is installed now\. Great!

.EE

.RE
.P
You will also need a linker, which is a program that Rust uses to join itscompiled outputs into one file\. It is likely you already have one\. If you getlinker errors, you should install a C compiler, which will typically include alinker\. A C compiler is also useful because some common Rust packages depend onC code and will need a C compiler\.
.P
On macOS, you can get a C compiler by running:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ xcode\-select \-\-install

.EE

.RE
.P
Linux users should generally install GCC or Clang, according to theirdistribution's documentation\. For example, if you use Ubuntu, you can installthe `\fIbuild\-essential\fR` package\.
.br

.br
\fBInstalling \fR
.br
=============
.br
`\fIrustup\fR` on Windows
.P
On Windows, go to 
.UR https://forge\.rust\-lang\.org/infra/other\-installation\-methods\.html
.UE
https://www\.rust\-lang\.org/tools/install and followthe instructions for installing Rust\. At some point in the installation, you’llreceive a message explaining that you’ll also need the C++ build tools forVisual Studio 2013 or later\. The easiest way to acquire the build tools is toinstall 
.UR https://visualstudio\.microsoft\.com/visual\-cpp\-build\-tools/
.UE
Build Tools for Visual Studio 2019\. When asked whichworkloads to install make sure "C++ build tools" is selected and that theWindows 10 SDK and the English language pack components are included\.
.P
The rest of this book uses commands that work in both \fIcmd\.exe\fR and PowerShell\.If there are specific differences, we’ll explain which to use\.
.br

.br
\fBUpdating and Uninstalling\fR
.br
===========================
.br

.P
After you’ve installed Rust via `\fIrustup\fR`, updating to the latest version iseasy\. From your shell, run the following update script:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup update

.EE

.RE
.P
To uninstall Rust and `\fIrustup\fR`, run the following uninstall script from yourshell:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup self uninstall

.EE

.RE

.br

.br
\fBTroubleshooting\fR
.br
=================
.br

.P
To check whether you have Rust installed correctly, open a shell and enter thisline:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustc \-\-version

.EE

.RE
.P
You should see the version number, commit hash, and commit date for the lateststable version that has been released in the following format:
.RS
.IP \fBtext\fR 2

.br
.EX
rustc x\.y\.z (abcabcabc yyyy\-mm\-dd)

.EE

.RE
.P
If you see this information, you have installed Rust successfully! If you don’tsee this information and you’re on Windows, check that Rust is in your `\fI%PATH%\fR`system variable\. If that’s all correct and Rust still isn’t working, there area number of places you can get help\. The easiest is the #beginners channel on
.UR https://discord\.gg/rust\-lang
.UE
the official Rust Discord\. There, you can chat with other Rustaceans(a silly nickname we call ourselves) who can help you out\. Other greatresources include 
.UR https://users\.rust\-lang\.org/
.UE
the Users forum and 
.UR https://stackoverflow\.com/questions/tagged/rust
.UE
Stack Overflow\.
.br

.br
\fBLocal Documentation\fR
.br
=====================
.br

.P
The installation of Rust also includes a copy of the documentation locally, soyou can read it offline\. Run `\fIrustup doc\fR` to open the local documentation inyour browser\.
.P
Any time a type or function is provided by the standard library and you’re notsure what it does or how to use it, use the application programming interface(API) documentation to find out!
.SH "Hello, World!"

.br

.br
\fBHello, World!\fR
.br
===============
.br

.P
Now that you’ve installed Rust, let’s write your first Rust program\. It’straditional when learning a new language to write a little program that printsthe text `\fIHello, world!\fR` to the screen, so we’ll do the same here!
.P
Note: This book assumes basic familiarity with the command line\. Rust makesno specific demands about your editing or tooling or where your code lives, soif you prefer to use an integrated development environment (IDE) instead ofthe command line, feel free to use your favorite IDE\. Many IDEs now have somedegree of Rust support; check the IDE’s documentation for details\. Recently,the Rust team has been focusing on enabling great IDE support, and progresshas been made rapidly on that front!
.br

.br
\fBCreating a Project Directory\fR
.br
==============================
.br

.P
You’ll start by making a directory to store your Rust code\. It doesn’t matterto Rust where your code lives, but for the exercises and projects in this book,we suggest making a \fIprojects\fR directory in your home directory and keeping allyour projects there\.
.P
Open a terminal and enter the following commands to make a \fIprojects\fR directoryand a directory for the “Hello, world!” project within the \fIprojects\fR directory\.
.P
For Linux, macOS, and PowerShell on Windows, enter this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ mkdir ~/projects
$ cd ~/projects
$ mkdir hello_world
$ cd hello_world

.EE

.RE
.P
For Windows CMD, enter this:
.RS
.IP \fBcmd\fR 2

.br
.EX
> mkdir "%USERPROFILE%\projects"
> cd /d "%USERPROFILE%\projects"
> mkdir hello_world
> cd hello_world

.EE

.RE

.br

.br
\fBWriting and Running a Rust Program\fR
.br
====================================
.br

.P
Next, make a new source file and call it \fImain\.rs\fR\. Rust files always end withthe \fI\.rs\fR extension\. If you’re using more than one word in your filename, usean underscore to separate them\. For example, use \fIhello_world\.rs\fR rather than\fIhelloworld\.rs\fR\.
.P
Now open the \fImain\.rs\fR file you just created and enter the code in Listing 1\-1\.Filename: main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    println!("Hello, world!");
}

.EE

.RE
Listing 1\-1: A program that prints `\fIHello, world!\fR`
.P
Save the file and go back to your terminal window\. On Linux or macOS, enterthe following commands to compile and run the file:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustc main\.rs
$ \./main
Hello, world!

.EE

.RE
.P
On Windows, enter the command `\fI\.\main\.exe\fR` instead of `\fI\./main\fR`:
.RS
.IP \fBpowershell\fR 2

.br
.EX
> rustc main\.rs
> \.\main\.exe
Hello, world!

.EE

.RE
.P
Regardless of your operating system, the string `\fIHello, world!\fR` should print tothe terminal\. If you don’t see this output, refer back to the
.UR ch01\-01\-installation\.html#troubleshooting
.UE
“Troubleshooting” part of the Installationsection for ways to get help\.
.P
If `\fIHello, world!\fR` did print, congratulations! You’ve officially written a Rustprogram\. That makes you a Rust programmer—welcome!
.br

.br
\fBAnatomy of a Rust Program\fR
.br
===========================
.br

.P
Let’s review in detail what just happened in your “Hello, world!” program\.Here’s the first piece of the puzzle:
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {

}

.EE

.RE
.P
These lines define a function in Rust\. The `\fImain\fR` function is special: it isalways the first code that runs in every executable Rust program\. The firstline declares a function named `\fImain\fR` that has no parameters and returnsnothing\. If there were parameters, they would go inside the parentheses, `\fI()\fR`\.
.P
Also, note that the function body is wrapped in curly brackets, `\fI{}\fR`\. Rustrequires these around all function bodies\. It’s good style to place the openingcurly bracket on the same line as the function declaration, adding one space inbetween\.
.P
If you want to stick to a standard style across Rust projects, you can use anautomatic formatter tool called `\fIrustfmt\fR` to format your code in a particularstyle\. The Rust team has included this tool with the standard Rust distribution,like `\fIrustc\fR`, so it should already be installed on your computer! Check theonline documentation for more details\.
.P
Inside the `\fImain\fR` function is the following code:
.RS
.IP \fBrust\fR 2

.br
.EX
    println!("Hello, world!");

.EE

.RE
.P
This line does all the work in this little program: it prints text to thescreen\. There are four important details to notice here\.
.P
First, Rust style is to indent with four spaces, not a tab\.
.P
Second, `\fIprintln!\fR` calls a Rust macro\. If it called a function instead, itwould be entered as `\fIprintln\fR` (without the `\fI!\fR`)\. We’ll discuss Rust macros inmore detail in Chapter 19\. For now, you just need to know that using a `\fI!\fR`means that you’re calling a macro instead of a normal function, and that macrosdon't always follow the same rules as functions\.
.P
Third, you see the `\fI"Hello, world!"\fR` string\. We pass this string as an argumentto `\fIprintln!\fR`, and the string is printed to the screen\.
.P
Fourth, we end the line with a semicolon (`\fI;\fR`), which indicates that thisexpression is over and the next one is ready to begin\. Most lines of Rust codeend with a semicolon\.
.br

.br
\fBCompiling and Running Are Separate Steps\fR
.br
==========================================
.br

.P
You’ve just run a newly created program, so let’s examine each step in theprocess\.
.P
Before running a Rust program, you must compile it using the Rust compiler byentering the `\fIrustc\fR` command and passing it the name of your source file, likethis:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustc main\.rs

.EE

.RE
.P
If you have a C or C++ background, you’ll notice that this is similar to `\fIgcc\fR`or `\fIclang\fR`\. After compiling successfully, Rust outputs a binary executable\.
.P
On Linux, macOS, and PowerShell on Windows, you can see the executable byentering the `\fIls\fR` command in your shell\. On Linux and macOS, you’ll see twofiles\. With PowerShell on Windows, you’ll see the same three files that youwould see using CMD\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ ls
main  main\.rs

.EE

.RE
.P
With CMD on Windows, you would enter the following:
.RS
.IP \fBcmd\fR 2

.br
.EX
> dir /B %= the /B option says to only show the file names =%
main\.exe
main\.pdb
main\.rs

.EE

.RE
.P
This shows the source code file with the \fI\.rs\fR extension, the executable file(\fImain\.exe\fR on Windows, but \fImain\fR on all other platforms), and, when usingWindows, a file containing debugging information with the \fI\.pdb\fR extension\.From here, you run the \fImain\fR or \fImain\.exe\fR file, like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ \./main # or \.\main\.exe on Windows

.EE

.RE
.P
If \fImain\.rs\fR was your “Hello, world!” program, this line would print `\fIHello, world!\fR` to your terminal\.
.P
If you’re more familiar with a dynamic language, such as Ruby, Python, orJavaScript, you might not be used to compiling and running a program asseparate steps\. Rust is an \fIahead\-of\-time compiled\fR language, meaning you cancompile a program and give the executable to someone else, and they can run iteven without having Rust installed\. If you give someone a \fI\.rb\fR, \fI\.py\fR, or\fI\.js\fR file, they need to have a Ruby, Python, or JavaScript implementationinstalled (respectively)\. But in those languages, you only need one command tocompile and run your program\. Everything is a trade\-off in language design\.
.P
Just compiling with `\fIrustc\fR` is fine for simple programs, but as your projectgrows, you’ll want to manage all the options and make it easy to share yourcode\. Next, we’ll introduce you to the Cargo tool, which will help you writereal\-world Rust programs\.
.SH "Hello, Cargo!"

.br

.br
\fBHello, Cargo!\fR
.br
===============
.br

.P
Cargo is Rust’s build system and package manager\. Most Rustaceans use this toolto manage their Rust projects because Cargo handles a lot of tasks for you,such as building your code, downloading the libraries your code depends on, andbuilding those libraries\. (We call the libraries that your code needs\fIdependencies\fR\.)
.P
The simplest Rust programs, like the one we’ve written so far, don’t have anydependencies\. So if we had built the “Hello, world!” project with Cargo, itwould only use the part of Cargo that handles building your code\. As you writemore complex Rust programs, you’ll add dependencies, and if you start a projectusing Cargo, adding dependencies will be much easier to do\.
.P
Because the vast majority of Rust projects use Cargo, the rest of this bookassumes that you’re using Cargo too\. Cargo comes installed with Rust if youused the official installers discussed in the
.UR ch01\-01\-installation\.html#installation
.UE
“Installation” section\. If you installed Rustthrough some other means, check whether Cargo is installed by entering thefollowing into your terminal:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo \-\-version

.EE

.RE
.P
If you see a version number, you have it! If you see an error, such as `\fIcommand not found\fR`, look at the documentation for your method of installation todetermine how to install Cargo separately\.
.br

.br
\fBCreating a Project with Cargo\fR
.br
===============================
.br

.P
Let’s create a new project using Cargo and look at how it differs from ouroriginal “Hello, world!” project\. Navigate back to your \fIprojects\fR directory (orwherever you decided to store your code)\. Then, on any operating system, runthe following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new hello_cargo
$ cd hello_cargo

.EE

.RE
.P
The first command creates a new directory called \fIhello_cargo\fR\. We’ve namedour project \fIhello_cargo\fR, and Cargo creates its files in a directory of thesame name\.
.P
Go into the \fIhello_cargo\fR directory and list the files\. You’ll see that Cargohas generated two files and one directory for us: a \fICargo\.toml\fR file and a\fIsrc\fR directory with a \fImain\.rs\fR file inside\.
.P
It has also initialized a new Git repository along with a \fI\.gitignore\fR file\.Git files won’t be generated if you run `\fIcargo new\fR` within an existing Gitrepository; you can override this behavior by using `\fIcargo new \-\-vcs=git\fR`\.
.P
Note: Git is a common version control system\. You can change `\fIcargo new\fR` touse a different version control system or no version control system by usingthe `\fI\-\-vcs\fR` flag\. Run `\fIcargo new \-\-help\fR` to see the available options\.
.P
Open \fICargo\.toml\fR in your text editor of choice\. It should look similar to thecode in Listing 1\-2\.Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "hello_cargo"
version = "0\.1\.0"
edition = "2018"

[dependencies]

.EE

.RE
Listing 1\-2: Contents of \fICargo\.toml\fR generated by `\fIcargo new\fR`
.P
This file is in the 
.UR https://toml\.io
.UE
\fITOML\fR (\fITom’s Obvious,\fRMinimal Language) format, which is Cargo’s configuration format\.
.P
The first line, `\fI[package]\fR`, is a section heading that indicates that thefollowing statements are configuring a package\. As we add more information tothis file, we’ll add other sections\.
.P
The next three lines set the configuration information Cargo needs to compileyour program: the name, the version, and the edition of Rust to use\. We’ll talkabout the `\fIedition\fR` key in 
.UR appendix\-05\-editions\.html
.UE
Appendix E\.
.P
The last line, `\fI[dependencies]\fR`, is the start of a section for you to list anyof your project’s dependencies\. In Rust, packages of code are referred to as\fIcrates\fR\. We won’t need any other crates for this project, but we will in thefirst project in Chapter 2, so we’ll use this dependencies section then\.
.P
Now open \fIsrc/main\.rs\fR and take a look:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    println!("Hello, world!");
}

.EE

.RE
.P
Cargo has generated a “Hello, world!” program for you, just like the one wewrote in Listing 1\-1! So far, the differences between our previous project andthe project Cargo generates are that Cargo placed the code in the \fIsrc\fRdirectory, and we have a \fICargo\.toml\fR configuration file in the top directory\.
.P
Cargo expects your source files to live inside the \fIsrc\fR directory\. Thetop\-level project directory is just for README files, license information,configuration files, and anything else not related to your code\. Using Cargohelps you organize your projects\. There’s a place for everything, andeverything is in its place\.
.P
If you started a project that doesn’t use Cargo, as we did with the “Hello,world!” project, you can convert it to a project that does use Cargo\. Move theproject code into the \fIsrc\fR directory and create an appropriate \fICargo\.toml\fRfile\.
.br

.br
\fBBuilding and Running a Cargo Project\fR
.br
======================================
.br

.P
Now let’s look at what’s different when we build and run the “Hello, world!”program with Cargo! From your \fIhello_cargo\fR directory, build your project byentering the following command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling hello_cargo v0\.1\.0 (file:///projects/hello_cargo)
    Finished dev [unoptimized + debuginfo] target(s) in 2\.85 secs

.EE

.RE
.P
This command creates an executable file in \fItarget/debug/hello_cargo\fR (or\fItarget\debug\hello_cargo\.exe\fR on Windows) rather than in your currentdirectory\. You can run the executable with this command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ \./target/debug/hello_cargo # or \.\target\debug\hello_cargo\.exe on Windows
Hello, world!

.EE

.RE
.P
If all goes well, `\fIHello, world!\fR` should print to the terminal\. Running `\fIcargo build\fR` for the first time also causes Cargo to create a new file at the toplevel: \fICargo\.lock\fR\. This file keeps track of the exact versions ofdependencies in your project\. This project doesn’t have dependencies, so thefile is a bit sparse\. You won’t ever need to change this file manually; Cargomanages its contents for you\.
.P
We just built a project with `\fIcargo build\fR` and ran it with`\fI\./target/debug/hello_cargo\fR`, but we can also use `\fIcargo run\fR` to compile thecode and then run the resulting executable all in one command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0 secs
     Running `target/debug/hello_cargo`
Hello, world!

.EE

.RE
.P
Notice that this time we didn’t see output indicating that Cargo was compiling`\fIhello_cargo\fR`\. Cargo figured out that the files hadn’t changed, so it just ranthe binary\. If you had modified your source code, Cargo would have rebuilt theproject before running it, and you would have seen this output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling hello_cargo v0\.1\.0 (file:///projects/hello_cargo)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.33 secs
     Running `target/debug/hello_cargo`
Hello, world!

.EE

.RE
.P
Cargo also provides a command called `\fIcargo check\fR`\. This command quickly checksyour code to make sure it compiles but doesn’t produce an executable:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
   Checking hello_cargo v0\.1\.0 (file:///projects/hello_cargo)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.32 secs

.EE

.RE
.P
Why would you not want an executable? Often, `\fIcargo check\fR` is much faster than`\fIcargo build\fR`, because it skips the step of producing an executable\. If you’recontinually checking your work while writing the code, using `\fIcargo check\fR` willspeed up the process! As such, many Rustaceans run `\fIcargo check\fR` periodicallyas they write their program to make sure it compiles\. Then they run `\fIcargo build\fR` when they’re ready to use the executable\.
.P
Let’s recap what we’ve learned so far about Cargo:
.P
We can build a project using `\fIcargo build\fR`\.
.P
We can build and run a project in one step using `\fIcargo run\fR`\.
.P
We can build a project without producing a binary to check for errors using`\fIcargo check\fR`\.
.P
Instead of saving the result of the build in the same directory as our code,Cargo stores it in the \fItarget/debug\fR directory\.
.P
An additional advantage of using Cargo is that the commands are the same nomatter which operating system you’re working on\. So, at this point, we’ll nolonger provide specific instructions for Linux and macOS versus Windows\.
.br

.br
\fBBuilding for Release\fR
.br
======================
.br

.P
When your project is finally ready for release, you can use `\fIcargo build \-\-release\fR` to compile it with optimizations\. This command will create anexecutable in \fItarget/release\fR instead of \fItarget/debug\fR\. The optimizationsmake your Rust code run faster, but turning them on lengthens the time it takesfor your program to compile\. This is why there are two different profiles: onefor development, when you want to rebuild quickly and often, and another forbuilding the final program you’ll give to a user that won’t be rebuiltrepeatedly and that will run as fast as possible\. If you’re benchmarking yourcode’s running time, be sure to run `\fIcargo build \-\-release\fR` and benchmark withthe executable in \fItarget/release\fR\.
.br

.br
\fBCargo as Convention\fR
.br
=====================
.br

.P
With simple projects, Cargo doesn’t provide a lot of value over just using`\fIrustc\fR`, but it will prove its worth as your programs become more intricate\.With complex projects composed of multiple crates, it’s much easier to letCargo coordinate the build\.
.P
Even though the `\fIhello_cargo\fR` project is simple, it now uses much of the realtooling you’ll use in the rest of your Rust career\. In fact, to work on anyexisting projects, you can use the following commands to check out the codeusing Git, change to that project’s directory, and build:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ git clone example\.org/someproject
$ cd someproject
$ cargo build

.EE

.RE
.P
For more information about Cargo, check out 
.UR https://doc\.rust\-lang\.org/cargo/
.UE
its documentation\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
You’re already off to a great start on your Rust journey! In this chapter,you’ve learned how to:
.P
Install the latest stable version of Rust using `\fIrustup\fR`
.P
Update to a newer Rust version
.P
Open locally installed documentation
.P
Write and run a “Hello, world!” program using `\fIrustc\fR` directly
.P
Create and run a new project using the conventions of Cargo
.P
This is a great time to build a more substantial program to get used to readingand writing Rust code\. So, in Chapter 2, we’ll build a guessing game program\.If you would rather start by learning how common programming concepts work inRust, see Chapter 3 and then return to Chapter 2\.
.SH "Programming a Guessing Game"

.br

.br
\fBProgramming a Guessing Game\fR
.br
=============================
.br

.P
Let’s jump into Rust by working through a hands\-on project together! Thischapter introduces you to a few common Rust concepts by showing you how to usethem in a real program\. You’ll learn about `\fIlet\fR`, `\fImatch\fR`, methods, associatedfunctions, using external crates, and more! The following chapters will explorethese ideas in more detail\. In this chapter, you’ll practice the fundamentals\.
.P
We’ll implement a classic beginner programming problem: a guessing game\. Here’show it works: the program will generate a random integer between 1 and 100\. Itwill then prompt the player to enter a guess\. After a guess is entered, theprogram will indicate whether the guess is too low or too high\. If the guess iscorrect, the game will print a congratulatory message and exit\.
.br

.br
\fBSetting Up a New Project\fR
.br
==========================
.br

.P
To set up a new project, go to the \fIprojects\fR directory that you created inChapter 1 and make a new project using Cargo, like so:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new guessing_game
$ cd guessing_game

.EE

.RE
.P
The first command, `\fIcargo new\fR`, takes the name of the project (`\fIguessing_game\fR`)as the first argument\. The second command changes to the new project’sdirectory\.
.P
Look at the generated \fICargo\.toml\fR file:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "guessing_game"
version = "0\.1\.0"
edition = "2018"

# See more keys and their definitions at https://doc\.rust\-lang\.org/cargo/reference/manifest\.html

[dependencies]

.EE

.RE
.P
As you saw in Chapter 1, `\fIcargo new\fR` generates a “Hello, world!” program foryou\. Check out the \fIsrc/main\.rs\fR file:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    println!("Hello, world!");
}

.EE

.RE
.P
Now let’s compile this “Hello, world!” program and run it in the same stepusing the `\fIcargo run\fR` command:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.50s
     Running `target/debug/guessing_game`
Hello, world!

.EE

.RE
.P
The `\fIrun\fR` command comes in handy when you need to rapidly iterate on a project,as we’ll do in this game, quickly testing each iteration before moving on tothe next one\.
.P
Reopen the \fIsrc/main\.rs\fR file\. You’ll be writing all the code in this file\.
.br

.br
\fBProcessing a Guess\fR
.br
====================
.br

.P
The first part of the guessing game program will ask for user input, processthat input, and check that the input is in the expected form\. To start, we’llallow the player to input a guess\. Enter the code in Listing 2\-1 into\fIsrc/main\.rs\fR\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::io;

fn main() {
    println!("Guess the number!");

    println!("Please input your guess\.");

    let mut guess = String::new();

    io::stdin()
        \.read_line(&mut guess)
        \.expect("Failed to read line");

    println!("You guessed: {}", guess);
}

.EE

.RE
Listing 2\-1: Code that gets a guess from the user andprints it
.P
This code contains a lot of information, so let’s go over it line by line\. Toobtain user input and then print the result as output, we need to bring the`\fIio\fR` (input/output) library into scope\. The `\fIio\fR` library comes from thestandard library (which is known as `\fIstd\fR`):
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {}", guess);
# }

.EE

.RE
.P
By default, Rust brings only a few types into the scope of every program in
.UR \.\./std/prelude/index\.html
.UE
the \fIprelude\fR\. If a type you want to use isn’t in theprelude, you have to bring that type into scope explicitly with a `\fIuse\fR`statement\. Using the `\fIstd::io\fR` library provides you with a number of usefulfeatures, including the ability to accept user input\.
.P
As you saw in Chapter 1, the `\fImain\fR` function is the entry point into theprogram:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {}", guess);
# }

.EE

.RE
.P
The `\fIfn\fR` syntax declares a new function, the parentheses, `\fI()\fR`, indicate thereare no parameters, and the curly bracket, `\fI{\fR`, starts the body of the function\.
.P
As you also learned in Chapter 1, `\fIprintln!\fR` is a macro that prints a string tothe screen:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
    println!("Guess the number!");

    println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {}", guess);
# }

.EE

.RE
.P
This code is printing a prompt stating what the game is and requesting inputfrom the user\.
.br

.br
\fBStoring Values with Variables\fR
.br
===============================
.br

.P
Next, we’ll create a place to store the user input, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
    let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {}", guess);
# }

.EE

.RE
.P
Now the program is getting interesting! There’s a lot going on in this littleline\. Notice that this is a `\fIlet\fR` statement, which is used to create a\fIvariable\fR\. Here’s another example:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let apples = 5;

.EE

.RE
.P
This line creates a new variable named `\fIapples\fR` and binds it to the value 5\. InRust, variables are immutable by default\. We’ll be discussing this concept indetail in the 
.UR ch03\-01\-variables\-and\-mutability\.html#variables\-and\-mutability
.UE
“Variables and Mutability” section in Chapter 3\. The following example shows how to use `\fImut\fR` beforethe variable name to make a variable mutable:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let apples = 5; // immutable
let mut bananas = 5; // mutable

.EE

.RE
.P
Note: The `\fI//\fR` syntax starts a comment that continues until the end of theline\. Rust ignores everything in comments, which are discussed in more detailin Chapter 3\.
.P
Let’s return to the guessing game program\. You now know that `\fIlet mut guess\fR`will introduce a mutable variable named `\fIguess\fR`\. On the other side of the equalsign (`\fI=\fR`) is the value that `\fIguess\fR` is bound to, which is the result ofcalling `\fIString::new\fR`, a function that returns a new instance of a `\fIString\fR`\.
.UR \.\./std/string/struct\.String\.html
.UE
`\fIString\fR` is a string type provided by the standardlibrary that is a growable, UTF\-8 encoded bit of text\.
.P
The `\fI::\fR` syntax in the `\fI::new\fR` line indicates that `\fInew\fR` is an \fIassociated\fRfunction of the `\fIString\fR` type\. An associated function is implemented on atype, in this case `\fIString\fR`\.
.P
This `\fInew\fR` function creates a new, empty string\. You’ll find a `\fInew\fR` functionon many types, because it’s a common name for a function that makes a new valueof some kind\.
.P
To summarize, the `\fIlet mut guess = String::new();\fR` line has created a mutablevariable that is currently bound to a new, empty instance of a `\fIString\fR`\. Whew!
.P
Recall that we included the input/output functionality from the standardlibrary with `\fIuse std::io;\fR` on the first line of the program\. Now we’ll callthe `\fIstdin\fR` function from the `\fIio\fR` module:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
    io::stdin()
        \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {}", guess);
# }

.EE

.RE
.P
If we hadn’t put the `\fIuse std::io\fR` line at the beginning of the program, wecould have written this function call as `\fIstd::io::stdin\fR`\. The `\fIstdin\fR` functionreturns an instance of 
.UR \.\./std/io/struct\.Stdin\.html
.UE
`\fIstd::io::Stdin\fR`, which is atype that represents a handle to the standard input for your terminal\.
.P
The next part of the code, `\fI\.read_line(&mut guess)\fR`, calls the
.UR \.\./std/io/struct\.Stdin\.html#method\.read_line
.UE
`\fIread_line\fR` method on the standard input handle toget input from the user\. We’re also passing one argument to `\fIread_line\fR`: `\fI&mut guess\fR`\.
.P
The job of `\fIread_line\fR` is to take whatever the user types into standard inputand append that into a string (without overwriting its contents), so it takesthat string as an argument\. The string argument needs to be mutable so themethod can change the string’s content by adding the user input\.
.P
The `\fI&\fR` indicates that this argument is a \fIreference\fR, which gives you a way tolet multiple parts of your code access one piece of data without needing tocopy that data into memory multiple times\. References are a complex feature,and one of Rust’s major advantages is how safe and easy it is to usereferences\. You don’t need to know a lot of those details to finish thisprogram\. For now, all you need to know is that like variables, references areimmutable by default\. Hence, you need to write `\fI&mut guess\fR` rather than`\fI&guess\fR` to make it mutable\. (Chapter 4 will explain references morethoroughly\.)
.br

.br
\fBHandling Potential Failure with the \fR
.br
======================================
.br
`\fIResult\fR` Type
.P
We’re still working on this line of code\. Although we’re now discussing a thirdline of text, it’s still part of a single logical line of code\. The next partis this method:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
        \.expect("Failed to read line");
# 
#     println!("You guessed: {}", guess);
# }

.EE

.RE
.P
When you call a method with the `\fI\.method_name()\fR` syntax, it’s often wise tointroduce a newline and other whitespace to help break up long lines\. We couldhave written this code as:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
io::stdin()\.read_line(&mut guess)\.expect("Failed to read line");

.EE

.RE
.P
However, one long line is difficult to read, so it’s best to divide it\. Nowlet’s discuss what this line does\.
.P
As mentioned earlier, `\fIread_line\fR` puts what the user types into the stringwe’re passing it, but it also returns a value—in this case, an
.UR \.\./std/io/type\.Result\.html
.UE
`\fIio::Result\fR`\. Rust has a number of types named`\fIResult\fR` in its standard library: a generic 
.UR \.\./std/result/enum\.Result\.html
.UE
`\fIResult\fR`as well as specific versions for submodules, such as `\fIio::Result\fR`\.
.P
The `\fIResult\fR` types are 
.UR ch06\-00\-enums\.html
.UE
\fIenumerations\fR, often referredto as \fIenums\fR\. An enumeration is a type that can have a fixed set of values,and those values are called the enum’s \fIvariants\fR\. Chapter 6 will cover enumsin more detail\.
.P
For `\fIResult\fR`, the variants are `\fIOk\fR` or `\fIErr\fR`\. The `\fIOk\fR` variant indicates theoperation was successful, and inside `\fIOk\fR` is the successfully generated value\.The `\fIErr\fR` variant means the operation failed, and `\fIErr\fR` contains informationabout how or why the operation failed\.
.P
The purpose of these `\fIResult\fR` types is to encode error\-handling information\.Values of the `\fIResult\fR` type, like values of any type, have methods defined onthem\. An instance of `\fIio::Result\fR` has an 
.UR \.\./std/result/enum\.Result\.html#method\.expect
.UE
`\fIexpect\fR` method that you can call\. If this instance of `\fIio::Result\fR` is an `\fIErr\fR` value,`\fIexpect\fR` will cause the program to crash and display the message that youpassed as an argument to `\fIexpect\fR`\. If the `\fIread_line\fR` method returns an `\fIErr\fR`,it would likely be the result of an error coming from the underlying operatingsystem\. If this instance of `\fIio::Result\fR` is an `\fIOk\fR` value, `\fIexpect\fR` will takethe return value that `\fIOk\fR` is holding and return just that value to you so youcan use it\. In this case, that value is the number of bytes in what the userentered into standard input\.
.P
If you don’t call `\fIexpect\fR`, the program will compile, but you’ll get a warning:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
warning: unused `Result` that must be used
  \-\-> src/main\.rs:10:5
   |
10 |     io::stdin()\.read_line(&mut guess);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 1 warning emitted

    Finished dev [unoptimized + debuginfo] target(s) in 0\.59s

.EE

.RE
.P
Rust warns that you haven’t used the `\fIResult\fR` value returned from `\fIread_line\fR`,indicating that the program hasn’t handled a possible error\.
.P
The right way to suppress the warning is to actually write error handling, butbecause you just want to crash this program when a problem occurs, you can use`\fIexpect\fR`\. You’ll learn about recovering from errors in Chapter 9\.
.br

.br
\fBPrinting Values with \fR
.br
=======================
.br
`\fIprintln!\fR` Placeholders
.P
Aside from the closing curly bracket, there’s only one more line to discuss inthe code added so far, which is the following:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
    println!("You guessed: {}", guess);
# }

.EE

.RE
.P
This line prints the string we saved the user’s input in\. The set of curlybrackets, `\fI{}\fR`, is a placeholder: think of `\fI{}\fR` as little crab pincers thathold a value in place\. You can print more than one value using curly brackets:the first set of curly brackets holds the first value listed after the formatstring, the second set holds the second value, and so on\. Printing multiplevalues in one call to `\fIprintln!\fR` would look like this:
.RS
.IP \fBrust\fR 2

.br
.EX
let x = 5;
let y = 10;

println!("x = {} and y = {}", x, y);

.EE

.RE
.P
This code would print `\fIx = 5 and y = 10\fR`\.
.br

.br
\fBTesting the First Part\fR
.br
========================
.br

.P
Let’s test the first part of the guessing game\. Run it using `\fIcargo run\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 6\.44s
     Running `target/debug/guessing_game`
Guess the number!
Please input your guess\.
6
You guessed: 6

.EE

.RE
.P
At this point, the first part of the game is done: we’re getting input from thekeyboard and then printing it\.
.br

.br
\fBGenerating a Secret Number\fR
.br
============================
.br

.P
Next, we need to generate a secret number that the user will try to guess\. Thesecret number should be different every time so the game is fun to play morethan once\. Let’s use a random number between 1 and 100 so the game isn’t toodifficult\. Rust doesn’t yet include random number functionality in its standardlibrary\. However, the Rust team does provide a 
.UR https://crates\.io/crates/rand
.UE
`\fIrand\fR` crate\.
.br

.br
\fBUsing a Crate to Get More Functionality\fR
.br
=========================================
.br

.P
Remember that a crate is a collection of Rust source code files\. The projectwe’ve been building is a \fIbinary crate\fR, which is an executable\. The `\fIrand\fR`crate is a \fIlibrary crate\fR, which contains code intended to be used in otherprograms\.
.P
Cargo’s coordination of external crates is where Cargo really shines\. Before wecan write code that uses `\fIrand\fR`, we need to modify the \fICargo\.toml\fR file toinclude the `\fIrand\fR` crate as a dependency\. Open that file now and add thefollowing line to the bottom beneath the `\fI[dependencies]\fR` section header thatCargo created for you\. Be sure to specify `\fIrand\fR` exactly as we have here, orthe code examples in this tutorial may not work\.Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
rand = "0\.8\.3"

.EE

.RE
.P
In the \fICargo\.toml\fR file, everything that follows a header is part of a sectionthat continues until another section starts\. The `\fI[dependencies]\fR` section iswhere you tell Cargo which external crates your project depends on and whichversions of those crates you require\. In this case, we’ll specify the `\fIrand\fR`crate with the semantic version specifier `\fI0\.8\.3\fR`\. Cargo understands 
.UR http://semver\.org
.UE
SemanticVersioning (sometimes called \fISemVer\fR), which is astandard for writing version numbers\. The number `\fI0\.8\.3\fR` is actually shorthandfor `\fI^0\.8\.3\fR`, which means any version that is at least `\fI0\.8\.3\fR` but below`\fI0\.9\.0\fR`\. Cargo considers these versions to have public APIs compatible withversion `\fI0\.8\.3\fR`, and this specification ensures you'll get the latest patchrelease that will still compile with the code in this chapter\. Any version`\fI0\.9\.0\fR` or greater is not guaranteed to have the same API as what the followingexamples use\.
.P
Now, without changing any of the code, let’s build the project, as shown inListing 2\-2\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
    Updating crates\.io index
  Downloaded rand v0\.8\.3
  Downloaded libc v0\.2\.86
  Downloaded getrandom v0\.2\.2
  Downloaded cfg\-if v1\.0\.0
  Downloaded ppv\-lite86 v0\.2\.10
  Downloaded rand_chacha v0\.3\.0
  Downloaded rand_core v0\.6\.2
   Compiling rand_core v0\.6\.2
   Compiling libc v0\.2\.86
   Compiling getrandom v0\.2\.2
   Compiling cfg\-if v1\.0\.0
   Compiling ppv\-lite86 v0\.2\.10
   Compiling rand_chacha v0\.3\.0
   Compiling rand v0\.8\.3
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 2\.53s

.EE

.RE
Listing 2\-2: The output from running `\fIcargo build\fR` afteradding the rand crate as a dependency
.P
You may see different version numbers (but they will all be compatible withthe code, thanks to SemVer!), different lines (depending on the operatingsystem), and the lines may be in a different order\.
.P
Now that we have an external dependency, Cargo fetches the latest versions ofeverything from the \fIregistry\fR, which is a copy of data from
.UR https://crates\.io/
.UE
Crates\.io\. Crates\.io is where people in the Rust ecosystem posttheir open source Rust projects for others to use\.
.P
After updating the registry, Cargo checks the `\fI[dependencies]\fR` section anddownloads any crates you don’t have yet\. In this case, although we only listed`\fIrand\fR` as a dependency, Cargo also grabbed other crates that `\fIrand\fR` depends onto work\. After downloading the crates, Rust compiles them and then compiles theproject with the dependencies available\.
.P
If you immediately run `\fIcargo build\fR` again without making any changes, youwon’t get any output aside from the `\fIFinished\fR` line\. Cargo knows it has alreadydownloaded and compiled the dependencies, and you haven’t changed anythingabout them in your \fICargo\.toml\fR file\. Cargo also knows that you haven’t changedanything about your code, so it doesn’t recompile that either\. With nothing todo, it simply exits\.
.P
If you open up the \fIsrc/main\.rs\fR file, make a trivial change, and then save itand build again, you’ll only see two lines of output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 2\.53 secs

.EE

.RE
.P
These lines show Cargo only updates the build with your tiny change to the\fIsrc/main\.rs\fR file\. Your dependencies haven’t changed, so Cargo knows it canreuse what it has already downloaded and compiled for those\. It just rebuildsyour part of the code\.
.br

.br
\fBEnsuring Reproducible Builds with the \fR
.br
========================================
.br
\fICargo\.lock\fR File
.P
Cargo has a mechanism that ensures you can rebuild the same artifact every timeyou or anyone else builds your code: Cargo will use only the versions of thedependencies you specified until you indicate otherwise\. For example, whathappens if next week version 0\.8\.4 of the `\fIrand\fR` crate comes out, and thatversion contains an important bug fix, but it also contains a regression thatwill break your code?
.P
The answer to this problem is the \fICargo\.lock\fR file, which was created thefirst time you ran `\fIcargo build\fR` and is now in your \fIguessing_game\fR directory\.When you build a project for the first time, Cargo figures out all theversions of the dependencies that fit the criteria and then writes them tothe \fICargo\.lock\fR file\. When you build your project in the future, Cargo willsee that the \fICargo\.lock\fR file exists and use the versions specified thererather than doing all the work of figuring out versions again\. This lets youhave a reproducible build automatically\. In other words, your project willremain at `\fI0\.8\.3\fR` until you explicitly upgrade, thanks to the \fICargo\.lock\fRfile\.
.br

.br
\fBUpdating a Crate to Get a New Version\fR
.br
=======================================
.br

.P
When you \fIdo\fR want to update a crate, Cargo provides another command, `\fIupdate\fR`,which will ignore the \fICargo\.lock\fR file and figure out all the latest versionsthat fit your specifications in \fICargo\.toml\fR\. If that works, Cargo will writethose versions to the \fICargo\.lock\fR file\.
.P
But by default, Cargo will only look for versions greater than `\fI0\.8\.3\fR` and lessthan `\fI0\.9\.0\fR`\. If the `\fIrand\fR` crate has released two new versions, `\fI0\.8\.4\fR` and`\fI0\.9\.0\fR`, you would see the following if you ran `\fIcargo update\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo update
    Updating crates\.io index
    Updating rand v0\.8\.3 \-> v0\.8\.4

.EE

.RE
.P
At this point, you would also notice a change in your \fICargo\.lock\fR file notingthat the version of the `\fIrand\fR` crate you are now using is `\fI0\.8\.4\fR`\.
.P
If you wanted to use `\fIrand\fR` version `\fI0\.9\.0\fR` or any version in the `\fI0\.9\.x\fR`series, you’d have to update the \fICargo\.toml\fR file to look like this instead:
.RS
.IP \fBtoml\fR 2

.br
.EX
[dependencies]
rand = "0\.9\.0"

.EE

.RE
.P
The next time you run `\fIcargo build\fR`, Cargo will update the registry of cratesavailable and reevaluate your `\fIrand\fR` requirements according to the new versionyou have specified\.
.P
There’s a lot more to say about 
.UR http://doc\.crates\.io
.UE
Cargo and 
.UR http://doc\.crates\.io/crates\-io\.html
.UE
itsecosystem which we’ll discuss in Chapter 14, butfor now, that’s all you need to know\. Cargo makes it very easy to reuselibraries, so Rustaceans are able to write smaller projects that are assembledfrom a number of packages\.
.br

.br
\fBGenerating a Random Number\fR
.br
============================
.br

.P
Now that you’ve added the `\fIrand\fR` crate to \fICargo\.toml\fR, let’s start using`\fIrand\fR`\. The next step is to update \fIsrc/main\.rs\fR, as shown in Listing 2\-3\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::io;
use rand::Rng;

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng()\.gen_range(1\.\.101);

    println!("The secret number is: {}", secret_number);

    println!("Please input your guess\.");

    let mut guess = String::new();

    io::stdin()
        \.read_line(&mut guess)
        \.expect("Failed to read line");

    println!("You guessed: {}", guess);
}

.EE

.RE
Listing 2\-3: Adding code to generate a randomnumber
.P
First, we add a `\fIuse\fR` line: `\fIuse rand::Rng\fR`\. The `\fIRng\fR` trait definesmethods that random number generators implement, and this trait must be inscope for us to use those methods\. Chapter 10 will cover traits in detail\.
.P
Next, we’re adding two lines in the middle\. The `\fIrand::thread_rng\fR` functionwill give us the particular random number generator that we’re going to use:one that is local to the current thread of execution and seeded by theoperating system\. Then we call the `\fIgen_range\fR` method on the random numbergenerator\. This method is defined by the `\fIRng\fR` trait that we brought into scopewith the `\fIuse rand::Rng\fR` statement\. The `\fIgen_range\fR` method takes a rangeexpression as an argument and generates a random number in the range\. The kindof range expression we’re using here takes the form `\fIstart\.\.end\fR`\. It’sinclusive on the lower bound but exclusive on the upper bound, so we need tospecify `\fI1\.\.101\fR` to request a number between 1 and 100\. Alternatively, we couldpass the range `\fI1\.\.=100\fR`, which is equivalent\.
.P
Note: You won’t just know which traits to use and which methods and functionsto call from a crate\. Instructions for using a crate are in each crate’sdocumentation\. Another neat feature of Cargo is that you can run the `\fIcargo doc \-\-open\fR` command, which will build documentation provided by all of yourdependencies locally and open it in your browser\. If you’re interested inother functionality in the `\fIrand\fR` crate, for example, run `\fIcargo doc \-\-open\fR`and click `\fIrand\fR` in the sidebar on the left\.
.P
The second line that we added to the middle of the code prints the secretnumber\. This is useful while we’re developing the program to be able to testit, but we’ll delete it from the final version\. It’s not much of a game if theprogram prints the answer as soon as it starts!
.P
Try running the program a few times:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 2\.53s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 7
Please input your guess\.
4
You guessed: 4

$ cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0\.02s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 83
Please input your guess\.
5
You guessed: 5

.EE

.RE
.P
You should get different random numbers, and they should all be numbers between1 and 100\. Great job!
.br

.br
\fBComparing the Guess to the Secret Number\fR
.br
==========================================
.br

.P
Now that we have user input and a random number, we can compare them\. That stepis shown in Listing 2\-4\. Note that this code won’t compile quite yet, as wewill explain\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use rand::Rng;
use std::cmp::Ordering;
use std::io;

fn main() {
    // \-\-snip\-\-
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
#     println!("The secret number is: {}", secret_number);
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");

    println!("You guessed: {}", guess);

    match guess\.cmp(&secret_number) {
        Ordering::Less => println!("Too small!"),
        Ordering::Greater => println!("Too big!"),
        Ordering::Equal => println!("You win!"),
    }
}

.EE

.RE
Listing 2\-4: Handling the possible return values ofcomparing two numbers
.P
The first new bit here is another `\fIuse\fR` statement, bringing a type called`\fIstd::cmp::Ordering\fR` into scope from the standard library\. Like `\fIResult\fR`,`\fIOrdering\fR` is another enum, but the variants for `\fIOrdering\fR` are `\fILess\fR`,`\fIGreater\fR`, and `\fIEqual\fR`\. These are the three outcomes that are possible when youcompare two values\.
.P
Then we add five new lines at the bottom that use the `\fIOrdering\fR` type\. The`\fIcmp\fR` method compares two values and can be called on anything that can becompared\. It takes a reference to whatever you want to compare with: here it’scomparing the `\fIguess\fR` to the `\fIsecret_number\fR`\. Then it returns a variant of the`\fIOrdering\fR` enum we brought into scope with the `\fIuse\fR` statement\. We use a
.UR ch06\-02\-match\.html
.UE
`\fImatch\fR` expression to decide what to do next based onwhich variant of `\fIOrdering\fR` was returned from the call to `\fIcmp\fR` with the valuesin `\fIguess\fR` and `\fIsecret_number\fR`\.
.P
A `\fImatch\fR` expression is made up of \fIarms\fR\. An arm consists of a \fIpattern\fR andthe code that should be run if the value given to the beginning of the `\fImatch\fR`expression fits that arm’s pattern\. Rust takes the value given to `\fImatch\fR` andlooks through each arm’s pattern in turn\. The `\fImatch\fR` construct and patternsare powerful features in Rust that let you express a variety of situations yourcode might encounter and make sure that you handle them all\. These featureswill be covered in detail in Chapter 6 and Chapter 18, respectively\.
.P
Let’s walk through an example of what would happen with the `\fImatch\fR` expressionused here\. Say that the user has guessed 50 and the randomly generated secretnumber this time is 38\. When the code compares 50 to 38, the `\fIcmp\fR` method willreturn `\fIOrdering::Greater\fR`, because 50 is greater than 38\. The `\fImatch\fR`expression gets the `\fIOrdering::Greater\fR` value and starts checking each arm’spattern\. It looks at the first arm’s pattern, `\fIOrdering::Less\fR`, and sees thatthe value `\fIOrdering::Greater\fR` does not match `\fIOrdering::Less\fR`, so it ignoresthe code in that arm and moves to the next arm\. The next arm’s pattern,`\fIOrdering::Greater\fR`, \fIdoes\fR match `\fIOrdering::Greater\fR`! The associated code inthat arm will execute and print `\fIToo big!\fR` to the screen\. The `\fImatch\fR`expression ends because it has no need to look at the last arm in this scenario\.
.P
However, the code in Listing 2\-4 won’t compile yet\. Let’s try it:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling libc v0\.2\.86
   Compiling getrandom v0\.2\.2
   Compiling cfg\-if v1\.0\.0
   Compiling ppv\-lite86 v0\.2\.10
   Compiling rand_core v0\.6\.2
   Compiling rand_chacha v0\.3\.0
   Compiling rand v0\.8\.3
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
error[E0308]: mismatched types
  \-\-> src/main\.rs:22:21
   |
22 |     match guess\.cmp(&secret_number) {
   |                     ^^^^^^^^^^^^^^ expected struct `String`, found integer
   |
   = note: expected reference `&String`
              found reference `&{integer}`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `guessing_game`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The core of the error states that there are \fImismatched types\fR\. Rust has astrong, static type system\. However, it also has type inference\. When we wrote`\fIlet mut guess = String::new()\fR`, Rust was able to infer that `\fIguess\fR` should bea `\fIString\fR` and didn’t make us write the type\. The `\fIsecret_number\fR`, on the otherhand, is a number type\. A few number types can have a value between 1 and 100:`\fIi32\fR`, a 32\-bit number; `\fIu32\fR`, an unsigned 32\-bit number; `\fIi64\fR`, a 64\-bitnumber; as well as others\. Rust defaults to an `\fIi32\fR`, which is the type of`\fIsecret_number\fR` unless you add type information elsewhere that would cause Rustto infer a different numerical type\. The reason for the error is that Rustcannot compare a string and a number type\.
.P
Ultimately, we want to convert the `\fIString\fR` the program reads as input into areal number type so we can compare it numerically to the secret number\. We cando that by adding another line to the `\fImain\fR` function body:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
#     println!("The secret number is: {}", secret_number);
# 
#     println!("Please input your guess\.");
# 
    // \-\-snip\-\-

    let mut guess = String::new();

    io::stdin()
        \.read_line(&mut guess)
        \.expect("Failed to read line");

    let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");

    println!("You guessed: {}", guess);

    match guess\.cmp(&secret_number) {
        Ordering::Less => println!("Too small!"),
        Ordering::Greater => println!("Too big!"),
        Ordering::Equal => println!("You win!"),
    }
# }

.EE

.RE
.P
The line is:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");

.EE

.RE
.P
We create a variable named `\fIguess\fR`\. But wait, doesn’t the program already havea variable named `\fIguess\fR`? It does, but Rust allows us to \fIshadow\fR the previousvalue of `\fIguess\fR` with a new one\. This feature is often used in situations inwhich you want to convert a value from one type to another type\. Shadowing letsus reuse the `\fIguess\fR` variable name rather than forcing us to create two uniquevariables, such as `\fIguess_str\fR` and `\fIguess\fR` for example\. (Chapter 3 coversshadowing in more detail\.)
.P
We bind `\fIguess\fR` to the expression `\fIguess\.trim()\.parse()\fR`\. The `\fIguess\fR` in theexpression refers to the original `\fIguess\fR` that was a `\fIString\fR` with the input init\. The `\fItrim\fR` method on a `\fIString\fR` instance will eliminate any whitespace atthe beginning and end\. Although `\fIu32\fR` can contain only numerical characters,the user must press enter to satisfy`\fIread_line\fR`\. When the user presses enter, anewline character is added to the string\. For example, if the user types 5 and presses enter,`\fIguess\fR` looks like this: `\fI5\n\fR`\. The `\fI\n\fR` represents “newline,” the result ofpressing enter (On Windows, pressing enter results in a carriage return and a newline,`\fI\r\n\fR`)\. The `\fItrim\fR` method eliminates `\fI\n\fR` or `\fI\r\n\fR`, resulting in just `\fI5\fR`\.
.P
The 
.UR \.\./std/primitive\.str\.html#method\.parse
.UE
`\fIparse\fR` method on strings parses a string into somekind of number\. Because this method can parse a variety of number types, weneed to tell Rust the exact number type we want by using `\fIlet guess: u32\fR`\. Thecolon (`\fI:\fR`) after `\fIguess\fR` tells Rust we’ll annotate the variable’s type\. Rusthas a few built\-in number types; the `\fIu32\fR` seen here is an unsigned, 32\-bitinteger\. It’s a good default choice for a small positive number\. You’ll learnabout other number types in Chapter 3\. Additionally, the `\fIu32\fR` annotation inthis example program and the comparison with `\fIsecret_number\fR` means that Rustwill infer that `\fIsecret_number\fR` should be a `\fIu32\fR` as well\. So now thecomparison will be between two values of the same type!
.P
The call to `\fIparse\fR` could easily cause an error\. If, for example, the stringcontained `\fIA👍%\fR`, there would be no way to convert that to a number\. Because itmight fail, the `\fIparse\fR` method returns a `\fIResult\fR` type, much as the `\fIread_line\fR`method does (discussed earlier in 
.UR #handling\-potential\-failure\-with\-the\-result\-type
.UE
“Handling Potential Failure with the`\fIResult\fR` Type”)\. We’ll treat this `\fIResult\fR` the same way by using the `\fIexpect\fR` methodagain\. If `\fIparse\fR` returns an `\fIErr\fR` `\fIResult\fR` variant because it couldn’t createa number from the string, the `\fIexpect\fR` call will crash the game and print themessage we give it\. If `\fIparse\fR` can successfully convert the string to a number,it will return the `\fIOk\fR` variant of `\fIResult\fR`, and `\fIexpect\fR` will return thenumber that we want from the `\fIOk\fR` value\.
.P
Let’s run the program now!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.43s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 58
Please input your guess\.
  76
You guessed: 76
Too big!

.EE

.RE
.P
Nice! Even though spaces were added before the guess, the program still figuredout that the user guessed 76\. Run the program a few times to verify thedifferent behavior with different kinds of input: guess the number correctly,guess a number that is too high, and guess a number that is too low\.
.P
We have most of the game working now, but the user can make only one guess\.Let’s change that by adding a loop!
.br

.br
\fBAllowing Multiple Guesses with Looping\fR
.br
========================================
.br

.P
The `\fIloop\fR` keyword creates an infinite loop\. We’ll add that now to give usersmore chances at guessing the number:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
    // \-\-snip\-\-

    println!("The secret number is: {}", secret_number);

    loop {
        println!("Please input your guess\.");

        // \-\-snip\-\-

# 
#         let mut guess = String::new();
# 
#         io::stdin()
#             \.read_line(&mut guess)
#             \.expect("Failed to read line");
# 
#         let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");
# 
#         println!("You guessed: {}", guess);
# 
        match guess\.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => println!("You win!"),
        }
    }
}

.EE

.RE
.P
As you can see, we’ve moved everything into a loop from the guess input promptonward\. Be sure to indent the lines inside the loop another four spaces eachand run the program again\. Notice that there is a new problem because theprogram is doing exactly what we told it to do: ask for another guess forever!It doesn’t seem like the user can quit!
.P
The user could always interrupt the program by using the keyboard shortcut ctrl\-c\. But there’s another way to escape thisinsatiable monster, as mentioned in the `\fIparse\fR` discussion in 
.UR #comparing\-the\-guess\-to\-the\-secret\-number
.UE
“Comparing theGuess to the Secret Number”: if the user enters a non\-number answer, the program will crash\. Theuser can take advantage of that in order to quit, as shown here:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.50s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 59
Please input your guess\.
45
You guessed: 45
Too small!
Please input your guess\.
60
You guessed: 60
Too big!
Please input your guess\.
59
You guessed: 59
You win!
Please input your guess\.
quit
thread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main\.rs:28:47
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
Typing `\fIquit\fR` actually quits the game, but so will any other non\-number input\.However, this is suboptimal to say the least\. We want the game to automaticallystop when the correct number is guessed\.
.br

.br
\fBQuitting After a Correct Guess\fR
.br
================================
.br

.P
Let’s program the game to quit when the user wins by adding a `\fIbreak\fR` statement:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
#     println!("The secret number is: {}", secret_number);
# 
#     loop {
#         println!("Please input your guess\.");
# 
#         let mut guess = String::new();
# 
#         io::stdin()
#             \.read_line(&mut guess)
#             \.expect("Failed to read line");
# 
#         let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");
# 
#         println!("You guessed: {}", guess);
# 
        // \-\-snip\-\-

        match guess\.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}

.EE

.RE
.P
Adding the `\fIbreak\fR` line after `\fIYou win!\fR` makes the program exit the loop whenthe user guesses the secret number correctly\. Exiting the loop also meansexiting the program, because the loop is the last part of `\fImain\fR`\.
.br

.br
\fBHandling Invalid Input\fR
.br
========================
.br

.P
To further refine the game’s behavior, rather than crashing the program whenthe user inputs a non\-number, let’s make the game ignore a non\-number so theuser can continue guessing\. We can do that by altering the line where `\fIguess\fR`is converted from a `\fIString\fR` to a `\fIu32\fR`, as shown in Listing 2\-5\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
#     println!("The secret number is: {}", secret_number);
# 
#     loop {
#         println!("Please input your guess\.");
# 
#         let mut guess = String::new();
# 
        // \-\-snip\-\-

        io::stdin()
            \.read_line(&mut guess)
            \.expect("Failed to read line");

        let guess: u32 = match guess\.trim()\.parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {}", guess);

        // \-\-snip\-\-
# 
#         match guess\.cmp(&secret_number) {
#             Ordering::Less => println!("Too small!"),
#             Ordering::Greater => println!("Too big!"),
#             Ordering::Equal => {
#                 println!("You win!");
#                 break;
#             }
#         }
#     }
# }

.EE

.RE
Listing 2\-5: Ignoring a non\-number guess and asking foranother guess instead of crashing the program
.P
Switching from an `\fIexpect\fR` call to a `\fImatch\fR` expression is one way of movingfrom crashing on an error to handling the error\. Remember that `\fIparse\fR` returnsa `\fIResult\fR` type and `\fIResult\fR` is an enum that has the variants `\fIOk\fR` or `\fIErr\fR`\.We’re using a `\fImatch\fR` expression here, as we did with the `\fIOrdering\fR` result ofthe `\fIcmp\fR` method\.
.P
If `\fIparse\fR` is able to successfully turn the string into a number, it willreturn an `\fIOk\fR` value that contains the resulting number\. That `\fIOk\fR` value willmatch the first arm’s pattern, and the `\fImatch\fR` expression will just return the`\fInum\fR` value that `\fIparse\fR` produced and put inside the `\fIOk\fR` value\. That numberwill end up right where we want it in the new `\fIguess\fR` variable we’re creating\.
.P
If `\fIparse\fR` is \fInot\fR able to turn the string into a number, it will return an`\fIErr\fR` value that contains more information about the error\. The `\fIErr\fR` valuedoes not match the `\fIOk(num)\fR` pattern in the first `\fImatch\fR` arm, but it doesmatch the `\fIErr(_)\fR` pattern in the second arm\. The underscore, `\fI_\fR`, is acatchall value; in this example, we’re saying we want to match all `\fIErr\fR`values, no matter what information they have inside them\. So the program willexecute the second arm’s code, `\fIcontinue\fR`, which tells the program to go to thenext iteration of the `\fIloop\fR` and ask for another guess\. So, effectively, theprogram ignores all errors that `\fIparse\fR` might encounter!
.P
Now everything in the program should work as expected\. Let’s try it:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished dev [unoptimized + debuginfo] target(s) in 4\.45s
     Running `target/debug/guessing_game`
Guess the number!
The secret number is: 61
Please input your guess\.
10
You guessed: 10
Too small!
Please input your guess\.
99
You guessed: 99
Too big!
Please input your guess\.
foo
Please input your guess\.
61
You guessed: 61
You win!

.EE

.RE
.P
Awesome! With one tiny final tweak, we will finish the guessing game\. Recallthat the program is still printing the secret number\. That worked well fortesting, but it ruins the game\. Let’s delete the `\fIprintln!\fR` that outputs thesecret number\. Listing 2\-6 shows the final code\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use rand::Rng;
use std::cmp::Ordering;
use std::io;

fn main() {
    println!("Guess the number!");

    let secret_number = rand::thread_rng()\.gen_range(1\.\.101);

    loop {
        println!("Please input your guess\.");

        let mut guess = String::new();

        io::stdin()
            \.read_line(&mut guess)
            \.expect("Failed to read line");

        let guess: u32 = match guess\.trim()\.parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        println!("You guessed: {}", guess);

        match guess\.cmp(&secret_number) {
            Ordering::Less => println!("Too small!"),
            Ordering::Greater => println!("Too big!"),
            Ordering::Equal => {
                println!("You win!");
                break;
            }
        }
    }
}

.EE

.RE
Listing 2\-6: Complete guessing game code
.br

.br
\fBSummary\fR
.br
=========
.br

.P
At this point, you’ve successfully built the guessing game\. Congratulations!
.P
This project was a hands\-on way to introduce you to many new Rust concepts:`\fIlet\fR`, `\fImatch\fR`, functions, the use of external crates, and more\. In the nextfew chapters, you’ll learn about these concepts in more detail\. Chapter 3covers concepts that most programming languages have, such as variables, datatypes, and functions, and shows how to use them in Rust\. Chapter 4 exploresownership, a feature that makes Rust different from other languages\. Chapter 5discusses structs and method syntax, and Chapter 6 explains how enums work\.
.SH "Common Programming Concepts"

.br

.br
\fBCommon Programming Concepts\fR
.br
=============================
.br

.P
This chapter covers concepts that appear in almost every programming languageand how they work in Rust\. Many programming languages have much in common attheir core\. None of the concepts presented in this chapter are unique to Rust,but we’ll discuss them in the context of Rust and explain the conventionsaround using these concepts\.
.P
Specifically, you’ll learn about variables, basic types, functions, comments,and control flow\. These foundations will be in every Rust program, and learningthem early will give you a strong core to start from\.
.br

.br
\fBKeywords\fR
.br
==========
.br

.P
The Rust language has a set of \fIkeywords\fR that are reserved for use bythe language only, much as in other languages\. Keep in mind that you cannotuse these words as names of variables or functions\. Most of the keywords havespecial meanings, and you’ll be using them to do various tasks in your Rustprograms; a few have no current functionality associated with them but havebeen reserved for functionality that might be added to Rust in the future\. Youcan find a list of the keywords in 
.UR appendix\-01\-keywords\.md
.UE
Appendix A\.
.SH "Variables and Mutability"

.br

.br
\fBVariables and Mutability\fR
.br
==========================
.br

.P
As mentioned in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#storing\-values\-with\-variables
.UE
“Storing Values withVariables” section, by defaultvariables are immutable\. This is one of many nudges Rust gives you to writeyour code in a way that takes advantage of the safety and easy concurrency thatRust offers\. However, you still have the option to make your variables mutable\.Let’s explore how and why Rust encourages you to favor immutability and whysometimes you might want to opt out\.
.P
When a variable is immutable, once a value is bound to a name, you can’t changethat value\. To illustrate this, let’s generate a new project called \fIvariables\fRin your \fIprojects\fR directory by using `\fIcargo new variables\fR`\.
.P
Then, in your new \fIvariables\fR directory, open \fIsrc/main\.rs\fR and replace itscode with the following code that won’t compile just yet:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = 5;
    println!("The value of x is: {}", x);
    x = 6;
    println!("The value of x is: {}", x);
}

.EE

.RE
.P
Save and run the program using `\fIcargo run\fR`\. You should receive an errormessage, as shown in this output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling variables v0\.1\.0 (file:///projects/variables)
error[E0384]: cannot assign twice to immutable variable `x`
 \-\-> src/main\.rs:4:5
  |
2 |     let x = 5;
  |         \-
  |         |
  |         first assignment to `x`
  |         help: consider making this binding mutable: `mut x`
3 |     println!("The value of x is: {}", x);
4 |     x = 6;
  |     ^^^^^ cannot assign twice to immutable variable

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0384`\.
error: could not compile `variables`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This example shows how the compiler helps you find errors in your programs\.Even though compiler errors can be frustrating, they only mean your programisn’t safely doing what you want it to do yet; they do \fInot\fR mean that you’renot a good programmer! Experienced Rustaceans still get compiler errors\.
.P
The error message indicates that the cause of the error is that you `\fIcannot assign twice to immutable variable `x`\fR`, because you tried to assign a secondvalue to the immutable `\fIx\fR` variable\.
.P
It’s important that we get compile\-time errors when we attempt to change avalue that we previously designated as immutable because this very situationcan lead to bugs\. If one part of our code operates on the assumption that avalue will never change and another part of our code changes that value, it’spossible that the first part of the code won’t do what it was designed to do\.The cause of this kind of bug can be difficult to track down after the fact,especially when the second piece of code changes the value only \fIsometimes\fR\.
.P
In Rust, the compiler guarantees that when you state that a value won’t change,it really won’t change\. That means that when you’re reading and writing code,you don’t have to keep track of how and where a value might change\. Your codeis thus easier to reason through\.
.P
But mutability can be very useful\. Variables are immutable only by default; asyou did in Chapter 2, you can make them mutable by adding `\fImut\fR` in front of thevariable name\. In addition to allowing this value to change, `\fImut\fR` conveysintent to future readers of the code by indicating that other parts of the codewill be changing this variable’s value\.
.P
For example, let’s change \fIsrc/main\.rs\fR to the following:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut x = 5;
    println!("The value of x is: {}", x);
    x = 6;
    println!("The value of x is: {}", x);
}

.EE

.RE
.P
When we run the program now, we get this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling variables v0\.1\.0 (file:///projects/variables)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.30s
     Running `target/debug/variables`
The value of x is: 5
The value of x is: 6

.EE

.RE
.P
We’re allowed to change the value that `\fIx\fR` binds to from `\fI5\fR` to `\fI6\fR` when `\fImut\fR`is used\. In some cases, you’ll want to make a variable mutable because it makesthe code more convenient to write than if it had only immutable variables\.
.P
There are multiple trade\-offs to consider in addition to the prevention ofbugs\. For example, in cases where you’re using large data structures, mutatingan instance in place may be faster than copying and returning newly allocatedinstances\. With smaller data structures, creating new instances and writing ina more functional programming style may be easier to think through, so lowerperformance might be a worthwhile penalty for gaining that clarity\.
.br

.br
\fBDifferences Between Variables and Constants\fR
.br
=============================================
.br

.P
Being unable to change the value of a variable might have reminded you ofanother programming concept that most other languages have: \fIconstants\fR\. Likeimmutable variables, constants are values that are bound to a name and are notallowed to change, but there are a few differences between constants andvariables\.
.P
First, you aren’t allowed to use `\fImut\fR` with constants\. Constants aren’t justimmutable by default—they’re always immutable\.
.P
You declare constants using the `\fIconst\fR` keyword instead of the `\fIlet\fR` keyword,and the type of the value \fImust\fR be annotated\. We’re about to cover types andtype annotations in the next section, 
.UR ch03\-02\-data\-types\.html#data\-types
.UE
“Data Types,” so don’t worry about the details right now\. Just know that you must alwaysannotate the type\.
.P
Constants can be declared in any scope, including the global scope, which makesthem useful for values that many parts of code need to know about\.
.P
The last difference is that constants may be set only to a constant expression,not the result of a value that could only be computed at runtime\.
.P
Here’s an example of a constant declaration where the constant’s name is`\fITHREE_HOURS_IN_SECONDS\fR` and its value is set to the result of multiplying 60(the number of seconds in a minute) by 60 (the number of minutes in an hour) by3 (the number of hours we want to count in this program):
.RS
.IP \fBrust\fR 2

.br
.EX
const THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;

.EE

.RE
.P
Rust’s naming convention for constants is to use all uppercase with underscoresbetween words\. The compiler is able to evaluate a limited set of operations atcompile time, which lets us choose to write out this value in a way that’seasier to understand and verify, rather than setting this constant to the value10,800\. See the 
.UR \.\./reference/const_eval\.html
.UE
Rust Reference’s section on constant evaluationfor more information on what operations can be used when declaring constants\.
.P
Constants are valid for the entire time a program runs, within the scope theywere declared in\. This property makes constants useful for values in yourapplication domain that multiple parts of the program might need to know about,such as the maximum number of points any player of a game is allowed to earn orthe speed of light\.
.P
Naming hardcoded values used throughout your program as constants is useful inconveying the meaning of that value to future maintainers of the code\. It alsohelps to have only one place in your code you would need to change if thehardcoded value needed to be updated in the future\.
.br

.br
\fBShadowing\fR
.br
===========
.br

.P
As you saw in the guessing game tutorial in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#comparing\-the\-guess\-to\-the\-secret\-number
.UE
“Comparing the Guess to theSecret Number”section in Chapter 2, you can declare a new variable with the same name as aprevious variable\. Rustaceans say that the first variable is \fIshadowed\fR by thesecond, which means that the second variable’s value is what the program sees when thevariable is used\. We can shadow a variable by using the same variable’s nameand repeating the use of the `\fIlet\fR` keyword as follows:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 5;

    let x = x + 1;

    {
        let x = x * 2;
        println!("The value of x in the inner scope is: {}", x);
    }

    println!("The value of x is: {}", x);
}

.EE

.RE
.P
This program first binds `\fIx\fR` to a value of `\fI5\fR`\. Then it shadows `\fIx\fR` byrepeating `\fIlet x =\fR`, taking the original value and adding `\fI1\fR` so the value of`\fIx\fR` is then `\fI6\fR`\. Then, within an inner scope, the third `\fIlet\fR` statement alsoshadows `\fIx\fR`, multiplying the previous value by `\fI2\fR` to give `\fIx\fR` a value of `\fI12\fR`\.When that scope is over, the inner shadowing ends and `\fIx\fR` returns to being `\fI6\fR`\.When we run this program, it will output the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling variables v0\.1\.0 (file:///projects/variables)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/variables`
The value of x in the inner scope is: 12
The value of x is: 6

.EE

.RE
.P
Shadowing is different from marking a variable as `\fImut\fR`, because we’ll get acompile\-time error if we accidentally try to reassign to this variable withoutusing the `\fIlet\fR` keyword\. By using `\fIlet\fR`, we can perform a few transformationson a value but have the variable be immutable after those transformations havebeen completed\.
.P
The other difference between `\fImut\fR` and shadowing is that because we’reeffectively creating a new variable when we use the `\fIlet\fR` keyword again, we canchange the type of the value but reuse the same name\. For example, say ourprogram asks a user to show how many spaces they want between some text byinputting space characters, but we really want to store that input as a number:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let spaces = "   ";
    let spaces = spaces\.len();
# }

.EE

.RE
.P
This construct is allowed because the first `\fIspaces\fR` variable is a string typeand the second `\fIspaces\fR` variable, which is a brand\-new variable that happens tohave the same name as the first one, is a number type\. Shadowing thus spares usfrom having to come up with different names, such as `\fIspaces_str\fR` and`\fIspaces_num\fR`; instead, we can reuse the simpler `\fIspaces\fR` name\. However, if wetry to use `\fImut\fR` for this, as shown here, we’ll get a compile\-time error:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let mut spaces = "   ";
    spaces = spaces\.len();
# }

.EE

.RE
.P
The error says we’re not allowed to mutate a variable’s type:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling variables v0\.1\.0 (file:///projects/variables)
error[E0308]: mismatched types
 \-\-> src/main\.rs:3:14
  |
3 |     spaces = spaces\.len();
  |              ^^^^^^^^^^^^ expected `&str`, found `usize`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `variables`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Now that we’ve explored how variables work, let’s look at more data types theycan have\.
.SH "Data Types"

.br

.br
\fBData Types\fR
.br
============
.br

.P
Every value in Rust is of a certain \fIdata type\fR, which tells Rust what kind ofdata is being specified so it knows how to work with that data\. We’ll look attwo data type subsets: scalar and compound\.
.P
Keep in mind that Rust is a \fIstatically typed\fR language, which means that itmust know the types of all variables at compile time\. The compiler can usuallyinfer what type we want to use based on the value and how we use it\. In caseswhen many types are possible, such as when we converted a `\fIString\fR` to a numerictype using `\fIparse\fR` in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#comparing\-the\-guess\-to\-the\-secret\-number
.UE
“Comparing the Guess to the SecretNumber” section inChapter 2, we must add a type annotation, like this:
.RS
.IP \fBrust\fR 2

.br
.EX
let guess: u32 = "42"\.parse()\.expect("Not a number!");

.EE

.RE
.P
If we don’t add the type annotation here, Rust will display the followingerror, which means the compiler needs more information from us to know whichtype we want to use:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling no_type_annotations v0\.1\.0 (file:///projects/no_type_annotations)
error[E0282]: type annotations needed
 \-\-> src/main\.rs:2:9
  |
2 |     let guess = "42"\.parse()\.expect("Not a number!");
  |         ^^^^^ consider giving `guess` a type

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0282`\.
error: could not compile `no_type_annotations`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
You’ll see different type annotations for other data types\.
.br

.br
\fBScalar Types\fR
.br
==============
.br

.P
A \fIscalar\fR type represents a single value\. Rust has four primary scalar types:integers, floating\-point numbers, Booleans, and characters\. You may recognizethese from other programming languages\. Let’s jump into how they work in Rust\.
.br

.br
\fBInteger Types\fR
.br
===============
.br

.P
An \fIinteger\fR is a number without a fractional component\. We used one integertype in Chapter 2, the `\fIu32\fR` type\. This type declaration indicates that thevalue it’s associated with should be an unsigned integer (signed integer typesstart with `\fIi\fR`, instead of `\fIu\fR`) that takes up 32 bits of space\. Table 3\-1 showsthe built\-in integer types in Rust\. Each variant in the Signed and Unsignedcolumns (for example, `\fIi16\fR`) can be used to declare the type of an integervalue\.Table 3\-1: Integer Types in Rust
.P
| Length  | Signed  | Unsigned ||\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-|| 8\-bit   | `\fIi8\fR`    | `\fIu8\fR`     || 16\-bit  | `\fIi16\fR`   | `\fIu16\fR`    || 32\-bit  | `\fIi32\fR`   | `\fIu32\fR`    || 64\-bit  | `\fIi64\fR`   | `\fIu64\fR`    || 128\-bit | `\fIi128\fR`  | `\fIu128\fR`   || arch    | `\fIisize\fR` | `\fIusize\fR`  |
.P
Each variant can be either signed or unsigned and has an explicit size\.\fISigned\fR and \fIunsigned\fR refer to whether it’s possible for the number to benegative—in other words, whether the number needs to have a sign with it(signed) or whether it will only ever be positive and can therefore berepresented without a sign (unsigned)\. It’s like writing numbers on paper: whenthe sign matters, a number is shown with a plus sign or a minus sign; however,when it’s safe to assume the number is positive, it’s shown with no sign\.Signed numbers are stored using 
.UR https://en\.wikipedia\.org/wiki/Two%27s_complement
.UE
two’scomplementrepresentation\.
.P
Each signed variant can store numbers from \-(2n \- 1) to 2n \-1 \- 1 inclusive, where \fIn\fR is the number of bits that variant uses\. So an`\fIi8\fR` can store numbers from \-(27) to 27 \- 1, which equals\-128 to 127\. Unsigned variants can store numbers from 0 to 2n \- 1,so a `\fIu8\fR` can store numbers from 0 to 28 \- 1, which equals 0 to 255\.
.P
Additionally, the `\fIisize\fR` and `\fIusize\fR` types depend on the kind of computer yourprogram is running on: 64 bits if you’re on a 64\-bit architecture and 32 bitsif you’re on a 32\-bit architecture\.
.P
You can write integer literals in any of the forms shown in Table 3\-2\. Notethat number literals that can be multiple numeric types allow a type suffix,such as `\fI57u8\fR`, to designate the type\. Number literals can also use `\fI_\fR` as avisual separator to make the number easier to read, such as `\fI1_000\fR`, which willhave the same value as if you had specified `\fI1000\fR`\.Table 3\-2: Integer Literals in Rust
.P
| Number literals  | Example       ||\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|| Decimal          | `\fI98_222\fR`      || Hex              | `\fI0xff\fR`        || Octal            | `\fI0o77\fR`        || Binary           | `\fI0b1111_0000\fR` || Byte (`\fIu8\fR` only) | `\fIb'A'\fR`        |
.P
So how do you know which type of integer to use? If you’re unsure, Rust’sdefaults are generally good places to start: integer types default to `\fIi32\fR`\.The primary situation in which you’d use `\fIisize\fR` or `\fIusize\fR` is when indexingsome sort of collection\.
.br

.br
\fBInteger Overflow\fR
.br
==================
.br

.P
Let’s say you have a variable of type `\fIu8\fR` that can hold values between 0 and 255\.If you try to change the variable to a value outside of that range, suchas 256, \fIinteger overflow\fR will occur\. Rust has some interesting rulesinvolving this behavior\. When you’re compiling in debug mode, Rust includeschecks for integer overflow that cause your program to \fIpanic\fR at runtime ifthis behavior occurs\. Rust uses the term panicking when a program exits withan error; we’ll discuss panics in more depth in the 
.UR ch09\-01\-unrecoverable\-errors\-with\-panic\.html
.UE
“Unrecoverable Errorswith `\fIpanic!\fR`” section inChapter 9\.
.P
When you’re compiling in release mode with the `\fI\-\-release\fR` flag, Rust does\fInot\fR include checks for integer overflow that cause panics\. Instead, ifoverflow occurs, Rust performs \fItwo’s complement wrapping\fR\. In short, valuesgreater than the maximum value the type can hold “wrap around” to the minimumof the values the type can hold\. In the case of a `\fIu8\fR`, the value 256 becomes0, the value 257 becomes 1, and so on\. The program won’t panic, but thevariable will have a value that probably isn’t what you were expecting it tohave\. Relying on integer overflow’s wrapping behavior is considered an error\.
.P
To explicitly handle the possibility of overflow, you can use these familiesof methods that the standard library provides on primitive numeric types:
.P
Wrap in all modes with the `\fIwrapping_*\fR` methods, such as `\fIwrapping_add\fR`
.P
Return the `\fINone\fR` value if there is overflow with the `\fIchecked_*\fR` methods
.P
Return the value and a boolean indicating whether there was overflow withthe `\fIoverflowing_*\fR` methods
.P
Saturate at the value’s minimum or maximum values with `\fIsaturating_*\fR`methods
.br

.br
\fBFloating\-Point Types\fR
.br
======================
.br

.P
Rust also has two primitive types for \fIfloating\-point numbers\fR, which arenumbers with decimal points\. Rust’s floating\-point types are `\fIf32\fR` and `\fIf64\fR`,which are 32 bits and 64 bits in size, respectively\. The default type is `\fIf64\fR`because on modern CPUs it’s roughly the same speed as `\fIf32\fR` but is capable ofmore precision\.
.P
Here’s an example that shows floating\-point numbers in action:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 2\.0; // f64

    let y: f32 = 3\.0; // f32
}

.EE

.RE
.P
Floating\-point numbers are represented according to the IEEE\-754 standard\. The`\fIf32\fR` type is a single\-precision float, and `\fIf64\fR` has double precision\.
.br

.br
\fBNumeric Operations\fR
.br
====================
.br

.P
Rust supports the basic mathematical operations you’d expect for all of thenumber types: addition, subtraction, multiplication, division, and remainder\.Integer division rounds down to the nearest integer\. The following code showshow you’d use each numeric operation in a `\fIlet\fR` statement:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    // addition
    let sum = 5 + 10;

    // subtraction
    let difference = 95\.5 \- 4\.3;

    // multiplication
    let product = 4 * 30;

    // division
    let quotient = 56\.7 / 32\.2;
    let floored = 2 / 3; // Results in 0

    // remainder
    let remainder = 43 % 5;
}

.EE

.RE
.P
Each expression in these statements uses a mathematical operator and evaluatesto a single value, which is then bound to a variable\. 
.UR appendix\-02\-operators\.md
.UE
Appendix B contains alist of all operators that Rust provides\.
.br

.br
\fBThe Boolean Type\fR
.br
==================
.br

.P
As in most other programming languages, a Boolean type in Rust has two possiblevalues: `\fItrue\fR` and `\fIfalse\fR`\. Booleans are one byte in size\. The Boolean type inRust is specified using `\fIbool\fR`\. For example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let t = true;

    let f: bool = false; // with explicit type annotation
}

.EE

.RE
.P
The main way to use Boolean values is through conditionals, such as an `\fIif\fR`expression\. We’ll cover how `\fIif\fR` expressions work in Rust in the 
.UR ch03\-05\-control\-flow\.html#control\-flow
.UE
“ControlFlow” section\.
.br

.br
\fBThe Character Type\fR
.br
====================
.br

.P
So far we’ve worked only with numbers, but Rust supports letters too\. Rust’s`\fIchar\fR` type is the language’s most primitive alphabetic type, and the followingcode shows one way to use it\. (Note that `\fIchar\fR` literals are specified withsingle quotes, as opposed to string literals, which use double quotes\.)Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let c = 'z';
    let z = 'ℤ';
    let heart_eyed_cat = '😻';
}

.EE

.RE
.P
Rust’s `\fIchar\fR` type is four bytes in size and represents a Unicode Scalar Value,which means it can represent a lot more than just ASCII\. Accented letters;Chinese, Japanese, and Korean characters; emoji; and zero\-width spaces are allvalid `\fIchar\fR` values in Rust\. Unicode Scalar Values range from `\fIU+0000\fR` to`\fIU+D7FF\fR` and `\fIU+E000\fR` to `\fIU+10FFFF\fR` inclusive\. However, a “character” isn’treally a concept in Unicode, so your human intuition for what a “character” ismay not match up with what a `\fIchar\fR` is in Rust\. We’ll discuss this topic indetail in 
.UR ch08\-02\-strings\.html#storing\-utf\-8\-encoded\-text\-with\-strings
.UE
“Storing UTF\-8 Encoded Text with Strings”in Chapter 8\.
.br

.br
\fBCompound Types\fR
.br
================
.br
\fICompound types\fR can group multiple values into one type\. Rust has twoprimitive compound types: tuples and arrays\.
.br

.br
\fBThe Tuple Type\fR
.br
================
.br

.P
A tuple is a general way of grouping together a number of values with a varietyof types into one compound type\. Tuples have a fixed length: once declared,they cannot grow or shrink in size\.
.P
We create a tuple by writing a comma\-separated list of values insideparentheses\. Each position in the tuple has a type, and the types of thedifferent values in the tuple don’t have to be the same\. We’ve added optionaltype annotations in this example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let tup: (i32, f64, u8) = (500, 6\.4, 1);
}

.EE

.RE
.P
The variable `\fItup\fR` binds to the entire tuple, because a tuple is considered asingle compound element\. To get the individual values out of a tuple, we canuse pattern matching to destructure a tuple value, like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let tup = (500, 6\.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is: {}", y);
}

.EE

.RE
.P
This program first creates a tuple and binds it to the variable `\fItup\fR`\. It thenuses a pattern with `\fIlet\fR` to take `\fItup\fR` and turn it into three separatevariables, `\fIx\fR`, `\fIy\fR`, and `\fIz\fR`\. This is called \fIdestructuring\fR, because it breaksthe single tuple into three parts\. Finally, the program prints the value of`\fIy\fR`, which is `\fI6\.4\fR`\.
.P
In addition to destructuring through pattern matching, we can access a tupleelement directly by using a period (`\fI\.\fR`) followed by the index of the value wewant to access\. For example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x: (i32, f64, u8) = (500, 6\.4, 1);

    let five_hundred = x\.0;

    let six_point_four = x\.1;

    let one = x\.2;
}

.EE

.RE
.P
This program creates a tuple, `\fIx\fR`, and then makes new variables for eachelement by using their respective indices\. As with most programming languages,the first index in a tuple is 0\.
.P
The tuple without any values, `\fI()\fR`, is a special type that has only one value,also written `\fI()\fR`\. The type is called the \fIunit type\fR and the value is calledthe \fIunit value\fR\. Expressions implicitly return the unit value if they don’treturn any other value\.
.br

.br
\fBThe Array Type\fR
.br
================
.br

.P
Another way to have a collection of multiple values is with an \fIarray\fR\. Unlikea tuple, every element of an array must have the same type\. Arrays in Rust aredifferent from arrays in some other languages because arrays in Rust have afixed length, like tuples\.
.P
In Rust, the values going into an array are written as a comma\-separated listinside square brackets:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let a = [1, 2, 3, 4, 5];
}

.EE

.RE
.P
Arrays are useful when you want your data allocated on the stack rather thanthe heap (we will discuss the stack and the heap more in Chapter 4) or whenyou want to ensure you always have a fixed number of elements\. An array isn’tas flexible as the vector type, though\. A vector is a similar collection typeprovided by the standard library that \fIis\fR allowed to grow or shrink in size\.If you’re unsure whether to use an array or a vector, you should probably use avector\. Chapter 8 discusses vectors in more detail\.
.P
An example of when you might want to use an array rather than a vector is in aprogram that needs to know the names of the months of the year\. It’s veryunlikely that such a program will need to add or remove months, so you can usean array because you know it will always contain 12 elements:
.RS
.IP \fBrust\fR 2

.br
.EX
let months = ["January", "February", "March", "April", "May", "June", "July",
              "August", "September", "October", "November", "December"];

.EE

.RE
.P
You would write an array’s type by using square brackets, and within thebrackets include the type of each element, a semicolon, and then the number ofelements in the array, like so:
.RS
.IP \fBrust\fR 2

.br
.EX
let a: [i32; 5] = [1, 2, 3, 4, 5];

.EE

.RE
.P
Here, `\fIi32\fR` is the type of each element\. After the semicolon, the number `\fI5\fR`indicates the array contains five elements\.
.P
Writing an array’s type this way looks similar to an alternative syntax forinitializing an array: if you want to create an array that contains the samevalue for each element, you can specify the initial value, followed by asemicolon, and then the length of the array in square brackets, as shown here:
.RS
.IP \fBrust\fR 2

.br
.EX
let a = [3; 5];

.EE

.RE
.P
The array named `\fIa\fR` will contain `\fI5\fR` elements that will all be set to the value`\fI3\fR` initially\. This is the same as writing `\fIlet a = [3, 3, 3, 3, 3];\fR` but in amore concise way\.
.br

.br
\fBAccessing Array Elements\fR
.br
==========================
.br

.P
An array is a single chunk of memory of a known, fixed size that can beallocated on the stack\. You can access elements of an array using indexing,like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let a = [1, 2, 3, 4, 5];

    let first = a[0];
    let second = a[1];
}

.EE

.RE
.P
In this example, the variable named `\fIfirst\fR` will get the value `\fI1\fR`, becausethat is the value at index `\fI[0]\fR` in the array\. The variable named `\fIsecond\fR` willget the value `\fI2\fR` from index `\fI[1]\fR` in the array\.
.br

.br
\fBInvalid Array Element Access\fR
.br
==============================
.br

.P
What happens if you try to access an element of an array that is past the endof the array? Say you change the example to the following, which uses codesimilar to the guessing game in Chapter 2 to get an array index from the user:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,panics\fR 2

.br
.EX
use std::io;

fn main() {
    let a = [1, 2, 3, 4, 5];

    println!("Please enter an array index\.");

    let mut index = String::new();

    io::stdin()
        \.read_line(&mut index)
        \.expect("Failed to read line");

    let index: usize = index
        \.trim()
        \.parse()
        \.expect("Index entered was not a number");

    let element = a[index];

    println!(
        "The value of the element at index {} is: {}",
        index, element
    );
}

.EE

.RE
.P
This code compiles successfully\. If you run this code using `\fIcargo run\fR` andenter 0, 1, 2, 3, or 4, the program will print out the corresponding value atthat index in the array\. If you instead enter a number past the end of thearray, such as 10, you’ll see output like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main\.rs:19:19
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
The program resulted in a \fIruntime\fR error at the point of using an invalidvalue in the indexing operation\. The program exited with an error message anddidn’t execute the final `\fIprintln!\fR` statement\. When you attempt to access anelement using indexing, Rust will check that the index you’ve specified is lessthan the array length\. If the index is greater than or equal to the length,Rust will panic\. This check has to happen at runtime, especially in this case,because the compiler can’t possibly know what value a user will enter when theyrun the code later\.
.P
This is an example of Rust’s memory safety principles in action\. In manylow\-level languages, this kind of check is not done, and when you provide anincorrect index, invalid memory can be accessed\. Rust protects you against thiskind of error by immediately exiting instead of allowing the memory access andcontinuing\. Chapter 9 discusses more of Rust’s error handling\.
.SH Functions

.br

.br
\fBFunctions\fR
.br
===========
.br

.P
Functions are prevalent in Rust code\. You’ve already seen one of the mostimportant functions in the language: the `\fImain\fR` function, which is the entrypoint of many programs\. You’ve also seen the `\fIfn\fR` keyword, which allows you todeclare new functions\.
.P
Rust code uses \fIsnake case\fR as the conventional style for function and variablenames\. In snake case, all letters are lowercase and underscores separate words\.Here’s a program that contains an example function definition:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    println!("Hello, world!");

    another_function();
}

fn another_function() {
    println!("Another function\.");
}

.EE

.RE
.P
Function definitions in Rust start with `\fIfn\fR` and have a set of parenthesesafter the function name\. The curly brackets tell the compiler where thefunction body begins and ends\.
.P
We can call any function we’ve defined by entering its name followed by a setof parentheses\. Because `\fIanother_function\fR` is defined in the program, it can becalled from inside the `\fImain\fR` function\. Note that we defined `\fIanother_function\fR`\fIafter\fR the `\fImain\fR` function in the source code; we could have defined it beforeas well\. Rust doesn’t care where you define your functions, only that they’redefined somewhere\.
.P
Let’s start a new binary project named \fIfunctions\fR to explore functionsfurther\. Place the `\fIanother_function\fR` example in \fIsrc/main\.rs\fR and run it\. Youshould see the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.28s
     Running `target/debug/functions`
Hello, world!
Another function\.

.EE

.RE
.P
The lines execute in the order in which they appear in the `\fImain\fR` function\.First, the “Hello, world!” message prints, and then `\fIanother_function\fR` iscalled and its message is printed\.
.br

.br
\fBFunction Parameters\fR
.br
=====================
.br

.P
Functions can also be defined to have \fIparameters\fR, which are special variablesthat are part of a function’s signature\. When a function has parameters, youcan provide it with concrete values for those parameters\. Technically, theconcrete values are called \fIarguments\fR, but in casual conversation, people tendto use the words \fIparameter\fR and \fIargument\fR interchangeably for either thevariables in a function’s definition or the concrete values passed in when youcall a function\.
.P
The following rewritten version of `\fIanother_function\fR` shows what parameterslook like in Rust:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    another_function(5);
}

fn another_function(x: i32) {
    println!("The value of x is: {}", x);
}

.EE

.RE
.P
Try running this program; you should get the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.21s
     Running `target/debug/functions`
The value of x is: 5

.EE

.RE
.P
The declaration of `\fIanother_function\fR` has one parameter named `\fIx\fR`\. The type of`\fIx\fR` is specified as `\fIi32\fR`\. When `\fI5\fR` is passed to `\fIanother_function\fR`, the`\fIprintln!\fR` macro puts `\fI5\fR` where the pair of curly brackets were in the formatstring\.
.P
In function signatures, you \fImust\fR declare the type of each parameter\. This isa deliberate decision in Rust’s design: requiring type annotations in functiondefinitions means the compiler almost never needs you to use them elsewhere inthe code to figure out what type you mean\.
.P
When you want a function to have multiple parameters, separate the parameterdeclarations with commas, like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    print_labeled_measurement(5, 'h');
}

fn print_labeled_measurement(value: i32, unit_label: char) {
    println!("The measurement is: {}{}", value, unit_label);
}

.EE

.RE
.P
This example creates a function named `\fIprint_labeled_measurement\fR` with twoparameters\. The first parameter is named `\fIvalue\fR` and is an `\fIi32\fR`\. The second isnamed `\fIunit_label\fR` and is type `\fIchar\fR`\. The function then prints text containingboth the `\fIvalue\fR` and the `\fIunit_label\fR`\.
.P
Let’s try running this code\. Replace the program currently in your \fIfunctions\fRproject’s \fIsrc/main\.rs\fR file with the preceding example and run it using `\fIcargo run\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/functions`
The measurement is: 5h

.EE

.RE
.P
Because we called the function with `\fI5\fR` as the value for `\fIvalue\fR` and `\fI'h'\fR` asthe value for `\fIunit_label\fR`, the program output contains those values\.
.br

.br
\fBFunction Bodies Contain Statements and Expressions\fR
.br
====================================================
.br

.P
Function bodies are made up of a series of statements optionally ending in anexpression\. So far, we’ve only covered functions without an ending expression,but you have seen an expression as part of a statement\. Because Rust is anexpression\-based language, this is an important distinction to understand\.Other languages don’t have the same distinctions, so let’s look at whatstatements and expressions are and how their differences affect the bodies offunctions\.
.P
We’ve actually already used statements and expressions\. \fIStatements\fR areinstructions that perform some action and do not return a value\. \fIExpressions\fRevaluate to a resulting value\. Let’s look at some examples\.
.P
Creating a variable and assigning a value to it with the `\fIlet\fR` keyword is astatement\. In Listing 3\-1, `\fIlet y = 6;\fR` is a statement\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let y = 6;
}

.EE

.RE
Listing 3\-1: A `\fImain\fR` function declaration containing one statement
.P
Function definitions are also statements; the entire preceding example is astatement in itself\.
.P
Statements do not return values\. Therefore, you can’t assign a `\fIlet\fR` statementto another variable, as the following code tries to do; you’ll get an error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = (let y = 6);
}

.EE

.RE
.P
When you run this program, the error you’ll get looks like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
error[E0658]: `let` expressions in this position are experimental
 \-\-> src/main\.rs:2:14
  |
2 |     let x = (let y = 6);
  |              ^^^^^^^^^
  |
  = note: see issue #53667 <https://github\.com/rust\-lang/rust/issues/53667> for more information
  = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error: expected expression, found statement (`let`)
 \-\-> src/main\.rs:2:14
  |
2 |     let x = (let y = 6);
  |              ^^^^^^^^^
  |
  = note: variable declaration using `let` is a statement

warning: unnecessary parentheses around assigned value
 \-\-> src/main\.rs:2:13
  |
2 |     let x = (let y = 6);
  |             ^^^^^^^^^^^ help: remove these parentheses
  |
  = note: `#[warn(unused_parens)]` on by default

error: aborting due to 2 previous errors; 1 warning emitted

For more information about this error, try `rustc \-\-explain E0658`\.
error: could not compile `functions`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The `\fIlet y = 6\fR` statement does not return a value, so there isn’t anything for`\fIx\fR` to bind to\. This is different from what happens in other languages, such asC and Ruby, where the assignment returns the value of the assignment\. In thoselanguages, you can write `\fIx = y = 6\fR` and have both `\fIx\fR` and `\fIy\fR` have the value`\fI6\fR`; that is not the case in Rust\.
.P
Expressions evaluate to a value and make up most of the rest of the code thatyou’ll write in Rust\. Consider a math operation, such as `\fI5 + 6\fR`, which is anexpression that evaluates to the value `\fI11\fR`\. Expressions can be part ofstatements: in Listing 3\-1, the `\fI6\fR` in the statement `\fIlet y = 6;\fR` is anexpression that evaluates to the value `\fI6\fR`\. Calling a function is anexpression\. Calling a macro is an expression\. The block that we use to createnew scopes, `\fI{}\fR`, is an expression, for example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 5;

    let y = {
        let x = 3;
        x + 1
    };

    println!("The value of y is: {}", y);
}

.EE

.RE
.P
This expression:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
{
    let x = 3;
    x + 1
}

.EE

.RE
.P
is a block that, in this case, evaluates to `\fI4\fR`\. That value gets bound to `\fIy\fR`as part of the `\fIlet\fR` statement\. Note the `\fIx + 1\fR` line without a semicolon atthe end, which is unlike most of the lines you’ve seen so far\. Expressions donot include ending semicolons\. If you add a semicolon to the end of anexpression, you turn it into a statement, which will then not return a value\.Keep this in mind as you explore function return values and expressions next\.
.br

.br
\fBFunctions with Return Values\fR
.br
==============================
.br

.P
Functions can return values to the code that calls them\. We don’t name returnvalues, but we do declare their type after an arrow (`\fI\->\fR`)\. In Rust, the returnvalue of the function is synonymous with the value of the final expression inthe block of the body of a function\. You can return early from a function byusing the `\fIreturn\fR` keyword and specifying a value, but most functions returnthe last expression implicitly\. Here’s an example of a function that returns avalue:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn five() \-> i32 {
    5
}

fn main() {
    let x = five();

    println!("The value of x is: {}", x);
}

.EE

.RE
.P
There are no function calls, macros, or even `\fIlet\fR` statements in the `\fIfive\fR`function—just the number `\fI5\fR` by itself\. That’s a perfectly valid function inRust\. Note that the function’s return type is specified too, as `\fI\-> i32\fR`\. Tryrunning this code; the output should look like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.30s
     Running `target/debug/functions`
The value of x is: 5

.EE

.RE
.P
The `\fI5\fR` in `\fIfive\fR` is the function’s return value, which is why the return typeis `\fIi32\fR`\. Let’s examine this in more detail\. There are two important bits:first, the line `\fIlet x = five();\fR` shows that we’re using the return value of afunction to initialize a variable\. Because the function `\fIfive\fR` returns a `\fI5\fR`,that line is the same as the following:
.RS
.IP \fBrust\fR 2

.br
.EX
let x = 5;

.EE

.RE
.P
Second, the `\fIfive\fR` function has no parameters and defines the type of thereturn value, but the body of the function is a lonely `\fI5\fR` with no semicolonbecause it’s an expression whose value we want to return\.
.P
Let’s look at another example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = plus_one(5);

    println!("The value of x is: {}", x);
}

fn plus_one(x: i32) \-> i32 {
    x + 1
}

.EE

.RE
.P
Running this code will print `\fIThe value of x is: 6\fR`\. But if we place asemicolon at the end of the line containing `\fIx + 1\fR`, changing it from anexpression to a statement, we’ll get an error\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = plus_one(5);

    println!("The value of x is: {}", x);
}

fn plus_one(x: i32) \-> i32 {
    x + 1;
}

.EE

.RE
.P
Compiling this code produces an error, as follows:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling functions v0\.1\.0 (file:///projects/functions)
error[E0308]: mismatched types
 \-\-> src/main\.rs:7:24
  |
7 | fn plus_one(x: i32) \-> i32 {
  |    \-\-\-\-\-\-\-\-            ^^^ expected `i32`, found `()`
  |    |
  |    implicitly returns `()` as its body has no tail or `return` expression
8 |     x + 1;
  |          \- help: consider removing this semicolon

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `functions`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The main error message, “mismatched types,” reveals the core issue with thiscode\. The definition of the function `\fIplus_one\fR` says that it will return an`\fIi32\fR`, but statements don’t evaluate to a value, which is expressed by `\fI()\fR`,the unit type\. Therefore, nothing is returned, which contradicts the functiondefinition and results in an error\. In this output, Rust provides a message topossibly help rectify this issue: it suggests removing the semicolon, whichwould fix the error\.
.SH Comments

.br

.br
\fBComments\fR
.br
==========
.br

.P
All programmers strive to make their code easy to understand, but sometimesextra explanation is warranted\. In these cases, programmers leave notes, or\fIcomments\fR, in their source code that the compiler will ignore but peoplereading the source code may find useful\.
.P
Here’s a simple comment:
.RS
.IP \fBrust\fR 2

.br
.EX
// hello, world

.EE

.RE
.P
In Rust, the idiomatic comment style starts a comment with two slashes, and thecomment continues until the end of the line\. For comments that extend beyond asingle line, you’ll need to include `\fI//\fR` on each line, like this:
.RS
.IP \fBrust\fR 2

.br
.EX
// So we’re doing something complicated here, long enough that we need
// multiple lines of comments to do it! Whew! Hopefully, this comment will
// explain what’s going on\.

.EE

.RE
.P
Comments can also be placed at the end of lines containing code:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let lucky_number = 7; // I’m feeling lucky today
}

.EE

.RE
.P
But you’ll more often see them used in this format, with the comment on aseparate line above the code it’s annotating:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    // I’m feeling lucky today
    let lucky_number = 7;
}

.EE

.RE
.P
Rust also has another kind of comment, documentation comments, which we’lldiscuss in the “Publishing a Crate to Crates\.io” section of Chapter 14\.
.SH "Control Flow"

.br

.br
\fBControl Flow\fR
.br
==============
.br

.P
Deciding whether or not to run some code depending on if a condition is trueand deciding to run some code repeatedly while a condition is true are basicbuilding blocks in most programming languages\. The most common constructs thatlet you control the flow of execution of Rust code are `\fIif\fR` expressions andloops\.`\fIif\fR` Expressions
.P
An `\fIif\fR` expression allows you to branch your code depending on conditions\. Youprovide a condition and then state, “If this condition is met, run this blockof code\. If the condition is not met, do not run this block of code\.”
.P
Create a new project called \fIbranches\fR in your \fIprojects\fR directory to explorethe `\fIif\fR` expression\. In the \fIsrc/main\.rs\fR file, input the following:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number = 3;

    if number < 5 {
        println!("condition was true");
    } else {
        println!("condition was false");
    }
}

.EE

.RE
.P
All `\fIif\fR` expressions start with the keyword `\fIif\fR`, which is followed by acondition\. In this case, the condition checks whether or not the variable`\fInumber\fR` has a value less than 5\. The block of code we want to execute if thecondition is true is placed immediately after the condition inside curlybrackets\. Blocks of code associated with the conditions in `\fIif\fR` expressions aresometimes called \fIarms\fR, just like the arms in `\fImatch\fR` expressions that wediscussed in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#comparing\-the\-guess\-to\-the\-secret\-number
.UE
“Comparing the Guess to the SecretNumber” section ofChapter 2\.
.P
Optionally, we can also include an `\fIelse\fR` expression, which we choseto do here, to give the program an alternative block of code to execute shouldthe condition evaluate to false\. If you don’t provide an `\fIelse\fR` expression andthe condition is false, the program will just skip the `\fIif\fR` block and move onto the next bit of code\.
.P
Try running this code; you should see the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/branches`
condition was true

.EE

.RE
.P
Let’s try changing the value of `\fInumber\fR` to a value that makes the condition`\fIfalse\fR` to see what happens:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
    let number = 7;
# 
#     if number < 5 {
#         println!("condition was true");
#     } else {
#         println!("condition was false");
#     }
# }

.EE

.RE
.P
Run the program again, and look at the output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/branches`
condition was false

.EE

.RE
.P
It’s also worth noting that the condition in this code \fImust\fR be a `\fIbool\fR`\. Ifthe condition isn’t a `\fIbool\fR`, we’ll get an error\. For example, try running thefollowing code:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let number = 3;

    if number {
        println!("number was three");
    }
}

.EE

.RE
.P
The `\fIif\fR` condition evaluates to a value of `\fI3\fR` this time, and Rust throws anerror:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
error[E0308]: mismatched types
 \-\-> src/main\.rs:4:8
  |
4 |     if number {
  |        ^^^^^^ expected `bool`, found integer

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `branches`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The error indicates that Rust expected a `\fIbool\fR` but got an integer\. Unlikelanguages such as Ruby and JavaScript, Rust will not automatically try toconvert non\-Boolean types to a Boolean\. You must be explicit and always provide`\fIif\fR` with a Boolean as its condition\. If we want the `\fIif\fR` code block to runonly when a number is not equal to `\fI0\fR`, for example, we can change the `\fIif\fR`expression to the following:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number = 3;

    if number != 0 {
        println!("number was something other than zero");
    }
}

.EE

.RE
.P
Running this code will print `\fInumber was something other than zero\fR`\.
.br

.br
\fBHandling Multiple Conditions with \fR
.br
====================================
.br
`\fIelse if\fR`
.P
You can have multiple conditions by combining `\fIif\fR` and `\fIelse\fR` in an `\fIelse if\fR`expression\. For example:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number = 6;

    if number % 4 == 0 {
        println!("number is divisible by 4");
    } else if number % 3 == 0 {
        println!("number is divisible by 3");
    } else if number % 2 == 0 {
        println!("number is divisible by 2");
    } else {
        println!("number is not divisible by 4, 3, or 2");
    }
}

.EE

.RE
.P
This program has four possible paths it can take\. After running it, you shouldsee the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.31s
     Running `target/debug/branches`
number is divisible by 3

.EE

.RE
.P
When this program executes, it checks each `\fIif\fR` expression in turn and executesthe first body for which the condition holds true\. Note that even though 6 isdivisible by 2, we don’t see the output `\fInumber is divisible by 2\fR`, nor do wesee the `\fInumber is not divisible by 4, 3, or 2\fR` text from the `\fIelse\fR` block\.That’s because Rust only executes the block for the first true condition, andonce it finds one, it doesn’t even check the rest\.
.P
Using too many `\fIelse if\fR` expressions can clutter your code, so if you have morethan one, you might want to refactor your code\. Chapter 6 describes a powerfulRust branching construct called `\fImatch\fR` for these cases\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIif\fR` in a `\fIlet\fR` Statement
.P
Because `\fIif\fR` is an expression, we can use it on the right side of a `\fIlet\fR`statement, as in Listing 3\-2\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let condition = true;
    let number = if condition { 5 } else { 6 };

    println!("The value of number is: {}", number);
}

.EE

.RE
Listing 3\-2: Assigning the result of an `\fIif\fR` expressionto a variable
.P
The `\fInumber\fR` variable will be bound to a value based on the outcome of the `\fIif\fR`expression\. Run this code to see what happens:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.30s
     Running `target/debug/branches`
The value of number is: 5

.EE

.RE
.P
Remember that blocks of code evaluate to the last expression in them, andnumbers by themselves are also expressions\. In this case, the value of thewhole `\fIif\fR` expression depends on which block of code executes\. This means thevalues that have the potential to be results from each arm of the `\fIif\fR` must bethe same type; in Listing 3\-2, the results of both the `\fIif\fR` arm and the `\fIelse\fR`arm were `\fIi32\fR` integers\. If the types are mismatched, as in the followingexample, we’ll get an error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let condition = true;

    let number = if condition { 5 } else { "six" };

    println!("The value of number is: {}", number);
}

.EE

.RE
.P
When we try to compile this code, we’ll get an error\. The `\fIif\fR` and `\fIelse\fR` armshave value types that are incompatible, and Rust indicates exactly where tofind the problem in the program:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling branches v0\.1\.0 (file:///projects/branches)
error[E0308]: `if` and `else` have incompatible types
 \-\-> src/main\.rs:4:44
  |
4 |     let number = if condition { 5 } else { "six" };
  |                                 \-          ^^^^^ expected integer, found `&str`
  |                                 |
  |                                 expected because of this

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `branches`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The expression in the `\fIif\fR` block evaluates to an integer, and the expression inthe `\fIelse\fR` block evaluates to a string\. This won’t work because variables musthave a single type\. Rust needs to know at compile time what type the `\fInumber\fR`variable is, definitively, so it can verify at compile time that its type isvalid everywhere we use `\fInumber\fR`\. Rust wouldn’t be able to do that if the typeof `\fInumber\fR` was only determined at runtime; the compiler would be more complexand would make fewer guarantees about the code if it had to keep track ofmultiple hypothetical types for any variable\.
.br

.br
\fBRepetition with Loops\fR
.br
=======================
.br

.P
It’s often useful to execute a block of code more than once\. For this task,Rust provides several \fIloops\fR\. A loop runs through the code inside the loopbody to the end and then starts immediately back at the beginning\. Toexperiment with loops, let’s make a new project called \fIloops\fR\.
.P
Rust has three kinds of loops: `\fIloop\fR`, `\fIwhile\fR`, and `\fIfor\fR`\. Let’s try each one\.
.br

.br
\fBRepeating Code with \fR
.br
======================
.br
`\fIloop\fR`
.P
The `\fIloop\fR` keyword tells Rust to execute a block of code over and over againforever or until you explicitly tell it to stop\.
.P
As an example, change the \fIsrc/main\.rs\fR file in your \fIloops\fR directory to looklike this:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn main() {
    loop {
        println!("again!");
    }
}

.EE

.RE
.P
When we run this program, we’ll see `\fIagain!\fR` printed over and over continuouslyuntil we stop the program manually\. Most terminals support a keyboard shortcut,ctrl\-c, to interrupt a program that is stuck ina continual loop\. Give it a try:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling loops v0\.1\.0 (file:///projects/loops)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.29s
     Running `target/debug/loops`
again!
again!
again!
again!
^Cagain!

.EE

.RE
.P
The symbol `\fI^C\fR` represents where you pressed ctrl\-c\. You may or may not see the word `\fIagain!\fR` printed after the `\fI^C\fR`,depending on where the code was in the loop when it received the interruptsignal\.
.P
Fortunately, Rust provides a way to break out of a loop from code\. You canplace the `\fIbreak\fR` keyword within the loop to tell the program when to stopexecuting the loop\. Recall that we did this in the guessing game in the
.UR ch02\-00\-guessing\-game\-tutorial\.html#quitting\-after\-a\-correct\-guess
.UE
“Quitting After a Correct Guess” section of Chapter 2 to exit the program when the user won the game byguessing the correct number\.
.P
We also used `\fIcontinue\fR` in the guessing game\. The `\fIcontinue\fR` keyword within aloop tells the program to skip over any remaining code in this iteration of theloop and go to the next iteration\.
.P
If you have loops within loops, `\fIbreak\fR` and `\fIcontinue\fR` apply to the innermostloop at that point\. You can optionally specify a \fIloop label\fR on a loop andthen use the label with `\fIbreak\fR` or `\fIcontinue\fR` to have those keywords applied tothe labeled loop instead of the innermost loop\. Here’s an example with twonested loops:
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut count = 0;
    'counting_up: loop {
        println!("count = {}", count);
        let mut remaining = 10;

        loop {
            println!("remaining = {}", remaining);
            if remaining == 9 {
                break;
            }
            if count == 2 {
                break 'counting_up;
            }
            remaining \-= 1;
        }

        count += 1;
    }
    println!("End count = {}", count);
}

.EE

.RE
.P
The outer loop has the label `\fI'counting_up\fR`, and it will count up from 0 to 2\.The inner loop without a label counts down from 10 to 9\. The first `\fIbreak\fR` thatdoesn’t specify a label will exit the inner loop only\. The `\fIbreak 'counting_up;\fR` statement will exit the outer loop\. This code prints:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling loops v0\.1\.0 (file:///projects/loops)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.58s
     Running `target/debug/loops`
count = 0
remaining = 10
remaining = 9
count = 1
remaining = 10
remaining = 9
count = 2
remaining = 10
End count = 2

.EE

.RE

.br

.br
\fBReturning Values from Loops\fR
.br
=============================
.br

.P
One of the uses of a `\fIloop\fR` is to retry an operation you know might fail, suchas checking whether a thread has completed its job\. However, you might need topass the result of that operation to the rest of your code\. To do this, you canadd the value you want returned after the `\fIbreak\fR` expression you use to stopthe loop; that value will be returned out of the loop so you can use it, asshown here:
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    println!("The result is {}", result);
}

.EE

.RE
.P
Before the loop, we declare a variable named `\fIcounter\fR` and initialize it to`\fI0\fR`\. Then we declare a variable named `\fIresult\fR` to hold the value returned fromthe loop\. On every iteration of the loop, we add `\fI1\fR` to the `\fIcounter\fR` variable,and then check whether the counter is equal to `\fI10\fR`\. When it is, we use the`\fIbreak\fR` keyword with the value `\fIcounter * 2\fR`\. After the loop, we use asemicolon to end the statement that assigns the value to `\fIresult\fR`\. Finally, weprint the value in `\fIresult\fR`, which in this case is 20\.
.br

.br
\fBConditional Loops with \fR
.br
=========================
.br
`\fIwhile\fR`
.P
It’s often useful for a program to evaluate a condition within a loop\. Whilethe condition is true, the loop runs\. When the condition ceases to be true, theprogram calls `\fIbreak\fR`, stopping the loop\. This loop type could be implementedusing a combination of `\fIloop\fR`, `\fIif\fR`, `\fIelse\fR`, and `\fIbreak\fR`; you could try thatnow in a program, if you’d like\.
.P
However, this pattern is so common that Rust has a built\-in language constructfor it, called a `\fIwhile\fR` loop\. Listing 3\-3 uses `\fIwhile\fR`: the program loopsthree times, counting down each time, and then, after the loop, it printsanother message and exits\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut number = 3;

    while number != 0 {
        println!("{}!", number);

        number \-= 1;
    }

    println!("LIFTOFF!!!");
}

.EE

.RE
Listing 3\-3: Using a `\fIwhile\fR` loop to run code while acondition holds true
.P
This construct eliminates a lot of nesting that would be necessary if you used`\fIloop\fR`, `\fIif\fR`, `\fIelse\fR`, and `\fIbreak\fR`, and it’s clearer\. While a condition holdstrue, the code runs; otherwise, it exits the loop\.
.br

.br
\fBLooping Through a Collection with \fR
.br
====================================
.br
`\fIfor\fR`
.P
You could use the `\fIwhile\fR` construct to loop over the elements of a collection,such as an array\. For example, let’s look at Listing 3\-4\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let a = [10, 20, 30, 40, 50];
    let mut index = 0;

    while index < 5 {
        println!("the value is: {}", a[index]);

        index += 1;
    }
}

.EE

.RE
Listing 3\-4: Looping through each element of a collectionusing a `\fIwhile\fR` loop
.P
Here, the code counts up through the elements in the array\. It starts at index`\fI0\fR`, and then loops until it reaches the final index in the array (that is,when `\fIindex < 5\fR` is no longer true)\. Running this code will print every elementin the array:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling loops v0\.1\.0 (file:///projects/loops)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.32s
     Running `target/debug/loops`
the value is: 10
the value is: 20
the value is: 30
the value is: 40
the value is: 50

.EE

.RE
.P
All five array values appear in the terminal, as expected\. Even though `\fIindex\fR`will reach a value of `\fI5\fR` at some point, the loop stops executing before tryingto fetch a sixth value from the array\.
.P
But this approach is error prone; we could cause the program to panic if theindex value or test condition are incorrect\. It’s also slow, because thecompiler adds runtime code to perform the conditional check of whether theindex is within the bounds of the array on every iteration through the loop\.
.P
As a more concise alternative, you can use a `\fIfor\fR` loop and execute some codefor each item in a collection\. A `\fIfor\fR` loop looks like the code in Listing 3\-5\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let a = [10, 20, 30, 40, 50];

    for element in a {
        println!("the value is: {}", element);
    }
}

.EE

.RE
Listing 3\-5: Looping through each element of a collectionusing a `\fIfor\fR` loop
.P
When we run this code, we’ll see the same output as in Listing 3\-4\. Moreimportantly, we’ve now increased the safety of the code and eliminated thechance of bugs that might result from going beyond the end of the array or notgoing far enough and missing some items\.
.P
For example, in the code in Listing 3\-4, if you changed the definition of the`\fIa\fR` array to have four elements but forgot to update the condition to `\fIwhile index < 4\fR`, the code would panic\. Using the `\fIfor\fR` loop, you wouldn’t need toremember to change any other code if you changed the number of values in thearray\.
.P
The safety and conciseness of `\fIfor\fR` loops makes them the most commonly usedloop construct in Rust\. Even in situations in which you want to run some codea certain number of times, as in the countdown example that used a `\fIwhile\fR` loopin Listing 3\-3, most Rustaceans would use a `\fIfor\fR` loop\. The way to do thatwould be to use a `\fIRange\fR`, which is a type provided by the standard librarythat generates all numbers in sequence starting from one number and endingbefore another number\.
.P
Here’s what the countdown would look like using a `\fIfor\fR` loop and another methodwe’ve not yet talked about, `\fIrev\fR`, to reverse the range:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    for number in (1\.\.4)\.rev() {
        println!("{}!", number);
    }
    println!("LIFTOFF!!!");
}

.EE

.RE
.P
This code is a bit nicer, isn’t it?
.br

.br
\fBSummary\fR
.br
=========
.br

.P
You made it! That was a sizable chapter: you learned about variables, scalarand compound data types, functions, comments, `\fIif\fR` expressions, and loops! Ifyou want to practice with the concepts discussed in this chapter, try buildingprograms to do the following:
.P
Convert temperatures between Fahrenheit and Celsius\.
.P
Generate the nth Fibonacci number\.
.P
Print the lyrics to the Christmas carol “The Twelve Days of Christmas,”taking advantage of the repetition in the song\.
.P
When you’re ready to move on, we’ll talk about a concept in Rust that \fIdoesn’t\fRcommonly exist in other programming languages: ownership\.
.SH "Understanding Ownership"

.br

.br
\fBUnderstanding Ownership\fR
.br
=========================
.br

.P
Ownership is Rust’s most unique feature, and it enables Rust to make memorysafety guarantees without needing a garbage collector\. Therefore, it’simportant to understand how ownership works in Rust\. In this chapter, we’lltalk about ownership as well as several related features: borrowing, slices,and how Rust lays data out in memory\.
.SH "What is Ownership?"

.br

.br
\fBWhat Is Ownership?\fR
.br
====================
.br

.P
Rust’s central feature is \fIownership\fR\. Although the feature is straightforwardto explain, it has deep implications for the rest of the language\.
.P
All programs have to manage the way they use a computer’s memory while running\.Some languages have garbage collection that constantly looks for no longer usedmemory as the program runs; in other languages, the programmer must explicitlyallocate and free the memory\. Rust uses a third approach: memory is managedthrough a system of ownership with a set of rules that the compiler checks atcompile time\. None of the ownership features slow down your program while it’srunning\.
.P
Because ownership is a new concept for many programmers, it does take some timeto get used to\. The good news is that the more experienced you become with Rustand the rules of the ownership system, the more you’ll be able to naturallydevelop code that is safe and efficient\. Keep at it!
.P
When you understand ownership, you’ll have a solid foundation for understandingthe features that make Rust unique\. In this chapter, you’ll learn ownership byworking through some examples that focus on a very common data structure:strings\.
.br

.br
\fBThe Stack and the Heap\fR
.br
========================
.br

.P
In many programming languages, you don’t have to think about the stack andthe heap very often\. But in a systems programming language like Rust, whethera value is on the stack or the heap has more of an effect on how the languagebehaves and why you have to make certain decisions\. Parts of ownership willbe described in relation to the stack and the heap later in this chapter, sohere is a brief explanation in preparation\.
.P
Both the stack and the heap are parts of memory that are available to yourcode to use at runtime, but they are structured in different ways\. The stackstores values in the order it gets them and removes the values in theopposite order\. This is referred to as \fIlast in, first out\fR\. Think of a stackof plates: when you add more plates, you put them on top of the pile, andwhen you need a plate, you take one off the top\. Adding or removing platesfrom the middle or bottom wouldn’t work as well! Adding data is called\fIpushing onto the stack\fR, and removing data is called \fIpopping off the stack\fR\.
.P
All data stored on the stack must have a known, fixed size\. Data with anunknown size at compile time or a size that might change must be stored onthe heap instead\. The heap is less organized: when you put data on the heap,you request a certain amount of space\. The memory allocator finds an emptyspot in the heap that is big enough, marks it as being in use, and returns a\fIpointer\fR, which is the address of that location\. This process is called\fIallocating on the heap\fR and is sometimes abbreviated as just \fIallocating\fR\.Pushing values onto the stack is not considered allocating\. Because thepointer is a known, fixed size, you can store the pointer on the stack, butwhen you want the actual data, you must follow the pointer\.
.P
Think of being seated at a restaurant\. When you enter, you state the number ofpeople in your group, and the staff finds an empty table that fits everyoneand leads you there\. If someone in your group comes late, they can ask whereyou’ve been seated to find you\.
.P
Pushing to the stack is faster than allocating on the heap because theallocator never has to search for a place to store new data; thatlocation is always at the top of the stack\. Comparatively, allocating spaceon the heap requires more work, because the allocator must first finda big enough space to hold the data and then perform bookkeeping to preparefor the next allocation\.
.P
Accessing data in the heap is slower than accessing data on the stack becauseyou have to follow a pointer to get there\. Contemporary processors are fasterif they jump around less in memory\. Continuing the analogy, consider a serverat a restaurant taking orders from many tables\. It’s most efficient to getall the orders at one table before moving on to the next table\. Taking anorder from table A, then an order from table B, then one from A again, andthen one from B again would be a much slower process\. By the same token, aprocessor can do its job better if it works on data that’s close to otherdata (as it is on the stack) rather than farther away (as it can be on theheap)\. Allocating a large amount of space on the heap can also take time\.
.P
When your code calls a function, the values passed into the function(including, potentially, pointers to data on the heap) and the function’slocal variables get pushed onto the stack\. When the function is over, thosevalues get popped off the stack\.
.P
Keeping track of what parts of code are using what data on the heap,minimizing the amount of duplicate data on the heap, and cleaning up unuseddata on the heap so you don’t run out of space are all problems that ownershipaddresses\. Once you understand ownership, you won’t need to think about thestack and the heap very often, but knowing that managing heap data is whyownership exists can help explain why it works the way it does\.
.br

.br
\fBOwnership Rules\fR
.br
=================
.br

.P
First, let’s take a look at the ownership rules\. Keep these rules in mind as wework through the examples that illustrate them:
.P
Each value in Rust has a variable that’s called its \fIowner\fR\.
.P
There can only be one owner at a time\.
.P
When the owner goes out of scope, the value will be dropped\.
.br

.br
\fBVariable Scope\fR
.br
================
.br

.P
We’ve walked through an example of a Rust program already in Chapter 2\. Nowthat we’re past basic syntax, we won’t include all the `\fIfn main() {\fR` code inexamples, so if you’re following along, you’ll have to put the followingexamples inside a `\fImain\fR` function manually\. As a result, our examples will be abit more concise, letting us focus on the actual details rather thanboilerplate code\.
.P
As a first example of ownership, we’ll look at the \fIscope\fR of some variables\. Ascope is the range within a program for which an item is valid\. Let’s say wehave a variable that looks like this:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = "hello";

.EE

.RE
.P
The variable `\fIs\fR` refers to a string literal, where the value of the string ishardcoded into the text of our program\. The variable is valid from the point atwhich it’s declared until the end of the current \fIscope\fR\. Listing 4\-1 hascomments annotating where the variable `\fIs\fR` is valid\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    {                      // s is not valid here, it’s not yet declared
        let s = "hello";   // s is valid from this point forward

        // do stuff with s
    }                      // this scope is now over, and s is no longer valid
# }

.EE

.RE
Listing 4\-1: A variable and the scope in which it isvalid
.P
In other words, there are two important points in time here:
.P
When `\fIs\fR` comes \fIinto scope\fR, it is valid\.
.P
It remains valid until it goes \fIout of scope\fR\.
.P
At this point, the relationship between scopes and when variables are valid issimilar to that in other programming languages\. Now we’ll build on top of thisunderstanding by introducing the `\fIString\fR` type\.
.br

.br
\fBThe \fR
.br
======
.br
`\fIString\fR` Type
.P
To illustrate the rules of ownership, we need a data type that is more complexthan the ones we covered in the 
.UR ch03\-02\-data\-types\.html#data\-types
.UE
“Data Types”section of Chapter 3\. The types covered previously are all a known size, can bestored on the stack and popped off the stack when their scope is over, and canbe quickly and trivially copied to make a new, independent instance if anotherpart of code needs to use the same value in a different scope\. But we want tolook at data that is stored on the heap and explore how Rust knows when toclean up that data\.
.P
We’ll use `\fIString\fR` as the example here and concentrate on the parts of `\fIString\fR`that relate to ownership\. These aspects also apply to other complex data types,whether they are provided by the standard library or created by you\. We’lldiscuss `\fIString\fR` in more depth in Chapter 8\.
.P
We’ve already seen string literals, where a string value is hardcoded into ourprogram\. String literals are convenient, but they aren’t suitable for everysituation in which we may want to use text\. One reason is that they’reimmutable\. Another is that not every string value can be known when we writeour code: for example, what if we want to take user input and store it? Forthese situations, Rust has a second string type, `\fIString\fR`\. This type managesdata allocated on the heap and as such is able to store an amount of text thatis unknown to us at compile time\. You can create a `\fIString\fR` from a stringliteral using the `\fIfrom\fR` function, like so:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = String::from("hello");

.EE

.RE
.P
The double colon (`\fI::\fR`) is an operator that allows us to namespace thisparticular `\fIfrom\fR` function under the `\fIString\fR` type rather than using some sortof name like `\fIstring_from\fR`\. We’ll discuss this syntax more in the 
.UR ch05\-03\-method\-syntax\.html#method\-syntax
.UE
“MethodSyntax” section of Chapter 5 and when we talkabout namespacing with modules in 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html
.UE
“Paths for Referring to an Item in theModule Tree” in Chapter 7\.
.P
This kind of string \fIcan\fR be mutated:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    s\.push_str(", world!"); // push_str() appends a literal to a String

    println!("{}", s); // This will print `hello, world!`
# }

.EE

.RE
.P
So, what’s the difference here? Why can `\fIString\fR` be mutated but literalscannot? The difference is how these two types deal with memory\.
.br

.br
\fBMemory and Allocation\fR
.br
=======================
.br

.P
In the case of a string literal, we know the contents at compile time, so thetext is hardcoded directly into the final executable\. This is why stringliterals are fast and efficient\. But these properties only come from the stringliteral’s immutability\. Unfortunately, we can’t put a blob of memory into thebinary for each piece of text whose size is unknown at compile time and whosesize might change while running the program\.
.P
With the `\fIString\fR` type, in order to support a mutable, growable piece of text,we need to allocate an amount of memory on the heap, unknown at compile time,to hold the contents\. This means:
.P
The memory must be requested from the memory allocator at runtime\.
.P
We need a way of returning this memory to the allocator when we’redone with our `\fIString\fR`\.
.P
That first part is done by us: when we call `\fIString::from\fR`, its implementationrequests the memory it needs\. This is pretty much universal in programminglanguages\.
.P
However, the second part is different\. In languages with a \fIgarbage collector\fR(GC), the GC keeps track and cleans up memory that isn’t being used anymore,and we don’t need to think about it\. Without a GC, it’s our responsibility toidentify when memory is no longer being used and call code to explicitly returnit, just as we did to request it\. Doing this correctly has historically been adifficult programming problem\. If we forget, we’ll waste memory\. If we do ittoo early, we’ll have an invalid variable\. If we do it twice, that’s a bug too\.We need to pair exactly one `\fIallocate\fR` with exactly one `\fIfree\fR`\.
.P
Rust takes a different path: the memory is automatically returned once thevariable that owns it goes out of scope\. Here’s a version of our scope examplefrom Listing 4\-1 using a `\fIString\fR` instead of a string literal:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    {
        let s = String::from("hello"); // s is valid from this point forward

        // do stuff with s
    }                                  // this scope is now over, and s is no
                                       // longer valid
# }

.EE

.RE
.P
There is a natural point at which we can return the memory our `\fIString\fR` needsto the allocator: when `\fIs\fR` goes out of scope\. When a variable goes out ofscope, Rust calls a special function for us\. This function is called
.UR \.\./std/ops/trait\.Drop\.html#tymethod\.drop
.UE
`\fIdrop\fR`, and it’s where the author of `\fIString\fR` can putthe code to return the memory\. Rust calls `\fIdrop\fR` automatically at the closingcurly bracket\.
.P
Note: In C++, this pattern of deallocating resources at the end of an item’slifetime is sometimes called \fIResource Acquisition Is Initialization (RAII)\fR\.The `\fIdrop\fR` function in Rust will be familiar to you if you’ve used RAIIpatterns\.
.P
This pattern has a profound impact on the way Rust code is written\. It may seemsimple right now, but the behavior of code can be unexpected in morecomplicated situations when we want to have multiple variables use the datawe’ve allocated on the heap\. Let’s explore some of those situations now\.
.br

.br
\fBWays Variables and Data Interact: Move\fR
.br
========================================
.br

.P
Multiple variables can interact with the same data in different ways in Rust\.Let’s look at an example using an integer in Listing 4\-2\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 5;
    let y = x;
# }

.EE

.RE
Listing 4\-2: Assigning the integer value of variable `\fIx\fR`to `\fIy\fR`
.P
We can probably guess what this is doing: “bind the value `\fI5\fR` to `\fIx\fR`; then makea copy of the value in `\fIx\fR` and bind it to `\fIy\fR`\.” We now have two variables, `\fIx\fR`and `\fIy\fR`, and both equal `\fI5\fR`\. This is indeed what is happening, because integersare simple values with a known, fixed size, and these two `\fI5\fR` values are pushedonto the stack\.
.P
Now let’s look at the `\fIString\fR` version:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");
    let s2 = s1;
# }

.EE

.RE
.P
This looks very similar to the previous code, so we might assume that the wayit works would be the same: that is, the second line would make a copy of thevalue in `\fIs1\fR` and bind it to `\fIs2\fR`\. But this isn’t quite what happens\.
.P
Take a look at Figure 4\-1 to see what is happening to `\fIString\fR` under thecovers\. A `\fIString\fR` is made up of three parts, shown on the left: a pointer tothe memory that holds the contents of the string, a length, and a capacity\.This group of data is stored on the stack\. On the right is the memory on theheap that holds the contents\.Figure 4\-1: Representation in memory of a `\fIString\fR`holding the value `\fI"hello"\fR` bound to `\fIs1\fR`
.P
The length is how much memory, in bytes, the contents of the `\fIString\fR` iscurrently using\. The capacity is the total amount of memory, in bytes, that the`\fIString\fR` has received from the allocator\. The difference between lengthand capacity matters, but not in this context, so for now, it’s fine to ignorethe capacity\.
.P
When we assign `\fIs1\fR` to `\fIs2\fR`, the `\fIString\fR` data is copied, meaning we copy thepointer, the length, and the capacity that are on the stack\. We do not copy thedata on the heap that the pointer refers to\. In other words, the datarepresentation in memory looks like Figure 4\-2\.Figure 4\-2: Representation in memory of the variable `\fIs2\fR`that has a copy of the pointer, length, and capacity of `\fIs1\fR`
.P
The representation does \fInot\fR look like Figure 4\-3, which is what memory wouldlook like if Rust instead copied the heap data as well\. If Rust did this, theoperation `\fIs2 = s1\fR` could be very expensive in terms of runtime performance ifthe data on the heap were large\.Figure 4\-3: Another possibility for what `\fIs2 = s1\fR` mightdo if Rust copied the heap data as well
.P
Earlier, we said that when a variable goes out of scope, Rust automaticallycalls the `\fIdrop\fR` function and cleans up the heap memory for that variable\. ButFigure 4\-2 shows both data pointers pointing to the same location\. This is aproblem: when `\fIs2\fR` and `\fIs1\fR` go out of scope, they will both try to free thesame memory\. This is known as a \fIdouble free\fR error and is one of the memorysafety bugs we mentioned previously\. Freeing memory twice can lead to memorycorruption, which can potentially lead to security vulnerabilities\.
.P
To ensure memory safety, there’s one more detail to what happens in thissituation in Rust\. After `\fIlet s2 = s1\fR`, Rust considers `\fIs1\fR` to no longer bevalid\. Therefore, Rust doesn’t need to free anything when `\fIs1\fR` goes out ofscope\. Check out what happens when you try to use `\fIs1\fR` after `\fIs2\fR` is created;it won’t work:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");
    let s2 = s1;

    println!("{}, world!", s1);
# }

.EE

.RE
.P
You’ll get an error like this because Rust prevents you from using theinvalidated reference:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0382]: borrow of moved value: `s1`
 \-\-> src/main\.rs:5:28
  |
2 |     let s1 = String::from("hello");
  |         \-\- move occurs because `s1` has type `String`, which does not implement the `Copy` trait
3 |     let s2 = s1;
  |              \-\- value moved here
4 | 
5 |     println!("{}, world!", s1);
  |                            ^^ value borrowed here after move

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `ownership`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
If you’ve heard the terms \fIshallow copy\fR and \fIdeep copy\fR while working withother languages, the concept of copying the pointer, length, and capacitywithout copying the data probably sounds like making a shallow copy\. Butbecause Rust also invalidates the first variable, instead of being called ashallow copy, it’s known as a \fImove\fR\. In this example, we would say that`\fIs1\fR` was \fImoved\fR into `\fIs2\fR`\. So what actually happens is shown in Figure 4\-4\.Figure 4\-4: Representation in memory after `\fIs1\fR` has beeninvalidated
.P
That solves our problem! With only `\fIs2\fR` valid, when it goes out of scope, italone will free the memory, and we’re done\.
.P
In addition, there’s a design choice that’s implied by this: Rust will neverautomatically create “deep” copies of your data\. Therefore, any \fIautomatic\fRcopying can be assumed to be inexpensive in terms of runtime performance\.
.br

.br
\fBWays Variables and Data Interact: Clone\fR
.br
=========================================
.br

.P
If we \fIdo\fR want to deeply copy the heap data of the `\fIString\fR`, not just thestack data, we can use a common method called `\fIclone\fR`\. We’ll discuss methodsyntax in Chapter 5, but because methods are a common feature in manyprogramming languages, you’ve probably seen them before\.
.P
Here’s an example of the `\fIclone\fR` method in action:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");
    let s2 = s1\.clone();

    println!("s1 = {}, s2 = {}", s1, s2);
# }

.EE

.RE
.P
This works just fine and explicitly produces the behavior shown in Figure 4\-3,where the heap data \fIdoes\fR get copied\.
.P
When you see a call to `\fIclone\fR`, you know that some arbitrary code is beingexecuted and that code may be expensive\. It’s a visual indicator that somethingdifferent is going on\.
.br

.br
\fBStack\-Only Data: Copy\fR
.br
=======================
.br

.P
There’s another wrinkle we haven’t talked about yet\. This code using integers –part of which was shown in Listing 4\-2 – works and is valid:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 5;
    let y = x;

    println!("x = {}, y = {}", x, y);
# }

.EE

.RE
.P
But this code seems to contradict what we just learned: we don’t have a call to`\fIclone\fR`, but `\fIx\fR` is still valid and wasn’t moved into `\fIy\fR`\.
.P
The reason is that types such as integers that have a known size at compiletime are stored entirely on the stack, so copies of the actual values are quickto make\. That means there’s no reason we would want to prevent `\fIx\fR` from beingvalid after we create the variable `\fIy\fR`\. In other words, there’s no differencebetween deep and shallow copying here, so calling `\fIclone\fR` wouldn’t do anythingdifferent from the usual shallow copying and we can leave it out\.
.P
Rust has a special annotation called the `\fICopy\fR` trait that we can place ontypes like integers that are stored on the stack (we’ll talk more about traitsin Chapter 10)\. If a type implements the `\fICopy\fR` trait, an older variable isstill usable after assignment\. Rust won’t let us annotate a type with the`\fICopy\fR` trait if the type, or any of its parts, has implemented the `\fIDrop\fR`trait\. If the type needs something special to happen when the value goes out ofscope and we add the `\fICopy\fR` annotation to that type, we’ll get a compile\-timeerror\. To learn about how to add the `\fICopy\fR` annotation to your type toimplement the trait, see 
.UR appendix\-03\-derivable\-traits\.html
.UE
“Derivable Traits”in Appendix C\.
.P
So what types implement the `\fICopy\fR` trait? You can check the documentation forthe given type to be sure, but as a general rule, any group of simple scalarvalues can implement `\fICopy\fR`, and nothing that requires allocation or is someform of resource can implement `\fICopy\fR`\. Here are some of the types thatimplement `\fICopy\fR`:
.P
All the integer types, such as `\fIu32\fR`\.
.P
The Boolean type, `\fIbool\fR`, with values `\fItrue\fR` and `\fIfalse\fR`\.
.P
All the floating point types, such as `\fIf64\fR`\.
.P
The character type, `\fIchar\fR`\.
.P
Tuples, if they only contain types that also implement `\fICopy\fR`\. For example,`\fI(i32, i32)\fR` implements `\fICopy\fR`, but `\fI(i32, String)\fR` does not\.
.br

.br
\fBOwnership and Functions\fR
.br
=========================
.br

.P
The semantics for passing a value to a function are similar to those forassigning a value to a variable\. Passing a variable to a function will move orcopy, just as assignment does\. Listing 4\-3 has an example with some annotationsshowing where variables go into and out of scope\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let s = String::from("hello");  // s comes into scope

    takes_ownership(s);             // s's value moves into the function\.\.\.
                                    // \.\.\. and so is no longer valid here

    let x = 5;                      // x comes into scope

    makes_copy(x);                  // x would move into the function,
                                    // but i32 is Copy, so it's okay to still
                                    // use x afterward

} // Here, x goes out of scope, then s\. But because s's value was moved, nothing
  // special happens\.

fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
} // Here, some_string goes out of scope and `drop` is called\. The backing
  // memory is freed\.

fn makes_copy(some_integer: i32) { // some_integer comes into scope
    println!("{}", some_integer);
} // Here, some_integer goes out of scope\. Nothing special happens\.

.EE

.RE
Listing 4\-3: Functions with ownership and scopeannotated
.P
If we tried to use `\fIs\fR` after the call to `\fItakes_ownership\fR`, Rust would throw acompile\-time error\. These static checks protect us from mistakes\. Try addingcode to `\fImain\fR` that uses `\fIs\fR` and `\fIx\fR` to see where you can use them and wherethe ownership rules prevent you from doing so\.
.br

.br
\fBReturn Values and Scope\fR
.br
=========================
.br

.P
Returning values can also transfer ownership\. Listing 4\-4 is an example withsimilar annotations to those in Listing 4\-3\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let s1 = gives_ownership();         // gives_ownership moves its return
                                        // value into s1

    let s2 = String::from("hello");     // s2 comes into scope

    let s3 = takes_and_gives_back(s2);  // s2 is moved into
                                        // takes_and_gives_back, which also
                                        // moves its return value into s3
} // Here, s3 goes out of scope and is dropped\. s2 was moved, so nothing
  // happens\. s1 goes out of scope and is dropped\.

fn gives_ownership() \-> String {             // gives_ownership will move its
                                             // return value into the function
                                             // that calls it

    let some_string = String::from("yours"); // some_string comes into scope

    some_string                              // some_string is returned and
                                             // moves out to the calling
                                             // function
}

// This function takes a String and returns one
fn takes_and_gives_back(a_string: String) \-> String { // a_string comes into
                                                      // scope

    a_string  // a_string is returned and moves out to the calling function
}

.EE

.RE
Listing 4\-4: Transferring ownership of returnvalues
.P
The ownership of a variable follows the same pattern every time: assigning avalue to another variable moves it\. When a variable that includes data on theheap goes out of scope, the value will be cleaned up by `\fIdrop\fR` unless the datahas been moved to be owned by another variable\.
.P
Taking ownership and then returning ownership with every function is a bittedious\. What if we want to let a function use a value but not take ownership?It’s quite annoying that anything we pass in also needs to be passed back if wewant to use it again, in addition to any data resulting from the body of thefunction that we might want to return as well\.
.P
It’s possible to return multiple values using a tuple, as shown in Listing 4\-5\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let s1 = String::from("hello");

    let (s2, len) = calculate_length(s1);

    println!("The length of '{}' is {}\.", s2, len);
}

fn calculate_length(s: String) \-> (String, usize) {
    let length = s\.len(); // len() returns the length of a String

    (s, length)
}

.EE

.RE
Listing 4\-5: Returning ownership of parameters
.P
But this is too much ceremony and a lot of work for a concept that should becommon\. Luckily for us, Rust has a feature for this concept, called\fIreferences\fR\.
.SH "References and Borrowing"

.br

.br
\fBReferences and Borrowing\fR
.br
==========================
.br

.P
The issue with the tuple code in Listing 4\-5 is that we have to return the`\fIString\fR` to the calling function so we can still use the `\fIString\fR` after thecall to `\fIcalculate_length\fR`, because the `\fIString\fR` was moved into`\fIcalculate_length\fR`\.
.P
Here is how you would define and use a `\fIcalculate_length\fR` function that has areference to an object as a parameter instead of taking ownership of thevalue:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);

    println!("The length of '{}' is {}\.", s1, len);
}

fn calculate_length(s: &String) \-> usize {
    s\.len()
}

.EE

.RE
.P
First, notice that all the tuple code in the variable declaration and thefunction return value is gone\. Second, note that we pass `\fI&s1\fR` into`\fIcalculate_length\fR` and, in its definition, we take `\fI&String\fR` rather than`\fIString\fR`\.
.P
These ampersands are \fIreferences\fR, and they allow you to refer to some valuewithout taking ownership of it\. Figure 4\-5 shows a diagram\.Figure 4\-5: A diagram of `\fI&String s\fR` pointing at `\fIString s1\fR`
.P
Note: The opposite of referencing by using `\fI&\fR` is \fIdereferencing\fR, which isaccomplished with the dereference operator, `\fI*\fR`\. We’ll see some uses of thedereference operator in Chapter 8 and discuss details of dereferencing inChapter 15\.
.P
Let’s take a closer look at the function call here:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");

    let len = calculate_length(&s1);
# 
#     println!("The length of '{}' is {}\.", s1, len);
# }
# 
# fn calculate_length(s: &String) \-> usize {
#     s\.len()
# }

.EE

.RE
.P
The `\fI&s1\fR` syntax lets us create a reference that \fIrefers\fR to the value of `\fIs1\fR`but does not own it\. Because it does not own it, the value it points to willnot be dropped when the reference stops being used\.
.P
Likewise, the signature of the function uses `\fI&\fR` to indicate that the type ofthe parameter `\fIs\fR` is a reference\. Let’s add some explanatory annotations:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let s1 = String::from("hello");
# 
#     let len = calculate_length(&s1);
# 
#     println!("The length of '{}' is {}\.", s1, len);
# }
# 
fn calculate_length(s: &String) \-> usize { // s is a reference to a String
    s\.len()
} // Here, s goes out of scope\. But because it does not have ownership of what
  // it refers to, nothing happens\.

.EE

.RE
.P
The scope in which the variable `\fIs\fR` is valid is the same as any functionparameter’s scope, but we don’t drop what the reference points to when `\fIs\fR`stops being used because we don’t have ownership\. When functions havereferences as parameters instead of the actual values, we won’t need to returnthe values in order to give back ownership, because we never had ownership\.
.P
We call the action of creating a reference \fIborrowing\fR\. As in real life, if aperson owns something, you can borrow it from them\. When you’re done, you haveto give it back\.
.P
So what happens if we try to modify something we’re borrowing? Try the code inListing 4\-6\. Spoiler alert: it doesn’t work!Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let s = String::from("hello");

    change(&s);
}

fn change(some_string: &String) {
    some_string\.push_str(", world");
}

.EE

.RE
Listing 4\-6: Attempting to modify a borrowed value
.P
Here’s the error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0596]: cannot borrow `*some_string` as mutable, as it is behind a `&` reference
 \-\-> src/main\.rs:8:5
  |
7 | fn change(some_string: &String) {
  |                        \-\-\-\-\-\-\- help: consider changing this to be a mutable reference: `&mut String`
8 |     some_string\.push_str(", world");
  |     ^^^^^^^^^^^ `some_string` is a `&` reference, so the data it refers to cannot be borrowed as mutable

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0596`\.
error: could not compile `ownership`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Just as variables are immutable by default, so are references\. We’re notallowed to modify something we have a reference to\.
.br

.br
\fBMutable References\fR
.br
====================
.br

.P
We can fix the error in the code from Listing 4\-6 with just a few small tweaks:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let mut s = String::from("hello");

    change(&mut s);
}

fn change(some_string: &mut String) {
    some_string\.push_str(", world");
}

.EE

.RE
.P
First, we had to change `\fIs\fR` to be `\fImut\fR`\. Then we had to create a mutablereference with `\fI&mut s\fR` where we call the `\fIchange\fR` function, and update thefunction signature to accept a mutable reference with `\fIsome_string: &mut String\fR`\. This makes it very clear that the `\fIchange\fR` function will mutate thevalue it borrows\.
.P
But mutable references have one big restriction: you can have only one mutablereference to a particular piece of data at a time\. This code will fail:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    let r1 = &mut s;
    let r2 = &mut s;

    println!("{}, {}", r1, r2);
# }

.EE

.RE
.P
Here’s the error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0499]: cannot borrow `s` as mutable more than once at a time
 \-\-> src/main\.rs:5:14
  |
4 |     let r1 = &mut s;
  |              \-\-\-\-\-\- first mutable borrow occurs here
5 |     let r2 = &mut s;
  |              ^^^^^^ second mutable borrow occurs here
6 | 
7 |     println!("{}, {}", r1, r2);
  |                        \-\- first borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0499`\.
error: could not compile `ownership`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This error says that this code is invalid because we cannot borrow `\fIs\fR` asmutable more than once at a time\. The first mutable borrow is in `\fIr1\fR` and mustlast until it’s used in the `\fIprintln!\fR`, but between the creation of thatmutable reference and its usage, we tried to create another mutable referencein `\fIr2\fR` that borrows the same data as `\fIr1\fR`\.
.P
The restriction preventing multiple mutable references to the same data at thesame time allows for mutation but in a very controlled fashion\. It’s somethingthat new Rustaceans struggle with, because most languages let you mutatewhenever you’d like\.
.P
The benefit of having this restriction is that Rust can prevent data races atcompile time\. A \fIdata race\fR is similar to a race condition and happens whenthese three behaviors occur:
.P
Two or more pointers access the same data at the same time\.
.P
At least one of the pointers is being used to write to the data\.
.P
There’s no mechanism being used to synchronize access to the data\.
.P
Data races cause undefined behavior and can be difficult to diagnose and fixwhen you’re trying to track them down at runtime; Rust prevents this problemfrom happening because it won’t even compile code with data races!
.P
As always, we can use curly brackets to create a new scope, allowing formultiple mutable references, just not \fIsimultaneous\fR ones:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    {
        let r1 = &mut s;
    } // r1 goes out of scope here, so we can make a new reference with no problems\.

    let r2 = &mut s;
# }

.EE

.RE
.P
A similar rule exists for combining mutable and immutable references\. This coderesults in an error:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    let r3 = &mut s; // BIG PROBLEM

    println!("{}, {}, and {}", r1, r2, r3);
# }

.EE

.RE
.P
Here’s the error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable
 \-\-> src/main\.rs:6:14
  |
4 |     let r1 = &s; // no problem
  |              \-\- immutable borrow occurs here
5 |     let r2 = &s; // no problem
6 |     let r3 = &mut s; // BIG PROBLEM
  |              ^^^^^^ mutable borrow occurs here
7 | 
8 |     println!("{}, {}, and {}", r1, r2, r3);
  |                                \-\- immutable borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0502`\.
error: could not compile `ownership`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Whew! We \fIalso\fR cannot have a mutable reference while we have an immutable one\.Users of an immutable reference don’t expect the values to suddenly change outfrom under them! However, multiple immutable references are okay because no onewho is just reading the data has the ability to affect anyone else’s reading ofthe data\.
.P
Note that a reference’s scope starts from where it is introduced and continuesthrough the last time that reference is used\. For instance, this code willcompile because the last usage of the immutable references, the `\fIprintln!\fR`,occurs before the mutable reference is introduced:
.RS
.IP \fBrust,edition2018\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("hello");

    let r1 = &s; // no problem
    let r2 = &s; // no problem
    println!("{} and {}", r1, r2);
    // variables r1 and r2 will not be used after this point

    let r3 = &mut s; // no problem
    println!("{}", r3);
# }

.EE

.RE
.P
The scopes of the immutable references `\fIr1\fR` and `\fIr2\fR` end after the `\fIprintln!\fR`where they are last used, which is before the mutable reference `\fIr3\fR` iscreated\. These scopes don’t overlap, so this code is allowed\. The ability ofthe compiler to tell that a reference is no longer being used at a point beforethe end of the scope is called Non\-Lexical Lifetimes (NLL for short), and youcan read more about it in 
.UR https://doc\.rust\-lang\.org/edition\-guide/rust\-2018/ownership\-and\-lifetimes/non\-lexical\-lifetimes\.html
.UE
The Edition Guide\.
.P
Even though borrowing errors may be frustrating at times, remember that it’sthe Rust compiler pointing out a potential bug early (at compile time ratherthan at runtime) and showing you exactly where the problem is\. Then you don’thave to track down why your data isn’t what you thought it was\.
.br

.br
\fBDangling References\fR
.br
=====================
.br

.P
In languages with pointers, it’s easy to erroneously create a \fIdangling\fRpointer, a pointer that references a location in memory that may have beengiven to someone else, by freeing some memory while preserving a pointer tothat memory\. In Rust, by contrast, the compiler guarantees that references willnever be dangling references: if you have a reference to some data, thecompiler will ensure that the data will not go out of scope before thereference to the data does\.
.P
Let’s try to create a dangling reference, which Rust will prevent with acompile\-time error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let reference_to_nothing = dangle();
}

fn dangle() \-> &String {
    let s = String::from("hello");

    &s
}

.EE

.RE
.P
Here’s the error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0106]: missing lifetime specifier
 \-\-> src/main\.rs:5:16
  |
5 | fn dangle() \-> &String {
  |                ^ expected named lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime
  |
5 | fn dangle() \-> &'static String {
  |                ^^^^^^^^

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0106`\.
error: could not compile `ownership`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This error message refers to a feature we haven’t covered yet: lifetimes\. We’lldiscuss lifetimes in detail in Chapter 10\. But, if you disregard the partsabout lifetimes, the message does contain the key to why this code is a problem:
.RS
.IP \fBtext\fR 2

.br
.EX
this function's return type contains a borrowed value, but there is no value
for it to be borrowed from\.

.EE

.RE
.P
Let’s take a closer look at exactly what’s happening at each stage of our`\fIdangle\fR` code:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let reference_to_nothing = dangle();
# }
# 
fn dangle() \-> &String { // dangle returns a reference to a String

    let s = String::from("hello"); // s is a new String

    &s // we return a reference to the String, s
} // Here, s goes out of scope, and is dropped\. Its memory goes away\.
  // Danger!

.EE

.RE
.P
Because `\fIs\fR` is created inside `\fIdangle\fR`, when the code of `\fIdangle\fR` is finished,`\fIs\fR` will be deallocated\. But we tried to return a reference to it\. That meansthis reference would be pointing to an invalid `\fIString\fR`\. That’s no good! Rustwon’t let us do this\.
.P
The solution here is to return the `\fIString\fR` directly:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let string = no_dangle();
# }
# 
fn no_dangle() \-> String {
    let s = String::from("hello");

    s
}

.EE

.RE
.P
This works without any problems\. Ownership is moved out, and nothing isdeallocated\.
.br

.br
\fBThe Rules of References\fR
.br
=========================
.br

.P
Let’s recap what we’ve discussed about references:
.P
At any given time, you can have \fIeither\fR one mutable reference \fIor\fR anynumber of immutable references\.
.P
References must always be valid\.
.P
Next, we’ll look at a different kind of reference: slices\.
.SH "The Slice Type"

.br

.br
\fBThe Slice Type\fR
.br
================
.br

.P
Another data type that does not have ownership is the \fIslice\fR\. Slices let youreference a contiguous sequence of elements in a collection rather than thewhole collection\.
.P
Here’s a small programming problem: write a function that takes a string andreturns the first word it finds in that string\. If the function doesn’t find aspace in the string, the whole string must be one word, so the entire stringshould be returned\.
.P
Let’s think about the signature of this function:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word(s: &String) \-> ?

.EE

.RE
.P
This function, `\fIfirst_word\fR`, has a `\fI&String\fR` as a parameter\. We don’t wantownership, so this is fine\. But what should we return? We don’t really have away to talk about \fIpart\fR of a string\. However, we could return the index of theend of the word\. Let’s try that, as shown in Listing 4\-7\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn first_word(s: &String) \-> usize {
    let bytes = s\.as_bytes();

    for (i, &item) in bytes\.iter()\.enumerate() {
        if item == b' ' {
            return i;
        }
    }

    s\.len()
}
# 
# fn main() {}

.EE

.RE
Listing 4\-7: The `\fIfirst_word\fR` function that returns abyte index value into the `\fIString\fR` parameter
.P
Because we need to go through the `\fIString\fR` element by element and check whethera value is a space, we’ll convert our `\fIString\fR` to an array of bytes using the`\fIas_bytes\fR` method:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn first_word(s: &String) \-> usize {
    let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return i;
#         }
#     }
# 
#     s\.len()
# }
# 
# fn main() {}

.EE

.RE
.P
Next, we create an iterator over the array of bytes using the `\fIiter\fR` method:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn first_word(s: &String) \-> usize {
#     let bytes = s\.as_bytes();
# 
    for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return i;
#         }
#     }
# 
#     s\.len()
# }
# 
# fn main() {}

.EE

.RE
.P
We’ll discuss iterators in more detail in Chapter 13\. For now, know that `\fIiter\fR`is a method that returns each element in a collection and that `\fIenumerate\fR`wraps the result of `\fIiter\fR` and returns each element as part of a tuple instead\.The first element of the tuple returned from `\fIenumerate\fR` is the index, and thesecond element is a reference to the element\. This is a bit more convenientthan calculating the index ourselves\.
.P
Because the `\fIenumerate\fR` method returns a tuple, we can use patterns todestructure that tuple\. We'll be discussing patterns more in Chapter 6\. So inthe `\fIfor\fR` loop, we specify a pattern that has `\fIi\fR` for the index in the tupleand `\fI&item\fR` for the single byte in the tuple\. Because we get a reference to theelement from `\fI\.iter()\.enumerate()\fR`, we use `\fI&\fR` in the pattern\.
.P
Inside the `\fIfor\fR` loop, we search for the byte that represents the space byusing the byte literal syntax\. If we find a space, we return the position\.Otherwise, we return the length of the string by using `\fIs\.len()\fR`:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn first_word(s: &String) \-> usize {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
        if item == b' ' {
            return i;
        }
    }

    s\.len()
# }
# 
# fn main() {}

.EE

.RE
.P
We now have a way to find out the index of the end of the first word in thestring, but there’s a problem\. We’re returning a `\fIusize\fR` on its own, but it’sonly a meaningful number in the context of the `\fI&String\fR`\. In other words,because it’s a separate value from the `\fIString\fR`, there’s no guarantee that itwill still be valid in the future\. Consider the program in Listing 4\-8 thatuses the `\fIfirst_word\fR` function from Listing 4\-7\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn first_word(s: &String) \-> usize {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return i;
#         }
#     }
# 
#     s\.len()
# }
# 
fn main() {
    let mut s = String::from("hello world");

    let word = first_word(&s); // word will get the value 5

    s\.clear(); // this empties the String, making it equal to ""

    // word still has the value 5 here, but there's no more string that
    // we could meaningfully use the value 5 with\. word is now totally invalid!
}

.EE

.RE
Listing 4\-8: Storing the result from calling the`\fIfirst_word\fR` function and then changing the `\fIString\fR` contents
.P
This program compiles without any errors and would also do so if we used `\fIword\fR`after calling `\fIs\.clear()\fR`\. Because `\fIword\fR` isn’t connected to the state of `\fIs\fR`at all, `\fIword\fR` still contains the value `\fI5\fR`\. We could use that value `\fI5\fR` withthe variable `\fIs\fR` to try to extract the first word out, but this would be a bugbecause the contents of `\fIs\fR` have changed since we saved `\fI5\fR` in `\fIword\fR`\.
.P
Having to worry about the index in `\fIword\fR` getting out of sync with the data in`\fIs\fR` is tedious and error prone! Managing these indices is even more brittle ifwe write a `\fIsecond_word\fR` function\. Its signature would have to look like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn second_word(s: &String) \-> (usize, usize) {

.EE

.RE
.P
Now we’re tracking a starting \fIand\fR an ending index, and we have even morevalues that were calculated from data in a particular state but aren’t tied tothat state at all\. We now have three unrelated variables floating around thatneed to be kept in sync\.
.P
Luckily, Rust has a solution to this problem: string slices\.
.br

.br
\fBString Slices\fR
.br
===============
.br

.P
A \fIstring slice\fR is a reference to part of a `\fIString\fR`, and it looks like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s = String::from("hello world");

    let hello = &s[0\.\.5];
    let world = &s[6\.\.11];
# }

.EE

.RE
.P
This is similar to taking a reference to the whole `\fIString\fR` but with the extra`\fI[0\.\.5]\fR` bit\. Rather than a reference to the entire `\fIString\fR`, it’s a referenceto a portion of the `\fIString\fR`\.
.P
We can create slices using a range within brackets by specifying`\fI[starting_index\.\.ending_index]\fR`, where `\fIstarting_index\fR` is the first positionin the slice and `\fIending_index\fR` is one more than the last position in theslice\. Internally, the slice data structure stores the starting position andthe length of the slice, which corresponds to `\fIending_index\fR` minus`\fIstarting_index\fR`\. So in the case of `\fIlet world = &s[6\.\.11];\fR`, `\fIworld\fR` would bea slice that contains a pointer to the byte at index 6 of `\fIs\fR` with a lengthvalue of 5\.
.P
Figure 4\-6 shows this in a diagram\.Figure 4\-6: String slice referring to part of a`\fIString\fR`
.P
With Rust’s `\fI\.\.\fR` range syntax, if you want to start at index zero, you can dropthe value before the two periods\. In other words, these are equal:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = String::from("hello");

let slice = &s[0\.\.2];
let slice = &s[\.\.2];

.EE

.RE
.P
By the same token, if your slice includes the last byte of the `\fIString\fR`, youcan drop the trailing number\. That means these are equal:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = String::from("hello");

let len = s\.len();

let slice = &s[3\.\.len];
let slice = &s[3\.\.];

.EE

.RE
.P
You can also drop both values to take a slice of the entire string\. So theseare equal:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = String::from("hello");

let len = s\.len();

let slice = &s[0\.\.len];
let slice = &s[\.\.];

.EE

.RE
.P
Note: String slice range indices must occur at valid UTF\-8 characterboundaries\. If you attempt to create a string slice in the middle of amultibyte character, your program will exit with an error\. For the purposesof introducing string slices, we are assuming ASCII only in this section; amore thorough discussion of UTF\-8 handling is in the 
.UR ch08\-02\-strings\.html#storing\-utf\-8\-encoded\-text\-with\-strings
.UE
“Storing UTF\-8 EncodedText with Strings” section of Chapter 8\.
.P
With all this information in mind, let’s rewrite `\fIfirst_word\fR` to return aslice\. The type that signifies “string slice” is written as `\fI&str\fR`:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn first_word(s: &String) \-> &str {
    let bytes = s\.as_bytes();

    for (i, &item) in bytes\.iter()\.enumerate() {
        if item == b' ' {
            return &s[0\.\.i];
        }
    }

    &s[\.\.]
}
# 
# fn main() {}

.EE

.RE
.P
We get the index for the end of the word in the same way as we did in Listing4\-7, by looking for the first occurrence of a space\. When we find a space, wereturn a string slice using the start of the string and the index of the spaceas the starting and ending indices\.
.P
Now when we call `\fIfirst_word\fR`, we get back a single value that is tied to theunderlying data\. The value is made up of a reference to the starting point ofthe slice and the number of elements in the slice\.
.P
Returning a slice would also work for a `\fIsecond_word\fR` function:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn second_word(s: &String) \-> &str {

.EE

.RE
.P
We now have a straightforward API that’s much harder to mess up, because thecompiler will ensure the references into the `\fIString\fR` remain valid\. Rememberthe bug in the program in Listing 4\-8, when we got the index to the end of thefirst word but then cleared the string so our index was invalid? That code waslogically incorrect but didn’t show any immediate errors\. The problems wouldshow up later if we kept trying to use the first word index with an emptiedstring\. Slices make this bug impossible and let us know we have a problem withour code much sooner\. Using the slice version of `\fIfirst_word\fR` will throw acompile\-time error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn first_word(s: &String) \-> &str {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return &s[0\.\.i];
#         }
#     }
# 
#     &s[\.\.]
# }
# 
fn main() {
    let mut s = String::from("hello world");

    let word = first_word(&s);

    s\.clear(); // error!

    println!("the first word is: {}", word);
}

.EE

.RE
.P
Here’s the compiler error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling ownership v0\.1\.0 (file:///projects/ownership)
error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable
  \-\-> src/main\.rs:18:5
   |
16 |     let word = first_word(&s);
   |                           \-\- immutable borrow occurs here
17 | 
18 |     s\.clear(); // error!
   |     ^^^^^^^^^ mutable borrow occurs here
19 | 
20 |     println!("the first word is: {}", word);
   |                                       \-\-\-\- immutable borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0502`\.
error: could not compile `ownership`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Recall from the borrowing rules that if we have an immutable reference tosomething, we cannot also take a mutable reference\. Because `\fIclear\fR` needs totruncate the `\fIString\fR`, it needs to get a mutable reference\. The `\fIprintln!\fR`after the call to `\fIclear\fR` uses the reference in `\fIword\fR`, so the immutablereference must still be active at that point\. Rust disallows the mutablereference in `\fIclear\fR` and the immutable reference in `\fIword\fR` from existing at thesame time, and compilation fails\. Not only has Rust made our API easier to use,but it has also eliminated an entire class of errors at compile time!
.br

.br
\fBString Literals Are Slices\fR
.br
============================
.br

.P
Recall that we talked about string literals being stored inside the binary\. Nowthat we know about slices, we can properly understand string literals:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = "Hello, world!";

.EE

.RE
.P
The type of `\fIs\fR` here is `\fI&str\fR`: it’s a slice pointing to that specific point ofthe binary\. This is also why string literals are immutable; `\fI&str\fR` is animmutable reference\.
.br

.br
\fBString Slices as Parameters\fR
.br
=============================
.br

.P
Knowing that you can take slices of literals and `\fIString\fR` values leads us toone more improvement on `\fIfirst_word\fR`, and that’s its signature:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word(s: &String) \-> &str {

.EE

.RE
.P
A more experienced Rustacean would write the signature shown in Listing 4\-9instead because it allows us to use the same function on both `\fI&String\fR` valuesand `\fI&str\fR` values\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word(s: &str) \-> &str {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return &s[0\.\.i];
#         }
#     }
# 
#     &s[\.\.]
# }
# 
# fn main() {
#     let my_string = String::from("hello world");
# 
#     // `first_word` works on slices of `String`s, whether partial or whole
#     let word = first_word(&my_string[0\.\.6]);
#     let word = first_word(&my_string[\.\.]);
#     // `first_word` also works on references to `String`s, which are equivalent
#     // to whole slices of `String`s
#     let word = first_word(&my_string);
# 
#     let my_string_literal = "hello world";
# 
#     // `first_word` works on slices of string literals, whether partial or whole
#     let word = first_word(&my_string_literal[0\.\.6]);
#     let word = first_word(&my_string_literal[\.\.]);
# 
#     // Because string literals *are* string slices already,
#     // this works too, without the slice syntax!
#     let word = first_word(my_string_literal);
# }

.EE

.RE
Listing 4\-9: Improving the `\fIfirst_word\fR` function by usinga string slice for the type of the `\fIs\fR` parameter
.P
If we have a string slice, we can pass that directly\. If we have a `\fIString\fR`, wecan pass a slice of the `\fIString\fR` or a reference to the `\fIString\fR`\. Thisflexibility takes advantage of \fIderef coercions\fR, a feature we will cover inthe 
.UR ch15\-02\-deref\.html#implicit\-deref\-coercions\-with\-functions\-and\-methods
.UE
“Implicit Deref Coercions with Functions andMethods” section of Chapter 15\. Defining afunction to take a string slice instead of a reference to a `\fIString\fR` makes ourAPI more general and useful without losing any functionality:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn first_word(s: &str) \-> &str {
#     let bytes = s\.as_bytes();
# 
#     for (i, &item) in bytes\.iter()\.enumerate() {
#         if item == b' ' {
#             return &s[0\.\.i];
#         }
#     }
# 
#     &s[\.\.]
# }
# 
fn main() {
    let my_string = String::from("hello world");

    // `first_word` works on slices of `String`s, whether partial or whole
    let word = first_word(&my_string[0\.\.6]);
    let word = first_word(&my_string[\.\.]);
    // `first_word` also works on references to `String`s, which are equivalent
    // to whole slices of `String`s
    let word = first_word(&my_string);

    let my_string_literal = "hello world";

    // `first_word` works on slices of string literals, whether partial or whole
    let word = first_word(&my_string_literal[0\.\.6]);
    let word = first_word(&my_string_literal[\.\.]);

    // Because string literals *are* string slices already,
    // this works too, without the slice syntax!
    let word = first_word(my_string_literal);
}

.EE

.RE

.br

.br
\fBOther Slices\fR
.br
==============
.br

.P
String slices, as you might imagine, are specific to strings\. But there’s amore general slice type, too\. Consider this array:
.RS
.IP \fBrust\fR 2

.br
.EX
let a = [1, 2, 3, 4, 5];

.EE

.RE
.P
Just as we might want to refer to a part of a string, we might want to referto part of an array\. We’d do so like this:
.RS
.IP \fBrust\fR 2

.br
.EX
let a = [1, 2, 3, 4, 5];

let slice = &a[1\.\.3];

assert_eq!(slice, &[2, 3]);

.EE

.RE
.P
This slice has the type `\fI&[i32]\fR`\. It works the same way as string slices do, bystoring a reference to the first element and a length\. You’ll use this kind ofslice for all sorts of other collections\. We’ll discuss these collections indetail when we talk about vectors in Chapter 8\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
The concepts of ownership, borrowing, and slices ensure memory safety in Rustprograms at compile time\. The Rust language gives you control over your memoryusage in the same way as other systems programming languages, but having theowner of data automatically clean up that data when the owner goes out of scopemeans you don’t have to write and debug extra code to get this control\.
.P
Ownership affects how lots of other parts of Rust work, so we’ll talk aboutthese concepts further throughout the rest of the book\. Let’s move on toChapter 5 and look at grouping pieces of data together in a `\fIstruct\fR`\.
.SH "Using Structs to Structure Related Data"

.br

.br
\fBUsing Structs to Structure Related Data\fR
.br
=========================================
.br

.P
A \fIstruct\fR, or \fIstructure\fR, is a custom data type that lets you name andpackage together multiple related values that make up a meaningful group\. Ifyou’re familiar with an object\-oriented language, a \fIstruct\fR is like anobject’s data attributes\. In this chapter, we’ll compare and contrast tupleswith structs\. We’ll demonstrate how to define and instantiate structs\. We’lldiscuss how to define associated functions, especially the kind of associatedfunctions called \fImethods\fR, to specify behavior associated with a struct type\.Structs and enums (discussed in Chapter 6) are the building blocks for creatingnew types in your program’s domain to take full advantage of Rust’s compiletime type checking\.
.SH "Defining and Instantiating Structs"

.br

.br
\fBDefining and Instantiating Structs\fR
.br
====================================
.br

.P
Structs are similar to tuples, which were discussed in 
.UR ch03\-02\-data\-types\.html#the\-tuple\-type
.UE
“The TupleType” section\. Like tuples, the pieces of a struct canbe different types\. Unlike with tuples, you’ll name each piece of data so it’sclear what the values mean\. As a result of these names, structs are moreflexible than tuples: you don’t have to rely on the order of the data tospecify or access the values of an instance\.
.P
To define a struct, we enter the keyword `\fIstruct\fR` and name the entire struct\. Astruct’s name should describe the significance of the pieces of data beinggrouped together\. Then, inside curly brackets, we define the names and types ofthe pieces of data, which we call \fIfields\fR\. For example, Listing 5\-1 shows astruct that stores information about a user account\.
.RS
.IP \fBrust\fR 2

.br
.EX
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}
# 
# fn main() {}

.EE

.RE
Listing 5\-1: A `\fIUser\fR` struct definition
.P
To use a struct after we’ve defined it, we create an \fIinstance\fR of that structby specifying concrete values for each of the fields\. We create an instance bystating the name of the struct and then add curly brackets containing `\fIkey: value\fR` pairs, where the keys are the names of the fields and the values are thedata we want to store in those fields\. We don’t have to specify the fields inthe same order in which we declared them in the struct\. In other words, thestruct definition is like a general template for the type, and instances fillin that template with particular data to create values of the type\. Forexample, we can declare a particular user as shown in Listing 5\-2\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
# fn main() {
    let user1 = User {
        email: String::from("someone@example\.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };
# }

.EE

.RE
Listing 5\-2: Creating an instance of the `\fIUser\fR`struct
.P
To get a specific value from a struct, we can use dot notation\. If we wantedjust this user’s email address, we could use `\fIuser1\.email\fR` wherever we wantedto use this value\. If the instance is mutable, we can change a value by usingthe dot notation and assigning into a particular field\. Listing 5\-3 shows howto change the value in the `\fIemail\fR` field of a mutable `\fIUser\fR` instance\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
# fn main() {
    let mut user1 = User {
        email: String::from("someone@example\.com"),
        username: String::from("someusername123"),
        active: true,
        sign_in_count: 1,
    };

    user1\.email = String::from("anotheremail@example\.com");
# }

.EE

.RE
Listing 5\-3: Changing the value in the `\fIemail\fR` field of a`\fIUser\fR` instance
.P
Note that the entire instance must be mutable; Rust doesn’t allow us to markonly certain fields as mutable\. As with any expression, we can construct a newinstance of the struct as the last expression in the function body toimplicitly return that new instance\.
.P
Listing 5\-4 shows a `\fIbuild_user\fR` function that returns a `\fIUser\fR` instance withthe given email and username\. The `\fIactive\fR` field gets the value of `\fItrue\fR`, andthe `\fIsign_in_count\fR` gets a value of `\fI1\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
fn build_user(email: String, username: String) \-> User {
    User {
        email: email,
        username: username,
        active: true,
        sign_in_count: 1,
    }
}
# 
# fn main() {
#     let user1 = build_user(
#         String::from("someone@example\.com"),
#         String::from("someusername123"),
#     );
# }

.EE

.RE
Listing 5\-4: A `\fIbuild_user\fR` function that takes an emailand username and returns a `\fIUser\fR` instance
.P
It makes sense to name the function parameters with the same name as the structfields, but having to repeat the `\fIemail\fR` and `\fIusername\fR` field names andvariables is a bit tedious\. If the struct had more fields, repeating each namewould get even more annoying\. Luckily, there’s a convenient shorthand!
.br

.br
\fBUsing the Field Init Shorthand when Variables and Fields Have the Same Name\fR
.br
=============================================================================
.br

.P
Because the parameter names and the struct field names are exactly the same inListing 5\-4, we can use the \fIfield init shorthand\fR syntax to rewrite`\fIbuild_user\fR` so that it behaves exactly the same but doesn’t have therepetition of `\fIemail\fR` and `\fIusername\fR`, as shown in Listing 5\-5\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
fn build_user(email: String, username: String) \-> User {
    User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
}
# 
# fn main() {
#     let user1 = build_user(
#         String::from("someone@example\.com"),
#         String::from("someusername123"),
#     );
# }

.EE

.RE
Listing 5\-5: A `\fIbuild_user\fR` function that uses field initshorthand because the `\fIemail\fR` and `\fIusername\fR` parameters have the same name asstruct fields
.P
Here, we’re creating a new instance of the `\fIUser\fR` struct, which has a fieldnamed `\fIemail\fR`\. We want to set the `\fIemail\fR` field’s value to the value in the`\fIemail\fR` parameter of the `\fIbuild_user\fR` function\. Because the `\fIemail\fR` field andthe `\fIemail\fR` parameter have the same name, we only need to write `\fIemail\fR` ratherthan `\fIemail: email\fR`\.
.br

.br
\fBCreating Instances From Other Instances With Struct Update Syntax\fR
.br
===================================================================
.br

.P
It’s often useful to create a new instance of a struct that uses most of an oldinstance’s values but changes some\. You can do this using \fIstruct update\fRsyntax\.
.P
First, Listing 5\-6 shows how we create a new `\fIUser\fR` instance in `\fIuser2\fR` withoutthe update syntax\. We set a new value for `\fIemail\fR` but otherwise use the samevalues from `\fIuser1\fR` that we created in Listing 5\-2\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
# fn main() {
#     let user1 = User {
#         email: String::from("someone@example\.com"),
#         username: String::from("someusername123"),
#         active: true,
#         sign_in_count: 1,
#     };
# 
    let user2 = User {
        active: user1\.active,
        username: user1\.username,
        email: String::from("another@example\.com"),
        sign_in_count: user1\.sign_in_count,
    };
# }

.EE

.RE
Listing 5\-6: Creating a new `\fIUser\fR` instance using one ofthe values from `\fIuser1\fR`
.P
Using struct update syntax, we can achieve the same effect with less code, asshown in Listing 5\-7\. The syntax `\fI\.\.\fR` specifies that the remaining fields notexplicitly set should have the same value as the fields in the given instance\.
.RS
.IP \fBrust\fR 2

.br
.EX
# struct User {
#     active: bool,
#     username: String,
#     email: String,
#     sign_in_count: u64,
# }
# 
# fn main() {
#     let user1 = User {
#         email: String::from("someone@example\.com"),
#         username: String::from("someusername123"),
#         active: true,
#         sign_in_count: 1,
#     };
# 
    let user2 = User {
        email: String::from("another@example\.com"),
        \.\.user1
    };
# }

.EE

.RE
Listing 5\-7: Using struct update syntax to set a new`\fIemail\fR` value for a `\fIUser\fR` instance but use the rest of the values from`\fIuser1\fR`
.P
The code in Listing 5\-7 also creates an instance in `\fIuser2\fR` that has adifferent value for `\fIemail\fR` but has the same values for the `\fIusername\fR`,`\fIactive\fR`, and `\fIsign_in_count\fR` fields from `\fIuser1\fR`\. The `\fI\.\.user1\fR` must come lastto specify that any remaining fields should get their values from thecorresponding fields in `\fIuser1\fR`, but we can choose to specify values for asmany fields as we want in any order, regardless of the order of the fields inthe struct’s definition\.
.P
Note that the struct update syntax is like assignment with `\fI=\fR` because it movesthe data, just as we saw in the 
.UR ch04\-01\-what\-is\-ownership\.html#ways\-variables\-and\-data\-interact\-move
.UE
“Ways Variables and Data Interact: Move”section\. In this example, we can no longer use `\fIuser1\fR`after creating `\fIuser2\fR` because the `\fIString\fR` in the `\fIusername\fR` field of `\fIuser1\fR`was moved into `\fIuser2\fR`\. If we had given `\fIuser2\fR` new `\fIString\fR` values for both`\fIemail\fR` and `\fIusername\fR`, and thus only used the `\fIactive\fR` and `\fIsign_in_count\fR`values from `\fIuser1\fR`, then `\fIuser1\fR` would still be valid after creating `\fIuser2\fR`\.The types of `\fIactive\fR` and `\fIsign_in_count\fR` are types that implement the `\fICopy\fR`trait, so the behavior we discussed in the 
.UR ch04\-01\-what\-is\-ownership\.html#stack\-only\-data\-copy
.UE
“Stack\-Only Data: Copy”section would apply\.
.br

.br
\fBUsing Tuple Structs without Named Fields to Create Different Types\fR
.br
====================================================================
.br

.P
You can also define structs that look similar to tuples, called \fItuple\fRstructs\. Tuple structs have the added meaning the struct name provides butdon’t have names associated with their fields; rather, they just have the typesof the fields\. Tuple structs are useful when you want to give the whole tuple aname and make the tuple be a different type from other tuples, and naming eachfield as in a regular struct would be verbose or redundant\.
.P
To define a tuple struct, start with the `\fIstruct\fR` keyword and the struct namefollowed by the types in the tuple\. For example, here are definitions andusages of two tuple structs named `\fIColor\fR` and `\fIPoint\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    struct Color(i32, i32, i32);
    struct Point(i32, i32, i32);

    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
# }

.EE

.RE
.P
Note that the `\fIblack\fR` and `\fIorigin\fR` values are different types, because they’reinstances of different tuple structs\. Each struct you define is its own type,even though the fields within the struct have the same types\. For example, afunction that takes a parameter of type `\fIColor\fR` cannot take a `\fIPoint\fR` as anargument, even though both types are made up of three `\fIi32\fR` values\. Otherwise,tuple struct instances behave like tuples: you can destructure them into theirindividual pieces, you can use a `\fI\.\fR` followed by the index to access anindividual value, and so on\.
.br

.br
\fBUnit\-Like Structs Without Any Fields\fR
.br
======================================
.br

.P
You can also define structs that don’t have any fields! These are called\fIunit\-like structs\fR because they behave similarly to `\fI()\fR`, the unit type thatwe mentioned in 
.UR ch03\-02\-data\-types\.html#the\-tuple\-type
.UE
“The Tuple Type” section\. Unit\-likestructs can be useful in situations in which you need to implement a trait onsome type but don’t have any data that you want to store in the type itself\.We’ll discuss traits in Chapter 10\. Here’s an example of declaring andinstantiating a unit struct named `\fIAlwaysEqual\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    struct AlwaysEqual;

    let subject = AlwaysEqual;
# }

.EE

.RE
.P
To define `\fIAlwaysEqual\fR`, we use the `\fIstruct\fR` keyword, the name we want, then asemicolon\. No need for curly brackets or parentheses! Then we can get aninstance of `\fIAlwaysEqual\fR` in the `\fIsubject\fR` variable in a similar way: using thename we defined, without any curly brackets or parentheses\. Imagine we’ll beimplementing behavior for this type that every instance is always equal toevery instance of every other type, perhaps to have a known result for testingpurposes\. We wouldn’t need any data to implement that behavior! You’ll see inChapter 10 how to define traits and implement them on any type, includingunit\-like structs\.
.br

.br
\fBOwnership of Struct Data\fR
.br
==========================
.br

.P
In the `\fIUser\fR` struct definition in Listing 5\-1, we used the owned `\fIString\fR`type rather than the `\fI&str\fR` string slice type\. This is a deliberate choicebecause we want instances of this struct to own all of its data and for thatdata to be valid for as long as the entire struct is valid\.
.P
It’s possible for structs to store references to data owned by something else,but to do so requires the use of \fIlifetimes\fR, a Rust feature that we’lldiscuss in Chapter 10\. Lifetimes ensure that the data referenced by a structis valid for as long as the struct is\. Let’s say you try to store a referencein a struct without specifying lifetimes, like this, which won’t work:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
struct User {
    username: &str,
    email: &str,
    sign_in_count: u64,
    active: bool,
}

fn main() {
    let user1 = User {
        email: "someone@example\.com",
        username: "someusername123",
        active: true,
        sign_in_count: 1,
    };
}

.EE

.RE
.P
The compiler will complain that it needs lifetime specifiers:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling structs v0\.1\.0 (file:///projects/structs)
error[E0106]: missing lifetime specifier
 \-\-> src/main\.rs:2:15
  |
2 |     username: &str,
  |               ^ expected named lifetime parameter
  |
help: consider introducing a named lifetime parameter
  |
1 | struct User<'a> {
2 |     username: &'a str,
  |

error[E0106]: missing lifetime specifier
 \-\-> src/main\.rs:3:12
  |
3 |     email: &str,
  |            ^ expected named lifetime parameter
  |
help: consider introducing a named lifetime parameter
  |
1 | struct User<'a> {
2 |     username: &str,
3 |     email: &'a str,
  |

error: aborting due to 2 previous errors

For more information about this error, try `rustc \-\-explain E0106`\.
error: could not compile `structs`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
In Chapter 10, we’ll discuss how to fix these errors so you can storereferences in structs, but for now, we’ll fix errors like these using ownedtypes like `\fIString\fR` instead of references like `\fI&str\fR`\.
.SH "An Example Program Using Structs"

.br

.br
\fBAn Example Program Using Structs\fR
.br
==================================
.br

.P
To understand when we might want to use structs, let’s write a program thatcalculates the area of a rectangle\. We’ll start with single variables, and thenrefactor the program until we’re using structs instead\.
.P
Let’s make a new binary project with Cargo called \fIrectangles\fR that will takethe width and height of a rectangle specified in pixels and calculate the areaof the rectangle\. Listing 5\-8 shows a short program with one way of doingexactly that in our project’s \fIsrc/main\.rs\fR\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let width1 = 30;
    let height1 = 50;

    println!(
        "The area of the rectangle is {} square pixels\.",
        area(width1, height1)
    );
}

fn area(width: u32, height: u32) \-> u32 {
    width * height
}

.EE

.RE
Listing 5\-8: Calculating the area of a rectanglespecified by separate width and height variables
.P
Now, run this program using `\fIcargo run\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.42s
     Running `target/debug/rectangles`
The area of the rectangle is 1500 square pixels\.

.EE

.RE
.P
Even though Listing 5\-8 works and figures out the area of the rectangle bycalling the `\fIarea\fR` function with each dimension, we can do better\. The widthand the height are related to each other because together they describe onerectangle\.
.P
The issue with this code is evident in the signature of `\fIarea\fR`:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
#     let width1 = 30;
#     let height1 = 50;
# 
#     println!(
#         "The area of the rectangle is {} square pixels\.",
#         area(width1, height1)
#     );
# }
# 
fn area(width: u32, height: u32) \-> u32 {
#     width * height
# }

.EE

.RE
.P
The `\fIarea\fR` function is supposed to calculate the area of one rectangle, but thefunction we wrote has two parameters\. The parameters are related, but that’snot expressed anywhere in our program\. It would be more readable and moremanageable to group width and height together\. We’ve already discussed one waywe might do that in 
.UR ch03\-02\-data\-types\.html#the\-tuple\-type
.UE
“The Tuple Type” sectionof Chapter 3: by using tuples\.
.br

.br
\fBRefactoring with Tuples\fR
.br
=========================
.br

.P
Listing 5\-9 shows another version of our program that uses tuples\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let rect1 = (30, 50);

    println!(
        "The area of the rectangle is {} square pixels\.",
        area(rect1)
    );
}

fn area(dimensions: (u32, u32)) \-> u32 {
    dimensions\.0 * dimensions\.1
}

.EE

.RE
Listing 5\-9: Specifying the width and height of therectangle with a tuple
.P
In one way, this program is better\. Tuples let us add a bit of structure, andwe’re now passing just one argument\. But in another way, this version is lessclear: tuples don’t name their elements, so our calculation has become moreconfusing because we have to index into the parts of the tuple\.
.P
It doesn’t matter if we mix up width and height for the area calculation, butif we want to draw the rectangle on the screen, it would matter! We would haveto keep in mind that `\fIwidth\fR` is the tuple index `\fI0\fR` and `\fIheight\fR` is the tupleindex `\fI1\fR`\. If someone else worked on this code, they would have to figure thisout and keep it in mind as well\. It would be easy to forget or mix up thesevalues and cause errors, because we haven’t conveyed the meaning of our data inour code\.
.br

.br
\fBRefactoring with Structs: Adding More Meaning\fR
.br
===============================================
.br

.P
We use structs to add meaning by labeling the data\. We can transform the tuplewe’re using into a data type with a name for the whole as well as names for theparts, as shown in Listing 5\-10\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels\.",
        area(&rect1)
    );
}

fn area(rectangle: &Rectangle) \-> u32 {
    rectangle\.width * rectangle\.height
}

.EE

.RE
Listing 5\-10: Defining a `\fIRectangle\fR` struct
.P
Here we’ve defined a struct and named it `\fIRectangle\fR`\. Inside the curlybrackets, we defined the fields as `\fIwidth\fR` and `\fIheight\fR`, both of which havetype `\fIu32\fR`\. Then in `\fImain\fR`, we created a particular instance of `\fIRectangle\fR`that has a width of 30 and a height of 50\.
.P
Our `\fIarea\fR` function is now defined with one parameter, which we’ve named`\fIrectangle\fR`, whose type is an immutable borrow of a struct `\fIRectangle\fR`instance\. As mentioned in Chapter 4, we want to borrow the struct rather thantake ownership of it\. This way, `\fImain\fR` retains its ownership and can continueusing `\fIrect1\fR`, which is the reason we use the `\fI&\fR` in the function signature andwhere we call the function\.
.P
The `\fIarea\fR` function accesses the `\fIwidth\fR` and `\fIheight\fR` fields of the `\fIRectangle\fR`instance\. Our function signature for `\fIarea\fR` now says exactly what we mean:calculate the area of `\fIRectangle\fR`, using its `\fIwidth\fR` and `\fIheight\fR` fields\. Thisconveys that the width and height are related to each other, and it givesdescriptive names to the values rather than using the tuple index values of `\fI0\fR`and `\fI1\fR`\. This is a win for clarity\.
.br

.br
\fBAdding Useful Functionality with Derived Traits\fR
.br
=================================================
.br

.P
It’d be nice to be able to print an instance of `\fIRectangle\fR` while we’redebugging our program and see the values for all its fields\. Listing 5\-11 triesusing the 
.UR \.\./std/macro\.println\.html
.UE
`\fIprintln!\fR` macro as we have used inprevious chapters\. This won’t work, however\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!("rect1 is {}", rect1);
}

.EE

.RE
Listing 5\-11: Attempting to print a `\fIRectangle\fR`instance
.P
When we compile this code, we get an error with this core message:
.RS
.IP \fBtext\fR 2

.br
.EX
error[E0277]: `Rectangle` doesn't implement `std::fmt::Display`

.EE

.RE
.P
The `\fIprintln!\fR` macro can do many kinds of formatting, and by default, the curlybrackets tell `\fIprintln!\fR` to use formatting known as `\fIDisplay\fR`: output intendedfor direct end user consumption\. The primitive types we’ve seen so farimplement `\fIDisplay\fR` by default, because there’s only one way you’d want to showa `\fI1\fR` or any other primitive type to a user\. But with structs, the way`\fIprintln!\fR` should format the output is less clear because there are moredisplay possibilities: Do you want commas or not? Do you want to print thecurly brackets? Should all the fields be shown? Due to this ambiguity, Rustdoesn’t try to guess what we want, and structs don’t have a providedimplementation of `\fIDisplay\fR`\.
.P
If we continue reading the errors, we’ll find this helpful note:
.RS
.IP \fBtext\fR 2

.br
.EX
   = help: the trait `std::fmt::Display` is not implemented for `Rectangle`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty\-print) instead

.EE

.RE
.P
Let’s try it! The `\fIprintln!\fR` macro call will now look like `\fIprintln!("rect1 is {:?}", rect1);\fR`\. Putting the specifier `\fI:?\fR` inside the curly brackets tells`\fIprintln!\fR` we want to use an output format called `\fIDebug\fR`\. The `\fIDebug\fR` traitenables us to print our struct in a way that is useful for developers so we cansee its value while we’re debugging our code\.
.P
Compile the code with this change\. Drat! We still get an error:
.RS
.IP \fBtext\fR 2

.br
.EX
error[E0277]: `Rectangle` doesn't implement `Debug`

.EE

.RE
.P
But again, the compiler gives us a helpful note:
.RS
.IP \fBtext\fR 2

.br
.EX
   = help: the trait `Debug` is not implemented for `Rectangle`
   = note: add `#[derive(Debug)]` or manually implement `Debug`

.EE

.RE
.P
Rust \fIdoes\fR include functionality to print out debugging information, but wehave to explicitly opt in to make that functionality available for our struct\.To do that, we add the outer attribute `\fI#[derive(Debug)]\fR` just before thestruct definition, as shown in Listing 5\-12\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!("rect1 is {:?}", rect1);
}

.EE

.RE
Listing 5\-12: Adding the attribute to derive the `\fIDebug\fR`trait and printing the `\fIRectangle\fR` instance using debug formatting
.P
Now when we run the program, we won’t get any errors, and we’ll see thefollowing output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.48s
     Running `target/debug/rectangles`
rect1 is Rectangle { width: 30, height: 50 }

.EE

.RE
.P
Nice! It’s not the prettiest output, but it shows the values of all the fieldsfor this instance, which would definitely help during debugging\. When we havelarger structs, it’s useful to have output that’s a bit easier to read; inthose cases, we can use `\fI{:#?}\fR` instead of `\fI{:?}\fR` in the `\fIprintln!\fR` string\.When we use the `\fI{:#?}\fR` style in the example, the output will look like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.48s
     Running `target/debug/rectangles`
rect1 is Rectangle {
    width: 30,
    height: 50,
}

.EE

.RE
.P
Another way to print out a value using the `\fIDebug\fR` format is by using the
.UR \.\./std/macro\.dbg\.html
.UE
`\fIdbg!\fR` macro \. The `\fIdbg!\fR` macro takes ownership of anexpression, prints the file and line number of where that `\fIdbg!\fR` macro calloccurs in your code along with the resulting value of that expression, andreturns ownership of the value\. Calling the `\fIdbg!\fR` macro prints to the standarderror console stream (`\fIstderr\fR`), as opposed to `\fIprintln!\fR` which prints to thestandard output console stream (`\fIstdout\fR`)\. We’ll talk more about `\fIstderr\fR` and`\fIstdout\fR` in the 
.UR ch12\-06\-writing\-to\-stderr\-instead\-of\-stdout\.html
.UE
“Writing Error Messages to Standard Error Instead of StandardOutput” section in Chapter 12\. Here’s an example wherewe’re interested in the value that gets assigned to the `\fIwidth\fR` field, as wellas the value of the whole struct in `\fIrect1\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30 * scale),
        height: 50,
    };

    dbg!(&rect1);
}

.EE

.RE
.P
We can put `\fIdbg!\fR` around the expression `\fI30 * scale\fR` and, because `\fIdbg!\fR`returns ownership of the expression’s value, the `\fIwidth\fR` field will get thesame value as if we didn’t have the `\fIdbg!\fR` call there\. We don’t want `\fIdbg!\fR` totake ownership of `\fIrect1\fR`, so we use a reference to `\fIdbg!\fR` in the next call\.Here’s what the output of this example looks like:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling rectangles v0\.1\.0 (file:///projects/rectangles)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.61s
     Running `target/debug/rectangles`
[src/main\.rs:10] 30 * scale = 60
[src/main\.rs:14] &rect1 = Rectangle {
    width: 60,
    height: 50,
}

.EE

.RE
.P
We can see the first bit of output came from \fIsrc/main\.rs\fR line 10, where we’redebugging the expression `\fI30 * scale\fR`, and its resulting value is 60 (the`\fIDebug\fR` formatting implemented for integers is to print only their value)\. The`\fIdbg!\fR` call on line 14 of \fIsrc/main\.rs\fR outputs the value of `\fI&rect1\fR`, which isthe `\fIRectangle\fR` struct\. This output uses the pretty `\fIDebug\fR` formatting of the`\fIRectangle\fR` type\. The `\fIdbg!\fR` macro can be really helpful when you’re trying tofigure out what your code is doing!
.P
In addition to the `\fIDebug\fR` trait, Rust has provided a number of traits for usto use with the `\fIderive\fR` attribute that can add useful behavior to our customtypes\. Those traits and their behaviors are listed in 
.UR appendix\-03\-derivable\-traits\.md
.UE
Appendix C\. We’ll cover how to implement these traits with custom behavior aswell as how to create your own traits in Chapter 10\. There are also manyattributes other than `\fIderive\fR`; for more information, see 
.UR \.\./reference/attributes\.html
.UE
the “Attributes”section of the Rust Reference\.
.P
Our `\fIarea\fR` function is very specific: it only computes the area of rectangles\.It would be helpful to tie this behavior more closely to our `\fIRectangle\fR`struct, because it won’t work with any other type\. Let’s look at how we cancontinue to refactor this code by turning the `\fIarea\fR` function into an `\fIarea\fR`\fImethod\fR defined on our `\fIRectangle\fR` type\.
.SH "Method Syntax"

.br

.br
\fBMethod Syntax\fR
.br
===============
.br
\fIMethods\fR are similar to functions: they’re declared with the `\fIfn\fR` keyword andtheir name, they can have parameters and a return value, and they contain somecode that is run when they’re called from somewhere else\. However, methods aredifferent from functions in that they’re defined within the context of a struct(or an enum or a trait object, which we cover in Chapters 6 and 17,respectively), and their first parameter is always `\fIself\fR`, which represents theinstance of the struct the method is being called on\.
.br

.br
\fBDefining Methods\fR
.br
==================
.br

.P
Let’s change the `\fIarea\fR` function that has a `\fIRectangle\fR` instance as a parameterand instead make an `\fIarea\fR` method defined on the `\fIRectangle\fR` struct, as shownin Listing 5\-13\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn area(&self) \-> u32 {
        self\.width * self\.height
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    println!(
        "The area of the rectangle is {} square pixels\.",
        rect1\.area()
    );
}

.EE

.RE
Listing 5\-13: Defining an `\fIarea\fR` method on the`\fIRectangle\fR` struct
.P
To define the function within the context of `\fIRectangle\fR`, we start an `\fIimpl\fR`(implementation) block for `\fIRectangle\fR`\. Everything within this `\fIimpl\fR` blockwill be associated with the `\fIRectangle\fR` type\. Then we move the `\fIarea\fR` functionwithin the `\fIimpl\fR` curly brackets and change the first (and in this case, only)parameter to be `\fIself\fR` in the signature and everywhere within the body\. In`\fImain\fR`, where we called the `\fIarea\fR` function and passed `\fIrect1\fR` as an argument,we can instead use \fImethod syntax\fR to call the `\fIarea\fR` method on our `\fIRectangle\fR`instance\. The method syntax goes after an instance: we add a dot followed bythe method name, parentheses, and any arguments\.
.P
In the signature for `\fIarea\fR`, we use `\fI&self\fR` instead of `\fIrectangle: &Rectangle\fR`\.The `\fI&self\fR` is actually short for `\fIself: &Self\fR`\. Within an `\fIimpl\fR` block, thetype `\fISelf\fR` is an alias for the type that the `\fIimpl\fR` block is for\. Methods musthave a parameter named `\fIself\fR` of type `\fISelf\fR` for their first parameter, so Rustlets you abbreviate this with only the name `\fIself\fR` in the first parameter spot\.Note that we still need to use the `\fI&\fR` in front of the `\fIself\fR` shorthand toindicate this method borrows the `\fISelf\fR` instance, just as we did in `\fIrectangle: &Rectangle\fR`\. Methods can take ownership of `\fIself\fR`, borrow `\fIself\fR` immutably aswe’ve done here, or borrow `\fIself\fR` mutably, just as they can any other parameter\.
.P
We’ve chosen `\fI&self\fR` here for the same reason we used `\fI&Rectangle\fR` in thefunction version: we don’t want to take ownership, and we just want to read thedata in the struct, not write to it\. If we wanted to change the instance thatwe’ve called the method on as part of what the method does, we’d use `\fI&mut self\fR` as the first parameter\. Having a method that takes ownership of theinstance by using just `\fIself\fR` as the first parameter is rare; this technique isusually used when the method transforms `\fIself\fR` into something else and you wantto prevent the caller from using the original instance after the transformation\.
.P
The main benefit of using methods instead of functions, in addition to usingmethod syntax and not having to repeat the type of `\fIself\fR` in every method’ssignature, is for organization\. We’ve put all the things we can do with aninstance of a type in one `\fIimpl\fR` block rather than making future users of ourcode search for capabilities of `\fIRectangle\fR` in various places in the library weprovide\.
.P
Note that we can choose to give a method the same name as one of the struct’sfields\. For example, we can define a method on `\fIRectangle\fR` also named `\fIwidth\fR`:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
impl Rectangle {
    fn width(&self) \-> bool {
        self\.width > 0
    }
}

fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };

    if rect1\.width() {
        println!("The rectangle has a nonzero width; it is {}", rect1\.width);
    }
}

.EE

.RE
.P
Here, we’re choosing to make the behavior of the `\fIwidth\fR` method be that itreturns `\fItrue\fR` if the value in the instance’s `\fIwidth\fR` field is greater than 0,and `\fIfalse\fR` if the value is 0: we can use a field within a method of the samename for any purpose\. In `\fImain\fR`, when we follow `\fIrect1\.width\fR` with parentheses,Rust knows we mean the method `\fIwidth\fR`\. When we don’t use parentheses, Rustknows we mean the field `\fIwidth\fR`\.
.P
Often, but not always, methods with the same name as a field will be defined toonly return the value in the field and do nothing else\. Methods like this arecalled \fIgetters\fR, and Rust does not implement them automatically for structfields as some other languages do\. Getters are useful because you can make thefield private but the method public and thus enable read\-only access to thatfield as part of the type’s public API\. We will be discussing what public andprivate are and how to designate a field or method as public or private inChapter 7\.
.br

.br
\fBWhere’s the \fR
.br
================
.br
`\fI\->\fR` Operator?
.P
In C and C++, two different operators are used for calling methods: you use`\fI\.\fR` if you’re calling a method on the object directly and `\fI\->\fR` if you’recalling the method on a pointer to the object and need to dereference thepointer first\. In other words, if `\fIobject\fR` is a pointer,`\fIobject\->something()\fR` is similar to `\fI(*object)\.something()\fR`\.
.P
Rust doesn’t have an equivalent to the `\fI\->\fR` operator; instead, Rust has afeature called \fIautomatic referencing and dereferencing\fR\. Calling methods isone of the few places in Rust that has this behavior\.
.P
Here’s how it works: when you call a method with `\fIobject\.something()\fR`, Rustautomatically adds in `\fI&\fR`, `\fI&mut\fR`, or `\fI*\fR` so `\fIobject\fR` matches the signature ofthe method\. In other words, the following are the same:
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug,Copy,Clone)]
# struct Point {
#     x: f64,
#     y: f64,
# }
#
# impl Point {
#    fn distance(&self, other: &Point) \-> f64 {
#        let x_squared = f64::powi(other\.x \- self\.x, 2);
#        let y_squared = f64::powi(other\.y \- self\.y, 2);
#
#        f64::sqrt(x_squared + y_squared)
#    }
# }
# let p1 = Point { x: 0\.0, y: 0\.0 };
# let p2 = Point { x: 5\.0, y: 6\.5 };
p1\.distance(&p2);
(&p1)\.distance(&p2);

.EE

.RE
.P
The first one looks much cleaner\. This automatic referencing behavior worksbecause methods have a clear receiver—the type of `\fIself\fR`\. Given the receiverand name of a method, Rust can figure out definitively whether the method isreading (`\fI&self\fR`), mutating (`\fI&mut self\fR`), or consuming (`\fIself\fR`)\. The factthat Rust makes borrowing implicit for method receivers is a big part ofmaking ownership ergonomic in practice\.
.br

.br
\fBMethods with More Parameters\fR
.br
==============================
.br

.P
Let’s practice using methods by implementing a second method on the `\fIRectangle\fR`struct\. This time, we want an instance of `\fIRectangle\fR` to take another instanceof `\fIRectangle\fR` and return `\fItrue\fR` if the second `\fIRectangle\fR` can fit completelywithin `\fIself\fR`; otherwise it should return `\fIfalse\fR`\. That is, we want to be ableto write the program shown in Listing 5\-14, once we’ve defined the `\fIcan_hold\fR`method\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn main() {
    let rect1 = Rectangle {
        width: 30,
        height: 50,
    };
    let rect2 = Rectangle {
        width: 10,
        height: 40,
    };
    let rect3 = Rectangle {
        width: 60,
        height: 45,
    };

    println!("Can rect1 hold rect2? {}", rect1\.can_hold(&rect2));
    println!("Can rect1 hold rect3? {}", rect1\.can_hold(&rect3));
}

.EE

.RE
Listing 5\-14: Using the as\-yet\-unwritten `\fIcan_hold\fR`method
.P
And the expected output would look like the following, because both dimensionsof `\fIrect2\fR` are smaller than the dimensions of `\fIrect1\fR` but `\fIrect3\fR` is wider than`\fIrect1\fR`:
.RS
.IP \fBtext\fR 2

.br
.EX
Can rect1 hold rect2? true
Can rect1 hold rect3? false

.EE

.RE
.P
We know we want to define a method, so it will be within the `\fIimpl Rectangle\fR`block\. The method name will be `\fIcan_hold\fR`, and it will take an immutable borrowof another `\fIRectangle\fR` as a parameter\. We can tell what the type of theparameter will be by looking at the code that calls the method:`\fIrect1\.can_hold(&rect2)\fR` passes in `\fI&rect2\fR`, which is an immutable borrow to`\fIrect2\fR`, an instance of `\fIRectangle\fR`\. This makes sense because we only need toread `\fIrect2\fR` (rather than write, which would mean we’d need a mutable borrow),and we want `\fImain\fR` to retain ownership of `\fIrect2\fR` so we can use it again aftercalling the `\fIcan_hold\fR` method\. The return value of `\fIcan_hold\fR` will be aBoolean, and the implementation will check whether the width and height of`\fIself\fR` are both greater than the width and height of the other `\fIRectangle\fR`,respectively\. Let’s add the new `\fIcan_hold\fR` method to the `\fIimpl\fR` block fromListing 5\-13, shown in Listing 5\-15\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
impl Rectangle {
    fn area(&self) \-> u32 {
        self\.width * self\.height
    }

    fn can_hold(&self, other: &Rectangle) \-> bool {
        self\.width > other\.width && self\.height > other\.height
    }
}
# 
# fn main() {
#     let rect1 = Rectangle {
#         width: 30,
#         height: 50,
#     };
#     let rect2 = Rectangle {
#         width: 10,
#         height: 40,
#     };
#     let rect3 = Rectangle {
#         width: 60,
#         height: 45,
#     };
# 
#     println!("Can rect1 hold rect2? {}", rect1\.can_hold(&rect2));
#     println!("Can rect1 hold rect3? {}", rect1\.can_hold(&rect3));
# }

.EE

.RE
Listing 5\-15: Implementing the `\fIcan_hold\fR` method on`\fIRectangle\fR` that takes another `\fIRectangle\fR` instance as a parameter
.P
When we run this code with the `\fImain\fR` function in Listing 5\-14, we’ll get ourdesired output\. Methods can take multiple parameters that we add to thesignature after the `\fIself\fR` parameter, and those parameters work just likeparameters in functions\.
.br

.br
\fBAssociated Functions\fR
.br
======================
.br

.P
All functions defined within an `\fIimpl\fR` block are called \fIassociated functions\fRbecause they’re associated with the type named after the `\fIimpl\fR`\. We can defineassociated functions that don’t have `\fIself\fR` as their first parameter (and thusare not methods) because they don’t need an instance of the type to work with\.We’ve already used one function like this, the `\fIString::from\fR` function, that’sdefined on the `\fIString\fR` type\.
.P
Associated functions that aren’t methods are often used for constructors thatwill return a new instance of the struct\. For example, we could provide anassociated function that would have one dimension parameter and use that asboth width and height, thus making it easier to create a square `\fIRectangle\fR`rather than having to specify the same value twice:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
impl Rectangle {
    fn square(size: u32) \-> Rectangle {
        Rectangle {
            width: size,
            height: size,
        }
    }
}
# 
# fn main() {
#     let sq = Rectangle::square(3);
# }

.EE

.RE
.P
To call this associated function, we use the `\fI::\fR` syntax with the struct name;`\fIlet sq = Rectangle::square(3);\fR` is an example\. This function is namespaced bythe struct: the `\fI::\fR` syntax is used for both associated functions andnamespaces created by modules\. We’ll discuss modules in Chapter 7\.
.br

.br
\fBMultiple \fR
.br
===========
.br
`\fIimpl\fR` Blocks
.P
Each struct is allowed to have multiple `\fIimpl\fR` blocks\. For example, Listing5\-15 is equivalent to the code shown in Listing 5\-16, which has each methodin its own `\fIimpl\fR` block\.
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
impl Rectangle {
    fn area(&self) \-> u32 {
        self\.width * self\.height
    }
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) \-> bool {
        self\.width > other\.width && self\.height > other\.height
    }
}
# 
# fn main() {
#     let rect1 = Rectangle {
#         width: 30,
#         height: 50,
#     };
#     let rect2 = Rectangle {
#         width: 10,
#         height: 40,
#     };
#     let rect3 = Rectangle {
#         width: 60,
#         height: 45,
#     };
# 
#     println!("Can rect1 hold rect2? {}", rect1\.can_hold(&rect2));
#     println!("Can rect1 hold rect3? {}", rect1\.can_hold(&rect3));
# }

.EE

.RE
Listing 5\-16: Rewriting Listing 5\-15 using multiple `\fIimpl\fR`blocks
.P
There’s no reason to separate these methods into multiple `\fIimpl\fR` blocks here,but this is valid syntax\. We’ll see a case in which multiple `\fIimpl\fR` blocks areuseful in Chapter 10, where we discuss generic types and traits\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Structs let you create custom types that are meaningful for your domain\. Byusing structs, you can keep associated pieces of data connected to each otherand name each piece to make your code clear\. In `\fIimpl\fR` blocks, you can definefunctions that are associated with your type, and methods are a kind ofassociated function that let you specify the behavior that instances of yourstructs have\.
.P
But structs aren’t the only way you can create custom types: let’s turn toRust’s enum feature to add another tool to your toolbox\.
.SH "Enums and Pattern Matching"

.br

.br
\fBEnums and Pattern Matching\fR
.br
============================
.br

.P
In this chapter we’ll look at \fIenumerations\fR, also referred to as \fIenums\fR\.Enums allow you to define a type by enumerating its possible \fIvariants\fR\. First,we’ll define and use an enum to show how an enum can encode meaning along withdata\. Next, we’ll explore a particularly useful enum, called `\fIOption\fR`, whichexpresses that a value can be either something or nothing\. Then we’ll look athow pattern matching in the `\fImatch\fR` expression makes it easy to run differentcode for different values of an enum\. Finally, we’ll cover how the `\fIif let\fR`construct is another convenient and concise idiom available to you to handleenums in your code\.
.P
Enums are a feature in many languages, but their capabilities differ in eachlanguage\. Rust’s enums are most similar to \fIalgebraic data types\fR in functionallanguages, such as F#, OCaml, and Haskell\.
.SH "Defining an Enum"

.br

.br
\fBDefining an Enum\fR
.br
==================
.br

.P
Let’s look at a situation we might want to express in code and see why enumsare useful and more appropriate than structs in this case\. Say we need to workwith IP addresses\. Currently, two major standards are used for IP addresses:version four and version six\. These are the only possibilities for an IPaddress that our program will come across: we can \fIenumerate\fR all possiblevariants, which is where enumeration gets its name\.
.P
Any IP address can be either a version four or a version six address, but notboth at the same time\. That property of IP addresses makes the enum datastructure appropriate, because enum values can only be one of its variants\.Both version four and version six addresses are still fundamentally IPaddresses, so they should be treated as the same type when the code is handlingsituations that apply to any kind of IP address\.
.P
We can express this concept in code by defining an `\fIIpAddrKind\fR` enumeration andlisting the possible kinds an IP address can be, `\fIV4\fR` and `\fIV6\fR`\. These are thevariants of the enum:
.RS
.IP \fBrust\fR 2

.br
.EX
enum IpAddrKind {
    V4,
    V6,
}
# 
# fn main() {
#     let four = IpAddrKind::V4;
#     let six = IpAddrKind::V6;
# 
#     route(IpAddrKind::V4);
#     route(IpAddrKind::V6);
# }
# 
# fn route(ip_kind: IpAddrKind) {}

.EE

.RE
`\fIIpAddrKind\fR` is now a custom data type that we can use elsewhere in our code\.
.br

.br
\fBEnum Values\fR
.br
=============
.br

.P
We can create instances of each of the two variants of `\fIIpAddrKind\fR` like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# enum IpAddrKind {
#     V4,
#     V6,
# }
# 
# fn main() {
    let four = IpAddrKind::V4;
    let six = IpAddrKind::V6;
# 
#     route(IpAddrKind::V4);
#     route(IpAddrKind::V6);
# }
# 
# fn route(ip_kind: IpAddrKind) {}

.EE

.RE
.P
Note that the variants of the enum are namespaced under its identifier, and weuse a double colon to separate the two\. The reason this is useful is that nowboth values `\fIIpAddrKind::V4\fR` and `\fIIpAddrKind::V6\fR` are of the same type:`\fIIpAddrKind\fR`\. We can then, for instance, define a function that takes any`\fIIpAddrKind\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# enum IpAddrKind {
#     V4,
#     V6,
# }
# 
# fn main() {
#     let four = IpAddrKind::V4;
#     let six = IpAddrKind::V6;
# 
#     route(IpAddrKind::V4);
#     route(IpAddrKind::V6);
# }
# 
fn route(ip_kind: IpAddrKind) {}

.EE

.RE
.P
And we can call this function with either variant:
.RS
.IP \fBrust\fR 2

.br
.EX
# enum IpAddrKind {
#     V4,
#     V6,
# }
# 
# fn main() {
#     let four = IpAddrKind::V4;
#     let six = IpAddrKind::V6;
# 
    route(IpAddrKind::V4);
    route(IpAddrKind::V6);
# }
# 
# fn route(ip_kind: IpAddrKind) {}

.EE

.RE
.P
Using enums has even more advantages\. Thinking more about our IP address type,at the moment we don’t have a way to store the actual IP address \fIdata\fR; weonly know what \fIkind\fR it is\. Given that you just learned about structs inChapter 5, you might tackle this problem as shown in Listing 6\-1\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum IpAddrKind {
        V4,
        V6,
    }

    struct IpAddr {
        kind: IpAddrKind,
        address: String,
    }

    let home = IpAddr {
        kind: IpAddrKind::V4,
        address: String::from("127\.0\.0\.1"),
    };

    let loopback = IpAddr {
        kind: IpAddrKind::V6,
        address: String::from("::1"),
    };
# }

.EE

.RE
Listing 6\-1: Storing the data and `\fIIpAddrKind\fR` variant ofan IP address using a `\fIstruct\fR`
.P
Here, we’ve defined a struct `\fIIpAddr\fR` that has two fields: a `\fIkind\fR` field thatis of type `\fIIpAddrKind\fR` (the enum we defined previously) and an `\fIaddress\fR` fieldof type `\fIString\fR`\. We have two instances of this struct\. The first, `\fIhome\fR`, hasthe value `\fIIpAddrKind::V4\fR` as its `\fIkind\fR` with associated address data of`\fI127\.0\.0\.1\fR`\. The second instance, `\fIloopback\fR`, has the other variant of`\fIIpAddrKind\fR` as its `\fIkind\fR` value, `\fIV6\fR`, and has address `\fI::1\fR` associated withit\. We’ve used a struct to bundle the `\fIkind\fR` and `\fIaddress\fR` values together, sonow the variant is associated with the value\.
.P
We can represent the same concept in a more concise way using just an enum,rather than an enum inside a struct, by putting data directly into each enumvariant\. This new definition of the `\fIIpAddr\fR` enum says that both `\fIV4\fR` and `\fIV6\fR`variants will have associated `\fIString\fR` values:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum IpAddr {
        V4(String),
        V6(String),
    }

    let home = IpAddr::V4(String::from("127\.0\.0\.1"));

    let loopback = IpAddr::V6(String::from("::1"));
# }

.EE

.RE
.P
We attach data to each variant of the enum directly, so there is no need for anextra struct\. Here it’s also easier to see another detail of how enums work:the name of each enum variant that we define also becomes a function thatconstructs an instance of the enum\. That is, `\fIIpAddr::V4()\fR` is a function callthat takes a `\fIString\fR` argument and returns an instance of the `\fIIpAddr\fR` type\. Weautomatically get this constructor function defined as a result of defining theenum\.
.P
There’s another advantage to using an enum rather than a struct: each variantcan have different types and amounts of associated data\. Version four type IPaddresses will always have four numeric components that will have valuesbetween 0 and 255\. If we wanted to store `\fIV4\fR` addresses as four `\fIu8\fR` values butstill express `\fIV6\fR` addresses as one `\fIString\fR` value, we wouldn’t be able to witha struct\. Enums handle this case with ease:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum IpAddr {
        V4(u8, u8, u8, u8),
        V6(String),
    }

    let home = IpAddr::V4(127, 0, 0, 1);

    let loopback = IpAddr::V6(String::from("::1"));
# }

.EE

.RE
.P
We’ve shown several different ways to define data structures to store versionfour and version six IP addresses\. However, as it turns out, wanting to storeIP addresses and encode which kind they are is so common that 
.UR \.\./std/net/enum\.IpAddr\.html
.UE
the standardlibrary has a definition we can use! Let’s look at howthe standard library defines `\fIIpAddr\fR`: it has the exact enum and variants thatwe’ve defined and used, but it embeds the address data inside the variants inthe form of two different structs, which are defined differently for eachvariant:
.RS
.IP \fBrust\fR 2

.br
.EX
struct Ipv4Addr {
    // \-\-snip\-\-
}

struct Ipv6Addr {
    // \-\-snip\-\-
}

enum IpAddr {
    V4(Ipv4Addr),
    V6(Ipv6Addr),
}

.EE

.RE
.P
This code illustrates that you can put any kind of data inside an enum variant:strings, numeric types, or structs, for example\. You can even include anotherenum! Also, standard library types are often not much more complicated thanwhat you might come up with\.
.P
Note that even though the standard library contains a definition for `\fIIpAddr\fR`,we can still create and use our own definition without conflict because wehaven’t brought the standard library’s definition into our scope\. We’ll talkmore about bringing types into scope in Chapter 7\.
.P
Let’s look at another example of an enum in Listing 6\-2: this one has a widevariety of types embedded in its variants\.
.RS
.IP \fBrust\fR 2

.br
.EX
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}
# 
# fn main() {}

.EE

.RE
Listing 6\-2: A `\fIMessage\fR` enum whose variants each storedifferent amounts and types of values
.P
This enum has four variants with different types:`\fIQuit\fR` has no data associated with it at all\.`\fIMove\fR` has named fields like a struct does\.`\fIWrite\fR` includes a single `\fIString\fR`\.`\fIChangeColor\fR` includes three `\fIi32\fR` values\.
.P
Defining an enum with variants such as the ones in Listing 6\-2 is similar todefining different kinds of struct definitions, except the enum doesn’t use the`\fIstruct\fR` keyword and all the variants are grouped together under the `\fIMessage\fR`type\. The following structs could hold the same data that the preceding enumvariants hold:
.RS
.IP \fBrust\fR 2

.br
.EX
struct QuitMessage; // unit struct
struct MoveMessage {
    x: i32,
    y: i32,
}
struct WriteMessage(String); // tuple struct
struct ChangeColorMessage(i32, i32, i32); // tuple struct
# 
# fn main() {}

.EE

.RE
.P
But if we used the different structs, which each have their own type, wecouldn’t as easily define a function to take any of these kinds of messages aswe could with the `\fIMessage\fR` enum defined in Listing 6\-2, which is a single type\.
.P
There is one more similarity between enums and structs: just as we’re able todefine methods on structs using `\fIimpl\fR`, we’re also able to define methods onenums\. Here’s a method named `\fIcall\fR` that we could define on our `\fIMessage\fR` enum:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     enum Message {
#         Quit,
#         Move { x: i32, y: i32 },
#         Write(String),
#         ChangeColor(i32, i32, i32),
#     }
# 
    impl Message {
        fn call(&self) {
            // method body would be defined here
        }
    }

    let m = Message::Write(String::from("hello"));
    m\.call();
# }

.EE

.RE
.P
The body of the method would use `\fIself\fR` to get the value that we called themethod on\. In this example, we’ve created a variable `\fIm\fR` that has the value`\fIMessage::Write(String::from("hello"))\fR`, and that is what `\fIself\fR` will be in thebody of the `\fIcall\fR` method when `\fIm\.call()\fR` runs\.
.P
Let’s look at another enum in the standard library that is very common anduseful: `\fIOption\fR`\.
.br

.br
\fBThe \fR
.br
======
.br
`\fIOption\fR` Enum and Its Advantages Over Null Values
.P
In the previous section, we looked at how the `\fIIpAddr\fR` enum let us use Rust’stype system to encode more information than just the data into our program\.This section explores a case study of `\fIOption\fR`, which is another enum definedby the standard library\. The `\fIOption\fR` type is used in many places because itencodes the very common scenario in which a value could be something or itcould be nothing\. Expressing this concept in terms of the type system means thecompiler can check whether you’ve handled all the cases you should be handling;this functionality can prevent bugs that are extremely common in otherprogramming languages\.
.P
Programming language design is often thought of in terms of which features youinclude, but the features you exclude are important too\. Rust doesn’t have thenull feature that many other languages have\. \fINull\fR is a value that means thereis no value there\. In languages with null, variables can always be in one oftwo states: null or not\-null\.
.P
In his 2009 presentation “Null References: The Billion Dollar Mistake,” TonyHoare, the inventor of null, has this to say:
.P
I call it my billion\-dollar mistake\. At that time, I was designing the firstcomprehensive type system for references in an object\-oriented language\. Mygoal was to ensure that all use of references should be absolutely safe, withchecking performed automatically by the compiler\. But I couldn’t resist thetemptation to put in a null reference, simply because it was so easy toimplement\. This has led to innumerable errors, vulnerabilities, and systemcrashes, which have probably caused a billion dollars of pain and damage inthe last forty years\.
.P
The problem with null values is that if you try to use a null value as anot\-null value, you’ll get an error of some kind\. Because this null or not\-nullproperty is pervasive, it’s extremely easy to make this kind of error\.
.P
However, the concept that null is trying to express is still a useful one: anull is a value that is currently invalid or absent for some reason\.
.P
The problem isn’t really with the concept but with the particularimplementation\. As such, Rust does not have nulls, but it does have an enumthat can encode the concept of a value being present or absent\. This enum is`\fIOption<T>\fR`, and it is 
.UR \.\./std/option/enum\.Option\.html
.UE
defined by the standard libraryas follows:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Option<T> {
    None,
    Some(T),
}

.EE

.RE
.P
The `\fIOption<T>\fR` enum is so useful that it’s even included in the prelude; youdon’t need to bring it into scope explicitly\. In addition, so are its variants:you can use `\fISome\fR` and `\fINone\fR` directly without the `\fIOption::\fR` prefix\. The`\fIOption<T>\fR` enum is still just a regular enum, and `\fISome(T)\fR` and `\fINone\fR` arestill variants of type `\fIOption<T>\fR`\.
.P
The `\fI<T>\fR` syntax is a feature of Rust we haven’t talked about yet\. It’s ageneric type parameter, and we’ll cover generics in more detail in Chapter 10\.For now, all you need to know is that `\fI<T>\fR` means the `\fISome\fR` variant of the`\fIOption\fR` enum can hold one piece of data of any type, and that each concretetype that gets used in place of `\fIT\fR` makes the overall `\fIOption<T>\fR` type adifferent type\. Here are some examples of using `\fIOption\fR` values to hold numbertypes and string types:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let some_number = Some(5);
    let some_string = Some("a string");

    let absent_number: Option<i32> = None;
# }

.EE

.RE
.P
The type of `\fIsome_number\fR` is `\fIOption<i32>\fR`\. The type of `\fIsome_string\fR` is`\fIOption<&str>\fR`, which is a different type\. Rust can infer these types becausewe’ve specified a value inside the `\fISome\fR` variant\. For `\fIabsent_number\fR`, Rustrequires us to annotate the overall `\fIOption\fR` type: the compiler can’t infer thetype that the corresponding `\fISome\fR` variant will hold by looking only at a`\fINone\fR` value\. Here, we tell Rust that we mean for `\fIabsent_number\fR` to be of type`\fIOption<i32>\fR`\.
.P
When we have a `\fISome\fR` value, we know that a value is present and the value isheld within the `\fISome\fR`\. When we have a `\fINone\fR` value, in some sense, it meansthe same thing as null: we don’t have a valid value\. So why is having`\fIOption<T>\fR` any better than having null?
.P
In short, because `\fIOption<T>\fR` and `\fIT\fR` (where `\fIT\fR` can be any type) are differenttypes, the compiler won’t let us use an `\fIOption<T>\fR` value as if it weredefinitely a valid value\. For example, this code won’t compile because it’strying to add an `\fIi8\fR` to an `\fIOption<i8>\fR`:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let x: i8 = 5;
    let y: Option<i8> = Some(5);

    let sum = x + y;
# }

.EE

.RE
.P
If we run this code, we get an error message like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling enums v0\.1\.0 (file:///projects/enums)
error[E0277]: cannot add `Option<i8>` to `i8`
 \-\-> src/main\.rs:5:17
  |
5 |     let sum = x + y;
  |                 ^ no implementation for `i8 + Option<i8>`
  |
  = help: the trait `Add<Option<i8>>` is not implemented for `i8`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `enums`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Intense! In effect, this error message means that Rust doesn’t understand howto add an `\fIi8\fR` and an `\fIOption<i8>\fR`, because they’re different types\. When wehave a value of a type like `\fIi8\fR` in Rust, the compiler will ensure that wealways have a valid value\. We can proceed confidently without having to checkfor null before using that value\. Only when we have an `\fIOption<i8>\fR` (orwhatever type of value we’re working with) do we have to worry about possiblynot having a value, and the compiler will make sure we handle that case beforeusing the value\.
.P
In other words, you have to convert an `\fIOption<T>\fR` to a `\fIT\fR` before you canperform `\fIT\fR` operations with it\. Generally, this helps catch one of the mostcommon issues with null: assuming that something isn’t null when it actuallyis\.
.P
Not having to worry about incorrectly assuming a not\-null value helps you to bemore confident in your code\. In order to have a value that can possibly benull, you must explicitly opt in by making the type of that value `\fIOption<T>\fR`\.Then, when you use that value, you are required to explicitly handle the casewhen the value is null\. Everywhere that a value has a type that isn’t an`\fIOption<T>\fR`, you \fIcan\fR safely assume that the value isn’t null\. This was adeliberate design decision for Rust to limit null’s pervasiveness and increasethe safety of Rust code\.
.P
So, how do you get the `\fIT\fR` value out of a `\fISome\fR` variant when you have a valueof type `\fIOption<T>\fR` so you can use that value? The `\fIOption<T>\fR` enum has a largenumber of methods that are useful in a variety of situations; you can checkthem out in 
.UR \.\./std/option/enum\.Option\.html
.UE
its documentation\. Becoming familiar withthe methods on `\fIOption<T>\fR` will be extremely useful in your journey with Rust\.
.P
In general, in order to use an `\fIOption<T>\fR` value, you want to have code thatwill handle each variant\. You want some code that will run only when you have a`\fISome(T)\fR` value, and this code is allowed to use the inner `\fIT\fR`\. You want someother code to run if you have a `\fINone\fR` value, and that code doesn’t have a `\fIT\fR`value available\. The `\fImatch\fR` expression is a control flow construct that doesjust this when used with enums: it will run different code depending on whichvariant of the enum it has, and that code can use the data inside the matchingvalue\.
.SH "The match Control Flow Operator"

.br

.br
\fBThe \fR
.br
======
.br
`\fImatch\fR` Control Flow Operator
.P
Rust has an extremely powerful control flow operator called `\fImatch\fR` that allowsyou to compare a value against a series of patterns and then execute code basedon which pattern matches\. Patterns can be made up of literal values, variablenames, wildcards, and many other things; Chapter 18 covers all the differentkinds of patterns and what they do\. The power of `\fImatch\fR` comes from theexpressiveness of the patterns and the fact that the compiler confirms that allpossible cases are handled\.
.P
Think of a `\fImatch\fR` expression as being like a coin\-sorting machine: coins slidedown a track with variously sized holes along it, and each coin falls throughthe first hole it encounters that it fits into\. In the same way, values gothrough each pattern in a `\fImatch\fR`, and at the first pattern the value “fits,”the value falls into the associated code block to be used during execution\.
.P
Because we just mentioned coins, let’s use them as an example using `\fImatch\fR`! Wecan write a function that can take an unknown United States coin and, in asimilar way as the counting machine, determine which coin it is and return itsvalue in cents, as shown here in Listing 6\-3\.
.RS
.IP \fBrust\fR 2

.br
.EX
enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter,
}

fn value_in_cents(coin: Coin) \-> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
# 
# fn main() {}

.EE

.RE
Listing 6\-3: An enum and a `\fImatch\fR` expression that hasthe variants of the enum as its patterns
.P
Let’s break down the `\fImatch\fR` in the `\fIvalue_in_cents\fR` function\. First, we listthe `\fImatch\fR` keyword followed by an expression, which in this case is the value`\fIcoin\fR`\. This seems very similar to an expression used with `\fIif\fR`, but there’s abig difference: with `\fIif\fR`, the expression needs to return a Boolean value, buthere, it can be any type\. The type of `\fIcoin\fR` in this example is the `\fICoin\fR` enumthat we defined on line 1\.
.P
Next are the `\fImatch\fR` arms\. An arm has two parts: a pattern and some code\. Thefirst arm here has a pattern that is the value `\fICoin::Penny\fR` and then the `\fI=>\fR`operator that separates the pattern and the code to run\. The code in this caseis just the value `\fI1\fR`\. Each arm is separated from the next with a comma\.
.P
When the `\fImatch\fR` expression executes, it compares the resulting value againstthe pattern of each arm, in order\. If a pattern matches the value, the codeassociated with that pattern is executed\. If that pattern doesn’t match thevalue, execution continues to the next arm, much as in a coin\-sorting machine\.We can have as many arms as we need: in Listing 6\-3, our `\fImatch\fR` has four arms\.
.P
The code associated with each arm is an expression, and the resulting value ofthe expression in the matching arm is the value that gets returned for theentire `\fImatch\fR` expression\.
.P
Curly brackets typically aren’t used if the match arm code is short, as it isin Listing 6\-3 where each arm just returns a value\. If you want to run multiplelines of code in a match arm, you can use curly brackets\. For example, thefollowing code would print “Lucky penny!” every time the method was called witha `\fICoin::Penny\fR` but would still return the last value of the block, `\fI1\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# enum Coin {
#     Penny,
#     Nickel,
#     Dime,
#     Quarter,
# }
# 
fn value_in_cents(coin: Coin) \-> u8 {
    match coin {
        Coin::Penny => {
            println!("Lucky penny!");
            1
        }
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    }
}
# 
# fn main() {}

.EE

.RE

.br

.br
\fBPatterns that Bind to Values\fR
.br
==============================
.br

.P
Another useful feature of match arms is that they can bind to the parts of thevalues that match the pattern\. This is how we can extract values out of enumvariants\.
.P
As an example, let’s change one of our enum variants to hold data inside it\.From 1999 through 2008, the United States minted quarters with differentdesigns for each of the 50 states on one side\. No other coins got statedesigns, so only quarters have this extra value\. We can add this information toour `\fIenum\fR` by changing the `\fIQuarter\fR` variant to include a `\fIUsState\fR` value storedinside it, which we’ve done here in Listing 6\-4\.
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)] // so we can inspect the state in a minute
enum UsState {
    Alabama,
    Alaska,
    // \-\-snip\-\-
}

enum Coin {
    Penny,
    Nickel,
    Dime,
    Quarter(UsState),
}
# 
# fn main() {}

.EE

.RE
Listing 6\-4: A `\fICoin\fR` enum in which the `\fIQuarter\fR` variantalso holds a `\fIUsState\fR` value
.P
Let’s imagine that a friend of ours is trying to collect all 50 state quarters\.While we sort our loose change by coin type, we’ll also call out the name ofthe state associated with each quarter so if it’s one our friend doesn’t have,they can add it to their collection\.
.P
In the match expression for this code, we add a variable called `\fIstate\fR` to thepattern that matches values of the variant `\fICoin::Quarter\fR`\. When a`\fICoin::Quarter\fR` matches, the `\fIstate\fR` variable will bind to the value of thatquarter’s state\. Then we can use `\fIstate\fR` in the code for that arm, like so:
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# enum UsState {
#     Alabama,
#     Alaska,
#     // \-\-snip\-\-
# }
# 
# enum Coin {
#     Penny,
#     Nickel,
#     Dime,
#     Quarter(UsState),
# }
# 
fn value_in_cents(coin: Coin) \-> u8 {
    match coin {
        Coin::Penny => 1,
        Coin::Nickel => 5,
        Coin::Dime => 10,
        Coin::Quarter(state) => {
            println!("State quarter from {:?}!", state);
            25
        }
    }
}
# 
# fn main() {
#     value_in_cents(Coin::Quarter(UsState::Alaska));
# }

.EE

.RE
.P
If we were to call `\fIvalue_in_cents(Coin::Quarter(UsState::Alaska))\fR`, `\fIcoin\fR`would be `\fICoin::Quarter(UsState::Alaska)\fR`\. When we compare that value with eachof the match arms, none of them match until we reach `\fICoin::Quarter(state)\fR`\. Atthat point, the binding for `\fIstate\fR` will be the value `\fIUsState::Alaska\fR`\. We canthen use that binding in the `\fIprintln!\fR` expression, thus getting the innerstate value out of the `\fICoin\fR` enum variant for `\fIQuarter\fR`\.
.br

.br
\fBMatching with \fR
.br
================
.br
`\fIOption<T>\fR`
.P
In the previous section, we wanted to get the inner `\fIT\fR` value out of the `\fISome\fR`case when using `\fIOption<T>\fR`; we can also handle `\fIOption<T>\fR` using `\fImatch\fR` as wedid with the `\fICoin\fR` enum! Instead of comparing coins, we’ll compare thevariants of `\fIOption<T>\fR`, but the way that the `\fImatch\fR` expression works remainsthe same\.
.P
Let’s say we want to write a function that takes an `\fIOption<i32>\fR` and, ifthere’s a value inside, adds 1 to that value\. If there isn’t a value inside,the function should return the `\fINone\fR` value and not attempt to perform anyoperations\.
.P
This function is very easy to write, thanks to `\fImatch\fR`, and will look likeListing 6\-5\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    fn plus_one(x: Option<i32>) \-> Option<i32> {
        match x {
            None => None,
            Some(i) => Some(i + 1),
        }
    }

    let five = Some(5);
    let six = plus_one(five);
    let none = plus_one(None);
# }

.EE

.RE
Listing 6\-5: A function that uses a `\fImatch\fR` expression onan `\fIOption<i32>\fR`
.P
Let’s examine the first execution of `\fIplus_one\fR` in more detail\. When we call`\fIplus_one(five)\fR`, the variable `\fIx\fR` in the body of `\fIplus_one\fR` will have thevalue `\fISome(5)\fR`\. We then compare that against each match arm\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
#     fn plus_one(x: Option<i32>) \-> Option<i32> {
#         match x {
            None => None,
#             Some(i) => Some(i + 1),
#         }
#     }
# 
#     let five = Some(5);
#     let six = plus_one(five);
#     let none = plus_one(None);
# }

.EE

.RE
.P
The `\fISome(5)\fR` value doesn’t match the pattern `\fINone\fR`, so we continue to thenext arm\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
#     fn plus_one(x: Option<i32>) \-> Option<i32> {
#         match x {
#             None => None,
            Some(i) => Some(i + 1),
#         }
#     }
# 
#     let five = Some(5);
#     let six = plus_one(five);
#     let none = plus_one(None);
# }

.EE

.RE
.P
Does `\fISome(5)\fR` match `\fISome(i)\fR`? Why yes it does! We have the same variant\. The`\fIi\fR` binds to the value contained in `\fISome\fR`, so `\fIi\fR` takes the value `\fI5\fR`\. Thecode in the match arm is then executed, so we add 1 to the value of `\fIi\fR` andcreate a new `\fISome\fR` value with our total `\fI6\fR` inside\.
.P
Now let’s consider the second call of `\fIplus_one\fR` in Listing 6\-5, where `\fIx\fR` is`\fINone\fR`\. We enter the `\fImatch\fR` and compare to the first arm\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
#     fn plus_one(x: Option<i32>) \-> Option<i32> {
#         match x {
            None => None,
#             Some(i) => Some(i + 1),
#         }
#     }
# 
#     let five = Some(5);
#     let six = plus_one(five);
#     let none = plus_one(None);
# }

.EE

.RE
.P
It matches! There’s no value to add to, so the program stops and returns the`\fINone\fR` value on the right side of `\fI=>\fR`\. Because the first arm matched, no otherarms are compared\.
.P
Combining `\fImatch\fR` and enums is useful in many situations\. You’ll see thispattern a lot in Rust code: `\fImatch\fR` against an enum, bind a variable to thedata inside, and then execute code based on it\. It’s a bit tricky at first, butonce you get used to it, you’ll wish you had it in all languages\. It’sconsistently a user favorite\.
.br

.br
\fBMatches Are Exhaustive\fR
.br
========================
.br

.P
There’s one other aspect of `\fImatch\fR` we need to discuss\. Consider this versionof our `\fIplus_one\fR` function that has a bug and won’t compile:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    fn plus_one(x: Option<i32>) \-> Option<i32> {
        match x {
            Some(i) => Some(i + 1),
        }
    }
# 
#     let five = Some(5);
#     let six = plus_one(five);
#     let none = plus_one(None);
# }

.EE

.RE
.P
We didn’t handle the `\fINone\fR` case, so this code will cause a bug\. Luckily, it’sa bug Rust knows how to catch\. If we try to compile this code, we’ll get thiserror:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling enums v0\.1\.0 (file:///projects/enums)
error[E0004]: non\-exhaustive patterns: `None` not covered
   \-\-> src/main\.rs:3:15
    |
3   |         match x {
    |               ^ pattern `None` not covered
    |
    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms
    = note: the matched value is of type `Option<i32>`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0004`\.
error: could not compile `enums`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Rust knows that we didn’t cover every possible case and even knows whichpattern we forgot! Matches in Rust are \fIexhaustive\fR: we must exhaust every lastpossibility in order for the code to be valid\. Especially in the case of`\fIOption<T>\fR`, when Rust prevents us from forgetting to explicitly handle the`\fINone\fR` case, it protects us from assuming that we have a value when we mighthave null, thus making the billion\-dollar mistake discussed earlier impossible\.
.br

.br
\fBCatch\-all Patterns and the \fR
.br
=============================
.br
`\fI_\fR` Placeholder
.P
Let’s look at an example where we want to take special actions for a fewparticular values, but for all other values take one default action\. Imaginewe’re implementing a game where if you get a value of 3 on a dice roll, yourplayer doesn’t move, but instead gets a new fancy hat\. If you roll a 7, yourplayer loses a fancy hat\. For all other values, your player moves that numberof spaces on the game board\. Here’s a `\fImatch\fR` that implements that logic, withthe result of the dice roll hardcoded rather than a random value, and all otherlogic represented by functions without bodies because actually implementingthem is out of scope for this example:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let dice_roll = 9;
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        other => move_player(other),
    }

    fn add_fancy_hat() {}
    fn remove_fancy_hat() {}
    fn move_player(num_spaces: u8) {}
# }

.EE

.RE
.P
For the first two arms, the patterns are the literal values 3 and 7\. For thelast arm that covers every other possible value, the pattern is the variablewe’ve chosen to name `\fIother\fR`\. The code that runs for the `\fIother\fR` arm uses thevariable by passing it to the `\fImove_player\fR` function\.
.P
This code compiles, even though we haven’t listed all the possible values a`\fIu8\fR` can have, because the last pattern will match all values not specificallylisted\. This catch\-all pattern meets the requirement that `\fImatch\fR` must beexhaustive\. Note that we have to put the catch\-all arm last because thepatterns are evaluated in order\. Rust will warn us if we add arms after acatch\-all because those later arms would never match!
.P
Rust also has a pattern we can use when we don’t want to use the value in thecatch\-all pattern: `\fI_\fR`, which is a special pattern that matches any value anddoes not bind to that value\. This tells Rust we aren’t going to use the value,so Rust won’t warn us about an unused variable\.
.P
Let’s change the rules of the game to be that if you roll anything other thana 3 or a 7, you must roll again\. We don’t need to use the value in that case,so we can change our code to use `\fI_\fR` instead of the variable named `\fIother\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let dice_roll = 9;
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        _ => reroll(),
    }

    fn add_fancy_hat() {}
    fn remove_fancy_hat() {}
    fn reroll() {}
# }

.EE

.RE
.P
This example also meets the exhaustiveness requirement because we’re explicitlyignoring all other values in the last arm; we haven’t forgotten anything\.
.P
If we change the rules of the game one more time, so that nothing else happenson your turn if you roll anything other than a 3 or a 7, we can express thatby using the unit value (the empty tuple type we mentioned in 
.UR ch03\-02\-data\-types\.html#the\-tuple\-type
.UE
“The TupleType” section) as the code that goes with the `\fI_\fR` arm:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let dice_roll = 9;
    match dice_roll {
        3 => add_fancy_hat(),
        7 => remove_fancy_hat(),
        _ => (),
    }

    fn add_fancy_hat() {}
    fn remove_fancy_hat() {}
# }

.EE

.RE
.P
Here, we’re telling Rust explicitly that we aren’t going to use any other valuethat doesn’t match a pattern in an earlier arm, and we don’t want to run anycode in this case\.
.P
There’s more about patterns and matching that we’ll cover in 
.UR ch18\-00\-patterns\.html
.UE
Chapter18\. For now, we’re going to move on to the`\fIif let\fR` syntax, which can be useful in situations where the `\fImatch\fR` expressionis a bit wordy\.
.SH "Concise Control Flow with if let"

.br

.br
\fBConcise Control Flow with \fR
.br
============================
.br
`\fIif let\fR`
.P
The `\fIif let\fR` syntax lets you combine `\fIif\fR` and `\fIlet\fR` into a less verbose way tohandle values that match one pattern while ignoring the rest\. Consider theprogram in Listing 6\-6 that matches on an `\fIOption<u8>\fR` value in the `\fIconfig_max\fR`variable but only wants to execute code if the value is the `\fISome\fR` variant\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let config_max = Some(3u8);
    match config_max {
        Some(max) => println!("The maximum is configured to be {}", max),
        _ => (),
    }
# }

.EE

.RE
Listing 6\-6: A `\fImatch\fR` that only cares about executingcode when the value is `\fISome\fR`
.P
If the value is `\fISome\fR`, we want to print out the value in the `\fISome\fR` variant,which we do by binding the value to the variable `\fImax\fR` in the pattern\.We don’t want to do anything with the `\fINone\fR` value\. To satisfy the `\fImatch\fR`expression, we have to add `\fI_ => ()\fR` after processing just one variant, whichis annoying boilerplate code to add\.
.P
Instead, we could write this in a shorter way using `\fIif let\fR`\. The followingcode behaves the same as the `\fImatch\fR` in Listing 6\-6:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let config_max = Some(3u8);
    if let Some(max) = config_max {
        println!("The maximum is configured to be {}", max);
    }
# }

.EE

.RE
.P
The syntax `\fIif let\fR` takes a pattern and an expression separated by an equalsign\. It works the same way as a `\fImatch\fR`, where the expression is given to the`\fImatch\fR` and the pattern is its first arm\. In this case, the pattern is`\fISome(max)\fR`, and the `\fImax\fR` binds to the value inside the `\fISome\fR`\. We can thenuse `\fImax\fR` in the body of the `\fIif let\fR` block in the same way as we used `\fImax\fR` inthe corresponding `\fImatch\fR` arm\. The code in the `\fIif let\fR` block isn’t run if thevalue doesn’t match the pattern\.
.P
Using `\fIif let\fR` means less typing, less indentation, and less boilerplate code\.However, you lose the exhaustive checking that `\fImatch\fR` enforces\. Choosingbetween `\fImatch\fR` and `\fIif let\fR` depends on what you’re doing in your particularsituation and whether gaining conciseness is an appropriate trade\-off forlosing exhaustive checking\.
.P
In other words, you can think of `\fIif let\fR` as syntax sugar for a `\fImatch\fR` thatruns code when the value matches one pattern and then ignores all other values\.
.P
We can include an `\fIelse\fR` with an `\fIif let\fR`\. The block of code that goes with the`\fIelse\fR` is the same as the block of code that would go with the `\fI_\fR` case in the`\fImatch\fR` expression that is equivalent to the `\fIif let\fR` and `\fIelse\fR`\. Recall the`\fICoin\fR` enum definition in Listing 6\-4, where the `\fIQuarter\fR` variant also held a`\fIUsState\fR` value\. If we wanted to count all non\-quarter coins we see while alsoannouncing the state of the quarters, we could do that with a `\fImatch\fR`expression like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# enum UsState {
#     Alabama,
#     Alaska,
#     // \-\-snip\-\-
# }
# 
# enum Coin {
#     Penny,
#     Nickel,
#     Dime,
#     Quarter(UsState),
# }
# 
# fn main() {
#     let coin = Coin::Penny;
    let mut count = 0;
    match coin {
        Coin::Quarter(state) => println!("State quarter from {:?}!", state),
        _ => count += 1,
    }
# }

.EE

.RE
.P
Or we could use an `\fIif let\fR` and `\fIelse\fR` expression like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# #[derive(Debug)]
# enum UsState {
#     Alabama,
#     Alaska,
#     // \-\-snip\-\-
# }
# 
# enum Coin {
#     Penny,
#     Nickel,
#     Dime,
#     Quarter(UsState),
# }
# 
# fn main() {
#     let coin = Coin::Penny;
    let mut count = 0;
    if let Coin::Quarter(state) = coin {
        println!("State quarter from {:?}!", state);
    } else {
        count += 1;
    }
# }

.EE

.RE
.P
If you have a situation in which your program has logic that is too verbose toexpress using a `\fImatch\fR`, remember that `\fIif let\fR` is in your Rust toolbox as well\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
We’ve now covered how to use enums to create custom types that can be one of aset of enumerated values\. We’ve shown how the standard library’s `\fIOption<T>\fR`type helps you use the type system to prevent errors\. When enum values havedata inside them, you can use `\fImatch\fR` or `\fIif let\fR` to extract and use thosevalues, depending on how many cases you need to handle\.
.P
Your Rust programs can now express concepts in your domain using structs andenums\. Creating custom types to use in your API ensures type safety: thecompiler will make certain your functions get only values of the type eachfunction expects\.
.P
In order to provide a well\-organized API to your users that is straightforwardto use and only exposes exactly what your users will need, let’s now turn toRust’s modules\.
.SH "Managing Growing Projects with Packages, Crates, and Modules"

.br

.br
\fBManaging Growing Projects with Packages, Crates, and Modules\fR
.br
==============================================================
.br

.P
As you write large programs, organizing your code will be important becausekeeping track of your entire program in your head will become impossible\. Bygrouping related functionality and separating code with distinct features,you’ll clarify where to find code that implements a particular feature andwhere to go to change how a feature works\.
.P
The programs we’ve written so far have been in one module in one file\. As aproject grows, you can organize code by splitting it into multiple modules andthen multiple files\. A package can contain multiple binary crates andoptionally one library crate\. As a package grows, you can extract parts intoseparate crates that become external dependencies\. This chapter covers allthese techniques\. For very large projects of a set of interrelated packagesthat evolve together, Cargo provides workspaces, which we’ll cover in the
.UR ch14\-03\-cargo\-workspaces\.html
.UE
“Cargo Workspaces” section in Chapter 14\.
.P
In addition to grouping functionality, encapsulating implementation detailslets you reuse code at a higher level: once you’ve implemented an operation,other code can call that code via the code’s public interface without knowinghow the implementation works\. The way you write code defines which parts arepublic for other code to use and which parts are private implementation detailsthat you reserve the right to change\. This is another way to limit the amountof detail you have to keep in your head\.
.P
A related concept is scope: the nested context in which code is written has aset of names that are defined as “in scope\.” When reading, writing, andcompiling code, programmers and compilers need to know whether a particularname at a particular spot refers to a variable, function, struct, enum, module,constant, or other item and what that item means\. You can create scopes andchange which names are in or out of scope\. You can’t have two items with thesame name in the same scope; tools are available to resolve name conflicts\.
.P
Rust has a number of features that allow you to manage your code’sorganization, including which details are exposed, which details are private,and what names are in each scope in your programs\. These features, sometimescollectively referred to as the \fImodule system\fR, include:\fBPackages:\fR A Cargo feature that lets you build, test, and share crates\fBCrates:\fR A tree of modules that produces a library or executable\fBModules\fR and \fBuse:\fR Let you control the organization, scope, andprivacy of paths\fBPaths:\fR A way of naming an item, such as a struct, function, or module
.P
In this chapter, we’ll cover all these features, discuss how they interact, andexplain how to use them to manage scope\. By the end, you should have a solidunderstanding of the module system and be able to work with scopes like a pro!
.SH "Packages and Crates"

.br

.br
\fBPackages and Crates\fR
.br
=====================
.br

.P
The first parts of the module system we’ll cover are packages and crates\. Acrate is a binary or library\. The \fIcrate root\fR is a source file that the Rustcompiler starts from and makes up the root module of your crate (we’ll explainmodules in depth in the 
.UR ch07\-02\-defining\-modules\-to\-control\-scope\-and\-privacy\.html
.UE
“Defining Modules to Control Scope andPrivacy” section)\. A \fIpackage\fR is one or more cratesthat provide a set of functionality\. A package contains a \fICargo\.toml\fR filethat describes how to build those crates\.
.P
Several rules determine what a package can contain\. A package can containat most one library crate\. It can contain as many binary cratesas you’d like, but it must contain at least one crate (either library orbinary)\.
.P
Let’s walk through what happens when we create a package\. First, we enter thecommand `\fIcargo new\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new my\-project
     Created binary (application) `my\-project` package
$ ls my\-project
Cargo\.toml
src
$ ls my\-project/src
main\.rs

.EE

.RE
.P
When we entered the command, Cargo created a \fICargo\.toml\fR file, giving us apackage\. Looking at the contents of \fICargo\.toml\fR, there’s no mention of\fIsrc/main\.rs\fR because Cargo follows a convention that \fIsrc/main\.rs\fR is thecrate root of a binary crate with the same name as the package\. Likewise, Cargoknows that if the package directory contains \fIsrc/lib\.rs\fR, the package containsa library crate with the same name as the package, and \fIsrc/lib\.rs\fR is itscrate root\. Cargo passes the crate root files to `\fIrustc\fR` to build the libraryor binary\.
.P
Here, we have a package that only contains \fIsrc/main\.rs\fR, meaning it onlycontains a binary crate named `\fImy\-project\fR`\. If a package contains \fIsrc/main\.rs\fRand \fIsrc/lib\.rs\fR, it has two crates: a library and a binary, both with the samename as the package\. A package can have multiple binary crates by placing filesin the \fIsrc/bin\fR directory: each file will be a separate binary crate\.
.P
A crate will group related functionality together in a scope so thefunctionality is easy to share between multiple projects\. For example, the`\fIrand\fR` crate we used in 
.UR ch02\-00\-guessing\-game\-tutorial\.html#generating\-a\-random\-number
.UE
Chapter 2 provides functionalitythat generates random numbers\. We can use that functionality in our ownprojects by bringing the `\fIrand\fR` crate into our project’s scope\. All thefunctionality provided by the `\fIrand\fR` crate is accessible through the crate’sname, `\fIrand\fR`\.
.P
Keeping a crate’s functionality in its own scope clarifies whether particularfunctionality is defined in our crate or the `\fIrand\fR` crate and preventspotential conflicts\. For example, the `\fIrand\fR` crate provides a trait named`\fIRng\fR`\. We can also define a `\fIstruct\fR` named `\fIRng\fR` in our own crate\. Because acrate’s functionality is namespaced in its own scope, when we add `\fIrand\fR` as adependency, the compiler isn’t confused about what the name `\fIRng\fR` refers to\. Inour crate, it refers to the `\fIstruct Rng\fR` that we defined\. We would access the`\fIRng\fR` trait from the `\fIrand\fR` crate as `\fIrand::Rng\fR`\.
.P
Let’s move on and talk about the module system!
.SH "Defining Modules to Control Scope and Privacy"

.br

.br
\fBDefining Modules to Control Scope and Privacy\fR
.br
===============================================
.br

.P
In this section, we’ll talk about modules and other parts of the module system,namely \fIpaths\fR that allow you to name items; the `\fIuse\fR` keyword that brings apath into scope; and the `\fIpub\fR` keyword to make items public\. We’ll also discussthe `\fIas\fR` keyword, external packages, and the glob operator\. For now, let’sfocus on modules!\fIModules\fR let us organize code within a crate into groups for readability andeasy reuse\. Modules also control the \fIprivacy\fR of items, which is whether anitem can be used by outside code (\fIpublic\fR) or is an internal implementationdetail and not available for outside use (\fIprivate\fR)\.
.P
As an example, let’s write a library crate that provides the functionality of arestaurant\. We’ll define the signatures of functions but leave their bodiesempty to concentrate on the organization of the code, rather than actuallyimplement a restaurant in code\.
.P
In the restaurant industry, some parts of a restaurant are referred to as\fIfront of house\fR and others as \fIback of house\fR\. Front of house is wherecustomers are; this is where hosts seat customers, servers take orders andpayment, and bartenders make drinks\. Back of house is where the chefs and cookswork in the kitchen, dishwashers clean up, and managers do administrative work\.
.P
To structure our crate in the same way that a real restaurant works, we canorganize the functions into nested modules\. Create a new library named`\fIrestaurant\fR` by running `\fIcargo new \-\-lib restaurant\fR`; then put the code inListing 7\-1 into \fIsrc/lib\.rs\fR to define some modules and function signatures\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}

        fn seat_at_table() {}
    }

    mod serving {
        fn take_order() {}

        fn serve_order() {}

        fn take_payment() {}
    }
}

.EE

.RE
Listing 7\-1: A `\fIfront_of_house\fR` module containing othermodules that then contain functions
.P
We define a module by starting with the `\fImod\fR` keyword and then specify thename of the module (in this case, `\fIfront_of_house\fR`) and place curly bracketsaround the body of the module\. Inside modules, we can have other modules, as inthis case with the modules `\fIhosting\fR` and `\fIserving\fR`\. Modules can also holddefinitions for other items, such as structs, enums, constants, traits, or—asin Listing 7\-1—functions\.
.P
By using modules, we can group related definitions together and name whythey’re related\. Programmers using this code would have an easier time findingthe definitions they wanted to use because they could navigate the code basedon the groups rather than having to read through all the definitions\.Programmers adding new functionality to this code would know where to place thecode to keep the program organized\.
.P
Earlier, we mentioned that \fIsrc/main\.rs\fR and \fIsrc/lib\.rs\fR are called crateroots\. The reason for their name is that the contents of either of these twofiles form a module named `\fIcrate\fR` at the root of the crate’s module structure,known as the \fImodule tree\fR\.
.P
Listing 7\-2 shows the module tree for the structure in Listing 7\-1\.
.RS
.IP \fBtext\fR 2

.br
.EX
crate
 └── front_of_house
     ├── hosting
     │   ├── add_to_waitlist
     │   └── seat_at_table
     └── serving
         ├── take_order
         ├── serve_order
         └── take_payment

.EE

.RE
Listing 7\-2: The module tree for the code in Listing7\-1
.P
This tree shows how some of the modules nest inside one another (for example,`\fIhosting\fR` nests inside `\fIfront_of_house\fR`)\. The tree also shows that some modulesare \fIsiblings\fR to each other, meaning they’re defined in the same module(`\fIhosting\fR` and `\fIserving\fR` are defined within `\fIfront_of_house\fR`)\. To continue thefamily metaphor, if module A is contained inside module B, we say that module Ais the \fIchild\fR of module B and that module B is the \fIparent\fR of module A\.Notice that the entire module tree is rooted under the implicit module named`\fIcrate\fR`\.
.P
The module tree might remind you of the filesystem’s directory tree on yourcomputer; this is a very apt comparison! Just like directories in a filesystem,you use modules to organize your code\. And just like files in a directory, weneed a way to find our modules\.
.SH "Paths for Referring to an Item in the Module Tree"

.br

.br
\fBPaths for Referring to an Item in the Module Tree\fR
.br
===================================================
.br

.P
To show Rust where to find an item in a module tree, we use a path in the sameway we use a path when navigating a filesystem\. If we want to call a function,we need to know its path\.
.P
A path can take two forms:
.P
An \fIabsolute path\fR starts from a crate root by using a crate name or aliteral `\fIcrate\fR`\.
.P
A \fIrelative path\fR starts from the current module and uses `\fIself\fR`, `\fIsuper\fR`, oran identifier in the current module\.
.P
Both absolute and relative paths are followed by one or more identifiersseparated by double colons (`\fI::\fR`)\.
.P
Let’s return to the example in Listing 7\-1\. How do we call the`\fIadd_to_waitlist\fR` function? This is the same as asking, what’s the path of the`\fIadd_to_waitlist\fR` function? In Listing 7\-3, we simplified our code a bit byremoving some of the modules and functions\. We’ll show two ways to call the`\fIadd_to_waitlist\fR` function from a new function `\fIeat_at_restaurant\fR` defined inthe crate root\. The `\fIeat_at_restaurant\fR` function is part of our library crate’spublic API, so we mark it with the `\fIpub\fR` keyword\. In the 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html#exposing\-paths\-with\-the\-pub\-keyword
.UE
”Exposing Paths withthe `\fIpub\fR` Keyword” section, we’ll go into more detailabout `\fIpub\fR`\. Note that this example won’t compile just yet; we’ll explain whyin a bit\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-3: Calling the `\fIadd_to_waitlist\fR` function usingabsolute and relative paths
.P
The first time we call the `\fIadd_to_waitlist\fR` function in `\fIeat_at_restaurant\fR`,we use an absolute path\. The `\fIadd_to_waitlist\fR` function is defined in the samecrate as `\fIeat_at_restaurant\fR`, which means we can use the `\fIcrate\fR` keyword tostart an absolute path\.
.P
After `\fIcrate\fR`, we include each of the successive modules until we make our wayto `\fIadd_to_waitlist\fR`\. You can imagine a filesystem with the same structure, andwe’d specify the path `\fI/front_of_house/hosting/add_to_waitlist\fR` to run the`\fIadd_to_waitlist\fR` program; using the `\fIcrate\fR` name to start from the crate rootis like using `\fI/\fR` to start from the filesystem root in your shell\.
.P
The second time we call `\fIadd_to_waitlist\fR` in `\fIeat_at_restaurant\fR`, we use arelative path\. The path starts with `\fIfront_of_house\fR`, the name of the moduledefined at the same level of the module tree as `\fIeat_at_restaurant\fR`\. Here thefilesystem equivalent would be using the path`\fIfront_of_house/hosting/add_to_waitlist\fR`\. Starting with a name means that thepath is relative\.
.P
Choosing whether to use a relative or absolute path is a decision you’ll makebased on your project\. The decision should depend on whether you’re more likelyto move item definition code separately from or together with the code thatuses the item\. For example, if we move the `\fIfront_of_house\fR` module and the`\fIeat_at_restaurant\fR` function into a module named `\fIcustomer_experience\fR`, we’dneed to update the absolute path to `\fIadd_to_waitlist\fR`, but the relative pathwould still be valid\. However, if we moved the `\fIeat_at_restaurant\fR` functionseparately into a module named `\fIdining\fR`, the absolute path to the`\fIadd_to_waitlist\fR` call would stay the same, but the relative path would need tobe updated\. Our preference is to specify absolute paths because it’s morelikely to move code definitions and item calls independently of each other\.
.P
Let’s try to compile Listing 7\-3 and find out why it won’t compile yet! Theerror we get is shown in Listing 7\-4\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling restaurant v0\.1\.0 (file:///projects/restaurant)
error[E0603]: module `hosting` is private
 \-\-> src/lib\.rs:9:28
  |
9 |     crate::front_of_house::hosting::add_to_waitlist();
  |                            ^^^^^^^ private module
  |
note: the module `hosting` is defined here
 \-\-> src/lib\.rs:2:5
  |
2 |     mod hosting {
  |     ^^^^^^^^^^^

error[E0603]: module `hosting` is private
  \-\-> src/lib\.rs:12:21
   |
12 |     front_of_house::hosting::add_to_waitlist();
   |                     ^^^^^^^ private module
   |
note: the module `hosting` is defined here
  \-\-> src/lib\.rs:2:5
   |
2  |     mod hosting {
   |     ^^^^^^^^^^^

error: aborting due to 2 previous errors

For more information about this error, try `rustc \-\-explain E0603`\.
error: could not compile `restaurant`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
Listing 7\-4: Compiler errors from building the code inListing 7\-3
.P
The error messages say that module `\fIhosting\fR` is private\. In other words, wehave the correct paths for the `\fIhosting\fR` module and the `\fIadd_to_waitlist\fR`function, but Rust won’t let us use them because it doesn’t have access to theprivate sections\.
.P
Modules aren’t useful only for organizing your code\. They also define Rust’s\fIprivacy boundary\fR: the line that encapsulates the implementation detailsexternal code isn’t allowed to know about, call, or rely on\. So, if you want tomake an item like a function or struct private, you put it in a module\.
.P
The way privacy works in Rust is that all items (functions, methods, structs,enums, modules, and constants) are private by default\. Items in a parent modulecan’t use the private items inside child modules, but items in child modulescan use the items in their ancestor modules\. The reason is that child moduleswrap and hide their implementation details, but the child modules can see thecontext in which they’re defined\. To continue with the restaurant metaphor,think of the privacy rules as being like the back office of a restaurant: whatgoes on in there is private to restaurant customers, but office managers cansee and do everything in the restaurant in which they operate\.
.P
Rust chose to have the module system function this way so that hiding innerimplementation details is the default\. That way, you know which parts of theinner code you can change without breaking outer code\. But you can expose innerparts of child modules' code to outer ancestor modules by using the `\fIpub\fR`keyword to make an item public\.
.br

.br
\fBExposing Paths with the \fR
.br
==========================
.br
`\fIpub\fR` Keyword
.P
Let’s return to the error in Listing 7\-4 that told us the `\fIhosting\fR` module isprivate\. We want the `\fIeat_at_restaurant\fR` function in the parent module to haveaccess to the `\fIadd_to_waitlist\fR` function in the child module, so we mark the`\fIhosting\fR` module with the `\fIpub\fR` keyword, as shown in Listing 7\-5\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-5: Declaring the `\fIhosting\fR` module as `\fIpub\fR` touse it from `\fIeat_at_restaurant\fR`
.P
Unfortunately, the code in Listing 7\-5 still results in an error, as shown inListing 7\-6\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling restaurant v0\.1\.0 (file:///projects/restaurant)
error[E0603]: function `add_to_waitlist` is private
 \-\-> src/lib\.rs:9:37
  |
9 |     crate::front_of_house::hosting::add_to_waitlist();
  |                                     ^^^^^^^^^^^^^^^ private function
  |
note: the function `add_to_waitlist` is defined here
 \-\-> src/lib\.rs:3:9
  |
3 |         fn add_to_waitlist() {}
  |         ^^^^^^^^^^^^^^^^^^^^

error[E0603]: function `add_to_waitlist` is private
  \-\-> src/lib\.rs:12:30
   |
12 |     front_of_house::hosting::add_to_waitlist();
   |                              ^^^^^^^^^^^^^^^ private function
   |
note: the function `add_to_waitlist` is defined here
  \-\-> src/lib\.rs:3:9
   |
3  |         fn add_to_waitlist() {}
   |         ^^^^^^^^^^^^^^^^^^^^

error: aborting due to 2 previous errors

For more information about this error, try `rustc \-\-explain E0603`\.
error: could not compile `restaurant`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
Listing 7\-6: Compiler errors from building the code inListing 7\-5
.P
What happened? Adding the `\fIpub\fR` keyword in front of `\fImod hosting\fR` makes themodule public\. With this change, if we can access `\fIfront_of_house\fR`, we canaccess `\fIhosting\fR`\. But the \fIcontents\fR of `\fIhosting\fR` are still private; making themodule public doesn’t make its contents public\. The `\fIpub\fR` keyword on a moduleonly lets code in its ancestor modules refer to it\.
.P
The errors in Listing 7\-6 say that the `\fIadd_to_waitlist\fR` function is private\.The privacy rules apply to structs, enums, functions, and methods as well asmodules\.
.P
Let’s also make the `\fIadd_to_waitlist\fR` function public by adding the `\fIpub\fR`keyword before its definition, as in Listing 7\-7\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub fn eat_at_restaurant() {
    // Absolute path
    crate::front_of_house::hosting::add_to_waitlist();

    // Relative path
    front_of_house::hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-7: Adding the `\fIpub\fR` keyword to `\fImod hosting\fR`and `\fIfn add_to_waitlist\fR` lets us call the function from`\fIeat_at_restaurant\fR`
.P
Now the code will compile! Let’s look at the absolute and the relative path anddouble\-check why adding the `\fIpub\fR` keyword lets us use these paths in`\fIadd_to_waitlist\fR` with respect to the privacy rules\.
.P
In the absolute path, we start with `\fIcrate\fR`, the root of our crate’s moduletree\. Then the `\fIfront_of_house\fR` module is defined in the crate root\. The`\fIfront_of_house\fR` module isn’t public, but because the `\fIeat_at_restaurant\fR`function is defined in the same module as `\fIfront_of_house\fR` (that is,`\fIeat_at_restaurant\fR` and `\fIfront_of_house\fR` are siblings), we can refer to`\fIfront_of_house\fR` from `\fIeat_at_restaurant\fR`\. Next is the `\fIhosting\fR` module markedwith `\fIpub\fR`\. We can access the parent module of `\fIhosting\fR`, so we can access`\fIhosting\fR`\. Finally, the `\fIadd_to_waitlist\fR` function is marked with `\fIpub\fR` and wecan access its parent module, so this function call works!
.P
In the relative path, the logic is the same as the absolute path except for thefirst step: rather than starting from the crate root, the path starts from`\fIfront_of_house\fR`\. The `\fIfront_of_house\fR` module is defined within the same moduleas `\fIeat_at_restaurant\fR`, so the relative path starting from the module in which`\fIeat_at_restaurant\fR` is defined works\. Then, because `\fIhosting\fR` and`\fIadd_to_waitlist\fR` are marked with `\fIpub\fR`, the rest of the path works, and thisfunction call is valid!
.br

.br
\fBStarting Relative Paths with \fR
.br
===============================
.br
`\fIsuper\fR`
.P
We can also construct relative paths that begin in the parent module by using`\fIsuper\fR` at the start of the path\. This is like starting a filesystem path withthe `\fI\.\.\fR` syntax\. Why would we want to do this?
.P
Consider the code in Listing 7\-8 that models the situation in which a cheffixes an incorrect order and personally brings it out to the customer\. Thefunction `\fIfix_incorrect_order\fR` calls the function `\fIserve_order\fR` by specifyingthe path to `\fIserve_order\fR` starting with `\fIsuper\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
fn serve_order() {}

mod back_of_house {
    fn fix_incorrect_order() {
        cook_order();
        super::serve_order();
    }

    fn cook_order() {}
}

.EE

.RE
Listing 7\-8: Calling a function using a relative pathstarting with `\fIsuper\fR`
.P
The `\fIfix_incorrect_order\fR` function is in the `\fIback_of_house\fR` module, so we canuse `\fIsuper\fR` to go to the parent module of `\fIback_of_house\fR`, which in this caseis `\fIcrate\fR`, the root\. From there, we look for `\fIserve_order\fR` and find it\.Success! We think the `\fIback_of_house\fR` module and the `\fIserve_order\fR` function arelikely to stay in the same relationship to each other and get moved togethershould we decide to reorganize the crate’s module tree\. Therefore, we used`\fIsuper\fR` so we’ll have fewer places to update code in the future if this codegets moved to a different module\.
.br

.br
\fBMaking Structs and Enums Public\fR
.br
=================================
.br

.P
We can also use `\fIpub\fR` to designate structs and enums as public, but there are afew extra details\. If we use `\fIpub\fR` before a struct definition, we make thestruct public, but the struct’s fields will still be private\. We can make eachfield public or not on a case\-by\-case basis\. In Listing 7\-9, we’ve defined apublic `\fIback_of_house::Breakfast\fR` struct with a public `\fItoast\fR` field but aprivate `\fIseasonal_fruit\fR` field\. This models the case in a restaurant where thecustomer can pick the type of bread that comes with a meal, but the chefdecides which fruit accompanies the meal based on what’s in season and instock\. The available fruit changes quickly, so customers can’t choose the fruitor even see which fruit they’ll get\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
mod back_of_house {
    pub struct Breakfast {
        pub toast: String,
        seasonal_fruit: String,
    }

    impl Breakfast {
        pub fn summer(toast: &str) \-> Breakfast {
            Breakfast {
                toast: String::from(toast),
                seasonal_fruit: String::from("peaches"),
            }
        }
    }
}

pub fn eat_at_restaurant() {
    // Order a breakfast in the summer with Rye toast
    let mut meal = back_of_house::Breakfast::summer("Rye");
    // Change our mind about what bread we'd like
    meal\.toast = String::from("Wheat");
    println!("I'd like {} toast please", meal\.toast);

    // The next line won't compile if we uncomment it; we're not allowed
    // to see or modify the seasonal fruit that comes with the meal
    // meal\.seasonal_fruit = String::from("blueberries");
}

.EE

.RE
Listing 7\-9: A struct with some public fields and someprivate fields
.P
Because the `\fItoast\fR` field in the `\fIback_of_house::Breakfast\fR` struct is public,in `\fIeat_at_restaurant\fR` we can write and read to the `\fItoast\fR` field using dotnotation\. Notice that we can’t use the `\fIseasonal_fruit\fR` field in`\fIeat_at_restaurant\fR` because `\fIseasonal_fruit\fR` is private\. Try uncommenting theline modifying the `\fIseasonal_fruit\fR` field value to see what error you get!
.P
Also, note that because `\fIback_of_house::Breakfast\fR` has a private field, thestruct needs to provide a public associated function that constructs aninstance of `\fIBreakfast\fR` (we’ve named it `\fIsummer\fR` here)\. If `\fIBreakfast\fR` didn’thave such a function, we couldn’t create an instance of `\fIBreakfast\fR` in`\fIeat_at_restaurant\fR` because we couldn’t set the value of the private`\fIseasonal_fruit\fR` field in `\fIeat_at_restaurant\fR`\.
.P
In contrast, if we make an enum public, all of its variants are then public\. Weonly need the `\fIpub\fR` before the `\fIenum\fR` keyword, as shown in Listing 7\-10\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
mod back_of_house {
    pub enum Appetizer {
        Soup,
        Salad,
    }
}

pub fn eat_at_restaurant() {
    let order1 = back_of_house::Appetizer::Soup;
    let order2 = back_of_house::Appetizer::Salad;
}

.EE

.RE
Listing 7\-10: Designating an enum as public makes all itsvariants public
.P
Because we made the `\fIAppetizer\fR` enum public, we can use the `\fISoup\fR` and `\fISalad\fR`variants in `\fIeat_at_restaurant\fR`\. Enums aren’t very useful unless their variantsare public; it would be annoying to have to annotate all enum variants with`\fIpub\fR` in every case, so the default for enum variants is to be public\. Structsare often useful without their fields being public, so struct fields follow thegeneral rule of everything being private by default unless annotated with `\fIpub\fR`\.
.P
There’s one more situation involving `\fIpub\fR` that we haven’t covered, and that isour last module system feature: the `\fIuse\fR` keyword\. We’ll cover `\fIuse\fR` by itselffirst, and then we’ll show how to combine `\fIpub\fR` and `\fIuse\fR`\.
.SH "Bringing Paths Into Scope with the use Keyword"

.br

.br
\fBBringing Paths into Scope with the \fR
.br
=====================================
.br
`\fIuse\fR` Keyword
.P
It might seem like the paths we’ve written to call functions so far areinconveniently long and repetitive\. For example, in Listing 7\-7, whether wechose the absolute or relative path to the `\fIadd_to_waitlist\fR` function, everytime we wanted to call `\fIadd_to_waitlist\fR` we had to specify `\fIfront_of_house\fR` and`\fIhosting\fR` too\. Fortunately, there’s a way to simplify this process\. We canbring a path into a scope once and then call the items in that path as ifthey’re local items with the `\fIuse\fR` keyword\.
.P
In Listing 7\-11, we bring the `\fIcrate::front_of_house::hosting\fR` module into thescope of the `\fIeat_at_restaurant\fR` function so we only have to specify`\fIhosting::add_to_waitlist\fR` to call the `\fIadd_to_waitlist\fR` function in`\fIeat_at_restaurant\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-11: Bringing a module into scope with`\fIuse\fR`
.P
Adding `\fIuse\fR` and a path in a scope is similar to creating a symbolic link inthe filesystem\. By adding `\fIuse crate::front_of_house::hosting\fR` in the crateroot, `\fIhosting\fR` is now a valid name in that scope, just as though the `\fIhosting\fR`module had been defined in the crate root\. Paths brought into scope with `\fIuse\fR`also check privacy, like any other paths\.
.P
You can also bring an item into scope with `\fIuse\fR` and a relative path\. Listing7\-12 shows how to specify a relative path to get the same behavior as inListing 7\-11\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use self::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-12: Bringing a module into scope with `\fIuse\fR` anda relative path
.br

.br
\fBCreating Idiomatic \fR
.br
=====================
.br
`\fIuse\fR` Paths
.P
In Listing 7\-11, you might have wondered why we specified `\fIuse crate::front_of_house::hosting\fR` and then called `\fIhosting::add_to_waitlist\fR` in`\fIeat_at_restaurant\fR` rather than specifying the `\fIuse\fR` path all the way out tothe `\fIadd_to_waitlist\fR` function to achieve the same result, as in Listing 7\-13\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

use crate::front_of_house::hosting::add_to_waitlist;

pub fn eat_at_restaurant() {
    add_to_waitlist();
    add_to_waitlist();
    add_to_waitlist();
}

.EE

.RE
Listing 7\-13: Bringing the `\fIadd_to_waitlist\fR` functioninto scope with `\fIuse\fR`, which is unidiomatic
.P
Although both Listing 7\-11 and 7\-13 accomplish the same task, Listing 7\-11 isthe idiomatic way to bring a function into scope with `\fIuse\fR`\. Bringing thefunction’s parent module into scope with `\fIuse\fR` means we have to specify theparent module when calling the function\. Specifying the parent module whencalling the function makes it clear that the function isn’t locally definedwhile still minimizing repetition of the full path\. The code in Listing 7\-13 isunclear as to where `\fIadd_to_waitlist\fR` is defined\.
.P
On the other hand, when bringing in structs, enums, and other items with `\fIuse\fR`,it’s idiomatic to specify the full path\. Listing 7\-14 shows the idiomatic wayto bring the standard library’s `\fIHashMap\fR` struct into the scope of a binarycrate\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::collections::HashMap;

fn main() {
    let mut map = HashMap::new();
    map\.insert(1, 2);
}

.EE

.RE
Listing 7\-14: Bringing `\fIHashMap\fR` into scope in anidiomatic way
.P
There’s no strong reason behind this idiom: it’s just the convention that hasemerged, and folks have gotten used to reading and writing Rust code this way\.
.P
The exception to this idiom is if we’re bringing two items with the same nameinto scope with `\fIuse\fR` statements, because Rust doesn’t allow that\. Listing 7\-15shows how to bring two `\fIResult\fR` types into scope that have the same name butdifferent parent modules and how to refer to them\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::fmt;
use std::io;

fn function1() \-> fmt::Result {
    // \-\-snip\-\-
#     Ok(())
}

fn function2() \-> io::Result<()> {
    // \-\-snip\-\-
#     Ok(())
}

.EE

.RE
Listing 7\-15: Bringing two types with the same name intothe same scope requires using their parent modules\.
.P
As you can see, using the parent modules distinguishes the two `\fIResult\fR` types\.If instead we specified `\fIuse std::fmt::Result\fR` and `\fIuse std::io::Result\fR`, we’dhave two `\fIResult\fR` types in the same scope and Rust wouldn’t know which one wemeant when we used `\fIResult\fR`\.
.br

.br
\fBProviding New Names with the \fR
.br
===============================
.br
`\fIas\fR` Keyword
.P
There’s another solution to the problem of bringing two types of the same nameinto the same scope with `\fIuse\fR`: after the path, we can specify `\fIas\fR` and a newlocal name, or alias, for the type\. Listing 7\-16 shows another way to write thecode in Listing 7\-15 by renaming one of the two `\fIResult\fR` types using `\fIas\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::fmt::Result;
use std::io::Result as IoResult;

fn function1() \-> Result {
    // \-\-snip\-\-
#     Ok(())
}

fn function2() \-> IoResult<()> {
    // \-\-snip\-\-
#     Ok(())
}

.EE

.RE
Listing 7\-16: Renaming a type when it’s brought intoscope with the `\fIas\fR` keyword
.P
In the second `\fIuse\fR` statement, we chose the new name `\fIIoResult\fR` for the`\fIstd::io::Result\fR` type, which won’t conflict with the `\fIResult\fR` from `\fIstd::fmt\fR`that we’ve also brought into scope\. Listing 7\-15 and Listing 7\-16 areconsidered idiomatic, so the choice is up to you!
.br

.br
\fBRe\-exporting Names with \fR
.br
==========================
.br
`\fIpub use\fR`
.P
When we bring a name into scope with the `\fIuse\fR` keyword, the name available inthe new scope is private\. To enable the code that calls our code to refer tothat name as if it had been defined in that code’s scope, we can combine `\fIpub\fR`and `\fIuse\fR`\. This technique is called \fIre\-exporting\fR because we’re bringingan item into scope but also making that item available for others to bring intotheir scope\.
.P
Listing 7\-17 shows the code in Listing 7\-11 with `\fIuse\fR` in the root modulechanged to `\fIpub use\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-17: Making a name available for any code to usefrom a new scope with `\fIpub use\fR`
.P
By using `\fIpub use\fR`, external code can now call the `\fIadd_to_waitlist\fR` functionusing `\fIhosting::add_to_waitlist\fR`\. If we hadn’t specified `\fIpub use\fR`, the`\fIeat_at_restaurant\fR` function could call `\fIhosting::add_to_waitlist\fR` in itsscope, but external code couldn’t take advantage of this new path\.
.P
Re\-exporting is useful when the internal structure of your code is differentfrom how programmers calling your code would think about the domain\. Forexample, in this restaurant metaphor, the people running the restaurant thinkabout “front of house” and “back of house\.” But customers visiting a restaurantprobably won’t think about the parts of the restaurant in those terms\. With`\fIpub use\fR`, we can write our code with one structure but expose a differentstructure\. Doing so makes our library well organized for programmers working onthe library and programmers calling the library\.
.br

.br
\fBUsing External Packages\fR
.br
=========================
.br

.P
In Chapter 2, we programmed a guessing game project that used an externalpackage called `\fIrand\fR` to get random numbers\. To use `\fIrand\fR` in our project, weadded this line to \fICargo\.toml\fR:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
rand = "0\.8\.3"

.EE

.RE
.P
Adding `\fIrand\fR` as a dependency in \fICargo\.toml\fR tells Cargo to download the`\fIrand\fR` package and any dependencies from 
.UR https://crates\.io/
.UE
crates\.io andmake `\fIrand\fR` available to our project\.
.P
Then, to bring `\fIrand\fR` definitions into the scope of our package, we added a`\fIuse\fR` line starting with the name of the crate, `\fIrand\fR`, and listed the itemswe wanted to bring into scope\. Recall that in the 
.UR ch02\-00\-guessing\-game\-tutorial\.html#generating\-a\-random\-number
.UE
“Generating a RandomNumber” section in Chapter 2, we brought the `\fIRng\fR` traitinto scope and called the `\fIrand::thread_rng\fR` function:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::io;
use rand::Rng;

fn main() {
#     println!("Guess the number!");
# 
    let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
#     println!("The secret number is: {}", secret_number);
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {}", guess);
}

.EE

.RE
.P
Members of the Rust community have made many packages available at
.UR https://crates\.io/
.UE
crates\.io, and pulling any of them into your packageinvolves these same steps: listing them in your package’s \fICargo\.toml\fR file andusing `\fIuse\fR` to bring items from their crates into scope\.
.P
Note that the standard library (`\fIstd\fR`) is also a crate that’s external to ourpackage\. Because the standard library is shipped with the Rust language, wedon’t need to change \fICargo\.toml\fR to include `\fIstd\fR`\. But we do need to refer toit with `\fIuse\fR` to bring items from there into our package’s scope\. For example,with `\fIHashMap\fR` we would use this line:
.RS
.IP \fBrust\fR 2

.br
.EX
use std::collections::HashMap;

.EE

.RE
.P
This is an absolute path starting with `\fIstd\fR`, the name of the standard librarycrate\.
.br

.br
\fBUsing Nested Paths to Clean Up Large \fR
.br
=======================================
.br
`\fIuse\fR` Lists
.P
If we’re using multiple items defined in the same crate or same module,listing each item on its own line can take up a lot of vertical space in ourfiles\. For example, these two `\fIuse\fR` statements we had in the Guessing Game inListing 2\-4 bring items from `\fIstd\fR` into scope:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
// \-\-snip\-\-
use std::cmp::Ordering;
use std::io;
// \-\-snip\-\-
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
#     println!("The secret number is: {}", secret_number);
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     println!("You guessed: {}", guess);
# 
#     match guess\.cmp(&secret_number) {
#         Ordering::Less => println!("Too small!"),
#         Ordering::Greater => println!("Too big!"),
#         Ordering::Equal => println!("You win!"),
#     }
# }

.EE

.RE
.P
Instead, we can use nested paths to bring the same items into scope in oneline\. We do this by specifying the common part of the path, followed by twocolons, and then curly brackets around a list of the parts of the paths thatdiffer, as shown in Listing 7\-18\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
// \-\-snip\-\-
use std::{cmp::Ordering, io};
// \-\-snip\-\-
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
#     println!("The secret number is: {}", secret_number);
# 
#     println!("Please input your guess\.");
# 
#     let mut guess = String::new();
# 
#     io::stdin()
#         \.read_line(&mut guess)
#         \.expect("Failed to read line");
# 
#     let guess: u32 = guess\.trim()\.parse()\.expect("Please type a number!");
# 
#     println!("You guessed: {}", guess);
# 
#     match guess\.cmp(&secret_number) {
#         Ordering::Less => println!("Too small!"),
#         Ordering::Greater => println!("Too big!"),
#         Ordering::Equal => println!("You win!"),
#     }
# }

.EE

.RE
Listing 7\-18: Specifying a nested path to bring multipleitems with the same prefix into scope
.P
In bigger programs, bringing many items into scope from the same crate ormodule using nested paths can reduce the number of separate `\fIuse\fR` statementsneeded by a lot!
.P
We can use a nested path at any level in a path, which is useful when combiningtwo `\fIuse\fR` statements that share a subpath\. For example, Listing 7\-19 shows two`\fIuse\fR` statements: one that brings `\fIstd::io\fR` into scope and one that brings`\fIstd::io::Write\fR` into scope\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::io;
use std::io::Write;

.EE

.RE
Listing 7\-19: Two `\fIuse\fR` statements where one is a subpathof the other
.P
The common part of these two paths is `\fIstd::io\fR`, and that’s the complete firstpath\. To merge these two paths into one `\fIuse\fR` statement, we can use `\fIself\fR` inthe nested path, as shown in Listing 7\-20\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::io::{self, Write};

.EE

.RE
Listing 7\-20: Combining the paths in Listing 7\-19 intoone `\fIuse\fR` statement
.P
This line brings `\fIstd::io\fR` and `\fIstd::io::Write\fR` into scope\.
.br

.br
\fBThe Glob Operator\fR
.br
===================
.br

.P
If we want to bring \fIall\fR public items defined in a path into scope, we canspecify that path followed by `\fI*\fR`, the glob operator:
.RS
.IP \fBrust\fR 2

.br
.EX
use std::collections::*;

.EE

.RE
.P
This `\fIuse\fR` statement brings all public items defined in `\fIstd::collections\fR` intothe current scope\. Be careful when using the glob operator! Glob can make itharder to tell what names are in scope and where a name used in your programwas defined\.
.P
The glob operator is often used when testing to bring everything under testinto the `\fItests\fR` module; we’ll talk about that in the 
.UR ch11\-01\-writing\-tests\.html#how\-to\-write\-tests
.UE
“How to WriteTests” section in Chapter 11\. The glob operatoris also sometimes used as part of the prelude pattern: see 
.UR \.\./std/prelude/index\.html#other\-preludes
.UE
the standardlibrary documentationfor more information on that pattern\.
.SH "Separating Modules into Different Files"

.br

.br
\fBSeparating Modules into Different Files\fR
.br
=========================================
.br

.P
So far, all the examples in this chapter defined multiple modules in one file\.When modules get large, you might want to move their definitions to a separatefile to make the code easier to navigate\.
.P
For example, let’s start from the code in Listing 7\-17 and move the`\fIfront_of_house\fR` module to its own file \fIsrc/front_of_house\.rs\fR by changing thecrate root file so it contains the code shown in Listing 7\-21\. In this case,the crate root file is \fIsrc/lib\.rs\fR, but this procedure also works with binarycrates whose crate root file is \fIsrc/main\.rs\fR\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
mod front_of_house;

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}

.EE

.RE
Listing 7\-21: Declaring the `\fIfront_of_house\fR` module whosebody will be in \fIsrc/front_of_house\.rs\fR
.P
And \fIsrc/front_of_house\.rs\fR gets the definitions from the body of the`\fIfront_of_house\fR` module, as shown in Listing 7\-22\.Filename: src/front_of_house\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub mod hosting {
    pub fn add_to_waitlist() {}
}

.EE

.RE
Listing 7\-22: Definitions inside the `\fIfront_of_house\fR`module in \fIsrc/front_of_house\.rs\fR
.P
Using a semicolon after `\fImod front_of_house\fR` rather than using a block tellsRust to load the contents of the module from another file with the same name asthe module\. To continue with our example and extract the `\fIhosting\fR` module toits own file as well, we change \fIsrc/front_of_house\.rs\fR to contain only thedeclaration of the `\fIhosting\fR` module:Filename: src/front_of_house\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub mod hosting;

.EE

.RE
.P
Then we create a \fIsrc/front_of_house\fR directory and a file\fIsrc/front_of_house/hosting\.rs\fR to contain the definitions made in the`\fIhosting\fR` module:Filename: src/front_of_house/hosting\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
pub fn add_to_waitlist() {}

.EE

.RE
.P
The module tree remains the same, and the function calls in `\fIeat_at_restaurant\fR`will work without any modification, even though the definitions live indifferent files\. This technique lets you move modules to new files as they growin size\.
.P
Note that the `\fIpub use crate::front_of_house::hosting\fR` statement in\fIsrc/lib\.rs\fR also hasn’t changed, nor does `\fIuse\fR` have any impact on what filesare compiled as part of the crate\. The `\fImod\fR` keyword declares modules, and Rustlooks in a file with the same name as the module for the code that goes intothat module\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Rust lets you split a package into multiple crates and a crate into modulesso you can refer to items defined in one module from another module\. You can dothis by specifying absolute or relative paths\. These paths can be brought intoscope with a `\fIuse\fR` statement so you can use a shorter path for multiple uses ofthe item in that scope\. Module code is private by default, but you can makedefinitions public by adding the `\fIpub\fR` keyword\.
.P
In the next chapter, we’ll look at some collection data structures in thestandard library that you can use in your neatly organized code\.
.SH "Common Collections"

.br

.br
\fBCommon Collections\fR
.br
====================
.br

.P
Rust’s standard library includes a number of very useful data structures called\fIcollections\fR\. Most other data types represent one specific value, butcollections can contain multiple values\. Unlike the built\-in array and tupletypes, the data these collections point to is stored on the heap, which meansthe amount of data does not need to be known at compile time and can grow orshrink as the program runs\. Each kind of collection has different capabilitiesand costs, and choosing an appropriate one for your current situation is askill you’ll develop over time\. In this chapter, we’ll discuss threecollections that are used very often in Rust programs:
.P
A \fIvector\fR allows you to store a variable number of values next to each other\.
.P
A \fIstring\fR is a collection of characters\. We’ve mentioned the `\fIString\fR` typepreviously, but in this chapter we’ll talk about it in depth\.
.P
A \fIhash map\fR allows you to associate a value with a particular key\. It’s aparticular implementation of the more general data structure called a \fImap\fR\.
.P
To learn about the other kinds of collections provided by the standard library,see 
.UR \.\./std/collections/index\.html
.UE
the documentation\.
.P
We’ll discuss how to create and update vectors, strings, and hash maps, as wellas what makes each special\.
.SH "Storing Lists of Values with Vectors"

.br

.br
\fBStoring Lists of Values with Vectors\fR
.br
======================================
.br

.P
The first collection type we’ll look at is `\fIVec<T>\fR`, also known as a \fIvector\fR\.Vectors allow you to store more than one value in a single data structure thatputs all the values next to each other in memory\. Vectors can only store valuesof the same type\. They are useful when you have a list of items, such as thelines of text in a file or the prices of items in a shopping cart\.
.br

.br
\fBCreating a New Vector\fR
.br
=======================
.br

.P
To create a new, empty vector, we can call the `\fIVec::new\fR` function, as shown inListing 8\-1\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v: Vec<i32> = Vec::new();
# }

.EE

.RE
Listing 8\-1: Creating a new, empty vector to hold valuesof type `\fIi32\fR`
.P
Note that we added a type annotation here\. Because we aren’t inserting anyvalues into this vector, Rust doesn’t know what kind of elements we intend tostore\. This is an important point\. Vectors are implemented using generics;we’ll cover how to use generics with your own types in Chapter 10\. For now,know that the `\fIVec<T>\fR` type provided by the standard library can hold any type,and when a specific vector holds a specific type, the type is specified withinangle brackets\. In Listing 8\-1, we’ve told Rust that the `\fIVec<T>\fR` in `\fIv\fR` willhold elements of the `\fIi32\fR` type\.
.P
In more realistic code, Rust can often infer the type of value you want tostore once you insert values, so you rarely need to do this type annotation\.It’s more common to create a `\fIVec<T>\fR` that has initial values, and Rustprovides the `\fIvec!\fR` macro for convenience\. The macro will create a new vectorthat holds the values you give it\. Listing 8\-2 creates a new `\fIVec<i32>\fR` thatholds the values `\fI1\fR`, `\fI2\fR`, and `\fI3\fR`\. The integer type is `\fIi32\fR` because that’sthe default integer type, as we discussed in the 
.UR ch03\-02\-data\-types\.html#data\-types
.UE
“Data Types” section of Chapter 3\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v = vec![1, 2, 3];
# }

.EE

.RE
Listing 8\-2: Creating a new vector containingvalues
.P
Because we’ve given initial `\fIi32\fR` values, Rust can infer that the type of `\fIv\fR`is `\fIVec<i32>\fR`, and the type annotation isn’t necessary\. Next, we’ll look at howto modify a vector\.
.br

.br
\fBUpdating a Vector\fR
.br
===================
.br

.P
To create a vector and then add elements to it, we can use the `\fIpush\fR` method,as shown in Listing 8\-3\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut v = Vec::new();

    v\.push(5);
    v\.push(6);
    v\.push(7);
    v\.push(8);
# }

.EE

.RE
Listing 8\-3: Using the `\fIpush\fR` method to add values to avector
.P
As with any variable, if we want to be able to change its value, we need tomake it mutable using the `\fImut\fR` keyword, as discussed in Chapter 3\. The numberswe place inside are all of type `\fIi32\fR`, and Rust infers this from the data, sowe don’t need the `\fIVec<i32>\fR` annotation\.
.br

.br
\fBDropping a Vector Drops Its Elements\fR
.br
======================================
.br

.P
Like any other `\fIstruct\fR`, a vector is freed when it goes out of scope, asannotated in Listing 8\-4\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    {
        let v = vec![1, 2, 3, 4];

        // do stuff with v
    } // <\- v goes out of scope and is freed here
# }

.EE

.RE
Listing 8\-4: Showing where the vector and its elementsare dropped
.P
When the vector gets dropped, all of its contents are also dropped, meaningthose integers it holds will be cleaned up\. This may seem like astraightforward point but can get a bit more complicated when you start tointroduce references to the elements of the vector\. Let’s tackle that next!
.br

.br
\fBReading Elements of Vectors\fR
.br
=============================
.br

.P
Now that you know how to create, update, and destroy vectors, knowing how toread their contents is a good next step\. There are two ways to reference avalue stored in a vector\. In the examples, we’ve annotated the types of thevalues that are returned from these functions for extra clarity\.
.P
Listing 8\-5 shows both methods of accessing a value in a vector, either withindexing syntax or the `\fIget\fR` method\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v = vec![1, 2, 3, 4, 5];

    let third: &i32 = &v[2];
    println!("The third element is {}", third);

    match v\.get(2) {
        Some(third) => println!("The third element is {}", third),
        None => println!("There is no third element\."),
    }
# }

.EE

.RE
Listing 8\-5: Using indexing syntax or the `\fIget\fR` method toaccess an item in a vector
.P
Note two details here\. First, we use the index value of `\fI2\fR` to get the thirdelement: vectors are indexed by number, starting at zero\. Second, the two waysto get the third element are by using `\fI&\fR` and `\fI[]\fR`, which gives us a reference,or by using the `\fIget\fR` method with the index passed as an argument, which givesus an `\fIOption<&T>\fR`\.
.P
Rust has two ways to reference an element so you can choose how the programbehaves when you try to use an index value that the vector doesn’t have anelement for\. As an example, let’s see what a program will do if it has a vectorthat holds five elements and then tries to access an element at index 100, asshown in Listing 8\-6\.
.RS
.IP \fBrust,should_panic,panics\fR 2

.br
.EX
# fn main() {
    let v = vec![1, 2, 3, 4, 5];

    let does_not_exist = &v[100];
    let does_not_exist = v\.get(100);
# }

.EE

.RE
Listing 8\-6: Attempting to access the element at index100 in a vector containing five elements
.P
When we run this code, the first `\fI[]\fR` method will cause the program to panicbecause it references a nonexistent element\. This method is best used when youwant your program to crash if there’s an attempt to access an element past theend of the vector\.
.P
When the `\fIget\fR` method is passed an index that is outside the vector, it returns`\fINone\fR` without panicking\. You would use this method if accessing an elementbeyond the range of the vector happens occasionally under normal circumstances\.Your code will then have logic to handle having either `\fISome(&element)\fR` or`\fINone\fR`, as discussed in Chapter 6\. For example, the index could be coming froma person entering a number\. If they accidentally enter a number that’s toolarge and the program gets a `\fINone\fR` value, you could tell the user how manyitems are in the current vector and give them another chance to enter a validvalue\. That would be more user\-friendly than crashing the program due to a typo!
.P
When the program has a valid reference, the borrow checker enforces theownership and borrowing rules (covered in Chapter 4) to ensure this referenceand any other references to the contents of the vector remain valid\. Recall therule that states you can’t have mutable and immutable references in the samescope\. That rule applies in Listing 8\-7, where we hold an immutable reference tothe first element in a vector and try to add an element to the end, which won’twork if we also try to refer to that element later in the function:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let mut v = vec![1, 2, 3, 4, 5];

    let first = &v[0];

    v\.push(6);

    println!("The first element is: {}", first);
# }

.EE

.RE
Listing 8\-7: Attempting to add an element to a vectorwhile holding a reference to an item
.P
Compiling this code will result in this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling collections v0\.1\.0 (file:///projects/collections)
error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable
 \-\-> src/main\.rs:6:5
  |
4 |     let first = &v[0];
  |                  \- immutable borrow occurs here
5 | 
6 |     v\.push(6);
  |     ^^^^^^^^^ mutable borrow occurs here
7 | 
8 |     println!("The first element is: {}", first);
  |                                          \-\-\-\-\- immutable borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0502`\.
error: could not compile `collections`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The code in Listing 8\-7 might look like it should work: why should a referenceto the first element care about what changes at the end of the vector? Thiserror is due to the way vectors work: adding a new element onto the end of thevector might require allocating new memory and copying the old elements to thenew space, if there isn’t enough room to put all the elements next to eachother where the vector currently is\. In that case, the reference to the firstelement would be pointing to deallocated memory\. The borrowing rules preventprograms from ending up in that situation\.
.P
Note: For more on the implementation details of the `\fIVec<T>\fR` type, see 
.UR \.\./nomicon/vec\.html
.UE
“TheRustonomicon”\.
.br

.br
\fBIterating over the Values in a Vector\fR
.br
=======================================
.br

.P
If we want to access each element in a vector in turn, we can iterate throughall of the elements rather than use indices to access one at a time\. Listing8\-8 shows how to use a `\fIfor\fR` loop to get immutable references to each elementin a vector of `\fIi32\fR` values and print them\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v = vec![100, 32, 57];
    for i in &v {
        println!("{}", i);
    }
# }

.EE

.RE
Listing 8\-8: Printing each element in a vector byiterating over the elements using a `\fIfor\fR` loop
.P
We can also iterate over mutable references to each element in a mutable vectorin order to make changes to all the elements\. The `\fIfor\fR` loop in Listing 8\-9will add `\fI50\fR` to each element\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut v = vec![100, 32, 57];
    for i in &mut v {
        *i += 50;
    }
# }

.EE

.RE
Listing 8\-9: Iterating over mutable references toelements in a vector
.P
To change the value that the mutable reference refers to, we have to use thedereference operator (`\fI*\fR`) to get to the value in `\fIi\fR` before we can use the`\fI+=\fR` operator\. We’ll talk more about the dereference operator in the
.UR ch15\-02\-deref\.html#following\-the\-pointer\-to\-the\-value\-with\-the\-dereference\-operator
.UE
“Following the Pointer to the Value with the Dereference Operator”section of Chapter 15\.
.br

.br
\fBUsing an Enum to Store Multiple Types\fR
.br
=======================================
.br

.P
At the beginning of this chapter, we said that vectors can only store valuesthat are the same type\. This can be inconvenient; there are definitely usecases for needing to store a list of items of different types\. Fortunately, thevariants of an enum are defined under the same enum type, so when we need tostore elements of a different type in a vector, we can define and use an enum!
.P
For example, say we want to get values from a row in a spreadsheet in whichsome of the columns in the row contain integers, some floating\-point numbers,and some strings\. We can define an enum whose variants will hold the differentvalue types, and then all the enum variants will be considered the same type:that of the enum\. Then we can create a vector that holds that enum and so,ultimately, holds different types\. We’ve demonstrated this in Listing 8\-10\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum SpreadsheetCell {
        Int(i32),
        Float(f64),
        Text(String),
    }

    let row = vec![
        SpreadsheetCell::Int(3),
        SpreadsheetCell::Text(String::from("blue")),
        SpreadsheetCell::Float(10\.12),
    ];
# }

.EE

.RE
Listing 8\-10: Defining an `\fIenum\fR` to store values ofdifferent types in one vector
.P
Rust needs to know what types will be in the vector at compile time so it knowsexactly how much memory on the heap will be needed to store each element\. Asecondary advantage is that we can be explicit about what types are allowed inthis vector\. If Rust allowed a vector to hold any type, there would be a chancethat one or more of the types would cause errors with the operations performedon the elements of the vector\. Using an enum plus a `\fImatch\fR` expression meansthat Rust will ensure at compile time that every possible case is handled, asdiscussed in Chapter 6\.
.P
When you’re writing a program, if you don’t know the exhaustive set of typesthe program will get at runtime to store in a vector, the enum technique won’twork\. Instead, you can use a trait object, which we’ll cover in Chapter 17\.
.P
Now that we’ve discussed some of the most common ways to use vectors, be sureto review 
.UR \.\./std/vec/struct\.Vec\.html
.UE
the API documentation for all the many useful methods defined on`\fIVec<T>\fR` by the standard library\. For example, in addition to `\fIpush\fR`, a `\fIpop\fR`method removes and returns the last element\. Let’s move on to the nextcollection type: `\fIString\fR`!
.SH "Storing UTF\-8 Encoded Text with Strings"

.br

.br
\fBStoring UTF\-8 Encoded Text with Strings\fR
.br
=========================================
.br

.P
We talked about strings in Chapter 4, but we’ll look at them in more depth now\.New Rustaceans commonly get stuck on strings for a combination of threereasons: Rust’s propensity for exposing possible errors, strings being a morecomplicated data structure than many programmers give them credit for, andUTF\-8\. These factors combine in a way that can seem difficult when you’recoming from other programming languages\.
.P
It’s useful to discuss strings in the context of collections because stringsare implemented as a collection of bytes, plus some methods to provide usefulfunctionality when those bytes are interpreted as text\. In this section, we’lltalk about the operations on `\fIString\fR` that every collection type has, such ascreating, updating, and reading\. We’ll also discuss the ways in which `\fIString\fR`is different from the other collections, namely how indexing into a `\fIString\fR` iscomplicated by the differences between how people and computers interpret`\fIString\fR` data\.
.br

.br
\fBWhat Is a String?\fR
.br
===================
.br

.P
We’ll first define what we mean by the term \fIstring\fR\. Rust has only one stringtype in the core language, which is the string slice `\fIstr\fR` that is usually seenin its borrowed form `\fI&str\fR`\. In Chapter 4, we talked about \fIstring slices\fR,which are references to some UTF\-8 encoded string data stored elsewhere\. Stringliterals, for example, are stored in the program’s binary and are thereforestring slices\.
.P
The `\fIString\fR` type, which is provided by Rust’s standard library rather thancoded into the core language, is a growable, mutable, owned, UTF\-8 encodedstring type\. When Rustaceans refer to “strings” in Rust, they usually mean the`\fIString\fR` and the string slice `\fI&str\fR` types, not just one of those types\.Although this section is largely about `\fIString\fR`, both types are used heavily inRust’s standard library, and both `\fIString\fR` and string slices are UTF\-8 encoded\.
.P
Rust’s standard library also includes a number of other string types, such as`\fIOsString\fR`, `\fIOsStr\fR`, `\fICString\fR`, and `\fICStr\fR`\. Library crates can provide evenmore options for storing string data\. See how those names all end in `\fIString\fR`or `\fIStr\fR`? They refer to owned and borrowed variants, just like the `\fIString\fR` and`\fIstr\fR` types you’ve seen previously\. These string types can store text indifferent encodings or be represented in memory in a different way, forexample\. We won’t discuss these other string types in this chapter; see theirAPI documentation for more about how to use them and when each is appropriate\.
.br

.br
\fBCreating a New String\fR
.br
=======================
.br

.P
Many of the same operations available with `\fIVec<T>\fR` are available with `\fIString\fR`as well, starting with the `\fInew\fR` function to create a string, shown in Listing8\-11\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::new();
# }

.EE

.RE
Listing 8\-11: Creating a new, empty `\fIString\fR`
.P
This line creates a new empty string called `\fIs\fR`, which we can then load datainto\. Often, we’ll have some initial data that we want to start the stringwith\. For that, we use the `\fIto_string\fR` method, which is available on any typethat implements the `\fIDisplay\fR` trait, as string literals do\. Listing 8\-12 showstwo examples\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let data = "initial contents";

    let s = data\.to_string();

    // the method also works on a literal directly:
    let s = "initial contents"\.to_string();
# }

.EE

.RE
Listing 8\-12: Using the `\fIto_string\fR` method to create a`\fIString\fR` from a string literal
.P
This code creates a string containing `\fIinitial contents\fR`\.
.P
We can also use the function `\fIString::from\fR` to create a `\fIString\fR` from a stringliteral\. The code in Listing 8\-13 is equivalent to the code from Listing 8\-12that uses `\fIto_string\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s = String::from("initial contents");
# }

.EE

.RE
Listing 8\-13: Using the `\fIString::from\fR` function to createa `\fIString\fR` from a string literal
.P
Because strings are used for so many things, we can use many different genericAPIs for strings, providing us with a lot of options\. Some of them can seemredundant, but they all have their place! In this case, `\fIString::from\fR` and`\fIto_string\fR` do the same thing, so which you choose is a matter of style\.
.P
Remember that strings are UTF\-8 encoded, so we can include any properly encodeddata in them, as shown in Listing 8\-14\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let hello = String::from("السلام عليكم");
    let hello = String::from("Dobrý den");
    let hello = String::from("Hello");
    let hello = String::from("שָׁלוֹם");
    let hello = String::from("नमस्ते");
    let hello = String::from("こんにちは");
    let hello = String::from("안녕하세요");
    let hello = String::from("你好");
    let hello = String::from("Olá");
    let hello = String::from("Здравствуйте");
    let hello = String::from("Hola");
# }

.EE

.RE
Listing 8\-14: Storing greetings in different languages instrings
.P
All of these are valid `\fIString\fR` values\.
.br

.br
\fBUpdating a String\fR
.br
===================
.br

.P
A `\fIString\fR` can grow in size and its contents can change, just like the contentsof a `\fIVec<T>\fR`, if you push more data into it\. In addition, you can convenientlyuse the `\fI+\fR` operator or the `\fIformat!\fR` macro to concatenate `\fIString\fR` values\.
.br

.br
\fBAppending to a String with \fR
.br
=============================
.br
`\fIpush_str\fR` and `\fIpush\fR`
.P
We can grow a `\fIString\fR` by using the `\fIpush_str\fR` method to append a string slice,as shown in Listing 8\-15\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("foo");
    s\.push_str("bar");
# }

.EE

.RE
Listing 8\-15: Appending a string slice to a `\fIString\fR`using the `\fIpush_str\fR` method
.P
After these two lines, `\fIs\fR` will contain `\fIfoobar\fR`\. The `\fIpush_str\fR` method takes astring slice because we don’t necessarily want to take ownership of theparameter\. For example, the code in Listing 8\-16 shows that it would beunfortunate if we weren’t able to use `\fIs2\fR` after appending its contents to `\fIs1\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s1 = String::from("foo");
    let s2 = "bar";
    s1\.push_str(s2);
    println!("s2 is {}", s2);
# }

.EE

.RE
Listing 8\-16: Using a string slice after appending itscontents to a `\fIString\fR`
.P
If the `\fIpush_str\fR` method took ownership of `\fIs2\fR`, we wouldn’t be able to printits value on the last line\. However, this code works as we’d expect!
.P
The `\fIpush\fR` method takes a single character as a parameter and adds it to the`\fIString\fR`\. Listing 8\-17 shows code that adds the letter "l" to a `\fIString\fR` usingthe `\fIpush\fR` method\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut s = String::from("lo");
    s\.push('l');
# }

.EE

.RE
Listing 8\-17: Adding one character to a `\fIString\fR` valueusing `\fIpush\fR`
.P
As a result of this code, `\fIs\fR` will contain `\fIlol\fR`\.
.br

.br
\fBConcatenation with the \fR
.br
=========================
.br
`\fI+\fR` Operator or the `\fIformat!\fR` Macro
.P
Often, you’ll want to combine two existing strings\. One way is to use the `\fI+\fR`operator, as shown in Listing 8\-18\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("Hello, ");
    let s2 = String::from("world!");
    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used
# }

.EE

.RE
Listing 8\-18: Using the `\fI+\fR` operator to combine two`\fIString\fR` values into a new `\fIString\fR` value
.P
The string `\fIs3\fR` will contain `\fIHello, world!\fR` as a result of this code\. Thereason `\fIs1\fR` is no longer valid after the addition and the reason we used areference to `\fIs2\fR` has to do with the signature of the method that gets calledwhen we use the `\fI+\fR` operator\. The `\fI+\fR` operator uses the `\fIadd\fR` method, whosesignature looks something like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn add(self, s: &str) \-> String {

.EE

.RE
.P
This isn’t the exact signature that’s in the standard library: in the standardlibrary, `\fIadd\fR` is defined using generics\. Here, we’re looking at the signatureof `\fIadd\fR` with concrete types substituted for the generic ones, which is whathappens when we call this method with `\fIString\fR` values\. We’ll discuss genericsin Chapter 10\. This signature gives us the clues we need to understand thetricky bits of the `\fI+\fR` operator\.
.P
First, `\fIs2\fR` has an `\fI&\fR`, meaning that we’re adding a \fIreference\fR of the secondstring to the first string because of the `\fIs\fR` parameter in the `\fIadd\fR` function:we can only add a `\fI&str\fR` to a `\fIString\fR`; we can’t add two `\fIString\fR` valuestogether\. But wait—the type of `\fI&s2\fR` is `\fI&String\fR`, not `\fI&str\fR`, as specified inthe second parameter to `\fIadd\fR`\. So why does Listing 8\-18 compile?
.P
The reason we’re able to use `\fI&s2\fR` in the call to `\fIadd\fR` is that the compilercan \fIcoerce\fR the `\fI&String\fR` argument into a `\fI&str\fR`\. When we call the `\fIadd\fR`method, Rust uses a \fIderef coercion\fR, which here turns `\fI&s2\fR` into `\fI&s2[\.\.]\fR`\.We’ll discuss deref coercion in more depth in Chapter 15\. Because `\fIadd\fR` doesnot take ownership of the `\fIs\fR` parameter, `\fIs2\fR` will still be a valid `\fIString\fR`after this operation\.
.P
Second, we can see in the signature that `\fIadd\fR` takes ownership of `\fIself\fR`,because `\fIself\fR` does \fInot\fR have an `\fI&\fR`\. This means `\fIs1\fR` in Listing 8\-18 will bemoved into the `\fIadd\fR` call and no longer be valid after that\. So although `\fIlet s3 = s1 + &s2;\fR` looks like it will copy both strings and create a new one, thisstatement actually takes ownership of `\fIs1\fR`, appends a copy of the contents of`\fIs2\fR`, and then returns ownership of the result\. In other words, it looks likeit’s making a lot of copies but isn’t; the implementation is more efficientthan copying\.
.P
If we need to concatenate multiple strings, the behavior of the `\fI+\fR` operatorgets unwieldy:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = s1 + "\-" + &s2 + "\-" + &s3;
# }

.EE

.RE
.P
At this point, `\fIs\fR` will be `\fItic\-tac\-toe\fR`\. With all of the `\fI+\fR` and `\fI"\fR`characters, it’s difficult to see what’s going on\. For more complicated stringcombining, we can use the `\fIformat!\fR` macro:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("tic");
    let s2 = String::from("tac");
    let s3 = String::from("toe");

    let s = format!("{}\-{}\-{}", s1, s2, s3);
# }

.EE

.RE
.P
This code also sets `\fIs\fR` to `\fItic\-tac\-toe\fR`\. The `\fIformat!\fR` macro works in the sameway as `\fIprintln!\fR`, but instead of printing the output to the screen, it returnsa `\fIString\fR` with the contents\. The version of the code using `\fIformat!\fR` is mucheasier to read, and the code generated by the `\fIformat!\fR` macro uses referencesso that this call doesn’t take ownership of any of its parameters\.
.br

.br
\fBIndexing into Strings\fR
.br
=======================
.br

.P
In many other programming languages, accessing individual characters in astring by referencing them by index is a valid and common operation\. However,if you try to access parts of a `\fIString\fR` using indexing syntax in Rust, you’llget an error\. Consider the invalid code in Listing 8\-19\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let s1 = String::from("hello");
    let h = s1[0];
# }

.EE

.RE
Listing 8\-19: Attempting to use indexing syntax with aString
.P
This code will result in the following error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling collections v0\.1\.0 (file:///projects/collections)
error[E0277]: the type `String` cannot be indexed by `{integer}`
 \-\-> src/main\.rs:3:13
  |
3 |     let h = s1[0];
  |             ^^^^^ `String` cannot be indexed by `{integer}`
  |
  = help: the trait `Index<{integer}>` is not implemented for `String`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `collections`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The error and the note tell the story: Rust strings don’t support indexing\. Butwhy not? To answer that question, we need to discuss how Rust stores strings inmemory\.
.br

.br
\fBInternal Representation\fR
.br
=========================
.br

.P
A `\fIString\fR` is a wrapper over a `\fIVec<u8>\fR`\. Let’s look at some of our properlyencoded UTF\-8 example strings from Listing 8\-14\. First, this one:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let hello = String::from("السلام عليكم");
#     let hello = String::from("Dobrý den");
#     let hello = String::from("Hello");
#     let hello = String::from("שָׁלוֹם");
#     let hello = String::from("नमस्ते");
#     let hello = String::from("こんにちは");
#     let hello = String::from("안녕하세요");
#     let hello = String::from("你好");
#     let hello = String::from("Olá");
#     let hello = String::from("Здравствуйте");
    let hello = String::from("Hola");
# }

.EE

.RE
.P
In this case, `\fIlen\fR` will be 4, which means the vector storing the string “Hola”is 4 bytes long\. Each of these letters takes 1 byte when encoded in UTF\-8\. Butwhat about the following line? (Note that this string begins with the capitalCyrillic letter Ze, not the Arabic number 3\.)
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let hello = String::from("السلام عليكم");
#     let hello = String::from("Dobrý den");
#     let hello = String::from("Hello");
#     let hello = String::from("שָׁלוֹם");
#     let hello = String::from("नमस्ते");
#     let hello = String::from("こんにちは");
#     let hello = String::from("안녕하세요");
#     let hello = String::from("你好");
#     let hello = String::from("Olá");
    let hello = String::from("Здравствуйте");
#     let hello = String::from("Hola");
# }

.EE

.RE
.P
Asked how long the string is, you might say 12\. However, Rust’s answer is 24:that’s the number of bytes it takes to encode “Здравствуйте” in UTF\-8, becauseeach Unicode scalar value in that string takes 2 bytes of storage\. Therefore,an index into the string’s bytes will not always correlate to a valid Unicodescalar value\. To demonstrate, consider this invalid Rust code:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
let hello = "Здравствуйте";
let answer = &hello[0];

.EE

.RE
.P
What should the value of `\fIanswer\fR` be? Should it be `\fIЗ\fR`, the first letter? Whenencoded in UTF\-8, the first byte of `\fIЗ\fR` is `\fI208\fR` and the second is `\fI151\fR`, so`\fIanswer\fR` should in fact be `\fI208\fR`, but `\fI208\fR` is not a valid character on itsown\. Returning `\fI208\fR` is likely not what a user would want if they asked for thefirst letter of this string; however, that’s the only data that Rust has atbyte index 0\. Users generally don’t want the byte value returned, even if thestring contains only Latin letters: if `\fI&"hello"[0]\fR` were valid code thatreturned the byte value, it would return `\fI104\fR`, not `\fIh\fR`\. To avoid returning anunexpected value and causing bugs that might not be discovered immediately,Rust doesn’t compile this code at all and prevents misunderstandings early inthe development process\.
.br

.br
\fBBytes and Scalar Values and Grapheme Clusters! Oh My!\fR
.br
=======================================================
.br

.P
Another point about UTF\-8 is that there are actually three relevant ways tolook at strings from Rust’s perspective: as bytes, scalar values, and graphemeclusters (the closest thing to what we would call \fIletters\fR)\.
.P
If we look at the Hindi word “नमस्ते” written in the Devanagari script, it isstored as a vector of `\fIu8\fR` values that looks like this:
.RS
.IP \fBtext\fR 2

.br
.EX
[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,
224, 165, 135]

.EE

.RE
.P
That’s 18 bytes and is how computers ultimately store this data\. If we look atthem as Unicode scalar values, which are what Rust’s `\fIchar\fR` type is, thosebytes look like this:
.RS
.IP \fBtext\fR 2

.br
.EX
['न', 'म', 'स', '्', 'त', 'े']

.EE

.RE
.P
There are six `\fIchar\fR` values here, but the fourth and sixth are not letters:they’re diacritics that don’t make sense on their own\. Finally, if we look atthem as grapheme clusters, we’d get what a person would call the four lettersthat make up the Hindi word:
.RS
.IP \fBtext\fR 2

.br
.EX
["न", "म", "स्", "ते"]

.EE

.RE
.P
Rust provides different ways of interpreting the raw string data that computersstore so that each program can choose the interpretation it needs, no matterwhat human language the data is in\.
.P
A final reason Rust doesn’t allow us to index into a `\fIString\fR` to get acharacter is that indexing operations are expected to always take constant time(O(1))\. But it isn’t possible to guarantee that performance with a `\fIString\fR`,because Rust would have to walk through the contents from the beginning to theindex to determine how many valid characters there were\.
.br

.br
\fBSlicing Strings\fR
.br
=================
.br

.P
Indexing into a string is often a bad idea because it’s not clear what thereturn type of the string\-indexing operation should be: a byte value, acharacter, a grapheme cluster, or a string slice\. Therefore, Rust asks you tobe more specific if you really need to use indices to create string slices\. Tobe more specific in your indexing and indicate that you want a string slice,rather than indexing using `\fI[]\fR` with a single number, you can use `\fI[]\fR` with arange to create a string slice containing particular bytes:
.RS
.IP \fBrust\fR 2

.br
.EX
let hello = "Здравствуйте";

let s = &hello[0\.\.4];

.EE

.RE
.P
Here, `\fIs\fR` will be a `\fI&str\fR` that contains the first 4 bytes of the string\.Earlier, we mentioned that each of these characters was 2 bytes, which means`\fIs\fR` will be `\fIЗд\fR`\.
.P
What would happen if we used `\fI&hello[0\.\.1]\fR`? The answer: Rust would panic atruntime in the same way as if an invalid index were accessed in a vector:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling collections v0\.1\.0 (file:///projects/collections)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.43s
     Running `target/debug/collections`
thread 'main' panicked at 'byte index 1 is not a char boundary; it is inside 'З' (bytes 0\.\.2) of `Здравствуйте`', src/main\.rs:4:14
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
You should use ranges to create string slices with caution, because doing socan crash your program\.
.br

.br
\fBMethods for Iterating Over Strings\fR
.br
====================================
.br

.P
Fortunately, you can access elements in a string in other ways\.
.P
If you need to perform operations on individual Unicode scalar values, the bestway to do so is to use the `\fIchars\fR` method\. Calling `\fIchars\fR` on “नमस्ते” separatesout and returns six values of type `\fIchar\fR`, and you can iterate over the resultto access each element:
.RS
.IP \fBrust\fR 2

.br
.EX
for c in "नमस्ते"\.chars() {
    println!("{}", c);
}

.EE

.RE
.P
This code will print the following:
.RS
.IP \fBtext\fR 2

.br
.EX
न
म
स
्
त
े

.EE

.RE
.P
The `\fIbytes\fR` method returns each raw byte, which might be appropriate for yourdomain:
.RS
.IP \fBrust\fR 2

.br
.EX
for b in "नमस्ते"\.bytes() {
    println!("{}", b);
}

.EE

.RE
.P
This code will print the 18 bytes that make up this `\fIString\fR`:
.RS
.IP \fBtext\fR 2

.br
.EX
224
164
// \-\-snip\-\-
165
135

.EE

.RE
.P
But be sure to remember that valid Unicode scalar values may be made up of morethan 1 byte\.
.P
Getting grapheme clusters from strings is complex, so this functionality is notprovided by the standard library\. Crates are available on
.UR https://crates\.io/
.UE
crates\.io if this is the functionality you need\.
.br

.br
\fBStrings Are Not So Simple\fR
.br
===========================
.br

.P
To summarize, strings are complicated\. Different programming languages makedifferent choices about how to present this complexity to the programmer\. Rusthas chosen to make the correct handling of `\fIString\fR` data the default behaviorfor all Rust programs, which means programmers have to put more thought intohandling UTF\-8 data upfront\. This trade\-off exposes more of the complexity ofstrings than is apparent in other programming languages, but it prevents youfrom having to handle errors involving non\-ASCII characters later in yourdevelopment life cycle\.
.P
Let’s switch to something a bit less complex: hash maps!
.SH "Storing Keys with Associated Values in Hash Maps"

.br

.br
\fBStoring Keys with Associated Values in Hash Maps\fR
.br
==================================================
.br

.P
The last of our common collections is the \fIhash map\fR\. The type `\fIHashMap<K, V>\fR`stores a mapping of keys of type `\fIK\fR` to values of type `\fIV\fR`\. It does this via a\fIhashing function\fR, which determines how it places these keys and values intomemory\. Many programming languages support this kind of data structure, butthey often use a different name, such as hash, map, object, hash table,dictionary, or associative array, just to name a few\.
.P
Hash maps are useful when you want to look up data not by using an index, asyou can with vectors, but by using a key that can be of any type\. For example,in a game, you could keep track of each team’s score in a hash map in whicheach key is a team’s name and the values are each team’s score\. Given a teamname, you can retrieve its score\.
.P
We’ll go over the basic API of hash maps in this section, but many more goodiesare hiding in the functions defined on `\fIHashMap<K, V>\fR` by the standard library\.As always, check the standard library documentation for more information\.
.br

.br
\fBCreating a New Hash Map\fR
.br
=========================
.br

.P
You can create an empty hash map with `\fInew\fR` and add elements with `\fIinsert\fR`\. InListing 8\-20, we’re keeping track of the scores of two teams whose names areBlue and Yellow\. The Blue team starts with 10 points, and the Yellow teamstarts with 50\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores\.insert(String::from("Blue"), 10);
    scores\.insert(String::from("Yellow"), 50);
# }

.EE

.RE
Listing 8\-20: Creating a new hash map and inserting somekeys and values
.P
Note that we need to first `\fIuse\fR` the `\fIHashMap\fR` from the collections portion ofthe standard library\. Of our three common collections, this one is the leastoften used, so it’s not included in the features brought into scopeautomatically in the prelude\. Hash maps also have less support from thestandard library; there’s no built\-in macro to construct them, for example\.
.P
Just like vectors, hash maps store their data on the heap\. This `\fIHashMap\fR` haskeys of type `\fIString\fR` and values of type `\fIi32\fR`\. Like vectors, hash maps arehomogeneous: all of the keys must have the same type, and all of the valuesmust have the same type\.
.P
Another way of constructing a hash map is by using iterators and the `\fIcollect\fR`method on a vector of tuples, where each tuple consists of a key and its value\.We’ll be going into more detail about iterators and their associated methods inthe 
.UR ch13\-02\-iterators\.html
.UE
”Processing a Series of Items with Iterators” section of Chapter13\. The `\fIcollect\fR` method gathers data into a numberof collection types, including `\fIHashMap\fR`\. For example, if we had the team namesand initial scores in two separate vectors, we could use the `\fIzip\fR` method tocreate an iterator of tuples where “Blue” is paired with 10, and so forth\. Thenwe could use the `\fIcollect\fR` method to turn that iterator of tuples into a hashmap, as shown in Listing 8\-21\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let teams = vec![String::from("Blue"), String::from("Yellow")];
    let initial_scores = vec![10, 50];

    let mut scores: HashMap<_, _> =
        teams\.into_iter()\.zip(initial_scores\.into_iter())\.collect();
# }

.EE

.RE
Listing 8\-21: Creating a hash map from a list of teamsand a list of scores
.P
The type annotation `\fIHashMap<_, _>\fR` is needed here because it’s possible to`\fIcollect\fR` into many different data structures and Rust doesn’t know which youwant unless you specify\. For the parameters for the key and value types,however, we use underscores, and Rust can infer the types that the hash mapcontains based on the types of the data in the vectors\. In Listing 8\-21, thekey type will be `\fIString\fR` and the value type will be `\fIi32\fR`, just as the typeswere in Listing 8\-20\.
.br

.br
\fBHash Maps and Ownership\fR
.br
=========================
.br

.P
For types that implement the `\fICopy\fR` trait, like `\fIi32\fR`, the values are copiedinto the hash map\. For owned values like `\fIString\fR`, the values will be moved andthe hash map will be the owner of those values, as demonstrated in Listing 8\-22\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let field_name = String::from("Favorite color");
    let field_value = String::from("Blue");

    let mut map = HashMap::new();
    map\.insert(field_name, field_value);
    // field_name and field_value are invalid at this point, try using them and
    // see what compiler error you get!
# }

.EE

.RE
Listing 8\-22: Showing that keys and values are owned bythe hash map once they’re inserted
.P
We aren’t able to use the variables `\fIfield_name\fR` and `\fIfield_value\fR` afterthey’ve been moved into the hash map with the call to `\fIinsert\fR`\.
.P
If we insert references to values into the hash map, the values won’t be movedinto the hash map\. The values that the references point to must be valid for atleast as long as the hash map is valid\. We’ll talk more about these issues inthe 
.UR ch10\-03\-lifetime\-syntax\.html#validating\-references\-with\-lifetimes
.UE
“Validating References withLifetimes” section inChapter 10\.
.br

.br
\fBAccessing Values in a Hash Map\fR
.br
================================
.br

.P
We can get a value out of the hash map by providing its key to the `\fIget\fR`method, as shown in Listing 8\-23\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores\.insert(String::from("Blue"), 10);
    scores\.insert(String::from("Yellow"), 50);

    let team_name = String::from("Blue");
    let score = scores\.get(&team_name);
# }

.EE

.RE
Listing 8\-23: Accessing the score for the Blue teamstored in the hash map
.P
Here, `\fIscore\fR` will have the value that’s associated with the Blue team, and theresult will be `\fISome(&10)\fR`\. The result is wrapped in `\fISome\fR` because `\fIget\fR`returns an `\fIOption<&V>\fR`; if there’s no value for that key in the hash map,`\fIget\fR` will return `\fINone\fR`\. The program will need to handle the `\fIOption\fR` in oneof the ways that we covered in Chapter 6\.
.P
We can iterate over each key/value pair in a hash map in a similar manner as wedo with vectors, using a `\fIfor\fR` loop:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores\.insert(String::from("Blue"), 10);
    scores\.insert(String::from("Yellow"), 50);

    for (key, value) in &scores {
        println!("{}: {}", key, value);
    }
# }

.EE

.RE
.P
This code will print each pair in an arbitrary order:
.RS
.IP \fBtext\fR 2

.br
.EX
Yellow: 50
Blue: 10

.EE

.RE

.br

.br
\fBUpdating a Hash Map\fR
.br
=====================
.br

.P
Although the number of keys and values is growable, each key can only have onevalue associated with it at a time\. When you want to change the data in a hashmap, you have to decide how to handle the case when a key already has a valueassigned\. You could replace the old value with the new value, completelydisregarding the old value\. You could keep the old value and ignore the newvalue, only adding the new value if the key \fIdoesn’t\fR already have a value\. Oryou could combine the old value and the new value\. Let’s look at how to do eachof these!
.br

.br
\fBOverwriting a Value\fR
.br
=====================
.br

.P
If we insert a key and a value into a hash map and then insert that same keywith a different value, the value associated with that key will be replaced\.Even though the code in Listing 8\-24 calls `\fIinsert\fR` twice, the hash map willonly contain one key/value pair because we’re inserting the value for the Blueteam’s key both times\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();

    scores\.insert(String::from("Blue"), 10);
    scores\.insert(String::from("Blue"), 25);

    println!("{:?}", scores);
# }

.EE

.RE
Listing 8\-24: Replacing a value stored with a particularkey
.P
This code will print `\fI{"Blue": 25}\fR`\. The original value of `\fI10\fR` has beenoverwritten\.
.br

.br
\fBOnly Inserting a Value If the Key Has No Value\fR
.br
================================================
.br

.P
It’s common to check whether a particular key has a value and, if it doesn’t,insert a value for it\. Hash maps have a special API for this called `\fIentry\fR`that takes the key you want to check as a parameter\. The return value of the`\fIentry\fR` method is an enum called `\fIEntry\fR` that represents a value that might ormight not exist\. Let’s say we want to check whether the key for the Yellow teamhas a value associated with it\. If it doesn’t, we want to insert the value 50,and the same for the Blue team\. Using the `\fIentry\fR` API, the code looks likeListing 8\-25\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let mut scores = HashMap::new();
    scores\.insert(String::from("Blue"), 10);

    scores\.entry(String::from("Yellow"))\.or_insert(50);
    scores\.entry(String::from("Blue"))\.or_insert(50);

    println!("{:?}", scores);
# }

.EE

.RE
Listing 8\-25: Using the `\fIentry\fR` method to only insert ifthe key does not already have a value
.P
The `\fIor_insert\fR` method on `\fIEntry\fR` is defined to return a mutable reference tothe value for the corresponding `\fIEntry\fR` key if that key exists, and if not,inserts the parameter as the new value for this key and returns a mutablereference to the new value\. This technique is much cleaner than writing thelogic ourselves and, in addition, plays more nicely with the borrow checker\.
.P
Running the code in Listing 8\-25 will print `\fI{"Yellow": 50, "Blue": 10}\fR`\. Thefirst call to `\fIentry\fR` will insert the key for the Yellow team with the value50 because the Yellow team doesn’t have a value already\. The second call to`\fIentry\fR` will not change the hash map because the Blue team already has thevalue 10\.
.br

.br
\fBUpdating a Value Based on the Old Value\fR
.br
=========================================
.br

.P
Another common use case for hash maps is to look up a key’s value and thenupdate it based on the old value\. For instance, Listing 8\-26 shows code thatcounts how many times each word appears in some text\. We use a hash map withthe words as keys and increment the value to keep track of how many times we’veseen that word\. If it’s the first time we’ve seen a word, we’ll first insertthe value 0\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::collections::HashMap;

    let text = "hello world wonderful world";

    let mut map = HashMap::new();

    for word in text\.split_whitespace() {
        let count = map\.entry(word)\.or_insert(0);
        *count += 1;
    }

    println!("{:?}", map);
# }

.EE

.RE
Listing 8\-26: Counting occurrences of words using a hashmap that stores words and counts
.P
This code will print `\fI{"world": 2, "hello": 1, "wonderful": 1}\fR`\. The`\fIor_insert\fR` method actually returns a mutable reference (`\fI&mut V\fR`) to the valuefor this key\. Here we store that mutable reference in the `\fIcount\fR` variable, soin order to assign to that value, we must first dereference `\fIcount\fR` using theasterisk (`\fI*\fR`)\. The mutable reference goes out of scope at the end of the `\fIfor\fR`loop, so all of these changes are safe and allowed by the borrowing rules\.
.br

.br
\fBHashing Functions\fR
.br
===================
.br

.P
By default, `\fIHashMap\fR` uses a hashing function called SipHash that can provideresistance to Denial of Service (DoS) attacks involving hash tables
.UR [https://en\.wikipedia\.org/wiki/SipHash](https://en\.wikipedia\.org/wiki/SipHash)
.UE
^siphash\. Thisis not the fastest hashing algorithm available, but the trade\-off for bettersecurity that comes with the drop in performance is worth it\. If you profileyour code and find that the default hash function is too slow for yourpurposes, you can switch to another function by specifying a different\fIhasher\fR\. A hasher is a type that implements the `\fIBuildHasher\fR` trait\. We’lltalk about traits and how to implement them in Chapter 10\. You don’tnecessarily have to implement your own hasher from scratch;
.UR https://crates\.io/
.UE
crates\.io has libraries shared by other Rust users thatprovide hashers implementing many common hashing algorithms\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Vectors, strings, and hash maps will provide a large amount of functionalitynecessary in programs when you need to store, access, and modify data\. Here aresome exercises you should now be equipped to solve:
.P
Given a list of integers, use a vector and return the mean (the averagevalue), median (when sorted, the value in the middle position), and mode (thevalue that occurs most often; a hash map will be helpful here) of the list\.
.P
Convert strings to pig latin\. The first consonant of each word is moved tothe end of the word and “ay” is added, so “first” becomes “irst\-fay\.” Wordsthat start with a vowel have “hay” added to the end instead (“apple” becomes“apple\-hay”)\. Keep in mind the details about UTF\-8 encoding!
.P
Using a hash map and vectors, create a text interface to allow a user to addemployee names to a department in a company\. For example, “Add Sally toEngineering” or “Add Amir to Sales\.” Then let the user retrieve a list of allpeople in a department or all people in the company by department, sortedalphabetically\.
.P
The standard library API documentation describes methods that vectors, strings,and hash maps have that will be helpful for these exercises!
.P
We’re getting into more complex programs in which operations can fail, so, it’sa perfect time to discuss error handling\. We’ll do that next!
.SH "Error Handling"

.br

.br
\fBError Handling\fR
.br
================
.br

.P
Rust’s commitment to reliability extends to error handling\. Errors are a factof life in software, so Rust has a number of features for handling situationsin which something goes wrong\. In many cases, Rust requires you to acknowledgethe possibility of an error and take some action before your code will compile\.This requirement makes your program more robust by ensuring that you’lldiscover errors and handle them appropriately before you’ve deployed your codeto production!
.P
Rust groups errors into two major categories: \fIrecoverable\fR and \fIunrecoverable\fRerrors\. For a recoverable error, such as a file not found error, it’sreasonable to report the problem to the user and retry the operation\.Unrecoverable errors are always symptoms of bugs, like trying to access alocation beyond the end of an array\.
.P
Most languages don’t distinguish between these two kinds of errors and handleboth in the same way, using mechanisms such as exceptions\. Rust doesn’t haveexceptions\. Instead, it has the type `\fIResult<T, E>\fR` for recoverable errors andthe `\fIpanic!\fR` macro that stops execution when the program encounters anunrecoverable error\. This chapter covers calling `\fIpanic!\fR` first and then talksabout returning `\fIResult<T, E>\fR` values\. Additionally, we’ll exploreconsiderations when deciding whether to try to recover from an error or to stopexecution\.
.SH "Unrecoverable Errors with panic!"

.br

.br
\fBUnrecoverable Errors with \fR
.br
============================
.br
`\fIpanic!\fR`
.P
Sometimes, bad things happen in your code, and there’s nothing you can do aboutit\. In these cases, Rust has the `\fIpanic!\fR` macro\. When the `\fIpanic!\fR` macroexecutes, your program will print a failure message, unwind and clean up thestack, and then quit\. This most commonly occurs when a bug of some kind hasbeen detected and it’s not clear to the programmer how to handle the error\.
.br

.br
\fBUnwinding the Stack or Aborting in Response to a Panic\fR
.br
========================================================
.br

.P
By default, when a panic occurs, the program starts \fIunwinding\fR, whichmeans Rust walks back up the stack and cleans up the data from each functionit encounters\. But this walking back and cleanup is a lot of work\. Thealternative is to immediately \fIabort\fR, which ends the program withoutcleaning up\. Memory that the program was using will then need to be cleanedup by the operating system\. If in your project you need to make the resultingbinary as small as possible, you can switch from unwinding to aborting upon apanic by adding `\fIpanic = 'abort'\fR` to the appropriate `\fI[profile]\fR` sections inyour \fICargo\.toml\fR file\. For example, if you want to abort on panic in releasemode, add this:
.RS
.IP \fBtoml\fR 2

.br
.EX
[profile\.release]
panic = 'abort'

.EE

.RE
.P
Let’s try calling `\fIpanic!\fR` in a simple program:Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,panics\fR 2

.br
.EX
fn main() {
    panic!("crash and burn");
}

.EE

.RE
.P
When you run the program, you’ll see something like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling panic v0\.1\.0 (file:///projects/panic)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.25s
     Running `target/debug/panic`
thread 'main' panicked at 'crash and burn', src/main\.rs:2:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
The call to `\fIpanic!\fR` causes the error message contained in the last two lines\.The first line shows our panic message and the place in our source code wherethe panic occurred: \fIsrc/main\.rs:2:5\fR indicates that it’s the second line,fifth character of our \fIsrc/main\.rs\fR file\.
.P
In this case, the line indicated is part of our code, and if we go to thatline, we see the `\fIpanic!\fR` macro call\. In other cases, the `\fIpanic!\fR` call mightbe in code that our code calls, and the filename and line number reported bythe error message will be someone else’s code where the `\fIpanic!\fR` macro iscalled, not the line of our code that eventually led to the `\fIpanic!\fR` call\. Wecan use the backtrace of the functions the `\fIpanic!\fR` call came from to figureout the part of our code that is causing the problem\. We’ll discuss what abacktrace is in more detail next\.
.br

.br
\fBUsing a \fR
.br
==========
.br
`\fIpanic!\fR` Backtrace
.P
Let’s look at another example to see what it’s like when a `\fIpanic!\fR` call comesfrom a library because of a bug in our code instead of from our code callingthe macro directly\. Listing 9\-1 has some code that attempts to access anelement by index in a vector\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,panics\fR 2

.br
.EX
fn main() {
    let v = vec![1, 2, 3];

    v[99];
}

.EE

.RE
Listing 9\-1: Attempting to access an element beyond theend of a vector, which will cause a call to `\fIpanic!\fR`
.P
Here, we’re attempting to access the 100th element of our vector (which is atindex 99 because indexing starts at zero), but it has only 3 elements\. In thissituation, Rust will panic\. Using `\fI[]\fR` is supposed to return an element, but ifyou pass an invalid index, there’s no element that Rust could return here thatwould be correct\.
.P
In C, attempting to read beyond the end of a data structure is undefinedbehavior\. You might get whatever is at the location in memory that wouldcorrespond to that element in the data structure, even though the memorydoesn’t belong to that structure\. This is called a \fIbuffer overread\fR and canlead to security vulnerabilities if an attacker is able to manipulate the indexin such a way as to read data they shouldn’t be allowed to that is stored afterthe data structure\.
.P
To protect your program from this sort of vulnerability, if you try to read anelement at an index that doesn’t exist, Rust will stop execution and refuse tocontinue\. Let’s try it and see:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling panic v0\.1\.0 (file:///projects/panic)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.27s
     Running `target/debug/panic`
thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', src/main\.rs:4:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
This error points at line 4 of our `\fImain\.rs\fR` where we attempt to access index99\. The next note line tells us that we can set the `\fIRUST_BACKTRACE\fR`environment variable to get a backtrace of exactly what happened to cause theerror\. A \fIbacktrace\fR is a list of all the functions that have been called toget to this point\. Backtraces in Rust work as they do in other languages: thekey to reading the backtrace is to start from the top and read until you seefiles you wrote\. That’s the spot where the problem originated\. The lines abovethe lines mentioning your files are code that your code called; the lines beloware code that called your code\. These lines might include core Rust code,standard library code, or crates that you’re using\. Let’s try getting abacktrace by setting the `\fIRUST_BACKTRACE\fR` environment variable to any valueexcept 0\. Listing 9\-2 shows output similar to what you’ll see\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ RUST_BACKTRACE=1 cargo run
thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', src/main\.rs:4:5
stack backtrace:
   0: rust_begin_unwind
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/std/src/panicking\.rs:483
   1: core::panicking::panic_fmt
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking\.rs:85
   2: core::panicking::panic_bounds_check
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking\.rs:62
   3: <usize as core::slice::index::SliceIndex<[T]>>::index
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/slice/index\.rs:255
   4: core::slice::index::<impl core::ops::index::Index<I> for [T]>::index
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/slice/index\.rs:15
   5: <alloc::vec::Vec<T> as core::ops::index::Index<I>>::index
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/alloc/src/vec\.rs:1982
   6: panic::main
             at \./src/main\.rs:4
   7: core::ops::function::FnOnce::call_once
             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ops/function\.rs:227
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace\.

.EE

.RE
Listing 9\-2: The backtrace generated by a call to`\fIpanic!\fR` displayed when the environment variable `\fIRUST_BACKTRACE\fR` is set
.P
That’s a lot of output! The exact output you see might be different dependingon your operating system and Rust version\. In order to get backtraces with thisinformation, debug symbols must be enabled\. Debug symbols are enabled bydefault when using `\fIcargo build\fR` or `\fIcargo run\fR` without the `\fI\-\-release\fR` flag,as we have here\.
.P
In the output in Listing 9\-2, line 6 of the backtrace points to the line inour project that’s causing the problem: line 4 of \fIsrc/main\.rs\fR\. If we don’twant our program to panic, the location pointed to by the first line mentioninga file we wrote is where we should start investigating\. In Listing 9\-1, wherewe deliberately wrote code that would panic in order to demonstrate how to usebacktraces, the way to fix the panic is to not request an element at index 99from a vector that only contains 3 items\. When your code panics in the future,you’ll need to figure out what action the code is taking with what values tocause the panic and what the code should do instead\.
.P
We’ll come back to `\fIpanic!\fR` and when we should and should not use `\fIpanic!\fR` tohandle error conditions in the 
.UR ch09\-03\-to\-panic\-or\-not\-to\-panic\.html#to\-panic\-or\-not\-to\-panic
.UE
“To `\fIpanic!\fR` or Not to`\fIpanic!\fR`” section later in thischapter\. Next, we’ll look at how to recover from an error using `\fIResult\fR`\.
.SH "Recoverable Errors with Result"

.br

.br
\fBRecoverable Errors with \fR
.br
==========================
.br
`\fIResult\fR`
.P
Most errors aren’t serious enough to require the program to stop entirely\.Sometimes, when a function fails, it’s for a reason that you can easilyinterpret and respond to\. For example, if you try to open a file and thatoperation fails because the file doesn’t exist, you might want to create thefile instead of terminating the process\.
.P
Recall from 
.UR ch02\-00\-guessing\-game\-tutorial\.html#handling\-potential\-failure\-with\-the\-result\-type
.UE
“Handling Potential Failure with the `\fIResult\fR`Type” in Chapter 2 that the `\fIResult\fR` enum isdefined as having two variants, `\fIOk\fR` and `\fIErr\fR`, as follows:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Result<T, E> {
    Ok(T),
    Err(E),
}

.EE

.RE
.P
The `\fIT\fR` and `\fIE\fR` are generic type parameters: we’ll discuss generics in moredetail in Chapter 10\. What you need to know right now is that `\fIT\fR` representsthe type of the value that will be returned in a success case within the `\fIOk\fR`variant, and `\fIE\fR` represents the type of the error that will be returned in afailure case within the `\fIErr\fR` variant\. Because `\fIResult\fR` has these generic typeparameters, we can use the `\fIResult\fR` type and the functions that the standardlibrary has defined on it in many different situations where the successfulvalue and error value we want to return may differ\.
.P
Let’s call a function that returns a `\fIResult\fR` value because the function couldfail\. In Listing 9\-3 we try to open a file\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let f = File::open("hello\.txt");
}

.EE

.RE
Listing 9\-3: Opening a file
.P
How do we know `\fIFile::open\fR` returns a `\fIResult\fR`? We could look at the 
.UR \.\./std/index\.html
.UE
standardlibrary API documentation, or we could askthe compiler! If we give `\fIf\fR` a type annotation that we know is \fInot\fR the returntype of the function and then try to compile the code, the compiler will tellus that the types don’t match\. The error message will then tell us what thetype of `\fIf\fR` \fIis\fR\. Let’s try it! We know that the return type of `\fIFile::open\fR`isn’t of type `\fIu32\fR`, so let’s change the `\fIlet f\fR` statement to this:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::fs::File;
# 
# fn main() {
    let f: u32 = File::open("hello\.txt");
# }

.EE

.RE
.P
Attempting to compile now gives us the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling error\-handling v0\.1\.0 (file:///projects/error\-handling)
error[E0308]: mismatched types
 \-\-> src/main\.rs:4:18
  |
4 |     let f: u32 = File::open("hello\.txt");
  |            \-\-\-   ^^^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found enum `Result`
  |            |
  |            expected due to this
  |
  = note: expected type `u32`
             found enum `Result<File, std::io::Error>`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `error\-handling`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This tells us the return type of the `\fIFile::open\fR` function is a `\fIResult<T, E>\fR`\.The generic parameter `\fIT\fR` has been filled in here with the type of the successvalue, `\fIstd::fs::File\fR`, which is a file handle\. The type of `\fIE\fR` used in theerror value is `\fIstd::io::Error\fR`\.
.P
This return type means the call to `\fIFile::open\fR` might succeed and return a filehandle that we can read from or write to\. The function call also might fail:for example, the file might not exist, or we might not have permission toaccess the file\. The `\fIFile::open\fR` function needs to have a way to tell uswhether it succeeded or failed and at the same time give us either the filehandle or error information\. This information is exactly what the `\fIResult\fR` enumconveys\.
.P
In the case where `\fIFile::open\fR` succeeds, the value in the variable `\fIf\fR` will bean instance of `\fIOk\fR` that contains a file handle\. In the case where it fails,the value in `\fIf\fR` will be an instance of `\fIErr\fR` that contains more informationabout the kind of error that happened\.
.P
We need to add to the code in Listing 9\-3 to take different actions dependingon the value `\fIFile::open\fR` returns\. Listing 9\-4 shows one way to handle the`\fIResult\fR` using a basic tool, the `\fImatch\fR` expression that we discussed inChapter 6\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let f = File::open("hello\.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => panic!("Problem opening the file: {:?}", error),
    };
}

.EE

.RE
Listing 9\-4: Using a `\fImatch\fR` expression to handle the`\fIResult\fR` variants that might be returned
.P
Note that, like the `\fIOption\fR` enum, the `\fIResult\fR` enum and its variants have beenbrought into scope by the prelude, so we don’t need to specify `\fIResult::\fR`before the `\fIOk\fR` and `\fIErr\fR` variants in the `\fImatch\fR` arms\.
.P
Here we tell Rust that when the result is `\fIOk\fR`, return the inner `\fIfile\fR` valueout of the `\fIOk\fR` variant, and we then assign that file handle value to thevariable `\fIf\fR`\. After the `\fImatch\fR`, we can use the file handle for reading orwriting\.
.P
The other arm of the `\fImatch\fR` handles the case where we get an `\fIErr\fR` value from`\fIFile::open\fR`\. In this example, we’ve chosen to call the `\fIpanic!\fR` macro\. Ifthere’s no file named \fIhello\.txt\fR in our current directory and we run thiscode, we’ll see the following output from the `\fIpanic!\fR` macro:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling error\-handling v0\.1\.0 (file:///projects/error\-handling)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.73s
     Running `target/debug/error\-handling`
thread 'main' panicked at 'Problem opening the file: Os { code: 2, kind: NotFound, message: "No such file or directory" }', src/main\.rs:8:23
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
As usual, this output tells us exactly what has gone wrong\.
.br

.br
\fBMatching on Different Errors\fR
.br
==============================
.br

.P
The code in Listing 9\-4 will `\fIpanic!\fR` no matter why `\fIFile::open\fR` failed\. Whatwe want to do instead is take different actions for different failure reasons:if `\fIFile::open\fR` failed because the file doesn’t exist, we want to create thefile and return the handle to the new file\. If `\fIFile::open\fR` failed for anyother reason—for example, because we didn’t have permission to open the file—westill want the code to `\fIpanic!\fR` in the same way as it did in Listing 9\-4\. Lookat Listing 9\-5, which adds an inner `\fImatch\fR` expression\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello\.txt");

    let f = match f {
        Ok(file) => file,
        Err(error) => match error\.kind() {
            ErrorKind::NotFound => match File::create("hello\.txt") {
                Ok(fc) => fc,
                Err(e) => panic!("Problem creating the file: {:?}", e),
            },
            other_error => {
                panic!("Problem opening the file: {:?}", other_error)
            }
        },
    };
}

.EE

.RE
Listing 9\-5: Handling different kinds of errors indifferent ways
.P
The type of the value that `\fIFile::open\fR` returns inside the `\fIErr\fR` variant is`\fIio::Error\fR`, which is a struct provided by the standard library\. This structhas a method `\fIkind\fR` that we can call to get an `\fIio::ErrorKind\fR` value\. The enum`\fIio::ErrorKind\fR` is provided by the standard library and has variantsrepresenting the different kinds of errors that might result from an `\fIio\fR`operation\. The variant we want to use is `\fIErrorKind::NotFound\fR`, which indicatesthe file we’re trying to open doesn’t exist yet\. So we match on `\fIf\fR`, but wealso have an inner match on `\fIerror\.kind()\fR`\.
.P
The condition we want to check in the inner match is whether the value returnedby `\fIerror\.kind()\fR` is the `\fINotFound\fR` variant of the `\fIErrorKind\fR` enum\. If it is,we try to create the file with `\fIFile::create\fR`\. However, because `\fIFile::create\fR`could also fail, we need a second arm in the inner `\fImatch\fR` expression\. When thefile can’t be created, a different error message is printed\. The second arm ofthe outer `\fImatch\fR` stays the same, so the program panics on any error besidesthe missing file error\.
.P
That’s a lot of `\fImatch\fR`! The `\fImatch\fR` expression is very useful but also verymuch a primitive\. In Chapter 13, you’ll learn about closures; the `\fIResult<T, E>\fR` type has many methods that accept a closure and are implemented using`\fImatch\fR` expressions\. Using those methods will make your code more concise\. Amore seasoned Rustacean might write this code instead of Listing 9\-5:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::fs::File;
use std::io::ErrorKind;

fn main() {
    let f = File::open("hello\.txt")\.unwrap_or_else(|error| {
        if error\.kind() == ErrorKind::NotFound {
            File::create("hello\.txt")\.unwrap_or_else(|error| {
                panic!("Problem creating the file: {:?}", error);
            })
        } else {
            panic!("Problem opening the file: {:?}", error);
        }
    });
}

.EE

.RE
.P
Although this code has the same behavior as Listing 9\-5, it doesn’t contain any`\fImatch\fR` expressions and is cleaner to read\. Come back to this example afteryou’ve read Chapter 13, and look up the `\fIunwrap_or_else\fR` method in the standardlibrary documentation\. Many more of these methods can clean up huge nested`\fImatch\fR` expressions when you’re dealing with errors\.
.br

.br
\fBShortcuts for Panic on Error: \fR
.br
================================
.br
`\fIunwrap\fR` and `\fIexpect\fR`
.P
Using `\fImatch\fR` works well enough, but it can be a bit verbose and doesn’t alwayscommunicate intent well\. The `\fIResult<T, E>\fR` type has many helper methodsdefined on it to do various tasks\. One of those methods, called `\fIunwrap\fR`, is ashortcut method that is implemented just like the `\fImatch\fR` expression we wrote inListing 9\-4\. If the `\fIResult\fR` value is the `\fIOk\fR` variant, `\fIunwrap\fR` will returnthe value inside the `\fIOk\fR`\. If the `\fIResult\fR` is the `\fIErr\fR` variant, `\fIunwrap\fR` willcall the `\fIpanic!\fR` macro for us\. Here is an example of `\fIunwrap\fR` in action:Filename: src/main\.rs
.RS
.IP \fBrust,should_panic\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let f = File::open("hello\.txt")\.unwrap();
}

.EE

.RE
.P
If we run this code without a \fIhello\.txt\fR file, we’ll see an error message fromthe `\fIpanic!\fR` call that the `\fIunwrap\fR` method makes:
.RS
.IP \fBtext\fR 2

.br
.EX
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error {
repr: Os { code: 2, message: "No such file or directory" } }',
src/libcore/result\.rs:906:4

.EE

.RE
.P
Another method, `\fIexpect\fR`, which is similar to `\fIunwrap\fR`, lets us also choose the`\fIpanic!\fR` error message\. Using `\fIexpect\fR` instead of `\fIunwrap\fR` and providing gooderror messages can convey your intent and make tracking down the source of apanic easier\. The syntax of `\fIexpect\fR` looks like this:Filename: src/main\.rs
.RS
.IP \fBrust,should_panic\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let f = File::open("hello\.txt")\.expect("Failed to open hello\.txt");
}

.EE

.RE
.P
We use `\fIexpect\fR` in the same way as `\fIunwrap\fR`: to return the file handle or callthe `\fIpanic!\fR` macro\. The error message used by `\fIexpect\fR` in its call to `\fIpanic!\fR`will be the parameter that we pass to `\fIexpect\fR`, rather than the default`\fIpanic!\fR` message that `\fIunwrap\fR` uses\. Here’s what it looks like:
.RS
.IP \fBtext\fR 2

.br
.EX
thread 'main' panicked at 'Failed to open hello\.txt: Error { repr: Os { code:
2, message: "No such file or directory" } }', src/libcore/result\.rs:906:4

.EE

.RE
.P
Because this error message starts with the text we specified, `\fIFailed to open hello\.txt\fR`, it will be easier to find where in the code this error message iscoming from\. If we use `\fIunwrap\fR` in multiple places, it can take more time tofigure out exactly which `\fIunwrap\fR` is causing the panic because all `\fIunwrap\fR`calls that panic print the same message\.
.br

.br
\fBPropagating Errors\fR
.br
====================
.br

.P
When you’re writing a function whose implementation calls something that mightfail, instead of handling the error within this function, you can return theerror to the calling code so that it can decide what to do\. This is known as\fIpropagating\fR the error and gives more control to the calling code, where theremight be more information or logic that dictates how the error should behandled than what you have available in the context of your code\.
.P
For example, Listing 9\-6 shows a function that reads a username from a file\. Ifthe file doesn’t exist or can’t be read, this function will return those errorsto the code that called this function\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() \-> Result<String, io::Error> {
    let f = File::open("hello\.txt");

    let mut f = match f {
        Ok(file) => file,
        Err(e) => return Err(e),
    };

    let mut s = String::new();

    match f\.read_to_string(&mut s) {
        Ok(_) => Ok(s),
        Err(e) => Err(e),
    }
}

.EE

.RE
Listing 9\-6: A function that returns errors to thecalling code using `\fImatch\fR`
.P
This function can be written in a much shorter way, but we’re going to start bydoing a lot of it manually in order to explore error handling; at the end,we’ll show the shorter way\. Let’s look at the return type of the function first:`\fIResult<String, io::Error>\fR`\. This means the function is returning a value ofthe type `\fIResult<T, E>\fR` where the generic parameter `\fIT\fR` has been filled inwith the concrete type `\fIString\fR` and the generic type `\fIE\fR` has been filled inwith the concrete type `\fIio::Error\fR`\. If this function succeeds without anyproblems, the code that calls this function will receive an `\fIOk\fR` value thatholds a `\fIString\fR`—the username that this function read from the file\. If thisfunction encounters any problems, the code that calls this function willreceive an `\fIErr\fR` value that holds an instance of `\fIio::Error\fR` that containsmore information about what the problems were\. We chose `\fIio::Error\fR` as thereturn type of this function because that happens to be the type of the errorvalue returned from both of the operations we’re calling in this function’sbody that might fail: the `\fIFile::open\fR` function and the `\fIread_to_string\fR`method\.
.P
The body of the function starts by calling the `\fIFile::open\fR` function\. Then wehandle the `\fIResult\fR` value returned with a `\fImatch\fR` similar to the `\fImatch\fR` inListing 9\-4, only instead of calling `\fIpanic!\fR` in the `\fIErr\fR` case, we returnearly from this function and pass the error value from `\fIFile::open\fR` back to thecalling code as this function’s error value\. If `\fIFile::open\fR` succeeds, we storethe file handle in the variable `\fIf\fR` and continue\.
.P
Then we create a new `\fIString\fR` in variable `\fIs\fR` and call the `\fIread_to_string\fR`method on the file handle in `\fIf\fR` to read the contents of the file into `\fIs\fR`\. The`\fIread_to_string\fR` method also returns a `\fIResult\fR` because it might fail, eventhough `\fIFile::open\fR` succeeded\. So we need another `\fImatch\fR` to handle that`\fIResult\fR`: if `\fIread_to_string\fR` succeeds, then our function has succeeded, and wereturn the username from the file that’s now in `\fIs\fR` wrapped in an `\fIOk\fR`\. If`\fIread_to_string\fR` fails, we return the error value in the same way that wereturned the error value in the `\fImatch\fR` that handled the return value of`\fIFile::open\fR`\. However, we don’t need to explicitly say `\fIreturn\fR`, because thisis the last expression in the function\.
.P
The code that calls this code will then handle getting either an `\fIOk\fR` valuethat contains a username or an `\fIErr\fR` value that contains an `\fIio::Error\fR`\. Wedon’t know what the calling code will do with those values\. If the calling codegets an `\fIErr\fR` value, it could call `\fIpanic!\fR` and crash the program, use adefault username, or look up the username from somewhere other than a file, forexample\. We don’t have enough information on what the calling code is actuallytrying to do, so we propagate all the success or error information upward forit to handle appropriately\.
.P
This pattern of propagating errors is so common in Rust that Rust provides thequestion mark operator `\fI?\fR` to make this easier\.
.br

.br
\fBA Shortcut for Propagating Errors: the \fR
.br
=========================================
.br
`\fI?\fR` Operator
.P
Listing 9\-7 shows an implementation of `\fIread_username_from_file\fR` that has thesame functionality as it had in Listing 9\-6, but this implementation uses the`\fI?\fR` operator\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() \-> Result<String, io::Error> {
    let mut f = File::open("hello\.txt")?;
    let mut s = String::new();
    f\.read_to_string(&mut s)?;
    Ok(s)
}

.EE

.RE
Listing 9\-7: A function that returns errors to thecalling code using the `\fI?\fR` operator
.P
The `\fI?\fR` placed after a `\fIResult\fR` value is defined to work in almost the same wayas the `\fImatch\fR` expressions we defined to handle the `\fIResult\fR` values in Listing9\-6\. If the value of the `\fIResult\fR` is an `\fIOk\fR`, the value inside the `\fIOk\fR` willget returned from this expression, and the program will continue\. If the valueis an `\fIErr\fR`, the `\fIErr\fR` will be returned from the whole function as if we hadused the `\fIreturn\fR` keyword so the error value gets propagated to the callingcode\.
.P
There is a difference between what the `\fImatch\fR` expression from Listing 9\-6 doesand what the `\fI?\fR` operator does: error values that have the `\fI?\fR` operator calledon them go through the `\fIfrom\fR` function, defined in the `\fIFrom\fR` trait in thestandard library, which is used to convert errors from one type into another\.When the `\fI?\fR` operator calls the `\fIfrom\fR` function, the error type received isconverted into the error type defined in the return type of the currentfunction\. This is useful when a function returns one error type to represent allthe ways a function might fail, even if parts might fail for many differentreasons\. As long as each error type implements the `\fIfrom\fR` function to define howto convert itself to the returned error type, the `\fI?\fR` operator takes care of theconversion automatically\.
.P
In the context of Listing 9\-7, the `\fI?\fR` at the end of the `\fIFile::open\fR` call willreturn the value inside an `\fIOk\fR` to the variable `\fIf\fR`\. If an error occurs, the`\fI?\fR` operator will return early out of the whole function and give any `\fIErr\fR`value to the calling code\. The same thing applies to the `\fI?\fR` at the end of the`\fIread_to_string\fR` call\.
.P
The `\fI?\fR` operator eliminates a lot of boilerplate and makes this function’simplementation simpler\. We could even shorten this code further by chainingmethod calls immediately after the `\fI?\fR`, as shown in Listing 9\-8\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs::File;
use std::io;
use std::io::Read;

fn read_username_from_file() \-> Result<String, io::Error> {
    let mut s = String::new();

    File::open("hello\.txt")?\.read_to_string(&mut s)?;

    Ok(s)
}

.EE

.RE
Listing 9\-8: Chaining method calls after the `\fI?\fR`operator
.P
We’ve moved the creation of the new `\fIString\fR` in `\fIs\fR` to the beginning of thefunction; that part hasn’t changed\. Instead of creating a variable `\fIf\fR`, we’vechained the call to `\fIread_to_string\fR` directly onto the result of`\fIFile::open("hello\.txt")?\fR`\. We still have a `\fI?\fR` at the end of the`\fIread_to_string\fR` call, and we still return an `\fIOk\fR` value containing theusername in `\fIs\fR` when both `\fIFile::open\fR` and `\fIread_to_string\fR` succeed rather thanreturning errors\. The functionality is again the same as in Listing 9\-6 andListing 9\-7; this is just a different, more ergonomic way to write it\.
.P
Speaking of different ways to write this function, Listing 9\-9 shows thatthere’s a way to make this even shorter\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fs;
use std::io;

fn read_username_from_file() \-> Result<String, io::Error> {
    fs::read_to_string("hello\.txt")
}

.EE

.RE
Listing 9\-9: Using `\fIfs::read_to_string\fR` instead ofopening and then reading the file
.P
Reading a file into a string is a fairly common operation, so Rust provides theconvenient `\fIfs::read_to_string\fR` function that opens the file, creates a new`\fIString\fR`, reads the contents of the file, puts the contents into that `\fIString\fR`,and returns it\. Of course, using `\fIfs::read_to_string\fR` doesn’t give us theopportunity to explain all the error handling, so we did it the longer wayfirst\.
.br

.br
\fBThe \fR
.br
======
.br
`\fI?\fR` Operator Can Be Used in Functions That Return `\fIResult\fR`
.P
The `\fI?\fR` operator can be used in functions that have a return type of`\fIResult\fR`, because it is defined to work in the same way as the `\fImatch\fR`expression we defined in Listing 9\-6\. The part of the `\fImatch\fR` that requires areturn type of `\fIResult\fR` is `\fIreturn Err(e)\fR`, so the return type of the functionhas to be a `\fIResult\fR` to be compatible with this `\fIreturn\fR`\.
.P
Let’s look at what happens if we use the `\fI?\fR` operator in the `\fImain\fR` function,which you’ll recall has a return type of `\fI()\fR`:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::fs::File;

fn main() {
    let f = File::open("hello\.txt")?;
}

.EE

.RE
.P
When we compile this code, we get the following error message:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling error\-handling v0\.1\.0 (file:///projects/error\-handling)
error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)
 \-\-> src/main\.rs:4:36
  |
3 | / fn main() {
4 | |     let f = File::open("hello\.txt")?;
  | |                                    ^ cannot use the `?` operator in a function that returns `()`
5 | | }
  | |_\- this function should return `Result` or `Option` to accept `?`
  |
  = help: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`
  = note: required by `from_residual`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `error\-handling`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This error points out that we’re only allowed to use the `\fI?\fR` operator in afunction that returns `\fIResult\fR` or `\fIOption\fR` or another type that implements`\fIstd::ops::Try\fR`\. When you’re writing code in a functionthat doesn’t return one of these types, and you want to use `\fI?\fR` when you call otherfunctions that return `\fIResult<T, E>\fR`, you have two choices to fix this problem\.One technique is to change the return type of your function to be `\fIResult<T, E>\fR` if you have no restrictions preventing that\. The other technique is to usea `\fImatch\fR` or one of the `\fIResult<T, E>\fR` methods to handle the `\fIResult<T, E>\fR` inwhatever way is appropriate\.
.P
The `\fImain\fR` function is special, and there are restrictions on what its returntype must be\. One valid return type for main is `\fI()\fR`, and conveniently, anothervalid return type is `\fIResult<T, E>\fR`, as shown here:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::error::Error;
use std::fs::File;

fn main() \-> Result<(), Box<dyn Error>> {
    let f = File::open("hello\.txt")?;

    Ok(())
}

.EE

.RE
.P
The `\fIBox<dyn Error>\fR` type is called a trait object, which we’ll talk about inthe 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
“Using Trait Objects that Allow for Values of DifferentTypes” section in Chapter 17\. For now, you canread `\fIBox<dyn Error>\fR` to mean “any kind of error\.” Using `\fI?\fR` in a `\fImain\fR`function with this return type is allowed\.
.P
Now that we’ve discussed the details of calling `\fIpanic!\fR` or returning `\fIResult\fR`,let’s return to the topic of how to decide which is appropriate to use in whichcases\.
.SH "To panic! or Not To panic!"

.br

.br
\fBTo \fR
.br
=====
.br
`\fIpanic!\fR` or Not to `\fIpanic!\fR`
.P
So how do you decide when you should call `\fIpanic!\fR` and when you should return`\fIResult\fR`? When code panics, there’s no way to recover\. You could call `\fIpanic!\fR`for any error situation, whether there’s a possible way to recover or not, butthen you’re making the decision on behalf of the code calling your code that asituation is unrecoverable\. When you choose to return a `\fIResult\fR` value, yougive the calling code options rather than making the decision for it\. Thecalling code could choose to attempt to recover in a way that’s appropriate forits situation, or it could decide that an `\fIErr\fR` value in this case isunrecoverable, so it can call `\fIpanic!\fR` and turn your recoverable error into anunrecoverable one\. Therefore, returning `\fIResult\fR` is a good default choice whenyou’re defining a function that might fail\.
.P
In rare situations, it’s more appropriate to write code that panics instead ofreturning a `\fIResult\fR`\. Let’s explore why it’s appropriate to panic in examples,prototype code, and tests\. Then we’ll discuss situations in which the compilercan’t tell that failure is impossible, but you as a human can\. The chapter willconclude with some general guidelines on how to decide whether to panic inlibrary code\.
.br

.br
\fBExamples, Prototype Code, and Tests\fR
.br
=====================================
.br

.P
When you’re writing an example to illustrate some concept, having robusterror\-handling code in the example as well can make the example less clear\. Inexamples, it’s understood that a call to a method like `\fIunwrap\fR` that couldpanic is meant as a placeholder for the way you’d want your application tohandle errors, which can differ based on what the rest of your code is doing\.
.P
Similarly, the `\fIunwrap\fR` and `\fIexpect\fR` methods are very handy when prototyping,before you’re ready to decide how to handle errors\. They leave clear markers inyour code for when you’re ready to make your program more robust\.
.P
If a method call fails in a test, you’d want the whole test to fail, even ifthat method isn’t the functionality under test\. Because `\fIpanic!\fR` is how a testis marked as a failure, calling `\fIunwrap\fR` or `\fIexpect\fR` is exactly what shouldhappen\.
.br

.br
\fBCases in Which You Have More Information Than the Compiler\fR
.br
============================================================
.br

.P
It would also be appropriate to call `\fIunwrap\fR` when you have some other logicthat ensures the `\fIResult\fR` will have an `\fIOk\fR` value, but the logic isn’tsomething the compiler understands\. You’ll still have a `\fIResult\fR` value that youneed to handle: whatever operation you’re calling still has the possibility offailing in general, even though it’s logically impossible in your particularsituation\. If you can ensure by manually inspecting the code that you’ll neverhave an `\fIErr\fR` variant, it’s perfectly acceptable to call `\fIunwrap\fR`\. Here’s anexample:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::net::IpAddr;

    let home: IpAddr = "127\.0\.0\.1"\.parse()\.unwrap();
# }

.EE

.RE
.P
We’re creating an `\fIIpAddr\fR` instance by parsing a hardcoded string\. We can seethat `\fI127\.0\.0\.1\fR` is a valid IP address, so it’s acceptable to use `\fIunwrap\fR`here\. However, having a hardcoded, valid string doesn’t change the return typeof the `\fIparse\fR` method: we still get a `\fIResult\fR` value, and the compiler willstill make us handle the `\fIResult\fR` as if the `\fIErr\fR` variant is a possibilitybecause the compiler isn’t smart enough to see that this string is always avalid IP address\. If the IP address string came from a user rather than beinghardcoded into the program and therefore \fIdid\fR have a possibility of failure,we’d definitely want to handle the `\fIResult\fR` in a more robust way instead\.
.br

.br
\fBGuidelines for Error Handling\fR
.br
===============================
.br

.P
It’s advisable to have your code panic when it’s possible that your codecould end up in a bad state\. In this context, a \fIbad state\fR is when someassumption, guarantee, contract, or invariant has been broken, such as wheninvalid values, contradictory values, or missing values are passed to yourcode—plus one or more of the following:
.P
The bad state is not something that’s \fIexpected\fR to happen occasionally\.
.P
Your code after this point needs to rely on not being in this bad state\.
.P
There’s not a good way to encode this information in the types you use\.
.P
If someone calls your code and passes in values that don’t make sense, the bestchoice might be to call `\fIpanic!\fR` and alert the person using your library to thebug in their code so they can fix it during development\. Similarly, `\fIpanic!\fR` isoften appropriate if you’re calling external code that is out of your controland it returns an invalid state that you have no way of fixing\.
.P
However, when failure is expected, it’s more appropriate to return a `\fIResult\fR`than to make a `\fIpanic!\fR` call\. Examples include a parser being given malformeddata or an HTTP request returning a status that indicates you have hit a ratelimit\. In these cases, returning a `\fIResult\fR` indicates that failure is anexpected possibility that the calling code must decide how to handle\.
.P
When your code performs operations on values, your code should verify thevalues are valid first and panic if the values aren’t valid\. This is mostly forsafety reasons: attempting to operate on invalid data can expose your code tovulnerabilities\. This is the main reason the standard library will call`\fIpanic!\fR` if you attempt an out\-of\-bounds memory access: trying to access memorythat doesn’t belong to the current data structure is a common security problem\.Functions often have \fIcontracts\fR: their behavior is only guaranteed if theinputs meet particular requirements\. Panicking when the contract is violatedmakes sense because a contract violation always indicates a caller\-side bug andit’s not a kind of error you want the calling code to have to explicitlyhandle\. In fact, there’s no reasonable way for calling code to recover; thecalling \fIprogrammers\fR need to fix the code\. Contracts for a function,especially when a violation will cause a panic, should be explained in the APIdocumentation for the function\.
.P
However, having lots of error checks in all of your functions would be verboseand annoying\. Fortunately, you can use Rust’s type system (and thus the typechecking the compiler does) to do many of the checks for you\. If your functionhas a particular type as a parameter, you can proceed with your code’s logicknowing that the compiler has already ensured you have a valid value\. Forexample, if you have a type rather than an `\fIOption\fR`, your program expects tohave \fIsomething\fR rather than \fInothing\fR\. Your code then doesn’t have to handletwo cases for the `\fISome\fR` and `\fINone\fR` variants: it will only have one case fordefinitely having a value\. Code trying to pass nothing to your function won’teven compile, so your function doesn’t have to check for that case at runtime\.Another example is using an unsigned integer type such as `\fIu32\fR`, which ensuresthe parameter is never negative\.
.br

.br
\fBCreating Custom Types for Validation\fR
.br
======================================
.br

.P
Let’s take the idea of using Rust’s type system to ensure we have a valid valueone step further and look at creating a custom type for validation\. Recall theguessing game in Chapter 2 in which our code asked the user to guess a numberbetween 1 and 100\. We never validated that the user’s guess was between thosenumbers before checking it against our secret number; we only validated thatthe guess was positive\. In this case, the consequences were not very dire: ouroutput of “Too high” or “Too low” would still be correct\. But it would be auseful enhancement to guide the user toward valid guesses and have differentbehavior when a user guesses a number that’s out of range versus when a usertypes, for example, letters instead\.
.P
One way to do this would be to parse the guess as an `\fIi32\fR` instead of only a`\fIu32\fR` to allow potentially negative numbers, and then add a check for thenumber being in range, like so:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
    loop {
        // \-\-snip\-\-

#         println!("Please input your guess\.");
# 
#         let mut guess = String::new();
# 
#         io::stdin()
#             \.read_line(&mut guess)
#             \.expect("Failed to read line");
# 
        let guess: i32 = match guess\.trim()\.parse() {
            Ok(num) => num,
            Err(_) => continue,
        };

        if guess < 1 || guess > 100 {
            println!("The secret number will be between 1 and 100\.");
            continue;
        }

        match guess\.cmp(&secret_number) {
            // \-\-snip\-\-
#             Ordering::Less => println!("Too small!"),
#             Ordering::Greater => println!("Too big!"),
#             Ordering::Equal => {
#                 println!("You win!");
#                 break;
#             }
#         }
    }
# }

.EE

.RE
.P
The `\fIif\fR` expression checks whether our value is out of range, tells the userabout the problem, and calls `\fIcontinue\fR` to start the next iteration of the loopand ask for another guess\. After the `\fIif\fR` expression, we can proceed with thecomparisons between `\fIguess\fR` and the secret number knowing that `\fIguess\fR` isbetween 1 and 100\.
.P
However, this is not an ideal solution: if it was absolutely critical that theprogram only operated on values between 1 and 100, and it had many functionswith this requirement, having a check like this in every function would betedious (and might impact performance)\.
.P
Instead, we can make a new type and put the validations in a function to createan instance of the type rather than repeating the validations everywhere\. Thatway, it’s safe for functions to use the new type in their signatures andconfidently use the values they receive\. Listing 9\-10 shows one way to define a`\fIGuess\fR` type that will only create an instance of `\fIGuess\fR` if the `\fInew\fR` functionreceives a value between 1 and 100\.
.RS
.IP \fBrust\fR 2

.br
.EX
pub struct Guess {
    value: i32,
}

impl Guess {
    pub fn new(value: i32) \-> Guess {
        if value < 1 || value > 100 {
            panic!("Guess value must be between 1 and 100, got {}\.", value);
        }

        Guess { value }
    }

    pub fn value(&self) \-> i32 {
        self\.value
    }
}

.EE

.RE
Listing 9\-10: A `\fIGuess\fR` type that will only continue withvalues between 1 and 100
.P
First, we define a struct named `\fIGuess\fR` that has a field named `\fIvalue\fR` thatholds an `\fIi32\fR`\. This is where the number will be stored\.
.P
Then we implement an associated function named `\fInew\fR` on `\fIGuess\fR` that createsinstances of `\fIGuess\fR` values\. The `\fInew\fR` function is defined to have oneparameter named `\fIvalue\fR` of type `\fIi32\fR` and to return a `\fIGuess\fR`\. The code in thebody of the `\fInew\fR` function tests `\fIvalue\fR` to make sure it’s between 1 and 100\.If `\fIvalue\fR` doesn’t pass this test, we make a `\fIpanic!\fR` call, which will alertthe programmer who is writing the calling code that they have a bug they needto fix, because creating a `\fIGuess\fR` with a `\fIvalue\fR` outside this range wouldviolate the contract that `\fIGuess::new\fR` is relying on\. The conditions in which`\fIGuess::new\fR` might panic should be discussed in its public\-facing APIdocumentation; we’ll cover documentation conventions indicating the possibilityof a `\fIpanic!\fR` in the API documentation that you create in Chapter 14\. If`\fIvalue\fR` does pass the test, we create a new `\fIGuess\fR` with its `\fIvalue\fR` field setto the `\fIvalue\fR` parameter and return the `\fIGuess\fR`\.
.P
Next, we implement a method named `\fIvalue\fR` that borrows `\fIself\fR`, doesn’t have anyother parameters, and returns an `\fIi32\fR`\. This kind of method is sometimes calleda \fIgetter\fR, because its purpose is to get some data from its fields and returnit\. This public method is necessary because the `\fIvalue\fR` field of the `\fIGuess\fR`struct is private\. It’s important that the `\fIvalue\fR` field be private so codeusing the `\fIGuess\fR` struct is not allowed to set `\fIvalue\fR` directly: code outsidethe module \fImust\fR use the `\fIGuess::new\fR` function to create an instance of`\fIGuess\fR`, thereby ensuring there’s no way for a `\fIGuess\fR` to have a `\fIvalue\fR` thathasn’t been checked by the conditions in the `\fIGuess::new\fR` function\.
.P
A function that has a parameter or returns only numbers between 1 and 100 couldthen declare in its signature that it takes or returns a `\fIGuess\fR` rather than an`\fIi32\fR` and wouldn’t need to do any additional checks in its body\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Rust’s error handling features are designed to help you write more robust code\.The `\fIpanic!\fR` macro signals that your program is in a state it can’t handle andlets you tell the process to stop instead of trying to proceed with invalid orincorrect values\. The `\fIResult\fR` enum uses Rust’s type system to indicate thatoperations might fail in a way that your code could recover from\. You can use`\fIResult\fR` to tell code that calls your code that it needs to handle potentialsuccess or failure as well\. Using `\fIpanic!\fR` and `\fIResult\fR` in the appropriatesituations will make your code more reliable in the face of inevitable problems\.
.P
Now that you’ve seen useful ways that the standard library uses generics withthe `\fIOption\fR` and `\fIResult\fR` enums, we’ll talk about how generics work and how youcan use them in your code\.
.SH "Generic Types, Traits, and Lifetimes"

.br

.br
\fBGeneric Types, Traits, and Lifetimes\fR
.br
======================================
.br

.P
Every programming language has tools for effectively handling the duplicationof concepts\. In Rust, one such tool is \fIgenerics\fR\. Generics are abstractstand\-ins for concrete types or other properties\. When we’re writing code, wecan express the behavior of generics or how they relate to other genericswithout knowing what will be in their place when compiling and running the code\.
.P
Similar to the way a function takes parameters with unknown values to run thesame code on multiple concrete values, functions can take parameters of somegeneric type instead of a concrete type, like `\fIi32\fR` or `\fIString\fR`\. In fact, we’vealready used generics in Chapter 6 with `\fIOption<T>\fR`, Chapter 8 with `\fIVec<T>\fR`and `\fIHashMap<K, V>\fR`, and Chapter 9 with `\fIResult<T, E>\fR`\. In this chapter, you’llexplore how to define your own types, functions, and methods with generics!
.P
First, we’ll review how to extract a function to reduce code duplication\. Next,we’ll use the same technique to make a generic function from two functions thatdiffer only in the types of their parameters\. We’ll also explain how to usegeneric types in struct and enum definitions\.
.P
Then you’ll learn how to use \fItraits\fR to define behavior in a generic way\. Youcan combine traits with generic types to constrain a generic type to onlythose types that have a particular behavior, as opposed to just any type\.
.P
Finally, we’ll discuss \fIlifetimes\fR, a variety of generics that give thecompiler information about how references relate to each other\. Lifetimes allowus to borrow values in many situations while still enabling the compiler tocheck that the references are valid\.
.br

.br
\fBRemoving Duplication by Extracting a Function\fR
.br
===============================================
.br

.P
Before diving into generics syntax, let’s first look at how to removeduplication that doesn’t involve generic types by extracting a function\. Thenwe’ll apply this technique to extract a generic function! In the same way thatyou recognize duplicated code to extract into a function, you’ll start torecognize duplicated code that can use generics\.
.P
Consider a short program that finds the largest number in a list, as shown inListing 10\-1\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let mut largest = number_list[0];

    for number in number_list {
        if number > largest {
            largest = number;
        }
    }

    println!("The largest number is {}", largest);
#     assert_eq!(largest, 100);
}

.EE

.RE
Listing 10\-1: Code to find the largest number in a listof numbers
.P
This code stores a list of integers in the variable `\fInumber_list\fR` and placesthe first number in the list in a variable named `\fIlargest\fR`\. Then it iteratesthrough all the numbers in the list, and if the current number is greater thanthe number stored in `\fIlargest\fR`, it replaces the number in that variable\.However, if the current number is less than or equal to the largest number seenso far, the variable doesn’t change, and the code moves on to the next numberin the list\. After considering all the numbers in the list, `\fIlargest\fR` shouldhold the largest number, which in this case is 100\.
.P
To find the largest number in two different lists of numbers, we can duplicatethe code in Listing 10\-1 and use the same logic at two different places in theprogram, as shown in Listing 10\-2\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let mut largest = number_list[0];

    for number in number_list {
        if number > largest {
            largest = number;
        }
    }

    println!("The largest number is {}", largest);

    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];

    let mut largest = number_list[0];

    for number in number_list {
        if number > largest {
            largest = number;
        }
    }

    println!("The largest number is {}", largest);
}

.EE

.RE
Listing 10\-2: Code to find the largest number in \fItwo\fRlists of numbers
.P
Although this code works, duplicating code is tedious and error prone\. We alsohave to update the code in multiple places when we want to change it\.
.P
To eliminate this duplication, we can create an abstraction by defining afunction that operates on any list of integers given to it in a parameter\. Thissolution makes our code clearer and lets us express the concept of finding thelargest number in a list abstractly\.
.P
In Listing 10\-3, we extracted the code that finds the largest number into afunction named `\fIlargest\fR`\. Unlike the code in Listing 10\-1, which can find thelargest number in only one particular list, this program can find the largestnumber in two different lists\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn largest(list: &[i32]) \-> i32 {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);
#     assert_eq!(result, 100);

    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];

    let result = largest(&number_list);
    println!("The largest number is {}", result);
#     assert_eq!(result, 6000);
}

.EE

.RE
Listing 10\-3: Abstracted code to find the largest numberin two lists
.P
The `\fIlargest\fR` function has a parameter called `\fIlist\fR`, which represents anyconcrete slice of `\fIi32\fR` values that we might pass into the function\. As aresult, when we call the function, the code runs on the specific values that wepass in\. Don't worry about the syntax of the `\fIfor\fR` loop for now\. We aren'treferencing a reference to an `\fIi32\fR` here; we're pattern matching anddestructuring each `\fI&i32\fR` that the `\fIfor\fR` loop gets so that `\fIitem\fR` will be an`\fIi32\fR` inside the loop body\. We'll cover pattern matching in detail in 
.UR ch18\-00\-patterns\.html
.UE
Chapter18\.
.P
In sum, here are the steps we took to change the code from Listing 10\-2 toListing 10\-3:
.P
Identify duplicate code\.
.P
Extract the duplicate code into the body of the function and specify theinputs and return values of that code in the function signature\.
.P
Update the two instances of duplicated code to call the function instead\.
.P
Next, we’ll use these same steps with generics to reduce code duplication indifferent ways\. In the same way that the function body can operate on anabstract `\fIlist\fR` instead of specific values, generics allow code to operate onabstract types\.
.P
For example, say we had two functions: one that finds the largest item in aslice of `\fIi32\fR` values and one that finds the largest item in a slice of `\fIchar\fR`values\. How would we eliminate that duplication? Let’s find out!
.SH "Generic Data Types"

.br

.br
\fBGeneric Data Types\fR
.br
====================
.br

.P
We can use generics to create definitions for items like function signatures orstructs, which we can then use with many different concrete data types\. Let’sfirst look at how to define functions, structs, enums, and methods usinggenerics\. Then we’ll discuss how generics affect code performance\.
.br

.br
\fBIn Function Definitions\fR
.br
=========================
.br

.P
When defining a function that uses generics, we place the generics in thesignature of the function where we would usually specify the data types of theparameters and return value\. Doing so makes our code more flexible and providesmore functionality to callers of our function while preventing code duplication\.
.P
Continuing with our `\fIlargest\fR` function, Listing 10\-4 shows two functions thatboth find the largest value in a slice\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn largest_i32(list: &[i32]) \-> i32 {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn largest_char(list: &[char]) \-> char {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest_i32(&number_list);
    println!("The largest number is {}", result);
#     assert_eq!(result, 100);

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest_char(&char_list);
    println!("The largest char is {}", result);
#     assert_eq!(result, 'y');
}

.EE

.RE
Listing 10\-4: Two functions that differ only in theirnames and the types in their signatures
.P
The `\fIlargest_i32\fR` function is the one we extracted in Listing 10\-3 that findsthe largest `\fIi32\fR` in a slice\. The `\fIlargest_char\fR` function finds the largest`\fIchar\fR` in a slice\. The function bodies have the same code, so let’s eliminatethe duplication by introducing a generic type parameter in a single function\.
.P
To parameterize the types in the new function we’ll define, we need to name thetype parameter, just as we do for the value parameters to a function\. You canuse any identifier as a type parameter name\. But we’ll use `\fIT\fR` because, byconvention, parameter names in Rust are short, often just a letter, and Rust’stype\-naming convention is CamelCase\. Short for “type,” `\fIT\fR` is the defaultchoice of most Rust programmers\.
.P
When we use a parameter in the body of the function, we have to declare theparameter name in the signature so the compiler knows what that name means\.Similarly, when we use a type parameter name in a function signature, we haveto declare the type parameter name before we use it\. To define the generic`\fIlargest\fR` function, place type name declarations inside angle brackets, `\fI<>\fR`,between the name of the function and the parameter list, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn largest<T>(list: &[T]) \-> T {

.EE

.RE
.P
We read this definition as: the function `\fIlargest\fR` is generic over some type`\fIT\fR`\. This function has one parameter named `\fIlist\fR`, which is a slice of valuesof type `\fIT\fR`\. The `\fIlargest\fR` function will return a value of thesame type `\fIT\fR`\.
.P
Listing 10\-5 shows the combined `\fIlargest\fR` function definition using the genericdata type in its signature\. The listing also shows how we can call the functionwith either a slice of `\fIi32\fR` values or `\fIchar\fR` values\. Note that this code won’tcompile yet, but we’ll fix it later in this chapter\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn largest<T>(list: &[T]) \-> T {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest(&char_list);
    println!("The largest char is {}", result);
}

.EE

.RE
Listing 10\-5: A definition of the `\fIlargest\fR` function thatuses generic type parameters but doesn’t compile yet
.P
If we compile this code right now, we’ll get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0369]: binary operation `>` cannot be applied to type `T`
 \-\-> src/main\.rs:5:17
  |
5 |         if item > largest {
  |            \-\-\-\- ^ \-\-\-\-\-\-\- T
  |            |
  |            T
  |
help: consider restricting type parameter `T`
  |
1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) \-> T {
  |             ^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0369`\.
error: could not compile `chapter10`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The note mentions `\fIstd::cmp::PartialOrd\fR`, which is a \fItrait\fR\. We’ll talk abouttraits in the next section\. For now, this error states that the body of`\fIlargest\fR` won’t work for all possible types that `\fIT\fR` could be\. Because we wantto compare values of type `\fIT\fR` in the body, we can only use types whose valuescan be ordered\. To enable comparisons, the standard library has the`\fIstd::cmp::PartialOrd\fR` trait that you can implement on types (see Appendix Cfor more on this trait)\. You’ll learn how to specify that a generic type has aparticular trait in the 
.UR ch10\-02\-traits\.html#traits\-as\-parameters
.UE
“Traits as Parameters” section, but let’s first explore other ways of using generic typeparameters\.
.br

.br
\fBIn Struct Definitions\fR
.br
=======================
.br

.P
We can also define structs to use a generic type parameter in one or morefields using the `\fI<>\fR` syntax\. Listing 10\-6 shows how to define a `\fIPoint<T>\fR`struct to hold `\fIx\fR` and `\fIy\fR` coordinate values of any type\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let integer = Point { x: 5, y: 10 };
    let float = Point { x: 1\.0, y: 4\.0 };
}

.EE

.RE
Listing 10\-6: A `\fIPoint<T>\fR` struct that holds `\fIx\fR` and `\fIy\fR`values of type `\fIT\fR`
.P
The syntax for using generics in struct definitions is similar to that used infunction definitions\. First, we declare the name of the type parameter insideangle brackets just after the name of the struct\. Then we can use the generictype in the struct definition where we would otherwise specify concrete datatypes\.
.P
Note that because we’ve used only one generic type to define `\fIPoint<T>\fR`, thisdefinition says that the `\fIPoint<T>\fR` struct is generic over some type `\fIT\fR`, andthe fields `\fIx\fR` and `\fIy\fR` are \fIboth\fR that same type, whatever that type may be\. Ifwe create an instance of a `\fIPoint<T>\fR` that has values of different types, as inListing 10\-7, our code won’t compile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
struct Point<T> {
    x: T,
    y: T,
}

fn main() {
    let wont_work = Point { x: 5, y: 4\.0 };
}

.EE

.RE
Listing 10\-7: The fields `\fIx\fR` and `\fIy\fR` must be the sametype because both have the same generic data type `\fIT\fR`\.
.P
In this example, when we assign the integer value 5 to `\fIx\fR`, we let thecompiler know that the generic type `\fIT\fR` will be an integer for this instance of`\fIPoint<T>\fR`\. Then when we specify 4\.0 for `\fIy\fR`, which we’ve defined to have thesame type as `\fIx\fR`, we’ll get a type mismatch error like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0308]: mismatched types
 \-\-> src/main\.rs:7:38
  |
7 |     let wont_work = Point { x: 5, y: 4\.0 };
  |                                      ^^^ expected integer, found floating\-point number

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `chapter10`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
To define a `\fIPoint\fR` struct where `\fIx\fR` and `\fIy\fR` are both generics but could havedifferent types, we can use multiple generic type parameters\. For example, inListing 10\-8, we can change the definition of `\fIPoint\fR` to be generic over types`\fIT\fR` and `\fIU\fR` where `\fIx\fR` is of type `\fIT\fR` and `\fIy\fR` is of type `\fIU\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point<T, U> {
    x: T,
    y: U,
}

fn main() {
    let both_integer = Point { x: 5, y: 10 };
    let both_float = Point { x: 1\.0, y: 4\.0 };
    let integer_and_float = Point { x: 5, y: 4\.0 };
}

.EE

.RE
Listing 10\-8: A `\fIPoint<T, U>\fR` generic over two types sothat `\fIx\fR` and `\fIy\fR` can be values of different types
.P
Now all the instances of `\fIPoint\fR` shown are allowed! You can use as many generictype parameters in a definition as you want, but using more than a few makesyour code hard to read\. When you need lots of generic types in your code, itcould indicate that your code needs restructuring into smaller pieces\.
.br

.br
\fBIn Enum Definitions\fR
.br
=====================
.br

.P
As we did with structs, we can define enums to hold generic data types in theirvariants\. Let’s take another look at the `\fIOption<T>\fR` enum that the standardlibrary provides, which we used in Chapter 6:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Option<T> {
    Some(T),
    None,
}

.EE

.RE
.P
This definition should now make more sense to you\. As you can see, `\fIOption<T>\fR`is an enum that is generic over type `\fIT\fR` and has two variants: `\fISome\fR`, whichholds one value of type `\fIT\fR`, and a `\fINone\fR` variant that doesn’t hold any value\.By using the `\fIOption<T>\fR` enum, we can express the abstract concept of having anoptional value, and because `\fIOption<T>\fR` is generic, we can use this abstractionno matter what the type of the optional value is\.
.P
Enums can use multiple generic types as well\. The definition of the `\fIResult\fR`enum that we used in Chapter 9 is one example:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Result<T, E> {
    Ok(T),
    Err(E),
}

.EE

.RE
.P
The `\fIResult\fR` enum is generic over two types, `\fIT\fR` and `\fIE\fR`, and has two variants:`\fIOk\fR`, which holds a value of type `\fIT\fR`, and `\fIErr\fR`, which holds a value of type`\fIE\fR`\. This definition makes it convenient to use the `\fIResult\fR` enum anywhere wehave an operation that might succeed (return a value of some type `\fIT\fR`) or fail(return an error of some type `\fIE\fR`)\. In fact, this is what we used to open afile in Listing 9\-3, where `\fIT\fR` was filled in with the type `\fIstd::fs::File\fR` whenthe file was opened successfully and `\fIE\fR` was filled in with the type`\fIstd::io::Error\fR` when there were problems opening the file\.
.P
When you recognize situations in your code with multiple struct or enumdefinitions that differ only in the types of the values they hold, you canavoid duplication by using generic types instead\.
.br

.br
\fBIn Method Definitions\fR
.br
=======================
.br

.P
We can implement methods on structs and enums (as we did in Chapter 5) and usegeneric types in their definitions, too\. Listing 10\-9 shows the `\fIPoint<T>\fR`struct we defined in Listing 10\-6 with a method named `\fIx\fR` implemented on it\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point<T> {
    x: T,
    y: T,
}

impl<T> Point<T> {
    fn x(&self) \-> &T {
        &self\.x
    }
}

fn main() {
    let p = Point { x: 5, y: 10 };

    println!("p\.x = {}", p\.x());
}

.EE

.RE
Listing 10\-9: Implementing a method named `\fIx\fR` on the`\fIPoint<T>\fR` struct that will return a reference to the `\fIx\fR` field of type`\fIT\fR`
.P
Here, we’ve defined a method named `\fIx\fR` on `\fIPoint<T>\fR` that returns a referenceto the data in the field `\fIx\fR`\.
.P
Note that we have to declare `\fIT\fR` just after `\fIimpl\fR` so we can use it to specifythat we’re implementing methods on the type `\fIPoint<T>\fR`\.  By declaring `\fIT\fR` as ageneric type after `\fIimpl\fR`, Rust can identify that the type in the anglebrackets in `\fIPoint\fR` is a generic type rather than a concrete type\.
.P
We could, for example, implement methods only on `\fIPoint<f32>\fR` instances ratherthan on `\fIPoint<T>\fR` instances with any generic type\. In Listing 10\-10 we use theconcrete type `\fIf32\fR`, meaning we don’t declare any types after `\fIimpl\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# struct Point<T> {
#     x: T,
#     y: T,
# }
# 
# impl<T> Point<T> {
#     fn x(&self) \-> &T {
#         &self\.x
#     }
# }
# 
impl Point<f32> {
    fn distance_from_origin(&self) \-> f32 {
        (self\.x\.powi(2) + self\.y\.powi(2))\.sqrt()
    }
}
# 
# fn main() {
#     let p = Point { x: 5, y: 10 };
# 
#     println!("p\.x = {}", p\.x());
# }

.EE

.RE
Listing 10\-10: An `\fIimpl\fR` block that only applies to astruct with a particular concrete type for the generic type parameter `\fIT\fR`
.P
This code means the type `\fIPoint<f32>\fR` will have a method named`\fIdistance_from_origin\fR` and other instances of `\fIPoint<T>\fR` where `\fIT\fR` is not oftype `\fIf32\fR` will not have this method defined\. The method measures how far ourpoint is from the point at coordinates (0\.0, 0\.0) and uses mathematicaloperations that are available only for floating point types\.
.P
Generic type parameters in a struct definition aren’t always the same as thoseyou use in that struct’s method signatures\. For example, Listing 10\-11 definesthe method `\fImixup\fR` on the `\fIPoint<T, U>\fR` struct from Listing 10\-8\. The methodtakes another `\fIPoint\fR` as a parameter, which might have different types from the`\fIself\fR` `\fIPoint\fR` we’re calling `\fImixup\fR` on\. The method creates a new `\fIPoint\fR`instance with the `\fIx\fR` value from the `\fIself\fR` `\fIPoint\fR` (of type `\fIT\fR`) and the `\fIy\fR`value from the passed\-in `\fIPoint\fR` (of type `\fIW\fR`)\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point<T, U> {
    x: T,
    y: U,
}

impl<T, U> Point<T, U> {
    fn mixup<V, W>(self, other: Point<V, W>) \-> Point<T, W> {
        Point {
            x: self\.x,
            y: other\.y,
        }
    }
}

fn main() {
    let p1 = Point { x: 5, y: 10\.4 };
    let p2 = Point { x: "Hello", y: 'c' };

    let p3 = p1\.mixup(p2);

    println!("p3\.x = {}, p3\.y = {}", p3\.x, p3\.y);
}

.EE

.RE
Listing 10\-11: A method that uses different generic typesfrom its struct’s definition
.P
In `\fImain\fR`, we’ve defined a `\fIPoint\fR` that has an `\fIi32\fR` for `\fIx\fR` (with value `\fI5\fR`)and an `\fIf64\fR` for `\fIy\fR` (with value `\fI10\.4\fR`)\. The `\fIp2\fR` variable is a `\fIPoint\fR` structthat has a string slice for `\fIx\fR` (with value `\fI"Hello"\fR`) and a `\fIchar\fR` for `\fIy\fR`(with value `\fIc\fR`)\. Calling `\fImixup\fR` on `\fIp1\fR` with the argument `\fIp2\fR` gives us `\fIp3\fR`,which will have an `\fIi32\fR` for `\fIx\fR`, because `\fIx\fR` came from `\fIp1\fR`\. The `\fIp3\fR` variablewill have a `\fIchar\fR` for `\fIy\fR`, because `\fIy\fR` came from `\fIp2\fR`\. The `\fIprintln!\fR` macrocall will print `\fIp3\.x = 5, p3\.y = c\fR`\.
.P
The purpose of this example is to demonstrate a situation in which some genericparameters are declared with `\fIimpl\fR` and some are declared with the methoddefinition\. Here, the generic parameters `\fIT\fR` and `\fIU\fR` are declared after `\fIimpl\fR`,because they go with the struct definition\. The generic parameters `\fIV\fR` and `\fIW\fR`are declared after `\fIfn mixup\fR`, because they’re only relevant to the method\.
.br

.br
\fBPerformance of Code Using Generics\fR
.br
====================================
.br

.P
You might be wondering whether there is a runtime cost when you’re usinggeneric type parameters\. The good news is that Rust implements generics in sucha way that your code doesn’t run any slower using generic types than it wouldwith concrete types\.
.P
Rust accomplishes this by performing monomorphization of the code that is usinggenerics at compile time\. \fIMonomorphization\fR is the process of turning genericcode into specific code by filling in the concrete types that are used whencompiled\.
.P
In this process, the compiler does the opposite of the steps we used to createthe generic function in Listing 10\-5: the compiler looks at all the placeswhere generic code is called and generates code for the concrete types thegeneric code is called with\.
.P
Let’s look at how this works with an example that uses the standard library’s`\fIOption<T>\fR` enum:
.RS
.IP \fBrust\fR 2

.br
.EX
let integer = Some(5);
let float = Some(5\.0);

.EE

.RE
.P
When Rust compiles this code, it performs monomorphization\. During thatprocess, the compiler reads the values that have been used in `\fIOption<T>\fR`instances and identifies two kinds of `\fIOption<T>\fR`: one is `\fIi32\fR` and the otheris `\fIf64\fR`\. As such, it expands the generic definition of `\fIOption<T>\fR` into`\fIOption_i32\fR` and `\fIOption_f64\fR`, thereby replacing the generic definition withthe specific ones\.
.P
The monomorphized version of the code looks like the following\. The generic`\fIOption<T>\fR` is replaced with the specific definitions created by the compiler:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
enum Option_i32 {
    Some(i32),
    None,
}

enum Option_f64 {
    Some(f64),
    None,
}

fn main() {
    let integer = Option_i32::Some(5);
    let float = Option_f64::Some(5\.0);
}

.EE

.RE
.P
Because Rust compiles generic code into code that specifies the type in eachinstance, we pay no runtime cost for using generics\. When the code runs, itperforms just as it would if we had duplicated each definition by hand\. Theprocess of monomorphization makes Rust’s generics extremely efficient atruntime\.
.SH "Traits: Defining Shared Behavior"

.br

.br
\fBTraits: Defining Shared Behavior\fR
.br
==================================
.br

.P
A \fItrait\fR tells the Rust compiler about functionality a particular type has andcan share with other types\. We can use traits to define shared behavior in anabstract way\. We can use trait bounds to specify that a generic type can be anytype that has certain behavior\.
.P
Note: Traits are similar to a feature often called \fIinterfaces\fR in otherlanguages, although with some differences\.
.br

.br
\fBDefining a Trait\fR
.br
==================
.br

.P
A type’s behavior consists of the methods we can call on that type\. Differenttypes share the same behavior if we can call the same methods on all of thosetypes\. Trait definitions are a way to group method signatures together todefine a set of behaviors necessary to accomplish some purpose\.
.P
For example, let’s say we have multiple structs that hold various kinds andamounts of text: a `\fINewsArticle\fR` struct that holds a news story filed in aparticular location and a `\fITweet\fR` that can have at most 280 characters alongwith metadata that indicates whether it was a new tweet, a retweet, or a replyto another tweet\.
.P
We want to make a media aggregator library that can display summaries of datathat might be stored in a `\fINewsArticle\fR` or `\fITweet\fR` instance\. To do this, weneed a summary from each type, and we need to request that summary by calling a`\fIsummarize\fR` method on an instance\. Listing 10\-12 shows the definition of a`\fISummary\fR` trait that expresses this behavior\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Summary {
    fn summarize(&self) \-> String;
}

.EE

.RE
Listing 10\-12: A `\fISummary\fR` trait that consists of thebehavior provided by a `\fIsummarize\fR` method
.P
Here, we declare a trait using the `\fItrait\fR` keyword and then the trait’s name,which is `\fISummary\fR` in this case\. Inside the curly brackets, we declare themethod signatures that describe the behaviors of the types that implement thistrait, which in this case is `\fIfn summarize(&self) \-> String\fR`\.
.P
After the method signature, instead of providing an implementation within curlybrackets, we use a semicolon\. Each type implementing this trait must provideits own custom behavior for the body of the method\. The compiler will enforcethat any type that has the `\fISummary\fR` trait will have the method `\fIsummarize\fR`defined with this signature exactly\.
.P
A trait can have multiple methods in its body: the method signatures are listedone per line and each line ends in a semicolon\.
.br

.br
\fBImplementing a Trait on a Type\fR
.br
================================
.br

.P
Now that we’ve defined the desired behavior using the `\fISummary\fR` trait, we canimplement it on the types in our media aggregator\. Listing 10\-13 shows animplementation of the `\fISummary\fR` trait on the `\fINewsArticle\fR` struct that uses theheadline, the author, and the location to create the return value of`\fIsummarize\fR`\. For the `\fITweet\fR` struct, we define `\fIsummarize\fR` as the usernamefollowed by the entire text of the tweet, assuming that tweet content isalready limited to 280 characters\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize(&self) \-> String;
# }
# 
pub struct NewsArticle {
    pub headline: String,
    pub location: String,
    pub author: String,
    pub content: String,
}

impl Summary for NewsArticle {
    fn summarize(&self) \-> String {
        format!("{}, by {} ({})", self\.headline, self\.author, self\.location)
    }
}

pub struct Tweet {
    pub username: String,
    pub content: String,
    pub reply: bool,
    pub retweet: bool,
}

impl Summary for Tweet {
    fn summarize(&self) \-> String {
        format!("{}: {}", self\.username, self\.content)
    }
}

.EE

.RE
Listing 10\-13: Implementing the `\fISummary\fR` trait on the`\fINewsArticle\fR` and `\fITweet\fR` types
.P
Implementing a trait on a type is similar to implementing regular methods\. Thedifference is that after `\fIimpl\fR`, we put the trait name that we want toimplement, then use the `\fIfor\fR` keyword, and then specify the name of the type wewant to implement the trait for\. Within the `\fIimpl\fR` block, we put the methodsignatures that the trait definition has defined\. Instead of adding a semicolonafter each signature, we use curly brackets and fill in the method body withthe specific behavior that we want the methods of the trait to have for theparticular type\.
.P
After implementing the trait, we can call the methods on instances of`\fINewsArticle\fR` and `\fITweet\fR` in the same way we call regular methods, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use chapter10::{self, Summary, Tweet};
# 
# fn main() {
    let tweet = Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    };

    println!("1 new tweet: {}", tweet\.summarize());
# }

.EE

.RE
.P
This code prints `\fI1 new tweet: horse_ebooks: of course, as you probably already know, people\fR`\.
.P
Note that because we defined the `\fISummary\fR` trait and the `\fINewsArticle\fR` and`\fITweet\fR` types in the same \fIlib\.rs\fR in Listing 10\-13, they’re all in the samescope\. Let’s say this \fIlib\.rs\fR is for a crate we’ve called `\fIaggregator\fR` andsomeone else wants to use our crate’s functionality to implement the `\fISummary\fR`trait on a struct defined within their library’s scope\. They would need tobring the trait into their scope first\. They would do so by specifying `\fIuse aggregator::Summary;\fR`, which then would enable them to implement `\fISummary\fR` fortheir type\. The `\fISummary\fR` trait would also need to be a public trait foranother crate to implement it, which it is because we put the `\fIpub\fR` keywordbefore `\fItrait\fR` in Listing 10\-12\.
.P
One restriction to note with trait implementations is that we can implement atrait on a type only if either the trait or the type is local to our crate\.For example, we can implement standard library traits like `\fIDisplay\fR` on acustom type like `\fITweet\fR` as part of our `\fIaggregator\fR` crate functionality,because the type `\fITweet\fR` is local to our `\fIaggregator\fR` crate\. We can alsoimplement `\fISummary\fR` on `\fIVec<T>\fR` in our `\fIaggregator\fR` crate, because thetrait `\fISummary\fR` is local to our `\fIaggregator\fR` crate\.
.P
But we can’t implement external traits on external types\. For example, we can’timplement the `\fIDisplay\fR` trait on `\fIVec<T>\fR` within our `\fIaggregator\fR` crate,because `\fIDisplay\fR` and `\fIVec<T>\fR` are defined in the standard library and aren’tlocal to our `\fIaggregator\fR` crate\. This restriction is part of a property ofprograms called \fIcoherence\fR, and more specifically the \fIorphan rule\fR, so namedbecause the parent type is not present\. This rule ensures that other people’scode can’t break your code and vice versa\. Without the rule, two crates couldimplement the same trait for the same type, and Rust wouldn’t know whichimplementation to use\.
.br

.br
\fBDefault Implementations\fR
.br
=========================
.br

.P
Sometimes it’s useful to have default behavior for some or all of the methodsin a trait instead of requiring implementations for all methods on every type\.Then, as we implement the trait on a particular type, we can keep or overrideeach method’s default behavior\.
.P
Listing 10\-14 shows how to specify a default string for the `\fIsummarize\fR` methodof the `\fISummary\fR` trait instead of only defining the method signature, as we didin Listing 10\-12\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Summary {
    fn summarize(&self) \-> String {
        String::from("(Read more\.\.\.)")
    }
}
# 
# pub struct NewsArticle {
#     pub headline: String,
#     pub location: String,
#     pub author: String,
#     pub content: String,
# }
# 
# impl Summary for NewsArticle {}
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize(&self) \-> String {
#         format!("{}: {}", self\.username, self\.content)
#     }
# }

.EE

.RE
Listing 10\-14: Definition of a `\fISummary\fR` trait with adefault implementation of the `\fIsummarize\fR` method
.P
To use a default implementation to summarize instances of `\fINewsArticle\fR` insteadof defining a custom implementation, we specify an empty `\fIimpl\fR` block with`\fIimpl Summary for NewsArticle {}\fR`\.
.P
Even though we’re no longer defining the `\fIsummarize\fR` method on `\fINewsArticle\fR`directly, we’ve provided a default implementation and specified that`\fINewsArticle\fR` implements the `\fISummary\fR` trait\. As a result, we can still callthe `\fIsummarize\fR` method on an instance of `\fINewsArticle\fR`, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use chapter10::{self, NewsArticle, Summary};
# 
# fn main() {
    let article = NewsArticle {
        headline: String::from("Penguins win the Stanley Cup Championship!"),
        location: String::from("Pittsburgh, PA, USA"),
        author: String::from("Iceburgh"),
        content: String::from(
            "The Pittsburgh Penguins once again are the best \
             hockey team in the NHL\.",
        ),
    };

    println!("New article available! {}", article\.summarize());
# }

.EE

.RE
.P
This code prints `\fINew article available! (Read more\.\.\.)\fR`\.
.P
Creating a default implementation for `\fIsummarize\fR` doesn’t require us to changeanything about the implementation of `\fISummary\fR` on `\fITweet\fR` in Listing 10\-13\. Thereason is that the syntax for overriding a default implementation is the sameas the syntax for implementing a trait method that doesn’t have a defaultimplementation\.
.P
Default implementations can call other methods in the same trait, even if thoseother methods don’t have a default implementation\. In this way, a trait canprovide a lot of useful functionality and only require implementors to specifya small part of it\. For example, we could define the `\fISummary\fR` trait to have a`\fIsummarize_author\fR` method whose implementation is required, and then define a`\fIsummarize\fR` method that has a default implementation that calls the`\fIsummarize_author\fR` method:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Summary {
    fn summarize_author(&self) \-> String;

    fn summarize(&self) \-> String {
        format!("(Read more from {}\.\.\.)", self\.summarize_author())
    }
}
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize_author(&self) \-> String {
#         format!("@{}", self\.username)
#     }
# }

.EE

.RE
.P
To use this version of `\fISummary\fR`, we only need to define `\fIsummarize_author\fR`when we implement the trait on a type:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize_author(&self) \-> String;
# 
#     fn summarize(&self) \-> String {
#         format!("(Read more from {}\.\.\.)", self\.summarize_author())
#     }
# }
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
impl Summary for Tweet {
    fn summarize_author(&self) \-> String {
        format!("@{}", self\.username)
    }
}

.EE

.RE
.P
After we define `\fIsummarize_author\fR`, we can call `\fIsummarize\fR` on instances of the`\fITweet\fR` struct, and the default implementation of `\fIsummarize\fR` will call thedefinition of `\fIsummarize_author\fR` that we’ve provided\. Because we’ve implemented`\fIsummarize_author\fR`, the `\fISummary\fR` trait has given us the behavior of the`\fIsummarize\fR` method without requiring us to write any more code\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use chapter10::{self, Summary, Tweet};
# 
# fn main() {
    let tweet = Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    };

    println!("1 new tweet: {}", tweet\.summarize());
# }

.EE

.RE
.P
This code prints `\fI1 new tweet: (Read more from @horse_ebooks\.\.\.)\fR`\.
.P
Note that it isn’t possible to call the default implementation from anoverriding implementation of that same method\.
.br

.br
\fBTraits as Parameters\fR
.br
======================
.br

.P
Now that you know how to define and implement traits, we can explore how to usetraits to define functions that accept many different types\.
.P
For example, in Listing 10\-13, we implemented the `\fISummary\fR` trait on the`\fINewsArticle\fR` and `\fITweet\fR` types\. We can define a `\fInotify\fR` function that callsthe `\fIsummarize\fR` method on its `\fIitem\fR` parameter, which is of some type thatimplements the `\fISummary\fR` trait\. To do this, we can use the `\fIimpl Trait\fR`syntax, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize(&self) \-> String;
# }
# 
# pub struct NewsArticle {
#     pub headline: String,
#     pub location: String,
#     pub author: String,
#     pub content: String,
# }
# 
# impl Summary for NewsArticle {
#     fn summarize(&self) \-> String {
#         format!("{}, by {} ({})", self\.headline, self\.author, self\.location)
#     }
# }
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize(&self) \-> String {
#         format!("{}: {}", self\.username, self\.content)
#     }
# }
# 
pub fn notify(item: &impl Summary) {
    println!("Breaking news! {}", item\.summarize());
}

.EE

.RE
.P
Instead of a concrete type for the `\fIitem\fR` parameter, we specify the `\fIimpl\fR`keyword and the trait name\. This parameter accepts any type that implements thespecified trait\. In the body of `\fInotify\fR`, we can call any methods on `\fIitem\fR`that come from the `\fISummary\fR` trait, such as `\fIsummarize\fR`\. We can call `\fInotify\fR`and pass in any instance of `\fINewsArticle\fR` or `\fITweet\fR`\. Code that calls thefunction with any other type, such as a `\fIString\fR` or an `\fIi32\fR`, won’t compilebecause those types don’t implement `\fISummary\fR`\.
.br

.br
\fBTrait Bound Syntax\fR
.br
====================
.br

.P
The `\fIimpl Trait\fR` syntax works for straightforward cases but is actuallysyntax sugar for a longer form, which is called a \fItrait bound\fR; it looks likethis:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify<T: Summary>(item: &T) {
    println!("Breaking news! {}", item\.summarize());
}

.EE

.RE
.P
This longer form is equivalent to the example in the previous section but ismore verbose\. We place trait bounds with the declaration of the generic typeparameter after a colon and inside angle brackets\.
.P
The `\fIimpl Trait\fR` syntax is convenient and makes for more concise code in simplecases\. The trait bound syntax can express more complexity in other cases\. Forexample, we can have two parameters that implement `\fISummary\fR`\. Using the `\fIimpl Trait\fR` syntax looks like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify(item1: &impl Summary, item2: &impl Summary) {

.EE

.RE
.P
If we wanted this function to allow `\fIitem1\fR` and `\fIitem2\fR` to have differenttypes, using `\fIimpl Trait\fR` would be appropriate (as long as both types implement`\fISummary\fR`)\. If we wanted to force both parameters to have the same type, that’sonly possible to express using a trait bound, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify<T: Summary>(item1: &T, item2: &T) {

.EE

.RE
.P
The generic type `\fIT\fR` specified as the type of the `\fIitem1\fR` and `\fIitem2\fR`parameters constrains the function such that the concrete type of the valuepassed as an argument for `\fIitem1\fR` and `\fIitem2\fR` must be the same\.
.br

.br
\fBSpecifying Multiple Trait Bounds with the \fR
.br
============================================
.br
`\fI+\fR` Syntax
.P
We can also specify more than one trait bound\. Say we wanted `\fInotify\fR` to usedisplay formatting on `\fIitem\fR` as well as the `\fIsummarize\fR` method: we specify inthe `\fInotify\fR` definition that `\fIitem\fR` must implement both `\fIDisplay\fR` and`\fISummary\fR`\. We can do so using the `\fI+\fR` syntax:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify(item: &(impl Summary + Display)) {

.EE

.RE
.P
The `\fI+\fR` syntax is also valid with trait bounds on generic types:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn notify<T: Summary + Display>(item: &T) {

.EE

.RE
.P
With the two trait bounds specified, the body of `\fInotify\fR` can call `\fIsummarize\fR`and use `\fI{}\fR` to format `\fIitem\fR`\.
.br

.br
\fBClearer Trait Bounds with \fR
.br
============================
.br
`\fIwhere\fR` Clauses
.P
Using too many trait bounds has its downsides\. Each generic has its own traitbounds, so functions with multiple generic type parameters can contain lots oftrait bound information between the function’s name and its parameter list,making the function signature hard to read\. For this reason, Rust has alternatesyntax for specifying trait bounds inside a `\fIwhere\fR` clause after the functionsignature\. So instead of writing this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) \-> i32 {

.EE

.RE
.P
we can use a `\fIwhere\fR` clause, like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn some_function<T, U>(t: &T, u: &U) \-> i32
    where T: Display + Clone,
          U: Clone + Debug
{

.EE

.RE
.P
This function’s signature is less cluttered: the function name, parameter list,and return type are close together, similar to a function without lots of traitbounds\.
.br

.br
\fBReturning Types that Implement Traits\fR
.br
=======================================
.br

.P
We can also use the `\fIimpl Trait\fR` syntax in the return position to return avalue of some type that implements a trait, as shown here:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize(&self) \-> String;
# }
# 
# pub struct NewsArticle {
#     pub headline: String,
#     pub location: String,
#     pub author: String,
#     pub content: String,
# }
# 
# impl Summary for NewsArticle {
#     fn summarize(&self) \-> String {
#         format!("{}, by {} ({})", self\.headline, self\.author, self\.location)
#     }
# }
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize(&self) \-> String {
#         format!("{}: {}", self\.username, self\.content)
#     }
# }
# 
fn returns_summarizable() \-> impl Summary {
    Tweet {
        username: String::from("horse_ebooks"),
        content: String::from(
            "of course, as you probably already know, people",
        ),
        reply: false,
        retweet: false,
    }
}

.EE

.RE
.P
By using `\fIimpl Summary\fR` for the return type, we specify that the`\fIreturns_summarizable\fR` function returns some type that implements the `\fISummary\fR`trait without naming the concrete type\. In this case, `\fIreturns_summarizable\fR`returns a `\fITweet\fR`, but the code calling this function doesn’t know that\.
.P
The ability to return a type that is only specified by the trait it implementsis especially useful in the context of closures and iterators, which we coverin Chapter 13\. Closures and iterators create types that only the compiler knowsor types that are very long to specify\. The `\fIimpl Trait\fR` syntax lets youconcisely specify that a function returns some type that implements the`\fIIterator\fR` trait without needing to write out a very long type\.
.P
However, you can only use `\fIimpl Trait\fR` if you’re returning a single type\. Forexample, this code that returns either a `\fINewsArticle\fR` or a `\fITweet\fR` with thereturn type specified as `\fIimpl Summary\fR` wouldn’t work:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# pub trait Summary {
#     fn summarize(&self) \-> String;
# }
# 
# pub struct NewsArticle {
#     pub headline: String,
#     pub location: String,
#     pub author: String,
#     pub content: String,
# }
# 
# impl Summary for NewsArticle {
#     fn summarize(&self) \-> String {
#         format!("{}, by {} ({})", self\.headline, self\.author, self\.location)
#     }
# }
# 
# pub struct Tweet {
#     pub username: String,
#     pub content: String,
#     pub reply: bool,
#     pub retweet: bool,
# }
# 
# impl Summary for Tweet {
#     fn summarize(&self) \-> String {
#         format!("{}: {}", self\.username, self\.content)
#     }
# }
# 
fn returns_summarizable(switch: bool) \-> impl Summary {
    if switch {
        NewsArticle {
            headline: String::from(
                "Penguins win the Stanley Cup Championship!",
            ),
            location: String::from("Pittsburgh, PA, USA"),
            author: String::from("Iceburgh"),
            content: String::from(
                "The Pittsburgh Penguins once again are the best \
                 hockey team in the NHL\.",
            ),
        }
    } else {
        Tweet {
            username: String::from("horse_ebooks"),
            content: String::from(
                "of course, as you probably already know, people",
            ),
            reply: false,
            retweet: false,
        }
    }
}

.EE

.RE
.P
Returning either a `\fINewsArticle\fR` or a `\fITweet\fR` isn’t allowed due to restrictionsaround how the `\fIimpl Trait\fR` syntax is implemented in the compiler\. We’ll coverhow to write a function with this behavior in the 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
“Using Trait Objects ThatAllow for Values of DifferentTypes” section of Chapter 17\.
.br

.br
\fBFixing the \fR
.br
=============
.br
`\fIlargest\fR` Function with Trait Bounds
.P
Now that you know how to specify the behavior you want to use using the generictype parameter’s bounds, let’s return to Listing 10\-5 to fix the definition ofthe `\fIlargest\fR` function that uses a generic type parameter! Last time we triedto run that code, we received this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0369]: binary operation `>` cannot be applied to type `T`
 \-\-> src/main\.rs:5:17
  |
5 |         if item > largest {
  |            \-\-\-\- ^ \-\-\-\-\-\-\- T
  |            |
  |            T
  |
help: consider restricting type parameter `T`
  |
1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) \-> T {
  |             ^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0369`\.
error: could not compile `chapter10`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
In the body of `\fIlargest\fR` we wanted to compare two values of type `\fIT\fR` using thegreater than (`\fI>\fR`) operator\. Because that operator is defined as a defaultmethod on the standard library trait `\fIstd::cmp::PartialOrd\fR`, we need to specify`\fIPartialOrd\fR` in the trait bounds for `\fIT\fR` so the `\fIlargest\fR` function can work onslices of any type that we can compare\. We don’t need to bring `\fIPartialOrd\fR`into scope because it’s in the prelude\. Change the signature of `\fIlargest\fR` tolook like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn largest<T: PartialOrd>(list: &[T]) \-> T {
#     let mut largest = list[0];
# 
#     for &item in list {
#         if item > largest {
#             largest = item;
#         }
#     }
# 
#     largest
# }
# 
# fn main() {
#     let number_list = vec![34, 50, 25, 100, 65];
# 
#     let result = largest(&number_list);
#     println!("The largest number is {}", result);
# 
#     let char_list = vec!['y', 'm', 'a', 'q'];
# 
#     let result = largest(&char_list);
#     println!("The largest char is {}", result);
# }

.EE

.RE
.P
This time when we compile the code, we get a different set of errors:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0508]: cannot move out of type `[T]`, a non\-copy slice
 \-\-> src/main\.rs:2:23
  |
2 |     let mut largest = list[0];
  |                       ^^^^^^^
  |                       |
  |                       cannot move out of here
  |                       move occurs because `list[_]` has type `T`, which does not implement the `Copy` trait
  |                       help: consider borrowing here: `&list[0]`

error[E0507]: cannot move out of a shared reference
 \-\-> src/main\.rs:4:18
  |
4 |     for &item in list {
  |         \-\-\-\-\-    ^^^^
  |         ||
  |         |data moved here
  |         |move occurs because `item` has type `T`, which does not implement the `Copy` trait
  |         help: consider removing the `&`: `item`

error: aborting due to 2 previous errors

Some errors have detailed explanations: E0507, E0508\.
For more information about an error, try `rustc \-\-explain E0507`\.
error: could not compile `chapter10`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The key line in this error is `\fIcannot move out of type [T], a non\-copy slice\fR`\.With our non\-generic versions of the `\fIlargest\fR` function, we were only trying tofind the largest `\fIi32\fR` or `\fIchar\fR`\. As discussed in the 
.UR ch04\-01\-what\-is\-ownership\.html#stack\-only\-data\-copy
.UE
“Stack\-Only Data:Copy” section in Chapter 4, types like`\fIi32\fR` and `\fIchar\fR` that have a known size can be stored on the stack, so theyimplement the `\fICopy\fR` trait\. But when we made the `\fIlargest\fR` function generic,it became possible for the `\fIlist\fR` parameter to have types in it that don’timplement the `\fICopy\fR` trait\. Consequently, we wouldn’t be able to move thevalue out of `\fIlist[0]\fR` and into the `\fIlargest\fR` variable, resulting in thiserror\.
.P
To call this code with only those types that implement the `\fICopy\fR` trait, we canadd `\fICopy\fR` to the trait bounds of `\fIT\fR`! Listing 10\-15 shows the complete code ofa generic `\fIlargest\fR` function that will compile as long as the types of thevalues in the slice that we pass into the function implement the `\fIPartialOrd\fR`\fIand\fR `\fICopy\fR` traits, like `\fIi32\fR` and `\fIchar\fR` do\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn largest<T: PartialOrd + Copy>(list: &[T]) \-> T {
    let mut largest = list[0];

    for &item in list {
        if item > largest {
            largest = item;
        }
    }

    largest
}

fn main() {
    let number_list = vec![34, 50, 25, 100, 65];

    let result = largest(&number_list);
    println!("The largest number is {}", result);

    let char_list = vec!['y', 'm', 'a', 'q'];

    let result = largest(&char_list);
    println!("The largest char is {}", result);
}

.EE

.RE
Listing 10\-15: A working definition of the `\fIlargest\fR`function that works on any generic type that implements the `\fIPartialOrd\fR` and`\fICopy\fR` traits
.P
If we don’t want to restrict the `\fIlargest\fR` function to the types that implementthe `\fICopy\fR` trait, we could specify that `\fIT\fR` has the trait bound `\fIClone\fR` insteadof `\fICopy\fR`\. Then we could clone each value in the slice when we want the`\fIlargest\fR` function to have ownership\. Using the `\fIclone\fR` function means we’repotentially making more heap allocations in the case of types that own heapdata like `\fIString\fR`, and heap allocations can be slow if we’re working withlarge amounts of data\.
.P
Another way we could implement `\fIlargest\fR` is for the function to return areference to a `\fIT\fR` value in the slice\. If we change the return type to `\fI&T\fR`instead of `\fIT\fR`, thereby changing the body of the function to return areference, we wouldn’t need the `\fIClone\fR` or `\fICopy\fR` trait bounds and we couldavoid heap allocations\. Try implementing these alternate solutions on your own!If you get stuck with errors having to do with lifetimes, keep reading: the“Validating References with Lifetimes” section coming up will explain, butlifetimes aren't required to solve these challenges\.
.br

.br
\fBUsing Trait Bounds to Conditionally Implement Methods\fR
.br
=======================================================
.br

.P
By using a trait bound with an `\fIimpl\fR` block that uses generic type parameters,we can implement methods conditionally for types that implement the specifiedtraits\. For example, the type `\fIPair<T>\fR` in Listing 10\-16 always implements the`\fInew\fR` function\. But `\fIPair<T>\fR` only implements the `\fIcmp_display\fR` method if itsinner type `\fIT\fR` implements the `\fIPartialOrd\fR` trait that enables comparison \fIand\fRthe `\fIDisplay\fR` trait that enables printing\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::fmt::Display;

struct Pair<T> {
    x: T,
    y: T,
}

impl<T> Pair<T> {
    fn new(x: T, y: T) \-> Self {
        Self { x, y }
    }
}

impl<T: Display + PartialOrd> Pair<T> {
    fn cmp_display(&self) {
        if self\.x >= self\.y {
            println!("The largest member is x = {}", self\.x);
        } else {
            println!("The largest member is y = {}", self\.y);
        }
    }
}

.EE

.RE
Listing 10\-16: Conditionally implement methods on ageneric type depending on trait bounds
.P
We can also conditionally implement a trait for any type that implementsanother trait\. Implementations of a trait on any type that satisfies the traitbounds are called \fIblanket implementations\fR and are extensively used in theRust standard library\. For example, the standard library implements the`\fIToString\fR` trait on any type that implements the `\fIDisplay\fR` trait\. The `\fIimpl\fR`block in the standard library looks similar to this code:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
impl<T: Display> ToString for T {
    // \-\-snip\-\-
}

.EE

.RE
.P
Because the standard library has this blanket implementation, we can call the`\fIto_string\fR` method defined by the `\fIToString\fR` trait on any type that implementsthe `\fIDisplay\fR` trait\. For example, we can turn integers into their corresponding`\fIString\fR` values like this because integers implement `\fIDisplay\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
let s = 3\.to_string();

.EE

.RE
.P
Blanket implementations appear in the documentation for the trait in the“Implementors” section\.
.P
Traits and trait bounds let us write code that uses generic type parameters toreduce duplication but also specify to the compiler that we want the generictype to have particular behavior\. The compiler can then use the trait boundinformation to check that all the concrete types used with our code provide thecorrect behavior\. In dynamically typed languages, we would get an error atruntime if we called a method on a type which didn’t define the method\. But Rustmoves these errors to compile time so we’re forced to fix the problems beforeour code is even able to run\. Additionally, we don’t have to write code thatchecks for behavior at runtime because we’ve already checked at compile time\.Doing so improves performance without having to give up the flexibility ofgenerics\.
.P
Another kind of generic that we’ve already been using is called \fIlifetimes\fR\.Rather than ensuring that a type has the behavior we want, lifetimes ensurethat references are valid as long as we need them to be\. Let’s look at howlifetimes do that\.
.SH "Validating References with Lifetimes"

.br

.br
\fBValidating References with Lifetimes\fR
.br
======================================
.br

.P
One detail we didn’t discuss in the 
.UR ch04\-02\-references\-and\-borrowing\.html#references\-and\-borrowing
.UE
“References andBorrowing” section in Chapter 4 isthat every reference in Rust has a \fIlifetime\fR, which is the scope for whichthat reference is valid\. Most of the time, lifetimes are implicit andinferred, just like most of the time, types are inferred\. We must annotatetypes when multiple types are possible\. In a similar way, we must annotatelifetimes when the lifetimes of references could be related in a few differentways\. Rust requires us to annotate the relationships using generic lifetimeparameters to ensure the actual references used at runtime will definitely bevalid\.
.P
The concept of lifetimes is somewhat different from tools in other programminglanguages, arguably making lifetimes Rust’s most distinctive feature\. Althoughwe won’t cover lifetimes in their entirety in this chapter, we’ll discusscommon ways you might encounter lifetime syntax so you can become familiar withthe concepts\.
.br

.br
\fBPreventing Dangling References with Lifetimes\fR
.br
===============================================
.br

.P
The main aim of lifetimes is to prevent dangling references, which cause aprogram to reference data other than the data it’s intended to reference\.Consider the program in Listing 10\-17, which has an outer scope and an innerscope\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    {
        let r;

        {
            let x = 5;
            r = &x;
        }

        println!("r: {}", r);
    }
# }

.EE

.RE
Listing 10\-17: An attempt to use a reference whose valuehas gone out of scope
.P
Note: The examples in Listings 10\-17, 10\-18, and 10\-24 declare variableswithout giving them an initial value, so the variable name exists in theouter scope\. At first glance, this might appear to be in conflict with Rust’shaving no null values\. However, if we try to use a variable before giving ita value, we’ll get a compile\-time error, which shows that Rust indeed doesnot allow null values\.
.P
The outer scope declares a variable named `\fIr\fR` with no initial value, and theinner scope declares a variable named `\fIx\fR` with the initial value of 5\. Insidethe inner scope, we attempt to set the value of `\fIr\fR` as a reference to `\fIx\fR`\. Thenthe inner scope ends, and we attempt to print the value in `\fIr\fR`\. This code won’tcompile because the value `\fIr\fR` is referring to has gone out of scope before wetry to use it\. Here is the error message:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0597]: `x` does not live long enough
  \-\-> src/main\.rs:7:17
   |
7  |             r = &x;
   |                 ^^ borrowed value does not live long enough
8  |         }
   |         \- `x` dropped here while still borrowed
9  | 
10 |         println!("r: {}", r);
   |                           \- borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0597`\.
error: could not compile `chapter10`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The variable `\fIx\fR` doesn’t “live long enough\.” The reason is that `\fIx\fR` will be outof scope when the inner scope ends on line 7\. But `\fIr\fR` is still valid for theouter scope; because its scope is larger, we say that it “lives longer\.” IfRust allowed this code to work, `\fIr\fR` would be referencing memory that wasdeallocated when `\fIx\fR` went out of scope, and anything we tried to do with `\fIr\fR`wouldn’t work correctly\. So how does Rust determine that this code is invalid?It uses a borrow checker\.
.br

.br
\fBThe Borrow Checker\fR
.br
====================
.br

.P
The Rust compiler has a \fIborrow checker\fR that compares scopes to determinewhether all borrows are valid\. Listing 10\-18 shows the same code as Listing10\-17 but with annotations showing the lifetimes of the variables\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    {
        let r;                // \-\-\-\-\-\-\-\-\-+\-\- 'a
                              //          |
        {                     //          |
            let x = 5;        // \-+\-\- 'b  |
            r = &x;           //  |       |
        }                     // \-+       |
                              //          |
        println!("r: {}", r); //          |
    }                         // \-\-\-\-\-\-\-\-\-+
# }

.EE

.RE
Listing 10\-18: Annotations of the lifetimes of `\fIr\fR` and`\fIx\fR`, named `\fI'a\fR` and `\fI'b\fR`, respectively
.P
Here, we’ve annotated the lifetime of `\fIr\fR` with `\fI'a\fR` and the lifetime of `\fIx\fR`with `\fI'b\fR`\. As you can see, the inner `\fI'b\fR` block is much smaller than the outer`\fI'a\fR` lifetime block\. At compile time, Rust compares the size of the twolifetimes and sees that `\fIr\fR` has a lifetime of `\fI'a\fR` but that it refers to memorywith a lifetime of `\fI'b\fR`\. The program is rejected because `\fI'b\fR` is shorter than`\fI'a\fR`: the subject of the reference doesn’t live as long as the reference\.
.P
Listing 10\-19 fixes the code so it doesn’t have a dangling reference andcompiles without any errors\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    {
        let x = 5;            // \-\-\-\-\-\-\-\-\-\-+\-\- 'b
                              //           |
        let r = &x;           // \-\-+\-\- 'a  |
                              //   |       |
        println!("r: {}", r); //   |       |
                              // \-\-+       |
    }                         // \-\-\-\-\-\-\-\-\-\-+
# }

.EE

.RE
Listing 10\-19: A valid reference because the data has alonger lifetime than the reference
.P
Here, `\fIx\fR` has the lifetime `\fI'b\fR`, which in this case is larger than `\fI'a\fR`\. Thismeans `\fIr\fR` can reference `\fIx\fR` because Rust knows that the reference in `\fIr\fR` willalways be valid while `\fIx\fR` is valid\.
.P
Now that you know where the lifetimes of references are and how Rust analyzeslifetimes to ensure references will always be valid, let’s explore genericlifetimes of parameters and return values in the context of functions\.
.br

.br
\fBGeneric Lifetimes in Functions\fR
.br
================================
.br

.P
Let’s write a function that returns the longer of two string slices\. Thisfunction will take two string slices and return a string slice\. After we’veimplemented the `\fIlongest\fR` function, the code in Listing 10\-20 should print `\fIThe longest string is abcd\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn main() {
    let string1 = String::from("abcd");
    let string2 = "xyz";

    let result = longest(string1\.as_str(), string2);
    println!("The longest string is {}", result);
}

.EE

.RE
Listing 10\-20: A `\fImain\fR` function that calls the `\fIlongest\fR`function to find the longer of two string slices
.P
Note that we want the function to take string slices, which are references,because we don’t want the `\fIlongest\fR` function to take ownership of itsparameters\. Refer to the 
.UR ch04\-03\-slices\.html#string\-slices\-as\-parameters
.UE
“String Slices asParameters” section in Chapter 4for more discussion about why the parameters we use in Listing 10\-20 are theones we want\.
.P
If we try to implement the `\fIlongest\fR` function as shown in Listing 10\-21, itwon’t compile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "xyz";
# 
#     let result = longest(string1\.as_str(), string2);
#     println!("The longest string is {}", result);
# }
# 
fn longest(x: &str, y: &str) \-> &str {
    if x\.len() > y\.len() {
        x
    } else {
        y
    }
}

.EE

.RE
Listing 10\-21: An implementation of the `\fIlongest\fR`function that returns the longer of two string slices but does not yetcompile
.P
Instead, we get the following error that talks about lifetimes:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0106]: missing lifetime specifier
 \-\-> src/main\.rs:9:33
  |
9 | fn longest(x: &str, y: &str) \-> &str {
  |               \-\-\-\-     \-\-\-\-     ^ expected named lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`
help: consider introducing a named lifetime parameter
  |
9 | fn longest<'a>(x: &'a str, y: &'a str) \-> &'a str {
  |           ^^^^    ^^^^^^^     ^^^^^^^     ^^^

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0106`\.
error: could not compile `chapter10`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The help text reveals that the return type needs a generic lifetime parameteron it because Rust can’t tell whether the reference being returned refers to`\fIx\fR` or `\fIy\fR`\. Actually, we don’t know either, because the `\fIif\fR` block in the bodyof this function returns a reference to `\fIx\fR` and the `\fIelse\fR` block returns areference to `\fIy\fR`!
.P
When we’re defining this function, we don’t know the concrete values that willbe passed into this function, so we don’t know whether the `\fIif\fR` case or the`\fIelse\fR` case will execute\. We also don’t know the concrete lifetimes of thereferences that will be passed in, so we can’t look at the scopes as we did inListings 10\-18 and 10\-19 to determine whether the reference we return willalways be valid\. The borrow checker can’t determine this either, because itdoesn’t know how the lifetimes of `\fIx\fR` and `\fIy\fR` relate to the lifetime of thereturn value\. To fix this error, we’ll add generic lifetime parameters thatdefine the relationship between the references so the borrow checker canperform its analysis\.
.br

.br
\fBLifetime Annotation Syntax\fR
.br
============================
.br

.P
Lifetime annotations don’t change how long any of the references live\. Justas functions can accept any type when the signature specifies a generic typeparameter, functions can accept references with any lifetime by specifying ageneric lifetime parameter\. Lifetime annotations describe the relationships ofthe lifetimes of multiple references to each other without affecting thelifetimes\.
.P
Lifetime annotations have a slightly unusual syntax: the names of lifetimeparameters must start with an apostrophe (`\fI'\fR`) and are usually all lowercase andvery short, like generic types\. Most people use the name `\fI'a\fR`\. We placelifetime parameter annotations after the `\fI&\fR` of a reference, using a space toseparate the annotation from the reference’s type\.
.P
Here are some examples: a reference to an `\fIi32\fR` without a lifetime parameter, areference to an `\fIi32\fR` that has a lifetime parameter named `\fI'a\fR`, and a mutablereference to an `\fIi32\fR` that also has the lifetime `\fI'a\fR`\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
&i32        // a reference
&'a i32     // a reference with an explicit lifetime
&'a mut i32 // a mutable reference with an explicit lifetime

.EE

.RE
.P
One lifetime annotation by itself doesn’t have much meaning, because theannotations are meant to tell Rust how generic lifetime parameters of multiplereferences relate to each other\. For example, let’s say we have a function withthe parameter `\fIfirst\fR` that is a reference to an `\fIi32\fR` with lifetime `\fI'a\fR`\. Thefunction also has another parameter named `\fIsecond\fR` that is another reference toan `\fIi32\fR` that also has the lifetime `\fI'a\fR`\. The lifetime annotations indicatethat the references `\fIfirst\fR` and `\fIsecond\fR` must both live as long as that genericlifetime\.
.br

.br
\fBLifetime Annotations in Function Signatures\fR
.br
=============================================
.br

.P
Now let’s examine lifetime annotations in the context of the `\fIlongest\fR`function\. As with generic type parameters, we need to declare generic lifetimeparameters inside angle brackets between the function name and the parameterlist\. The constraint we want to express in this signature is that all thereferences in the parameters and the return value must have the same lifetime\.We’ll name the lifetime `\fI'a\fR` and then add it to each reference, as shown inListing 10\-22\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "xyz";
# 
#     let result = longest(string1\.as_str(), string2);
#     println!("The longest string is {}", result);
# }
# 
fn longest<'a>(x: &'a str, y: &'a str) \-> &'a str {
    if x\.len() > y\.len() {
        x
    } else {
        y
    }
}

.EE

.RE
Listing 10\-22: The `\fIlongest\fR` function definitionspecifying that all the references in the signature must have the same lifetime`\fI'a\fR`
.P
This code should compile and produce the result we want when we use it with the`\fImain\fR` function in Listing 10\-20\.
.P
The function signature now tells Rust that for some lifetime `\fI'a\fR`, the functiontakes two parameters, both of which are string slices that live at least aslong as lifetime `\fI'a\fR`\. The function signature also tells Rust that the stringslice returned from the function will live at least as long as lifetime `\fI'a\fR`\.In practice, it means that the lifetime of the reference returned by the`\fIlongest\fR` function is the same as the smaller of the lifetimes of thereferences passed in\. These constraints are what we want Rust to enforce\.Remember, when we specify the lifetime parameters in this function signature,we’re not changing the lifetimes of any values passed in or returned\. Rather,we’re specifying that the borrow checker should reject any values that don’tadhere to these constraints\. Note that the `\fIlongest\fR` function doesn’t need toknow exactly how long `\fIx\fR` and `\fIy\fR` will live, only that some scope can besubstituted for `\fI'a\fR` that will satisfy this signature\.
.P
When annotating lifetimes in functions, the annotations go in the functionsignature, not in the function body\. Rust can analyze the code within thefunction without any help\. However, when a function has references to or fromcode outside that function, it becomes almost impossible for Rust to figure outthe lifetimes of the parameters or return values on its own\. The lifetimesmight be different each time the function is called\. This is why we need toannotate the lifetimes manually\.
.P
When we pass concrete references to `\fIlongest\fR`, the concrete lifetime that issubstituted for `\fI'a\fR` is the part of the scope of `\fIx\fR` that overlaps with thescope of `\fIy\fR`\. In other words, the generic lifetime `\fI'a\fR` will get the concretelifetime that is equal to the smaller of the lifetimes of `\fIx\fR` and `\fIy\fR`\. Becausewe’ve annotated the returned reference with the same lifetime parameter `\fI'a\fR`,the returned reference will also be valid for the length of the smaller of thelifetimes of `\fIx\fR` and `\fIy\fR`\.
.P
Let’s look at how the lifetime annotations restrict the `\fIlongest\fR` function bypassing in references that have different concrete lifetimes\. Listing 10\-23 isa straightforward example\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let string1 = String::from("long string is long");

    {
        let string2 = String::from("xyz");
        let result = longest(string1\.as_str(), string2\.as_str());
        println!("The longest string is {}", result);
    }
}
# 
# fn longest<'a>(x: &'a str, y: &'a str) \-> &'a str {
#     if x\.len() > y\.len() {
#         x
#     } else {
#         y
#     }
# }

.EE

.RE
Listing 10\-23: Using the `\fIlongest\fR` function withreferences to `\fIString\fR` values that have different concrete lifetimes
.P
In this example, `\fIstring1\fR` is valid until the end of the outer scope, `\fIstring2\fR`is valid until the end of the inner scope, and `\fIresult\fR` references somethingthat is valid until the end of the inner scope\. Run this code, and you’ll seethat the borrow checker approves of this code; it will compile and print `\fIThe longest string is long string is long\fR`\.
.P
Next, let’s try an example that shows that the lifetime of the reference in`\fIresult\fR` must be the smaller lifetime of the two arguments\. We’ll move thedeclaration of the `\fIresult\fR` variable outside the inner scope but leave theassignment of the value to the `\fIresult\fR` variable inside the scope with`\fIstring2\fR`\. Then we’ll move the `\fIprintln!\fR` that uses `\fIresult\fR` outside the innerscope, after the inner scope has ended\. The code in Listing 10\-24 will notcompile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let string1 = String::from("long string is long");
    let result;
    {
        let string2 = String::from("xyz");
        result = longest(string1\.as_str(), string2\.as_str());
    }
    println!("The longest string is {}", result);
}
# 
# fn longest<'a>(x: &'a str, y: &'a str) \-> &'a str {
#     if x\.len() > y\.len() {
#         x
#     } else {
#         y
#     }
# }

.EE

.RE
Listing 10\-24: Attempting to use `\fIresult\fR` after `\fIstring2\fR`has gone out of scope
.P
When we try to compile this code, we’ll get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0597]: `string2` does not live long enough
 \-\-> src/main\.rs:6:44
  |
6 |         result = longest(string1\.as_str(), string2\.as_str());
  |                                            ^^^^^^^ borrowed value does not live long enough
7 |     }
  |     \- `string2` dropped here while still borrowed
8 |     println!("The longest string is {}", result);
  |                                          \-\-\-\-\-\- borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0597`\.
error: could not compile `chapter10`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The error shows that for `\fIresult\fR` to be valid for the `\fIprintln!\fR` statement,`\fIstring2\fR` would need to be valid until the end of the outer scope\. Rust knowsthis because we annotated the lifetimes of the function parameters and returnvalues using the same lifetime parameter `\fI'a\fR`\.
.P
As humans, we can look at this code and see that `\fIstring1\fR` is longer than`\fIstring2\fR` and therefore `\fIresult\fR` will contain a reference to `\fIstring1\fR`\.Because `\fIstring1\fR` has not gone out of scope yet, a reference to `\fIstring1\fR` willstill be valid for the `\fIprintln!\fR` statement\. However, the compiler can’t seethat the reference is valid in this case\. We’ve told Rust that the lifetime ofthe reference returned by the `\fIlongest\fR` function is the same as the smaller ofthe lifetimes of the references passed in\. Therefore, the borrow checkerdisallows the code in Listing 10\-24 as possibly having an invalid reference\.
.P
Try designing more experiments that vary the values and lifetimes of thereferences passed in to the `\fIlongest\fR` function and how the returned referenceis used\. Make hypotheses about whether or not your experiments will pass theborrow checker before you compile; then check to see if you’re right!
.br

.br
\fBThinking in Terms of Lifetimes\fR
.br
================================
.br

.P
The way in which you need to specify lifetime parameters depends on what yourfunction is doing\. For example, if we changed the implementation of the`\fIlongest\fR` function to always return the first parameter rather than the longeststring slice, we wouldn’t need to specify a lifetime on the `\fIy\fR` parameter\. Thefollowing code will compile:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "efghijklmnopqrstuvwxyz";
# 
#     let result = longest(string1\.as_str(), string2);
#     println!("The longest string is {}", result);
# }
# 
fn longest<'a>(x: &'a str, y: &str) \-> &'a str {
    x
}

.EE

.RE
.P
In this example, we’ve specified a lifetime parameter `\fI'a\fR` for the parameter`\fIx\fR` and the return type, but not for the parameter `\fIy\fR`, because the lifetime of`\fIy\fR` does not have any relationship with the lifetime of `\fIx\fR` or the return value\.
.P
When returning a reference from a function, the lifetime parameter for thereturn type needs to match the lifetime parameter for one of the parameters\. Ifthe reference returned does \fInot\fR refer to one of the parameters, it must referto a value created within this function, which would be a dangling referencebecause the value will go out of scope at the end of the function\. Considerthis attempted implementation of the `\fIlongest\fR` function that won’t compile:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "xyz";
# 
#     let result = longest(string1\.as_str(), string2);
#     println!("The longest string is {}", result);
# }
# 
fn longest<'a>(x: &str, y: &str) \-> &'a str {
    let result = String::from("really long string");
    result\.as_str()
}

.EE

.RE
.P
Here, even though we’ve specified a lifetime parameter `\fI'a\fR` for the returntype, this implementation will fail to compile because the return valuelifetime is not related to the lifetime of the parameters at all\. Here is theerror message we get:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling chapter10 v0\.1\.0 (file:///projects/chapter10)
error[E0515]: cannot return value referencing local variable `result`
  \-\-> src/main\.rs:11:5
   |
11 |     result\.as_str()
   |     \-\-\-\-\-\-^^^^^^^^^
   |     |
   |     returns a value referencing data owned by the current function
   |     `result` is borrowed here

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0515`\.
error: could not compile `chapter10`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The problem is that `\fIresult\fR` goes out of scope and gets cleaned up at the endof the `\fIlongest\fR` function\. We’re also trying to return a reference to `\fIresult\fR`from the function\. There is no way we can specify lifetime parameters thatwould change the dangling reference, and Rust won’t let us create a danglingreference\. In this case, the best fix would be to return an owned data typerather than a reference so the calling function is then responsible forcleaning up the value\.
.P
Ultimately, lifetime syntax is about connecting the lifetimes of variousparameters and return values of functions\. Once they’re connected, Rust hasenough information to allow memory\-safe operations and disallow operations thatwould create dangling pointers or otherwise violate memory safety\.
.br

.br
\fBLifetime Annotations in Struct Definitions\fR
.br
============================================
.br

.P
So far, we’ve only defined structs to hold owned types\. It’s possible forstructs to hold references, but in that case we would need to add a lifetimeannotation on every reference in the struct’s definition\. Listing 10\-25 has astruct named `\fIImportantExcerpt\fR` that holds a string slice\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct ImportantExcerpt<'a> {
    part: &'a str,
}

fn main() {
    let novel = String::from("Call me Ishmael\. Some years ago\.\.\.");
    let first_sentence = novel\.split('\.')\.next()\.expect("Could not find a '\.'");
    let i = ImportantExcerpt {
        part: first_sentence,
    };
}

.EE

.RE
Listing 10\-25: A struct that holds a reference, so itsdefinition needs a lifetime annotation
.P
This struct has one field, `\fIpart\fR`, that holds a string slice, which is areference\. As with generic data types, we declare the name of the genericlifetime parameter inside angle brackets after the name of the struct so we canuse the lifetime parameter in the body of the struct definition\. Thisannotation means an instance of `\fIImportantExcerpt\fR` can’t outlive the referenceit holds in its `\fIpart\fR` field\.
.P
The `\fImain\fR` function here creates an instance of the `\fIImportantExcerpt\fR` structthat holds a reference to the first sentence of the `\fIString\fR` owned by thevariable `\fInovel\fR`\. The data in `\fInovel\fR` exists before the `\fIImportantExcerpt\fR`instance is created\. In addition, `\fInovel\fR` doesn’t go out of scope until afterthe `\fIImportantExcerpt\fR` goes out of scope, so the reference in the`\fIImportantExcerpt\fR` instance is valid\.
.br

.br
\fBLifetime Elision\fR
.br
==================
.br

.P
You’ve learned that every reference has a lifetime and that you need to specifylifetime parameters for functions or structs that use references\. However, inChapter 4 we had a function in Listing 4\-9, which is shown again in Listing10\-26, that compiled without lifetime annotations\.Filename: src/lib\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn first_word(s: &str) \-> &str {
    let bytes = s\.as_bytes();

    for (i, &item) in bytes\.iter()\.enumerate() {
        if item == b' ' {
            return &s[0\.\.i];
        }
    }

    &s[\.\.]
}
# 
# fn main() {
#     let my_string = String::from("hello world");
# 
#     // first_word works on slices of `String`s
#     let word = first_word(&my_string[\.\.]);
# 
#     let my_string_literal = "hello world";
# 
#     // first_word works on slices of string literals
#     let word = first_word(&my_string_literal[\.\.]);
# 
#     // Because string literals *are* string slices already,
#     // this works too, without the slice syntax!
#     let word = first_word(my_string_literal);
# }

.EE

.RE
Listing 10\-26: A function we defined in Listing 4\-9 thatcompiled without lifetime annotations, even though the parameter and returntype are references
.P
The reason this function compiles without lifetime annotations is historical:in early versions (pre\-1\.0) of Rust, this code wouldn’t have compiled becauseevery reference needed an explicit lifetime\. At that time, the functionsignature would have been written like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word<'a>(s: &'a str) \-> &'a str {

.EE

.RE
.P
After writing a lot of Rust code, the Rust team found that Rust programmerswere entering the same lifetime annotations over and over in particularsituations\. These situations were predictable and followed a few deterministicpatterns\. The developers programmed these patterns into the compiler’s code sothe borrow checker could infer the lifetimes in these situations and wouldn’tneed explicit annotations\.
.P
This piece of Rust history is relevant because it’s possible that moredeterministic patterns will emerge and be added to the compiler\. In the future,even fewer lifetime annotations might be required\.
.P
The patterns programmed into Rust’s analysis of references are called the\fIlifetime elision rules\fR\. These aren’t rules for programmers to follow; they’rea set of particular cases that the compiler will consider, and if your codefits these cases, you don’t need to write the lifetimes explicitly\.
.P
The elision rules don’t provide full inference\. If Rust deterministicallyapplies the rules but there is still ambiguity as to what lifetimes thereferences have, the compiler won’t guess what the lifetime of the remainingreferences should be\. In this case, instead of guessing, the compiler will giveyou an error that you can resolve by adding the lifetime annotations thatspecify how the references relate to each other\.
.P
Lifetimes on function or method parameters are called \fIinput lifetimes\fR, andlifetimes on return values are called \fIoutput lifetimes\fR\.
.P
The compiler uses three rules to figure out what lifetimes references have whenthere aren’t explicit annotations\. The first rule applies to input lifetimes,and the second and third rules apply to output lifetimes\. If the compiler getsto the end of the three rules and there are still references for which it can’tfigure out lifetimes, the compiler will stop with an error\. These rules applyto `\fIfn\fR` definitions as well as `\fIimpl\fR` blocks\.
.P
The first rule is that each parameter that is a reference gets its own lifetimeparameter\. In other words, a function with one parameter gets one lifetimeparameter: `\fIfn foo<'a>(x: &'a i32)\fR`; a function with two parameters gets twoseparate lifetime parameters: `\fIfn foo<'a, 'b>(x: &'a i32, y: &'b i32)\fR`; and soon\.
.P
The second rule is if there is exactly one input lifetime parameter, thatlifetime is assigned to all output lifetime parameters: `\fIfn foo<'a>(x: &'a i32) \-> &'a i32\fR`\.
.P
The third rule is if there are multiple input lifetime parameters, but one ofthem is `\fI&self\fR` or `\fI&mut self\fR` because this is a method, the lifetime of `\fIself\fR`is assigned to all output lifetime parameters\. This third rule makes methodsmuch nicer to read and write because fewer symbols are necessary\.
.P
Let’s pretend we’re the compiler\. We’ll apply these rules to figure out whatthe lifetimes of the references in the signature of the `\fIfirst_word\fR` functionin Listing 10\-26 are\. The signature starts without any lifetimes associatedwith the references:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word(s: &str) \-> &str {

.EE

.RE
.P
Then the compiler applies the first rule, which specifies that each parametergets its own lifetime\. We’ll call it `\fI'a\fR` as usual, so now the signature isthis:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word<'a>(s: &'a str) \-> &str {

.EE

.RE
.P
The second rule applies because there is exactly one input lifetime\. The secondrule specifies that the lifetime of the one input parameter gets assigned tothe output lifetime, so the signature is now this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn first_word<'a>(s: &'a str) \-> &'a str {

.EE

.RE
.P
Now all the references in this function signature have lifetimes, and thecompiler can continue its analysis without needing the programmer to annotatethe lifetimes in this function signature\.
.P
Let’s look at another example, this time using the `\fIlongest\fR` function that hadno lifetime parameters when we started working with it in Listing 10\-21:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn longest(x: &str, y: &str) \-> &str {

.EE

.RE
.P
Let’s apply the first rule: each parameter gets its own lifetime\. This time wehave two parameters instead of one, so we have two lifetimes:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn longest<'a, 'b>(x: &'a str, y: &'b str) \-> &str {

.EE

.RE
.P
You can see that the second rule doesn’t apply because there is more than oneinput lifetime\. The third rule doesn’t apply either, because `\fIlongest\fR` is afunction rather than a method, so none of the parameters are `\fIself\fR`\. Afterworking through all three rules, we still haven’t figured out what the returntype’s lifetime is\. This is why we got an error trying to compile the code inListing 10\-21: the compiler worked through the lifetime elision rules but stillcouldn’t figure out all the lifetimes of the references in the signature\.
.P
Because the third rule really only applies in method signatures, we’ll look atlifetimes in that context next to see why the third rule means we don’t have toannotate lifetimes in method signatures very often\.
.br

.br
\fBLifetime Annotations in Method Definitions\fR
.br
============================================
.br

.P
When we implement methods on a struct with lifetimes, we use the same syntax asthat of generic type parameters shown in Listing 10\-11\. Where we declare anduse the lifetime parameters depends on whether they’re related to the structfields or the method parameters and return values\.
.P
Lifetime names for struct fields always need to be declared after the `\fIimpl\fR`keyword and then used after the struct’s name, because those lifetimes are partof the struct’s type\.
.P
In method signatures inside the `\fIimpl\fR` block, references might be tied to thelifetime of references in the struct’s fields, or they might be independent\. Inaddition, the lifetime elision rules often make it so that lifetime annotationsaren’t necessary in method signatures\. Let’s look at some examples using thestruct named `\fIImportantExcerpt\fR` that we defined in Listing 10\-25\.
.P
First, we’ll use a method named `\fIlevel\fR` whose only parameter is a reference to`\fIself\fR` and whose return value is an `\fIi32\fR`, which is not a reference to anything:
.RS
.IP \fBrust\fR 2

.br
.EX
# struct ImportantExcerpt<'a> {
#     part: &'a str,
# }
# 
impl<'a> ImportantExcerpt<'a> {
    fn level(&self) \-> i32 {
        3
    }
}
# 
# impl<'a> ImportantExcerpt<'a> {
#     fn announce_and_return_part(&self, announcement: &str) \-> &str {
#         println!("Attention please: {}", announcement);
#         self\.part
#     }
# }
# 
# fn main() {
#     let novel = String::from("Call me Ishmael\. Some years ago\.\.\.");
#     let first_sentence = novel\.split('\.')\.next()\.expect("Could not find a '\.'");
#     let i = ImportantExcerpt {
#         part: first_sentence,
#     };
# }

.EE

.RE
.P
The lifetime parameter declaration after `\fIimpl\fR` and its use after the type nameare required, but we’re not required to annotate the lifetime of the referenceto `\fIself\fR` because of the first elision rule\.
.P
Here is an example where the third lifetime elision rule applies:
.RS
.IP \fBrust\fR 2

.br
.EX
# struct ImportantExcerpt<'a> {
#     part: &'a str,
# }
# 
# impl<'a> ImportantExcerpt<'a> {
#     fn level(&self) \-> i32 {
#         3
#     }
# }
# 
impl<'a> ImportantExcerpt<'a> {
    fn announce_and_return_part(&self, announcement: &str) \-> &str {
        println!("Attention please: {}", announcement);
        self\.part
    }
}
# 
# fn main() {
#     let novel = String::from("Call me Ishmael\. Some years ago\.\.\.");
#     let first_sentence = novel\.split('\.')\.next()\.expect("Could not find a '\.'");
#     let i = ImportantExcerpt {
#         part: first_sentence,
#     };
# }

.EE

.RE
.P
There are two input lifetimes, so Rust applies the first lifetime elision ruleand gives both `\fI&self\fR` and `\fIannouncement\fR` their own lifetimes\. Then, becauseone of the parameters is `\fI&self\fR`, the return type gets the lifetime of `\fI&self\fR`,and all lifetimes have been accounted for\.
.br

.br
\fBThe Static Lifetime\fR
.br
=====================
.br

.P
One special lifetime we need to discuss is `\fI'static\fR`, which means that thisreference \fIcan\fR live for the entire duration of the program\. All stringliterals have the `\fI'static\fR` lifetime, which we can annotate as follows:
.RS
.IP \fBrust\fR 2

.br
.EX
let s: &'static str = "I have a static lifetime\.";

.EE

.RE
.P
The text of this string is stored directly in the program’s binary, whichis always available\. Therefore, the lifetime of all string literals is`\fI'static\fR`\.
.P
You might see suggestions to use the `\fI'static\fR` lifetime in error messages\. Butbefore specifying `\fI'static\fR` as the lifetime for a reference, think aboutwhether the reference you have actually lives the entire lifetime of yourprogram or not\. You might consider whether you want it to live that long, evenif it could\. Most of the time, the problem results from attempting to create adangling reference or a mismatch of the available lifetimes\. In such cases, thesolution is fixing those problems, not specifying the `\fI'static\fR` lifetime\.
.br

.br
\fBGeneric Type Parameters, Trait Bounds, and Lifetimes Together\fR
.br
===============================================================
.br

.P
Let’s briefly look at the syntax of specifying generic type parameters, traitbounds, and lifetimes all in one function!
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let string1 = String::from("abcd");
#     let string2 = "xyz";
# 
#     let result = longest_with_an_announcement(
#         string1\.as_str(),
#         string2,
#         "Today is someone's birthday!",
#     );
#     println!("The longest string is {}", result);
# }
# 
use std::fmt::Display;

fn longest_with_an_announcement<'a, T>(
    x: &'a str,
    y: &'a str,
    ann: T,
) \-> &'a str
where
    T: Display,
{
    println!("Announcement! {}", ann);
    if x\.len() > y\.len() {
        x
    } else {
        y
    }
}

.EE

.RE
.P
This is the `\fIlongest\fR` function from Listing 10\-22 that returns the longer oftwo string slices\. But now it has an extra parameter named `\fIann\fR` of the generictype `\fIT\fR`, which can be filled in by any type that implements the `\fIDisplay\fR`trait as specified by the `\fIwhere\fR` clause\. This extra parameter will be printedbefore the function compares the lengths of the string slices, which is why the`\fIDisplay\fR` trait bound is necessary\. Because lifetimes are a type of generic,the declarations of the lifetime parameter `\fI'a\fR` and the generic type parameter`\fIT\fR` go in the same list inside the angle brackets after the function name\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
We covered a lot in this chapter! Now that you know about generic typeparameters, traits and trait bounds, and generic lifetime parameters, you’reready to write code without repetition that works in many different situations\.Generic type parameters let you apply the code to different types\. Traits andtrait bounds ensure that even though the types are generic, they’ll have thebehavior the code needs\. You learned how to use lifetime annotations to ensurethat this flexible code won’t have any dangling references\. And all of thisanalysis happens at compile time, which doesn’t affect runtime performance!
.P
Believe it or not, there is much more to learn on the topics we discussed inthis chapter: Chapter 17 discusses trait objects, which are another way to usetraits\. There are also more complex scenarios involving lifetime annotationsthat you will only need in very advanced scenarios; for those, you should readthe 
.UR \.\./reference/index\.html
.UE
Rust Reference\. But next, you’ll learn how to write tests inRust so you can make sure your code is working the way it should\.
.SH "Writing Automated Tests"

.br

.br
\fBWriting Automated Tests\fR
.br
=========================
.br

.P
In his 1972 essay “The Humble Programmer,” Edsger W\. Dijkstra said that“Program testing can be a very effective way to show the presence of bugs, butit is hopelessly inadequate for showing their absence\.” That doesn’t mean weshouldn’t try to test as much as we can!
.P
Correctness in our programs is the extent to which our code does what we intendit to do\. Rust is designed with a high degree of concern about the correctnessof programs, but correctness is complex and not easy to prove\. Rust’s typesystem shoulders a huge part of this burden, but the type system cannot catchevery kind of incorrectness\. As such, Rust includes support for writingautomated software tests within the language\.
.P
As an example, say we write a function called `\fIadd_two\fR` that adds 2 to whatevernumber is passed to it\. This function’s signature accepts an integer as aparameter and returns an integer as a result\. When we implement and compilethat function, Rust does all the type checking and borrow checking that you’velearned so far to ensure that, for instance, we aren’t passing a `\fIString\fR` valueor an invalid reference to this function\. But Rust \fIcan’t\fR check that thisfunction will do precisely what we intend, which is return the parameter plus 2rather than, say, the parameter plus 10 or the parameter minus 50! That’s wheretests come in\.
.P
We can write tests that assert, for example, that when we pass `\fI3\fR` to the`\fIadd_two\fR` function, the returned value is `\fI5\fR`\. We can run these tests wheneverwe make changes to our code to make sure any existing correct behavior has notchanged\.
.P
Testing is a complex skill: although we can’t cover every detail about how towrite good tests in one chapter, we’ll discuss the mechanics of Rust’s testingfacilities\. We’ll talk about the annotations and macros available to you whenwriting your tests, the default behavior and options provided for running yourtests, and how to organize tests into unit tests and integration tests\.
.SH "How to Write Tests"

.br

.br
\fBHow to Write Tests\fR
.br
====================
.br

.P
Tests are Rust functions that verify that the non\-test code is functioning inthe expected manner\. The bodies of test functions typically perform these threeactions:
.P
Set up any needed data or state\.
.P
Run the code you want to test\.
.P
Assert the results are what you expect\.
.P
Let’s look at the features Rust provides specifically for writing tests thattake these actions, which include the `\fItest\fR` attribute, a few macros, and the`\fIshould_panic\fR` attribute\.
.br

.br
\fBThe Anatomy of a Test Function\fR
.br
================================
.br

.P
At its simplest, a test in Rust is a function that’s annotated with the `\fItest\fR`attribute\. Attributes are metadata about pieces of Rust code; one example isthe `\fIderive\fR` attribute we used with structs in Chapter 5\. To change a functioninto a test function, add `\fI#[test]\fR` on the line before `\fIfn\fR`\. When you run yourtests with the `\fIcargo test\fR` command, Rust builds a test runner binary that runsthe functions annotated with the `\fItest\fR` attribute and reports on whether eachtest function passes or fails\.
.P
When we make a new library project with Cargo, a test module with a testfunction in it is automatically generated for us\. This module helps you startwriting your tests so you don’t have to look up the exact structure and syntaxof test functions every time you start a new project\. You can add as manyadditional test functions and as many test modules as you want!
.P
We’ll explore some aspects of how tests work by experimenting with the templatetest generated for us without actually testing any code\. Then we’ll write somereal\-world tests that call some code that we’ve written and assert that itsbehavior is correct\.
.P
Let’s create a new library project called `\fIadder\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new adder \-\-lib
     Created library `adder` project
$ cd adder

.EE

.RE
.P
The contents of the \fIsrc/lib\.rs\fR file in your `\fIadder\fR` library should look likeListing 11\-1\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}

.EE

.RE
Listing 11\-1: The test module and function generatedautomatically by `\fIcargo new\fR`
.P
For now, let’s ignore the top two lines and focus on the function to see how itworks\. Note the `\fI#[test]\fR` annotation before the `\fIfn\fR` line: this attributeindicates this is a test function, so the test runner knows to treat thisfunction as a test\. We could also have non\-test functions in the `\fItests\fR` moduleto help set up common scenarios or perform common operations, so we need toindicate which functions are tests by using the `\fI#[test]\fR` attribute\.
.P
The function body uses the `\fIassert_eq!\fR` macro to assert that 2 + 2 equals 4\.This assertion serves as an example of the format for a typical test\. Let’s runit to see that this test passes\.
.P
The `\fIcargo test\fR` command runs all tests in our project, as shown in Listing11\-2\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.57s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::it_works \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
Listing 11\-2: The output from running the automaticallygenerated test
.P
Cargo compiled and ran the test\. After the `\fICompiling\fR`, `\fIFinished\fR`, and`\fIRunning\fR` lines is the line `\fIrunning 1 test\fR`\. The next line shows the nameof the generated test function, called `\fIit_works\fR`, and the result of runningthat test, `\fIok\fR`\. The overall summary of running the tests appears next\. Thetext `\fItest result: ok\.\fR` means that all the tests passed, and the portion thatreads `\fI1 passed; 0 failed\fR` totals the number of tests that passed or failed\.
.P
Because we don’t have any tests we’ve marked as ignored, the summary shows `\fI0 ignored\fR`\. We also haven’t filtered the tests being run, so the end of thesummary shows `\fI0 filtered out\fR`\. We’ll talk about ignoring and filtering outtests in the next section, 
.UR ch11\-02\-running\-tests\.html#controlling\-how\-tests\-are\-run
.UE
“Controlling How Tests AreRun\.”
.P
The `\fI0 measured\fR` statistic is for benchmark tests that measure performance\.Benchmark tests are, as of this writing, only available in nightly Rust\. See
.UR \.\./unstable\-book/library\-features/test\.html
.UE
the documentation about benchmark tests to learn more\.
.P
The next part of the test output, which starts with `\fIDoc\-tests adder\fR`, is forthe results of any documentation tests\. We don’t have any documentation testsyet, but Rust can compile any code examples that appear in our APIdocumentation\. This feature helps us keep our docs and our code in sync! We’lldiscuss how to write documentation tests in the 
.UR ch14\-02\-publishing\-to\-crates\-io\.html#documentation\-comments\-as\-tests
.UE
“Documentation Comments asTests” section of Chapter 14\. For now, we’llignore the `\fIDoc\-tests\fR` output\.
.P
Let’s change the name of our test to see how that changes the test output\.Change the `\fIit_works\fR` function to a different name, such as `\fIexploration\fR`, likeso:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn exploration() {
        assert_eq!(2 + 2, 4);
    }
}

.EE

.RE
.P
Then run `\fIcargo test\fR` again\. The output now shows `\fIexploration\fR` instead of`\fIit_works\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.59s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::exploration \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Let’s add another test, but this time we’ll make a test that fails! Tests failwhen something in the test function panics\. Each test is run in a new thread,and when the main thread sees that a test thread has died, the test is markedas failed\. We talked about the simplest way to cause a panic in Chapter 9,which is to call the `\fIpanic!\fR` macro\. Enter the new test, `\fIanother\fR`, so your\fIsrc/lib\.rs\fR file looks like Listing 11\-3\.Filename: src/lib\.rs
.RS
.IP \fBrust,panics,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn exploration() {
        assert_eq!(2 + 2, 4);
    }

    #[test]
    fn another() {
        panic!("Make this test fail");
    }
}

.EE

.RE
Listing 11\-3: Adding a second test that will fail becausewe call the `\fIpanic!\fR` macro
.P
Run the tests again using `\fIcargo test\fR`\. The output should look like Listing11\-4, which shows that our `\fIexploration\fR` test passed and `\fIanother\fR` failed\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.72s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 2 tests
test tests::another \.\.\. FAILED
test tests::exploration \.\.\. ok

failures:

\-\-\-\- tests::another stdout \-\-\-\-
thread 'main' panicked at 'Make this test fail', src/lib\.rs:10:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::another

test result: FAILED\. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
Listing 11\-4: Test results when one test passes and onetest fails
.P
Instead of `\fIok\fR`, the line `\fItest tests::another\fR` shows `\fIFAILED\fR`\. Two newsections appear between the individual results and the summary: the firstsection displays the detailed reason for each test failure\. In this case,`\fIanother\fR` failed because it `\fIpanicked at 'Make this test fail'\fR`, which happenedon line 10 in the \fIsrc/lib\.rs\fR file\. The next section lists just the names ofall the failing tests, which is useful when there are lots of tests and lots ofdetailed failing test output\. We can use the name of a failing test to run justthat test to more easily debug it; we’ll talk more about ways to run tests inthe 
.UR ch11\-02\-running\-tests\.html#controlling\-how\-tests\-are\-run
.UE
“Controlling How Tests Are Run” section\.
.P
The summary line displays at the end: overall, our test result is `\fIFAILED\fR`\.We had one test pass and one test fail\.
.P
Now that you’ve seen what the test results look like in different scenarios,let’s look at some macros other than `\fIpanic!\fR` that are useful in tests\.
.br

.br
\fBChecking Results with the \fR
.br
============================
.br
`\fIassert!\fR` Macro
.P
The `\fIassert!\fR` macro, provided by the standard library, is useful when you wantto ensure that some condition in a test evaluates to `\fItrue\fR`\. We give the`\fIassert!\fR` macro an argument that evaluates to a Boolean\. If the value is`\fItrue\fR`, `\fIassert!\fR` does nothing and the test passes\. If the value is `\fIfalse\fR`,the `\fIassert!\fR` macro calls the `\fIpanic!\fR` macro, which causes the test to fail\.Using the `\fIassert!\fR` macro helps us check that our code is functioning in theway we intend\.
.P
In Chapter 5, Listing 5\-15, we used a `\fIRectangle\fR` struct and a `\fIcan_hold\fR`method, which are repeated here in Listing 11\-5\. Let’s put this code in the\fIsrc/lib\.rs\fR file and write some tests for it using the `\fIassert!\fR` macro\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

impl Rectangle {
    fn can_hold(&self, other: &Rectangle) \-> bool {
        self\.width > other\.width && self\.height > other\.height
    }
}

.EE

.RE
Listing 11\-5: Using the `\fIRectangle\fR` struct and its`\fIcan_hold\fR` method from Chapter 5
.P
The `\fIcan_hold\fR` method returns a Boolean, which means it’s a perfect use casefor the `\fIassert!\fR` macro\. In Listing 11\-6, we write a test that exercises the`\fIcan_hold\fR` method by creating a `\fIRectangle\fR` instance that has a width of 8 anda height of 7 and asserting that it can hold another `\fIRectangle\fR` instance thathas a width of 5 and a height of 1\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
# impl Rectangle {
#     fn can_hold(&self, other: &Rectangle) \-> bool {
#         self\.width > other\.width && self\.height > other\.height
#     }
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn larger_can_hold_smaller() {
        let larger = Rectangle {
            width: 8,
            height: 7,
        };
        let smaller = Rectangle {
            width: 5,
            height: 1,
        };

        assert!(larger\.can_hold(&smaller));
    }
}

.EE

.RE
Listing 11\-6: A test for `\fIcan_hold\fR` that checks whether alarger rectangle can indeed hold a smaller rectangle
.P
Note that we’ve added a new line inside the `\fItests\fR` module: `\fIuse super::*;\fR`\.The `\fItests\fR` module is a regular module that follows the usual visibility ruleswe covered in Chapter 7 in the 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html
.UE
“Paths for Referring to an Item in the ModuleTree”section\. Because the `\fItests\fR` module is an inner module, we need to bring thecode under test in the outer module into the scope of the inner module\. We usea glob here so anything we define in the outer module is available to this`\fItests\fR` module\.
.P
We’ve named our test `\fIlarger_can_hold_smaller\fR`, and we’ve created the two`\fIRectangle\fR` instances that we need\. Then we called the `\fIassert!\fR` macro andpassed it the result of calling `\fIlarger\.can_hold(&smaller)\fR`\. This expressionis supposed to return `\fItrue\fR`, so our test should pass\. Let’s find out!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling rectangle v0\.1\.0 (file:///projects/rectangle)
    Finished test [unoptimized + debuginfo] target(s) in 0\.66s
     Running unittests (target/debug/deps/rectangle\-6584c4561e48942e)

running 1 test
test tests::larger_can_hold_smaller \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests rectangle

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
It does pass! Let’s add another test, this time asserting that a smallerrectangle cannot hold a larger rectangle:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
# impl Rectangle {
#     fn can_hold(&self, other: &Rectangle) \-> bool {
#         self\.width > other\.width && self\.height > other\.height
#     }
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn larger_can_hold_smaller() {
        // \-\-snip\-\-
#         let larger = Rectangle {
#             width: 8,
#             height: 7,
#         };
#         let smaller = Rectangle {
#             width: 5,
#             height: 1,
#         };
# 
#         assert!(larger\.can_hold(&smaller));
    }

    #[test]
    fn smaller_cannot_hold_larger() {
        let larger = Rectangle {
            width: 8,
            height: 7,
        };
        let smaller = Rectangle {
            width: 5,
            height: 1,
        };

        assert!(!smaller\.can_hold(&larger));
    }
}

.EE

.RE
.P
Because the correct result of the `\fIcan_hold\fR` function in this case is `\fIfalse\fR`,we need to negate that result before we pass it to the `\fIassert!\fR` macro\. As aresult, our test will pass if `\fIcan_hold\fR` returns `\fIfalse\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling rectangle v0\.1\.0 (file:///projects/rectangle)
    Finished test [unoptimized + debuginfo] target(s) in 0\.66s
     Running unittests (target/debug/deps/rectangle\-6584c4561e48942e)

running 2 tests
test tests::larger_can_hold_smaller \.\.\. ok
test tests::smaller_cannot_hold_larger \.\.\. ok

test result: ok\. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests rectangle

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Two tests that pass! Now let’s see what happens to our test results when weintroduce a bug in our code\. Let’s change the implementation of the `\fIcan_hold\fR`method by replacing the greater than sign with a less than sign when itcompares the widths:
.RS
.IP \fBrust,not_desired_behavior,noplayground\fR 2

.br
.EX
# #[derive(Debug)]
# struct Rectangle {
#     width: u32,
#     height: u32,
# }
# 
// \-\-snip\-\-
impl Rectangle {
    fn can_hold(&self, other: &Rectangle) \-> bool {
        self\.width < other\.width && self\.height > other\.height
    }
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn larger_can_hold_smaller() {
#         let larger = Rectangle {
#             width: 8,
#             height: 7,
#         };
#         let smaller = Rectangle {
#             width: 5,
#             height: 1,
#         };
# 
#         assert!(larger\.can_hold(&smaller));
#     }
# 
#     #[test]
#     fn smaller_cannot_hold_larger() {
#         let larger = Rectangle {
#             width: 8,
#             height: 7,
#         };
#         let smaller = Rectangle {
#             width: 5,
#             height: 1,
#         };
# 
#         assert!(!smaller\.can_hold(&larger));
#     }
# }

.EE

.RE
.P
Running the tests now produces the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling rectangle v0\.1\.0 (file:///projects/rectangle)
    Finished test [unoptimized + debuginfo] target(s) in 0\.66s
     Running unittests (target/debug/deps/rectangle\-6584c4561e48942e)

running 2 tests
test tests::larger_can_hold_smaller \.\.\. FAILED
test tests::smaller_cannot_hold_larger \.\.\. ok

failures:

\-\-\-\- tests::larger_can_hold_smaller stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: larger\.can_hold(&smaller)', src/lib\.rs:28:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::larger_can_hold_smaller

test result: FAILED\. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Our tests caught the bug! Because `\fIlarger\.width\fR` is 8 and `\fIsmaller\.width\fR` is5, the comparison of the widths in `\fIcan_hold\fR` now returns `\fIfalse\fR`: 8 is notless than 5\.
.br

.br
\fBTesting Equality with the \fR
.br
============================
.br
`\fIassert_eq!\fR` and `\fIassert_ne!\fR` Macros
.P
A common way to test functionality is to compare the result of the code undertest to the value you expect the code to return to make sure they’re equal\. Youcould do this using the `\fIassert!\fR` macro and passing it an expression using the`\fI==\fR` operator\. However, this is such a common test that the standard libraryprovides a pair of macros—`\fIassert_eq!\fR` and `\fIassert_ne!\fR`—to perform this testmore conveniently\. These macros compare two arguments for equality orinequality, respectively\. They’ll also print the two values if the assertionfails, which makes it easier to see \fIwhy\fR the test failed; conversely, the`\fIassert!\fR` macro only indicates that it got a `\fIfalse\fR` value for the `\fI==\fR`expression, not the values that led to the `\fIfalse\fR` value\.
.P
In Listing 11\-7, we write a function named `\fIadd_two\fR` that adds `\fI2\fR` to itsparameter and returns the result\. Then we test this function using the`\fIassert_eq!\fR` macro\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_two(a: i32) \-> i32 {
    a + 2
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_adds_two() {
        assert_eq!(4, add_two(2));
    }
}

.EE

.RE
Listing 11\-7: Testing the function `\fIadd_two\fR` using the`\fIassert_eq!\fR` macro
.P
Let’s check that it passes!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.58s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::it_adds_two \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
The first argument we gave to the `\fIassert_eq!\fR` macro, `\fI4\fR`, is equal to theresult of calling `\fIadd_two(2)\fR`\. The line for this test is `\fItest tests::it_adds_two \.\.\. ok\fR`, and the `\fIok\fR` text indicates that our test passed!
.P
Let’s introduce a bug into our code to see what it looks like when a test thatuses `\fIassert_eq!\fR` fails\. Change the implementation of the `\fIadd_two\fR` function toinstead add `\fI3\fR`:
.RS
.IP \fBrust,not_desired_behavior,noplayground\fR 2

.br
.EX
pub fn add_two(a: i32) \-> i32 {
    a + 3
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn it_adds_two() {
#         assert_eq!(4, add_two(2));
#     }
# }

.EE

.RE
.P
Run the tests again:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.61s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::it_adds_two \.\.\. FAILED

failures:

\-\-\-\- tests::it_adds_two stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `4`,
 right: `5`', src/lib\.rs:11:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::it_adds_two

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Our test caught the bug! The `\fIit_adds_two\fR` test failed, displaying the message`\fIassertion failed: `(left == right)`\fR` and showing that `\fIleft\fR` was `\fI4\fR` and`\fIright\fR` was `\fI5\fR`\. This message is useful and helps us start debugging: it meansthe `\fIleft\fR` argument to `\fIassert_eq!\fR` was `\fI4\fR` but the `\fIright\fR` argument, where wehad `\fIadd_two(2)\fR`, was `\fI5\fR`\.
.P
Note that in some languages and test frameworks, the parameters to thefunctions that assert two values are equal are called `\fIexpected\fR` and `\fIactual\fR`,and the order in which we specify the arguments matters\. However, in Rust,they’re called `\fIleft\fR` and `\fIright\fR`, and the order in which we specify the valuewe expect and the value that the code under test produces doesn’t matter\. Wecould write the assertion in this test as `\fIassert_eq!(add_two(2), 4)\fR`, whichwould result in a failure message that displays `\fIassertion failed: `(left == right)`\fR` and that `\fIleft\fR` was `\fI5\fR` and `\fIright\fR` was `\fI4\fR`\.
.P
The `\fIassert_ne!\fR` macro will pass if the two values we give it are not equal andfail if they’re equal\. This macro is most useful for cases when we’re not surewhat a value \fIwill\fR be, but we know what the value definitely \fIwon’t\fR be if ourcode is functioning as we intend\. For example, if we’re testing a function thatis guaranteed to change its input in some way, but the way in which the inputis changed depends on the day of the week that we run our tests, the best thingto assert might be that the output of the function is not equal to the input\.
.P
Under the surface, the `\fIassert_eq!\fR` and `\fIassert_ne!\fR` macros use the operators`\fI==\fR` and `\fI!=\fR`, respectively\. When the assertions fail, these macros print theirarguments using debug formatting, which means the values being compared mustimplement the `\fIPartialEq\fR` and `\fIDebug\fR` traits\. All the primitive types and mostof the standard library types implement these traits\. For structs and enumsthat you define, you’ll need to implement `\fIPartialEq\fR` to assert that values ofthose types are equal or not equal\. You’ll need to implement `\fIDebug\fR` to printthe values when the assertion fails\. Because both traits are derivable traits,as mentioned in Listing 5\-12 in Chapter 5, this is usually as straightforwardas adding the `\fI#[derive(PartialEq, Debug)]\fR` annotation to your struct or enumdefinition\. See Appendix C, 
.UR appendix\-03\-derivable\-traits\.html
.UE
“Derivable Traits,” for more details about these and other derivable traits\.
.br

.br
\fBAdding Custom Failure Messages\fR
.br
================================
.br

.P
You can also add a custom message to be printed with the failure message asoptional arguments to the `\fIassert!\fR`, `\fIassert_eq!\fR`, and `\fIassert_ne!\fR` macros\. Anyarguments specified after the one required argument to `\fIassert!\fR` or the tworequired arguments to `\fIassert_eq!\fR` and `\fIassert_ne!\fR` are passed along to the`\fIformat!\fR` macro (discussed in Chapter 8 in the 
.UR ch08\-02\-strings\.html#concatenation\-with\-the\-\-operator\-or\-the\-format\-macro
.UE
“Concatenation with the `\fI+\fR`Operator or the `\fIformat!\fR`Macro”section), so you can pass a format string that contains `\fI{}\fR` placeholders andvalues to go in those placeholders\. Custom messages are useful to documentwhat an assertion means; when a test fails, you’ll have a better idea of whatthe problem is with the code\.
.P
For example, let’s say we have a function that greets people by name and wewant to test that the name we pass into the function appears in the output:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn greeting(name: &str) \-> String {
    format!("Hello {}!", name)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn greeting_contains_name() {
        let result = greeting("Carol");
        assert!(result\.contains("Carol"));
    }
}

.EE

.RE
.P
The requirements for this program haven’t been agreed upon yet, and we’repretty sure the `\fIHello\fR` text at the beginning of the greeting will change\. Wedecided we don’t want to have to update the test when the requirements change,so instead of checking for exact equality to the value returned from the`\fIgreeting\fR` function, we’ll just assert that the output contains the text of theinput parameter\.
.P
Let’s introduce a bug into this code by changing `\fIgreeting\fR` to not include`\fIname\fR` to see what this test failure looks like:
.RS
.IP \fBrust,not_desired_behavior,noplayground\fR 2

.br
.EX
pub fn greeting(name: &str) \-> String {
    String::from("Hello!")
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn greeting_contains_name() {
#         let result = greeting("Carol");
#         assert!(result\.contains("Carol"));
#     }
# }

.EE

.RE
.P
Running this test produces the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling greeter v0\.1\.0 (file:///projects/greeter)
    Finished test [unoptimized + debuginfo] target(s) in 0\.91s
     Running unittests (target/debug/deps/greeter\-170b942eb5bf5e3a)

running 1 test
test tests::greeting_contains_name \.\.\. FAILED

failures:

\-\-\-\- tests::greeting_contains_name stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: result\.contains(\"Carol\")', src/lib\.rs:12:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::greeting_contains_name

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
This result just indicates that the assertion failed and which line theassertion is on\. A more useful failure message in this case would print thevalue we got from the `\fIgreeting\fR` function\. Let’s change the test function,giving it a custom failure message made from a format string with a placeholderfilled in with the actual value we got from the `\fIgreeting\fR` function:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# pub fn greeting(name: &str) \-> String {
#     String::from("Hello!")
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
    #[test]
    fn greeting_contains_name() {
        let result = greeting("Carol");
        assert!(
            result\.contains("Carol"),
            "Greeting did not contain name, value was `{}`",
            result
        );
    }
# }

.EE

.RE
.P
Now when we run the test, we’ll get a more informative error message:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling greeter v0\.1\.0 (file:///projects/greeter)
    Finished test [unoptimized + debuginfo] target(s) in 0\.93s
     Running unittests (target/debug/deps/greeter\-170b942eb5bf5e3a)

running 1 test
test tests::greeting_contains_name \.\.\. FAILED

failures:

\-\-\-\- tests::greeting_contains_name stdout \-\-\-\-
thread 'main' panicked at 'Greeting did not contain name, value was `Hello!`', src/lib\.rs:12:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::greeting_contains_name

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
We can see the value we actually got in the test output, which would help usdebug what happened instead of what we were expecting to happen\.
.br

.br
\fBChecking for Panics with \fR
.br
===========================
.br
`\fIshould_panic\fR`
.P
In addition to checking that our code returns the correct values we expect,it’s also important to check that our code handles error conditions as weexpect\. For example, consider the `\fIGuess\fR` type that we created in Chapter 9,Listing 9\-10\. Other code that uses `\fIGuess\fR` depends on the guarantee that `\fIGuess\fR`instances will contain only values between 1 and 100\. We can write a test thatensures that attempting to create a `\fIGuess\fR` instance with a value outside thatrange panics\.
.P
We do this by adding another attribute, `\fIshould_panic\fR`, to our test function\.This attribute makes a test pass if the code inside the function panics; thetest will fail if the code inside the function doesn’t panic\.
.P
Listing 11\-8 shows a test that checks that the error conditions of `\fIGuess::new\fR`happen when we expect them to\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct Guess {
    value: i32,
}

impl Guess {
    pub fn new(value: i32) \-> Guess {
        if value < 1 || value > 100 {
            panic!("Guess value must be between 1 and 100, got {}\.", value);
        }

        Guess { value }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    #[should_panic]
    fn greater_than_100() {
        Guess::new(200);
    }
}

.EE

.RE
Listing 11\-8: Testing that a condition will cause a`\fIpanic!\fR`
.P
We place the `\fI#[should_panic]\fR` attribute after the `\fI#[test]\fR` attribute andbefore the test function it applies to\. Let’s look at the result when this testpasses:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished test [unoptimized + debuginfo] target(s) in 0\.58s
     Running unittests (target/debug/deps/guessing_game\-57d70c3acb738f4d)

running 1 test
test tests::greater_than_100 \- should panic \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests guessing_game

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Looks good! Now let’s introduce a bug in our code by removing the conditionthat the `\fInew\fR` function will panic if the value is greater than 100:
.RS
.IP \fBrust,not_desired_behavior,noplayground\fR 2

.br
.EX
# pub struct Guess {
#     value: i32,
# }
# 
// \-\-snip\-\-
impl Guess {
    pub fn new(value: i32) \-> Guess {
        if value < 1 {
            panic!("Guess value must be between 1 and 100, got {}\.", value);
        }

        Guess { value }
    }
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     #[should_panic]
#     fn greater_than_100() {
#         Guess::new(200);
#     }
# }

.EE

.RE
.P
When we run the test in Listing 11\-8, it will fail:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished test [unoptimized + debuginfo] target(s) in 0\.62s
     Running unittests (target/debug/deps/guessing_game\-57d70c3acb738f4d)

running 1 test
test tests::greater_than_100 \- should panic \.\.\. FAILED

failures:

\-\-\-\- tests::greater_than_100 stdout \-\-\-\-
note: test did not panic as expected

failures:
    tests::greater_than_100

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
We don’t get a very helpful message in this case, but when we look at the testfunction, we see that it’s annotated with `\fI#[should_panic]\fR`\. The failure we gotmeans that the code in the test function did not cause a panic\.
.P
Tests that use `\fIshould_panic\fR` can be imprecise because they only indicate thatthe code has caused some panic\. A `\fIshould_panic\fR` test would pass even if thetest panics for a different reason from the one we were expecting to happen\. Tomake `\fIshould_panic\fR` tests more precise, we can add an optional `\fIexpected\fR`parameter to the `\fIshould_panic\fR` attribute\. The test harness will make sure thatthe failure message contains the provided text\. For example, consider themodified code for `\fIGuess\fR` in Listing 11\-9 where the `\fInew\fR` function panics withdifferent messages depending on whether the value is too small or too large\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Guess {
#     value: i32,
# }
# 
// \-\-snip\-\-
impl Guess {
    pub fn new(value: i32) \-> Guess {
        if value < 1 {
            panic!(
                "Guess value must be greater than or equal to 1, got {}\.",
                value
            );
        } else if value > 100 {
            panic!(
                "Guess value must be less than or equal to 100, got {}\.",
                value
            );
        }

        Guess { value }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    #[should_panic(expected = "Guess value must be less than or equal to 100")]
    fn greater_than_100() {
        Guess::new(200);
    }
}

.EE

.RE
Listing 11\-9: Testing that a condition will cause a`\fIpanic!\fR` with a particular panic message
.P
This test will pass because the value we put in the `\fIshould_panic\fR` attribute’s`\fIexpected\fR` parameter is a substring of the message that the `\fIGuess::new\fR`function panics with\. We could have specified the entire panic message that weexpect, which in this case would be `\fIGuess value must be less than or equal to 100, got 200\.\fR` What you choose to specify in the expected parameter for`\fIshould_panic\fR` depends on how much of the panic message is unique or dynamicand how precise you want your test to be\. In this case, a substring of thepanic message is enough to ensure that the code in the test function executesthe `\fIelse if value > 100\fR` case\.
.P
To see what happens when a `\fIshould_panic\fR` test with an `\fIexpected\fR` messagefails, let’s again introduce a bug into our code by swapping the bodies of the`\fIif value < 1\fR` and the `\fIelse if value > 100\fR` blocks:
.RS
.IP \fBrust,ignore,not_desired_behavior\fR 2

.br
.EX
# pub struct Guess {
#     value: i32,
# }
# 
# impl Guess {
#     pub fn new(value: i32) \-> Guess {
        if value < 1 {
            panic!(
                "Guess value must be less than or equal to 100, got {}\.",
                value
            );
        } else if value > 100 {
            panic!(
                "Guess value must be greater than or equal to 1, got {}\.",
                value
            );
        }
# 
#         Guess { value }
#     }
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     #[should_panic(expected = "Guess value must be less than or equal to 100")]
#     fn greater_than_100() {
#         Guess::new(200);
#     }
# }

.EE

.RE
.P
This time when we run the `\fIshould_panic\fR` test, it will fail:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling guessing_game v0\.1\.0 (file:///projects/guessing_game)
    Finished test [unoptimized + debuginfo] target(s) in 0\.66s
     Running unittests (target/debug/deps/guessing_game\-57d70c3acb738f4d)

running 1 test
test tests::greater_than_100 \- should panic \.\.\. FAILED

failures:

\-\-\-\- tests::greater_than_100 stdout \-\-\-\-
thread 'main' panicked at 'Guess value must be greater than or equal to 1, got 200\.', src/lib\.rs:13:13
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
note: panic did not contain expected string
      panic message: `"Guess value must be greater than or equal to 1, got 200\."`,
 expected substring: `"Guess value must be less than or equal to 100"`

failures:
    tests::greater_than_100

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
The failure message indicates that this test did indeed panic as we expected,but the panic message did not include the expected string `\fI'Guess value must be less than or equal to 100'\fR`\. The panic message that we did get in this case was`\fIGuess value must be greater than or equal to 1, got 200\.\fR` Now we can startfiguring out where our bug is!
.br

.br
\fBUsing \fR
.br
========
.br
`\fIResult<T, E>\fR` in Tests
.P
So far, we’ve written tests that panic when they fail\. We can also write teststhat use `\fIResult<T, E>\fR`! Here’s the test from Listing 11\-1, rewritten to use`\fIResult<T, E>\fR` and return an `\fIErr\fR` instead of panicking:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() \-> Result<(), String> {
        if 2 + 2 == 4 {
            Ok(())
        } else {
            Err(String::from("two plus two does not equal four"))
        }
    }
}

.EE

.RE
.P
The `\fIit_works\fR` function now has a return type, `\fIResult<(), String>\fR`\. In thebody of the function, rather than calling the `\fIassert_eq!\fR` macro, we return`\fIOk(())\fR` when the test passes and an `\fIErr\fR` with a `\fIString\fR` inside when the testfails\.
.P
Writing tests so they return a `\fIResult<T, E>\fR` enables you to use the questionmark operator in the body of tests, which can be a convenient way to writetests that should fail if any operation within them returns an `\fIErr\fR` variant\.
.P
You can’t use the `\fI#[should_panic]\fR` annotation on tests that use `\fIResult<T, E>\fR`\. Instead, you should return an `\fIErr\fR` value directly when the test shouldfail\.
.P
Now that you know several ways to write tests, let’s look at what is happeningwhen we run our tests and explore the different options we can use with `\fIcargo test\fR`\.
.SH "Controlling How Tests Are Run"

.br

.br
\fBControlling How Tests Are Run\fR
.br
===============================
.br

.P
Just as `\fIcargo run\fR` compiles your code and then runs the resulting binary,`\fIcargo test\fR` compiles your code in test mode and runs the resulting testbinary\. You can specify command line options to change the default behavior of`\fIcargo test\fR`\. For example, the default behavior of the binary produced by`\fIcargo test\fR` is to run all the tests in parallel and capture output generatedduring test runs, preventing the output from being displayed and making iteasier to read the output related to the test results\.
.P
Some command line options go to `\fIcargo test\fR`, and some go to the resulting testbinary\. To separate these two types of arguments, you list the arguments thatgo to `\fIcargo test\fR` followed by the separator `\fI\-\-\fR` and then the ones that go tothe test binary\. Running `\fIcargo test \-\-help\fR` displays the options you can usewith `\fIcargo test\fR`, and running `\fIcargo test \-\- \-\-help\fR` displays the options youcan use after the separator `\fI\-\-\fR`\.
.br

.br
\fBRunning Tests in Parallel or Consecutively\fR
.br
============================================
.br

.P
When you run multiple tests, by default they run in parallel using threads\.This means the tests will finish running faster so you can get feedback quickeron whether or not your code is working\. Because the tests are running at thesame time, make sure your tests don’t depend on each other or on any sharedstate, including a shared environment, such as the current working directory orenvironment variables\.
.P
For example, say each of your tests runs some code that creates a file on disknamed \fItest\-output\.txt\fR and writes some data to that file\. Then each test readsthe data in that file and asserts that the file contains a particular value,which is different in each test\. Because the tests run at the same time, onetest might overwrite the file between when another test writes and reads thefile\. The second test will then fail, not because the code is incorrect butbecause the tests have interfered with each other while running in parallel\.One solution is to make sure each test writes to a different file; anothersolution is to run the tests one at a time\.
.P
If you don’t want to run the tests in parallel or if you want more fine\-grainedcontrol over the number of threads used, you can send the `\fI\-\-test\-threads\fR` flagand the number of threads you want to use to the test binary\. Take a look atthe following example:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\- \-\-test\-threads=1

.EE

.RE
.P
We set the number of test threads to `\fI1\fR`, telling the program not to use anyparallelism\. Running the tests using one thread will take longer than runningthem in parallel, but the tests won’t interfere with each other if they sharestate\.
.br

.br
\fBShowing Function Output\fR
.br
=========================
.br

.P
By default, if a test passes, Rust’s test library captures anything printed tostandard output\. For example, if we call `\fIprintln!\fR` in a test and the testpasses, we won’t see the `\fIprintln!\fR` output in the terminal; we’ll see only theline that indicates the test passed\. If a test fails, we’ll see whatever wasprinted to standard output with the rest of the failure message\.
.P
As an example, Listing 11\-10 has a silly function that prints the value of itsparameter and returns 10, as well as a test that passes and a test that fails\.Filename: src/lib\.rs
.RS
.IP \fBrust,panics,noplayground\fR 2

.br
.EX
fn prints_and_returns_10(a: i32) \-> i32 {
    println!("I got the value {}", a);
    10
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn this_test_will_pass() {
        let value = prints_and_returns_10(4);
        assert_eq!(10, value);
    }

    #[test]
    fn this_test_will_fail() {
        let value = prints_and_returns_10(8);
        assert_eq!(5, value);
    }
}

.EE

.RE
Listing 11\-10: Tests for a function that calls`\fIprintln!\fR`
.P
When we run these tests with `\fIcargo test\fR`, we’ll see the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling silly\-function v0\.1\.0 (file:///projects/silly\-function)
    Finished test [unoptimized + debuginfo] target(s) in 0\.58s
     Running unittests (target/debug/deps/silly_function\-160869f38cff9166)

running 2 tests
test tests::this_test_will_fail \.\.\. FAILED
test tests::this_test_will_pass \.\.\. ok

failures:

\-\-\-\- tests::this_test_will_fail stdout \-\-\-\-
I got the value 8
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `5`,
 right: `10`', src/lib\.rs:19:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::this_test_will_fail

test result: FAILED\. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Note that nowhere in this output do we see `\fII got the value 4\fR`, which is whatis printed when the test that passes runs\. That output has been captured\. Theoutput from the test that failed, `\fII got the value 8\fR`, appears in the sectionof the test summary output, which also shows the cause of the test failure\.
.P
If we want to see printed values for passing tests as well, we can tell Rustto also show the output of successful tests at the end with `\fI\-\-show\-output\fR`\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\- \-\-show\-output

.EE

.RE
.P
When we run the tests in Listing 11\-10 again with the `\fI\-\-show\-output\fR` flag, wesee the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\- \-\-show\-output
   Compiling silly\-function v0\.1\.0 (file:///projects/silly\-function)
    Finished test [unoptimized + debuginfo] target(s) in 0\.60s
     Running unittests (target/debug/deps/silly_function\-160869f38cff9166)

running 2 tests
test tests::this_test_will_fail \.\.\. FAILED
test tests::this_test_will_pass \.\.\. ok

successes:

\-\-\-\- tests::this_test_will_pass stdout \-\-\-\-
I got the value 4


successes:
    tests::this_test_will_pass

failures:

\-\-\-\- tests::this_test_will_fail stdout \-\-\-\-
I got the value 8
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `5`,
 right: `10`', src/lib\.rs:19:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::this_test_will_fail

test result: FAILED\. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE

.br

.br
\fBRunning a Subset of Tests by Name\fR
.br
===================================
.br

.P
Sometimes, running a full test suite can take a long time\. If you’re working oncode in a particular area, you might want to run only the tests pertaining tothat code\. You can choose which tests to run by passing `\fIcargo test\fR` the nameor names of the test(s) you want to run as an argument\.
.P
To demonstrate how to run a subset of tests, we’ll create three tests for our`\fIadd_two\fR` function, as shown in Listing 11\-11, and choose which ones to run\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_two(a: i32) \-> i32 {
    a + 2
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn add_two_and_two() {
        assert_eq!(4, add_two(2));
    }

    #[test]
    fn add_three_and_two() {
        assert_eq!(5, add_two(3));
    }

    #[test]
    fn one_hundred() {
        assert_eq!(102, add_two(100));
    }
}

.EE

.RE
Listing 11\-11: Three tests with three differentnames
.P
If we run the tests without passing any arguments, as we saw earlier, all thetests will run in parallel:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.62s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 3 tests
test tests::add_three_and_two \.\.\. ok
test tests::add_two_and_two \.\.\. ok
test tests::one_hundred \.\.\. ok

test result: ok\. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE

.br

.br
\fBRunning Single Tests\fR
.br
======================
.br

.P
We can pass the name of any test function to `\fIcargo test\fR` to run only that test:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test one_hundred
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.69s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::one_hundred \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out; finished in 0\.00s


.EE

.RE
.P
Only the test with the name `\fIone_hundred\fR` ran; the other two tests didn’t matchthat name\. The test output lets us know we had more tests than what thiscommand ran by displaying `\fI2 filtered out\fR` at the end of the summary line\.
.P
We can’t specify the names of multiple tests in this way; only the first valuegiven to `\fIcargo test\fR` will be used\. But there is a way to run multiple tests\.
.br

.br
\fBFiltering to Run Multiple Tests\fR
.br
=================================
.br

.P
We can specify part of a test name, and any test whose name matches that valuewill be run\. For example, because two of our tests’ names contain `\fIadd\fR`, we canrun those two by running `\fIcargo test add\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test add
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.61s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 2 tests
test tests::add_three_and_two \.\.\. ok
test tests::add_two_and_two \.\.\. ok

test result: ok\. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0\.00s


.EE

.RE
.P
This command ran all tests with `\fIadd\fR` in the name and filtered out the testnamed `\fIone_hundred\fR`\. Also note that the module in which a test appears becomespart of the test’s name, so we can run all the tests in a module by filteringon the module’s name\.
.br

.br
\fBIgnoring Some Tests Unless Specifically Requested\fR
.br
===================================================
.br

.P
Sometimes a few specific tests can be very time\-consuming to execute, so youmight want to exclude them during most runs of `\fIcargo test\fR`\. Rather thanlisting as arguments all tests you do want to run, you can instead annotate thetime\-consuming tests using the `\fIignore\fR` attribute to exclude them, as shownhere:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[test]
fn it_works() {
    assert_eq!(2 + 2, 4);
}

#[test]
#[ignore]
fn expensive_test() {
    // code that takes an hour to run
}

.EE

.RE
.P
After `\fI#[test]\fR` we add the `\fI#[ignore]\fR` line to the test we want to exclude\. Nowwhen we run our tests, `\fIit_works\fR` runs, but `\fIexpensive_test\fR` doesn’t:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.60s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 2 tests
test expensive_test \.\.\. ignored
test it_works \.\.\. ok

test result: ok\. 1 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out; finished in 0\.02s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
The `\fIexpensive_test\fR` function is listed as `\fIignored\fR`\. If we want to run onlythe ignored tests, we can use `\fIcargo test \-\- \-\-ignored\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\- \-\-ignored
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.61s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test expensive_test \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
By controlling which tests run, you can make sure your `\fIcargo test\fR` resultswill be fast\. When you’re at a point where it makes sense to check the resultsof the `\fIignored\fR` tests and you have time to wait for the results, you can run`\fIcargo test \-\- \-\-ignored\fR` instead\.
.SH "Test Organization"

.br

.br
\fBTest Organization\fR
.br
===================
.br

.P
As mentioned at the start of the chapter, testing is a complex discipline, anddifferent people use different terminology and organization\. The Rust communitythinks about tests in terms of two main categories: \fIunit tests\fR and\fIintegration tests\fR\. Unit tests are small and more focused, testing one modulein isolation at a time, and can test private interfaces\. Integration tests areentirely external to your library and use your code in the same way any otherexternal code would, using only the public interface and potentially exercisingmultiple modules per test\.
.P
Writing both kinds of tests is important to ensure that the pieces of yourlibrary are doing what you expect them to, separately and together\.
.br

.br
\fBUnit Tests\fR
.br
============
.br

.P
The purpose of unit tests is to test each unit of code in isolation from therest of the code to quickly pinpoint where code is and isn’t working asexpected\. You’ll put unit tests in the \fIsrc\fR directory in each file with thecode that they’re testing\. The convention is to create a module named `\fItests\fR`in each file to contain the test functions and to annotate the module with`\fIcfg(test)\fR`\.
.br

.br
\fBThe Tests Module and \fR
.br
=======================
.br
`\fI#[cfg(test)]\fR`
.P
The `\fI#[cfg(test)]\fR` annotation on the tests module tells Rust to compile and runthe test code only when you run `\fIcargo test\fR`, not when you run `\fIcargo build\fR`\.This saves compile time when you only want to build the library and saves spacein the resulting compiled artifact because the tests are not included\. You’llsee that because integration tests go in a different directory, they don’t needthe `\fI#[cfg(test)]\fR` annotation\. However, because unit tests go in the same filesas the code, you’ll use `\fI#[cfg(test)]\fR` to specify that they shouldn’t beincluded in the compiled result\.
.P
Recall that when we generated the new `\fIadder\fR` project in the first section ofthis chapter, Cargo generated this code for us:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}

.EE

.RE
.P
This code is the automatically generated test module\. The attribute `\fIcfg\fR`stands for \fIconfiguration\fR and tells Rust that the following item should onlybe included given a certain configuration option\. In this case, theconfiguration option is `\fItest\fR`, which is provided by Rust for compiling andrunning tests\. By using the `\fIcfg\fR` attribute, Cargo compiles our test code onlyif we actively run the tests with `\fIcargo test\fR`\. This includes any helperfunctions that might be within this module, in addition to the functionsannotated with `\fI#[test]\fR`\.
.br

.br
\fBTesting Private Functions\fR
.br
===========================
.br

.P
There’s debate within the testing community about whether or not privatefunctions should be tested directly, and other languages make it difficult orimpossible to test private functions\. Regardless of which testing ideology youadhere to, Rust’s privacy rules do allow you to test private functions\.Consider the code in Listing 11\-12 with the private function `\fIinternal_adder\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_two(a: i32) \-> i32 {
    internal_adder(a, 2)
}

fn internal_adder(a: i32, b: i32) \-> i32 {
    a + b
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn internal() {
        assert_eq!(4, internal_adder(2, 2));
    }
}

.EE

.RE
Listing 11\-12: Testing a private function
.P
Note that the `\fIinternal_adder\fR` function is not marked as `\fIpub\fR`\. Tests are justRust code, and the `\fItests\fR` module is just another module\. As we discussed inthe 
.UR ch07\-03\-paths\-for\-referring\-to\-an\-item\-in\-the\-module\-tree\.html
.UE
“Paths for Referring to an Item in the Module Tree”section, items in child modules can use the items in their ancestor modules\. Inthis test, we bring all of the `\fItest\fR` module’s parent’s items into scope with`\fIuse super::*\fR`, and then the test can call `\fIinternal_adder\fR`\. If you don’t thinkprivate functions should be tested, there’s nothing in Rust that will compelyou to do so\.
.br

.br
\fBIntegration Tests\fR
.br
===================
.br

.P
In Rust, integration tests are entirely external to your library\. They use yourlibrary in the same way any other code would, which means they can only callfunctions that are part of your library’s public API\. Their purpose is to testwhether many parts of your library work together correctly\. Units of code thatwork correctly on their own could have problems when integrated, so testcoverage of the integrated code is important as well\. To create integrationtests, you first need a \fItests\fR directory\.
.br

.br
\fBThe \fR
.br
======
.br
\fItests\fR Directory
.P
We create a \fItests\fR directory at the top level of our project directory, nextto \fIsrc\fR\. Cargo knows to look for integration test files in this directory\. Wecan then make as many test files as we want to in this directory, and Cargowill compile each of the files as an individual crate\.
.P
Let’s create an integration test\. With the code in Listing 11\-12 still in the\fIsrc/lib\.rs\fR file, make a \fItests\fR directory, create a new file named\fItests/integration_test\.rs\fR, and enter the code in Listing 11\-13\.Filename: tests/integration_test\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use adder;

#[test]
fn it_adds_two() {
    assert_eq!(4, adder::add_two(2));
}

.EE

.RE
Listing 11\-13: An integration test of a function in the`\fIadder\fR` crate
.P
We’ve added `\fIuse adder\fR` at the top of the code, which we didn’t need in theunit tests\. The reason is that each file in the `\fItests\fR` directory is a separatecrate, so we need to bring our library into each test crate’s scope\.
.P
We don’t need to annotate any code in \fItests/integration_test\.rs\fR with`\fI#[cfg(test)]\fR`\. Cargo treats the `\fItests\fR` directory specially and compiles filesin this directory only when we run `\fIcargo test\fR`\. Run `\fIcargo test\fR` now:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 1\.31s
     Running unittests (target/debug/deps/adder\-1082c4b063a8fbe6)

running 1 test
test tests::internal \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running tests/integration_test\.rs (target/debug/deps/integration_test\-1082c4b063a8fbe6)

running 1 test
test it_adds_two \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
The three sections of output include the unit tests, the integration test, andthe doc tests\. The first section for the unit tests is the same as we’ve beenseeing: one line for each unit test (one named `\fIinternal\fR` that we added inListing 11\-12) and then a summary line for the unit tests\.
.P
The integration tests section starts with the line `\fIRunning target/debug/deps/integration_test\-1082c4b063a8fbe6\fR` (the hash at the end ofyour output will be different)\. Next, there is a line for each test function inthat integration test and a summary line for the results of the integrationtest just before the `\fIDoc\-tests adder\fR` section starts\.
.P
Similarly to how adding more unit test functions adds more result lines to theunit tests section, adding more test functions to the integration test fileadds more result lines to this integration test file’s section\. Eachintegration test file has its own section, so if we add more files in the\fItests\fR directory, there will be more integration test sections\.
.P
We can still run a particular integration test function by specifying the testfunction’s name as an argument to `\fIcargo test\fR`\. To run all the tests in aparticular integration test file, use the `\fI\-\-test\fR` argument of `\fIcargo test\fR`followed by the name of the file:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-\-test integration_test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.64s
     Running tests/integration_test\.rs (target/debug/deps/integration_test\-82e7799c1bc62298)

running 1 test
test it_adds_two \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
This command runs only the tests in the \fItests/integration_test\.rs\fR file\.
.br

.br
\fBSubmodules in Integration Tests\fR
.br
=================================
.br

.P
As you add more integration tests, you might want to make more than one file inthe \fItests\fR directory to help organize them; for example, you can group thetest functions by the functionality they’re testing\. As mentioned earlier, eachfile in the \fItests\fR directory is compiled as its own separate crate\.
.P
Treating each integration test file as its own crate is useful to createseparate scopes that are more like the way end users will be using your crate\.However, this means files in the \fItests\fR directory don’t share the samebehavior as files in \fIsrc\fR do, as you learned in Chapter 7 regarding how toseparate code into modules and files\.
.P
The different behavior of files in the \fItests\fR directory is most noticeablewhen you have a set of helper functions that would be useful in multipleintegration test files and you try to follow the steps in the 
.UR ch07\-05\-separating\-modules\-into\-different\-files\.html
.UE
“SeparatingModules into Different Files”section of Chapter 7 to extract them into a common module\. For example, if wecreate \fItests/common\.rs\fR and place a function named `\fIsetup\fR` in it, we can addsome code to `\fIsetup\fR` that we want to call from multiple test functions inmultiple test files:Filename: tests/common\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
pub fn setup() {
    // setup code specific to your library's tests would go here
}

.EE

.RE
.P
When we run the tests again, we’ll see a new section in the test output for the\fIcommon\.rs\fR file, even though this file doesn’t contain any test functions nordid we call the `\fIsetup\fR` function from anywhere:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling adder v0\.1\.0 (file:///projects/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.89s
     Running unittests (target/debug/deps/adder\-92948b65e88960b4)

running 1 test
test tests::internal \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running tests/common\.rs (target/debug/deps/common\-92948b65e88960b4)

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running tests/integration_test\.rs (target/debug/deps/integration_test\-92948b65e88960b4)

running 1 test
test it_adds_two \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests adder

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Having `\fIcommon\fR` appear in the test results with `\fIrunning 0 tests\fR` displayed forit is not what we wanted\. We just wanted to share some code with the otherintegration test files\.
.P
To avoid having `\fIcommon\fR` appear in the test output, instead of creating\fItests/common\.rs\fR, we’ll create \fItests/common/mod\.rs\fR\. This is an alternatenaming convention that Rust also understands\. Naming the file this way tellsRust not to treat the `\fIcommon\fR` module as an integration test file\. When we movethe `\fIsetup\fR` function code into \fItests/common/mod\.rs\fR and delete the\fItests/common\.rs\fR file, the section in the test output will no longer appear\.Files in subdirectories of the \fItests\fR directory don’t get compiled as separatecrates or have sections in the test output\.
.P
After we’ve created \fItests/common/mod\.rs\fR, we can use it from any of theintegration test files as a module\. Here’s an example of calling the `\fIsetup\fR`function from the `\fIit_adds_two\fR` test in \fItests/integration_test\.rs\fR:Filename: tests/integration_test\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use adder;

mod common;

#[test]
fn it_adds_two() {
    common::setup();
    assert_eq!(4, adder::add_two(2));
}

.EE

.RE
.P
Note that the `\fImod common;\fR` declaration is the same as the module declarationwe demonstrated in Listing 7\-21\. Then in the test function, we can call the`\fIcommon::setup()\fR` function\.
.br

.br
\fBIntegration Tests for Binary Crates\fR
.br
=====================================
.br

.P
If our project is a binary crate that only contains a \fIsrc/main\.rs\fR file anddoesn’t have a \fIsrc/lib\.rs\fR file, we can’t create integration tests in the\fItests\fR directory and bring functions defined in the \fIsrc/main\.rs\fR file intoscope with a `\fIuse\fR` statement\. Only library crates expose functions that othercrates can use; binary crates are meant to be run on their own\.
.P
This is one of the reasons Rust projects that provide a binary have astraightforward \fIsrc/main\.rs\fR file that calls logic that lives in the\fIsrc/lib\.rs\fR file\. Using that structure, integration tests \fIcan\fR test thelibrary crate with `\fIuse\fR` to make the important functionality available\.If the important functionality works, the small amount of code in the\fIsrc/main\.rs\fR file will work as well, and that small amount of code doesn’tneed to be tested\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Rust’s testing features provide a way to specify how code should function toensure it continues to work as you expect, even as you make changes\. Unit testsexercise different parts of a library separately and can test privateimplementation details\. Integration tests check that many parts of the librarywork together correctly, and they use the library’s public API to test the codein the same way external code will use it\. Even though Rust’s type system andownership rules help prevent some kinds of bugs, tests are still important toreduce logic bugs having to do with how your code is expected to behave\.
.P
Let’s combine the knowledge you learned in this chapter and in previouschapters to work on a project!
.SH "An I/O Project: Building a Command Line Program"

.br

.br
\fBAn I/O Project: Building a Command Line Program\fR
.br
=================================================
.br

.P
This chapter is a recap of the many skills you’ve learned so far and anexploration of a few more standard library features\. We’ll build a command linetool that interacts with file and command line input/output to practice some ofthe Rust concepts you now have under your belt\.
.P
Rust’s speed, safety, single binary output, and cross\-platform support make itan ideal language for creating command line tools, so for our project, we’llmake our own version of the classic command line tool `\fIgrep\fR` (\fBg\fRloballysearch a \fBr\fRegular \fBe\fRxpression and \fBp\fRrint)\. In the simplest use case,`\fIgrep\fR` searches a specified file for a specified string\. To do so, `\fIgrep\fR` takesas its arguments a filename and a string\. Then it reads the file, finds linesin that file that contain the string argument, and prints those lines\.
.P
Along the way, we’ll show how to make our command line tool use features of theterminal that many command line tools use\. We’ll read the value of anenvironment variable to allow the user to configure the behavior of our tool\.We’ll also print error messages to the standard error console stream (`\fIstderr\fR`)instead of standard output (`\fIstdout\fR`), so, for example, the user can redirectsuccessful output to a file while still seeing error messages onscreen\.
.P
One Rust community member, Andrew Gallant, has already created a fullyfeatured, very fast version of `\fIgrep\fR`, called `\fIripgrep\fR`\. By comparison, ourversion of `\fIgrep\fR` will be fairly simple, but this chapter will give you some ofthe background knowledge you need to understand a real\-world project such as`\fIripgrep\fR`\.
.P
Our `\fIgrep\fR` project will combine a number of concepts you’ve learned so far:
.P
Organizing code (using what you learned about modules in 
.UR ch07\-00\-managing\-growing\-projects\-with\-packages\-crates\-and\-modules\.html
.UE
Chapter 7)
.P
Using vectors and strings (collections, 
.UR ch08\-00\-common\-collections\.html
.UE
Chapter 8)
.P
Handling errors (
.UR ch09\-00\-error\-handling\.html
.UE
Chapter 9)
.P
Using traits and lifetimes where appropriate (
.UR ch10\-00\-generics\.html
.UE
Chapter 10)
.P
Writing tests (
.UR ch11\-00\-testing\.html
.UE
Chapter 11)
.P
We’ll also briefly introduce closures, iterators, and trait objects, whichChapters 
.UR ch13\-00\-functional\-features\.html
.UE
13 and 
.UR ch17\-00\-oop\.html
.UE
17 will cover indetail\.
.SH "Accepting Command Line Arguments"

.br

.br
\fBAccepting Command Line Arguments\fR
.br
==================================
.br

.P
Let’s create a new project with, as always, `\fIcargo new\fR`\. We’ll call our project`\fIminigrep\fR` to distinguish it from the `\fIgrep\fR` tool that you might already haveon your system\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new minigrep
     Created binary (application) `minigrep` project
$ cd minigrep

.EE

.RE
.P
The first task is to make `\fIminigrep\fR` accept its two command line arguments: thefilename and a string to search for\. That is, we want to be able to run ourprogram with `\fIcargo run\fR`, a string to search for, and a path to a file tosearch in, like so:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run searchstring example\-filename\.txt

.EE

.RE
.P
Right now, the program generated by `\fIcargo new\fR` cannot process arguments wegive it\. Some existing libraries on 
.UR https://crates\.io/
.UE
crates\.io can helpwith writing a program that accepts command line arguments, but because you’rejust learning this concept, let’s implement this capability ourselves\.
.br

.br
\fBReading the Argument Values\fR
.br
=============================
.br

.P
To enable `\fIminigrep\fR` to read the values of command line arguments we pass toit, we’ll need a function provided in Rust’s standard library, which is`\fIstd::env::args\fR`\. This function returns an iterator of the command linearguments that were given to `\fIminigrep\fR`\. We’ll cover iterators fully in
.UR ch13\-00\-functional\-features\.html
.UE
Chapter 13\. For now, you only need to know two detailsabout iterators: iterators produce a series of values, and we can call the`\fIcollect\fR` method on an iterator to turn it into a collection, such as a vector,containing all the elements the iterator produces\.
.P
Use the code in Listing 12\-1 to allow your `\fIminigrep\fR` program to read anycommand line arguments passed to it and then collect the values into a vector\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::env;

fn main() {
    let args: Vec<String> = env::args()\.collect();
    println!("{:?}", args);
}

.EE

.RE
Listing 12\-1: Collecting the command line arguments intoa vector and printing them
.P
First, we bring the `\fIstd::env\fR` module into scope with a `\fIuse\fR` statement so wecan use its `\fIargs\fR` function\. Notice that the `\fIstd::env::args\fR` function isnested in two levels of modules\. As we discussed in 
.UR ch07\-04\-bringing\-paths\-into\-scope\-with\-the\-use\-keyword\.html#creating\-idiomatic\-use\-paths
.UE
Chapter7, in cases where the desired function isnested in more than one module, it’s conventional to bring the parent moduleinto scope rather than the function\. By doing so, we can easily use otherfunctions from `\fIstd::env\fR`\. It’s also less ambiguous than adding `\fIuse std::env::args\fR` and then calling the function with just `\fIargs\fR`, because `\fIargs\fR`might easily be mistaken for a function that’s defined in the current module\.
.br

.br
\fBThe \fR
.br
======
.br
`\fIargs\fR` Function and Invalid Unicode
.P
Note that `\fIstd::env::args\fR` will panic if any argument contains invalidUnicode\. If your program needs to accept arguments containing invalidUnicode, use `\fIstd::env::args_os\fR` instead\. That function returns an iteratorthat produces `\fIOsString\fR` values instead of `\fIString\fR` values\. We’ve chosen touse `\fIstd::env::args\fR` here for simplicity, because `\fIOsString\fR` values differper platform and are more complex to work with than `\fIString\fR` values\.
.P
On the first line of `\fImain\fR`, we call `\fIenv::args\fR`, and we immediately use`\fIcollect\fR` to turn the iterator into a vector containing all the values producedby the iterator\. We can use the `\fIcollect\fR` function to create many kinds ofcollections, so we explicitly annotate the type of `\fIargs\fR` to specify that wewant a vector of strings\. Although we very rarely need to annotate types inRust, `\fIcollect\fR` is one function you do often need to annotate because Rustisn’t able to infer the kind of collection you want\.
.P
Finally, we print the vector using the debug formatter, `\fI:?\fR`\. Let’s try runningthe code first with no arguments and then with two arguments:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.61s
     Running `target/debug/minigrep`
["target/debug/minigrep"]

.EE

.RE
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run needle haystack
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.57s
     Running `target/debug/minigrep needle haystack`
["target/debug/minigrep", "needle", "haystack"]

.EE

.RE
.P
Notice that the first value in the vector is `\fI"target/debug/minigrep"\fR`, whichis the name of our binary\. This matches the behavior of the arguments list inC, letting programs use the name by which they were invoked in their execution\.It’s often convenient to have access to the program name in case you want toprint it in messages or change behavior of the program based on what commandline alias was used to invoke the program\. But for the purposes of thischapter, we’ll ignore it and save only the two arguments we need\.
.br

.br
\fBSaving the Argument Values in Variables\fR
.br
=========================================
.br

.P
Printing the value of the vector of arguments illustrated that the program isable to access the values specified as command line arguments\. Now we need tosave the values of the two arguments in variables so we can use the valuesthroughout the rest of the program\. We do that in Listing 12\-2\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,noplayground\fR 2

.br
.EX
use std::env;

fn main() {
    let args: Vec<String> = env::args()\.collect();

    let query = &args[1];
    let filename = &args[2];

    println!("Searching for {}", query);
    println!("In file {}", filename);
}

.EE

.RE
Listing 12\-2: Creating variables to hold the queryargument and filename argument
.P
As we saw when we printed the vector, the program’s name takes up the firstvalue in the vector at `\fIargs[0]\fR`, so we’re starting at index `\fI1\fR`\. The firstargument `\fIminigrep\fR` takes is the string we’re searching for, so we put areference to the first argument in the variable `\fIquery\fR`\. The second argumentwill be the filename, so we put a reference to the second argument in thevariable `\fIfilename\fR`\.
.P
We temporarily print the values of these variables to prove that the code isworking as we intend\. Let’s run this program again with the arguments `\fItest\fR`and `\fIsample\.txt\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run test sample\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep test sample\.txt`
Searching for test
In file sample\.txt

.EE

.RE
.P
Great, the program is working! The values of the arguments we need are beingsaved into the right variables\. Later we’ll add some error handling to dealwith certain potential erroneous situations, such as when the user provides noarguments; for now, we’ll ignore that situation and work on adding file\-readingcapabilities instead\.
.SH "Reading a File"

.br

.br
\fBReading a File\fR
.br
================
.br

.P
Now we’ll add functionality to read the file that is specified in the`\fIfilename\fR` command line argument\. First, we need a sample file to test it with:the best kind of file to use to make sure `\fIminigrep\fR` is working is one with asmall amount of text over multiple lines with some repeated words\. Listing 12\-3has an Emily Dickinson poem that will work well! Create a file called\fIpoem\.txt\fR at the root level of your project, and enter the poem “I’m Nobody!Who are you?”Filename: poem\.txt
.RS
.IP \fBtext\fR 2

.br
.EX
I'm nobody! Who are you?
Are you nobody, too?
Then there's a pair of us \- don't tell!
They'd banish us, you know\.

How dreary to be somebody!
How public, like a frog
To tell your name the livelong day
To an admiring bog!

.EE

.RE
Listing 12\-3: A poem by Emily Dickinson makes a good testcase
.P
With the text in place, edit \fIsrc/main\.rs\fR and add code to read the file, asshown in Listing 12\-4\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,noplayground\fR 2

.br
.EX
use std::env;
use std::fs;

fn main() {
    // \-\-snip\-\-
#     let args: Vec<String> = env::args()\.collect();
# 
#     let query = &args[1];
#     let filename = &args[2];
# 
#     println!("Searching for {}", query);
    println!("In file {}", filename);

    let contents = fs::read_to_string(filename)
        \.expect("Something went wrong reading the file");

    println!("With text:\n{}", contents);
}

.EE

.RE
Listing 12\-4: Reading the contents of the file specifiedby the second argument
.P
First, we add another `\fIuse\fR` statement to bring in a relevant part of thestandard library: we need `\fIstd::fs\fR` to handle files\.
.P
In `\fImain\fR`, we’ve added a new statement: `\fIfs::read_to_string\fR` takes the`\fIfilename\fR`, opens that file, and returns a `\fIResult<String>\fR` of the file’scontents\.
.P
After that statement, we’ve again added a temporary `\fIprintln!\fR` statement thatprints the value of `\fIcontents\fR` after the file is read, so we can check that theprogram is working so far\.
.P
Let’s run this code with any string as the first command line argument (becausewe haven’t implemented the searching part yet) and the \fIpoem\.txt\fR file as thesecond argument:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run the poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep the poem\.txt`
Searching for the
In file poem\.txt
With text:
I'm nobody! Who are you?
Are you nobody, too?
Then there's a pair of us \- don't tell!
They'd banish us, you know\.

How dreary to be somebody!
How public, like a frog
To tell your name the livelong day
To an admiring bog!


.EE

.RE
.P
Great! The code read and then printed the contents of the file\. But the codehas a few flaws\. The `\fImain\fR` function has multiple responsibilities: generally,functions are clearer and easier to maintain if each function is responsiblefor only one idea\. The other problem is that we’re not handling errors as wellas we could\. The program is still small, so these flaws aren’t a big problem,but as the program grows, it will be harder to fix them cleanly\. It’s goodpractice to begin refactoring early on when developing a program, because it’smuch easier to refactor smaller amounts of code\. We’ll do that next\.
.SH "Refactoring to Improve Modularity and Error Handling"

.br

.br
\fBRefactoring to Improve Modularity and Error Handling\fR
.br
======================================================
.br

.P
To improve our program, we’ll fix four problems that have to do with theprogram’s structure and how it’s handling potential errors\.
.P
First, our `\fImain\fR` function now performs two tasks: it parses arguments andreads files\. For such a small function, this isn’t a major problem\. However, ifwe continue to grow our program inside `\fImain\fR`, the number of separate tasks the`\fImain\fR` function handles will increase\. As a function gains responsibilities, itbecomes more difficult to reason about, harder to test, and harder to changewithout breaking one of its parts\. It’s best to separate functionality so eachfunction is responsible for one task\.
.P
This issue also ties into the second problem: although `\fIquery\fR` and `\fIfilename\fR`are configuration variables to our program, variables like `\fIcontents\fR` are usedto perform the program’s logic\. The longer `\fImain\fR` becomes, the more variableswe’ll need to bring into scope; the more variables we have in scope, the harderit will be to keep track of the purpose of each\. It’s best to group theconfiguration variables into one structure to make their purpose clear\.
.P
The third problem is that we’ve used `\fIexpect\fR` to print an error message whenreading the file fails, but the error message just prints `\fISomething went wrong reading the file\fR`\. Reading a file can fail in a number of ways: for example,the file could be missing, or we might not have permission to open it\. Rightnow, regardless of the situation, we’d print the `\fISomething went wrong reading the file\fR` error message, which wouldn’t give the user any information!
.P
Fourth, we use `\fIexpect\fR` repeatedly to handle different errors, and if the userruns our program without specifying enough arguments, they’ll get an `\fIindex out of bounds\fR` error from Rust that doesn’t clearly explain the problem\. It wouldbe best if all the error\-handling code were in one place so future maintainershad only one place to consult in the code if the error\-handling logic needed tochange\. Having all the error\-handling code in one place will also ensure thatwe’re printing messages that will be meaningful to our end users\.
.P
Let’s address these four problems by refactoring our project\.
.br

.br
\fBSeparation of Concerns for Binary Projects\fR
.br
============================================
.br

.P
The organizational problem of allocating responsibility for multiple tasks tothe `\fImain\fR` function is common to many binary projects\. As a result, the Rustcommunity has developed a process to use as a guideline for splitting theseparate concerns of a binary program when `\fImain\fR` starts getting large\. Theprocess has the following steps:
.P
Split your program into a \fImain\.rs\fR and a \fIlib\.rs\fR and move your program’slogic to \fIlib\.rs\fR\.
.P
As long as your command line parsing logic is small, it can remain in\fImain\.rs\fR\.
.P
When the command line parsing logic starts getting complicated, extract itfrom \fImain\.rs\fR and move it to \fIlib\.rs\fR\.
.P
The responsibilities that remain in the `\fImain\fR` function after this processshould be limited to the following:
.P
Calling the command line parsing logic with the argument values
.P
Setting up any other configuration
.P
Calling a `\fIrun\fR` function in \fIlib\.rs\fR
.P
Handling the error if `\fIrun\fR` returns an error
.P
This pattern is about separating concerns: \fImain\.rs\fR handles running theprogram, and \fIlib\.rs\fR handles all the logic of the task at hand\. Because youcan’t test the `\fImain\fR` function directly, this structure lets you test all ofyour program’s logic by moving it into functions in \fIlib\.rs\fR\. The only codethat remains in \fImain\.rs\fR will be small enough to verify its correctness byreading it\. Let’s rework our program by following this process\.
.br

.br
\fBExtracting the Argument Parser\fR
.br
================================
.br

.P
We’ll extract the functionality for parsing arguments into a function that`\fImain\fR` will call to prepare for moving the command line parsing logic to\fIsrc/lib\.rs\fR\. Listing 12\-5 shows the new start of `\fImain\fR` that calls a newfunction `\fIparse_config\fR`, which we’ll define in \fIsrc/main\.rs\fR for the moment\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let (query, filename) = parse_config(&args);

    // \-\-snip\-\-
# 
#     println!("Searching for {}", query);
#     println!("In file {}", filename);
# 
#     let contents = fs::read_to_string(filename)
#         \.expect("Something went wrong reading the file");
# 
#     println!("With text:\n{}", contents);
}

fn parse_config(args: &[String]) \-> (&str, &str) {
    let query = &args[1];
    let filename = &args[2];

    (query, filename)
}

.EE

.RE
Listing 12\-5: Extracting a `\fIparse_config\fR` function from`\fImain\fR`
.P
We’re still collecting the command line arguments into a vector, but instead ofassigning the argument value at index 1 to the variable `\fIquery\fR` and theargument value at index 2 to the variable `\fIfilename\fR` within the `\fImain\fR`function, we pass the whole vector to the `\fIparse_config\fR` function\. The`\fIparse_config\fR` function then holds the logic that determines which argumentgoes in which variable and passes the values back to `\fImain\fR`\. We still createthe `\fIquery\fR` and `\fIfilename\fR` variables in `\fImain\fR`, but `\fImain\fR` no longer has theresponsibility of determining how the command line arguments and variablescorrespond\.
.P
This rework may seem like overkill for our small program, but we’re refactoringin small, incremental steps\. After making this change, run the program again toverify that the argument parsing still works\. It’s good to check your progressoften, to help identify the cause of problems when they occur\.
.br

.br
\fBGrouping Configuration Values\fR
.br
===============================
.br

.P
We can take another small step to improve the `\fIparse_config\fR` function further\.At the moment, we’re returning a tuple, but then we immediately break thattuple into individual parts again\. This is a sign that perhaps we don’t havethe right abstraction yet\.
.P
Another indicator that shows there’s room for improvement is the `\fIconfig\fR` partof `\fIparse_config\fR`, which implies that the two values we return are related andare both part of one configuration value\. We’re not currently conveying thismeaning in the structure of the data other than by grouping the two values intoa tuple; we could put the two values into one struct and give each of thestruct fields a meaningful name\. Doing so will make it easier for futuremaintainers of this code to understand how the different values relate to eachother and what their purpose is\.
.P
Note: Using primitive values when a complex type would be more appropriate isan anti\-pattern known as \fIprimitive obsession\fR\.
.P
Listing 12\-6 shows the improvements to the `\fIparse_config\fR` function\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,noplayground\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = parse_config(&args);

    println!("Searching for {}", config\.query);
    println!("In file {}", config\.filename);

    let contents = fs::read_to_string(config\.filename)
        \.expect("Something went wrong reading the file");

    // \-\-snip\-\-
# 
#     println!("With text:\n{}", contents);
}

struct Config {
    query: String,
    filename: String,
}

fn parse_config(args: &[String]) \-> Config {
    let query = args[1]\.clone();
    let filename = args[2]\.clone();

    Config { query, filename }
}

.EE

.RE
Listing 12\-6: Refactoring `\fIparse_config\fR` to return aninstance of a `\fIConfig\fR` struct
.P
We’ve added a struct named `\fIConfig\fR` defined to have fields named `\fIquery\fR` and`\fIfilename\fR`\. The signature of `\fIparse_config\fR` now indicates that it returns a`\fIConfig\fR` value\. In the body of `\fIparse_config\fR`, where we used to return stringslices that reference `\fIString\fR` values in `\fIargs\fR`, we now define `\fIConfig\fR` tocontain owned `\fIString\fR` values\. The `\fIargs\fR` variable in `\fImain\fR` is the owner ofthe argument values and is only letting the `\fIparse_config\fR` function borrowthem, which means we’d violate Rust’s borrowing rules if `\fIConfig\fR` tried to takeownership of the values in `\fIargs\fR`\.
.P
We could manage the `\fIString\fR` data in a number of different ways, but theeasiest, though somewhat inefficient, route is to call the `\fIclone\fR` method onthe values\. This will make a full copy of the data for the `\fIConfig\fR` instance toown, which takes more time and memory than storing a reference to the stringdata\. However, cloning the data also makes our code very straightforwardbecause we don’t have to manage the lifetimes of the references; in thiscircumstance, giving up a little performance to gain simplicity is a worthwhiletrade\-off\.
.br

.br
\fBThe Trade\-Offs of Using \fR
.br
==========================
.br
`\fIclone\fR`
.P
There’s a tendency among many Rustaceans to avoid using `\fIclone\fR` to fixownership problems because of its runtime cost\. In
.UR ch13\-00\-functional\-features\.html
.UE
Chapter 13, you’ll learn how to use more efficientmethods in this type of situation\. But for now, it’s okay to copy a fewstrings to continue making progress because you’ll make these copies onlyonce and your filename and query string are very small\. It’s better to havea working program that’s a bit inefficient than to try to hyperoptimize codeon your first pass\. As you become more experienced with Rust, it’ll beeasier to start with the most efficient solution, but for now, it’sperfectly acceptable to call `\fIclone\fR`\.
.P
We’ve updated `\fImain\fR` so it places the instance of `\fIConfig\fR` returned by`\fIparse_config\fR` into a variable named `\fIconfig\fR`, and we updated the code thatpreviously used the separate `\fIquery\fR` and `\fIfilename\fR` variables so it now usesthe fields on the `\fIConfig\fR` struct instead\.
.P
Now our code more clearly conveys that `\fIquery\fR` and `\fIfilename\fR` are related andthat their purpose is to configure how the program will work\. Any code thatuses these values knows to find them in the `\fIconfig\fR` instance in the fieldsnamed for their purpose\.
.br

.br
\fBCreating a Constructor for \fR
.br
=============================
.br
`\fIConfig\fR`
.P
So far, we’ve extracted the logic responsible for parsing the command linearguments from `\fImain\fR` and placed it in the `\fIparse_config\fR` function\. Doing sohelped us to see that the `\fIquery\fR` and `\fIfilename\fR` values were related and thatrelationship should be conveyed in our code\. We then added a `\fIConfig\fR` struct toname the related purpose of `\fIquery\fR` and `\fIfilename\fR` and to be able to return thevalues’ names as struct field names from the `\fIparse_config\fR` function\.
.P
So now that the purpose of the `\fIparse_config\fR` function is to create a `\fIConfig\fR`instance, we can change `\fIparse_config\fR` from a plain function to a functionnamed `\fInew\fR` that is associated with the `\fIConfig\fR` struct\. Making this changewill make the code more idiomatic\. We can create instances of types in thestandard library, such as `\fIString\fR`, by calling `\fIString::new\fR`\. Similarly, bychanging `\fIparse_config\fR` into a `\fInew\fR` function associated with `\fIConfig\fR`, we’llbe able to create instances of `\fIConfig\fR` by calling `\fIConfig::new\fR`\. Listing 12\-7shows the changes we need to make\.Filename: src/main\.rs
.RS
.IP \fBrust,should_panic,noplayground\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = Config::new(&args);
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.filename);
# 
#     let contents = fs::read_to_string(config\.filename)
#         \.expect("Something went wrong reading the file");
# 
#     println!("With text:\n{}", contents);

    // \-\-snip\-\-
}

// \-\-snip\-\-

# struct Config {
#     query: String,
#     filename: String,
# }
# 
impl Config {
    fn new(args: &[String]) \-> Config {
        let query = args[1]\.clone();
        let filename = args[2]\.clone();

        Config { query, filename }
    }
}

.EE

.RE
Listing 12\-7: Changing `\fIparse_config\fR` into`\fIConfig::new\fR`
.P
We’ve updated `\fImain\fR` where we were calling `\fIparse_config\fR` to instead call`\fIConfig::new\fR`\. We’ve changed the name of `\fIparse_config\fR` to `\fInew\fR` and moved itwithin an `\fIimpl\fR` block, which associates the `\fInew\fR` function with `\fIConfig\fR`\. Trycompiling this code again to make sure it works\.
.br

.br
\fBFixing the Error Handling\fR
.br
===========================
.br

.P
Now we’ll work on fixing our error handling\. Recall that attempting to accessthe values in the `\fIargs\fR` vector at index 1 or index 2 will cause the program topanic if the vector contains fewer than three items\. Try running the programwithout any arguments; it will look like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep`
thread 'main' panicked at 'index out of bounds: the len is 1 but the index is 1', src/main\.rs:27:21
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
The line `\fIindex out of bounds: the len is 1 but the index is 1\fR` is an errormessage intended for programmers\. It won’t help our end users understand whathappened and what they should do instead\. Let’s fix that now\.
.br

.br
\fBImproving the Error Message\fR
.br
=============================
.br

.P
In Listing 12\-8, we add a check in the `\fInew\fR` function that will verify that theslice is long enough before accessing index 1 and 2\. If the slice isn’t longenough, the program panics and displays a better error message than the `\fIindex out of bounds\fR` message\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
# fn main() {
#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::new(&args);
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.filename);
# 
#     let contents = fs::read_to_string(config\.filename)
#         \.expect("Something went wrong reading the file");
# 
#     println!("With text:\n{}", contents);
# }
# 
# struct Config {
#     query: String,
#     filename: String,
# }
# 
# impl Config {
    // \-\-snip\-\-
    fn new(args: &[String]) \-> Config {
        if args\.len() < 3 {
            panic!("not enough arguments");
        }
        // \-\-snip\-\-
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Config { query, filename }
#     }
# }

.EE

.RE
Listing 12\-8: Adding a check for the number ofarguments
.P
This code is similar to 
.UR ch09\-03\-to\-panic\-or\-not\-to\-panic\.html#creating\-custom\-types\-for\-validation
.UE
the `\fIGuess::new\fR` function we wrote in Listing9\-10, where we called `\fIpanic!\fR` when the`\fIvalue\fR` argument was out of the range of valid values\. Instead of checking fora range of values here, we’re checking that the length of `\fIargs\fR` is at least 3and the rest of the function can operate under the assumption that thiscondition has been met\. If `\fIargs\fR` has fewer than three items, this conditionwill be true, and we call the `\fIpanic!\fR` macro to end the program immediately\.
.P
With these extra few lines of code in `\fInew\fR`, let’s run the program without anyarguments again to see what the error looks like now:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep`
thread 'main' panicked at 'not enough arguments', src/main\.rs:26:13
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

.EE

.RE
.P
This output is better: we now have a reasonable error message\. However, we alsohave extraneous information we don’t want to give to our users\. Perhaps usingthe technique we used in Listing 9\-10 isn’t the best to use here: a call to`\fIpanic!\fR` is more appropriate for a programming problem than a usage problem,
.UR ch09\-03\-to\-panic\-or\-not\-to\-panic\.html#guidelines\-for\-error\-handling
.UE
as discussed in Chapter 9\. Instead, wecan use the other technique you learned about in Chapter 9—
.UR ch09\-02\-recoverable\-errors\-with\-result\.html
.UE
returning a`\fIResult\fR` that indicates either success or an error\.
.br

.br
\fBReturning a \fR
.br
==============
.br
`\fIResult\fR` from `\fInew\fR` Instead of Calling `\fIpanic!\fR`
.P
We can instead return a `\fIResult\fR` value that will contain a `\fIConfig\fR` instance inthe successful case and will describe the problem in the error case\. When`\fIConfig::new\fR` is communicating to `\fImain\fR`, we can use the `\fIResult\fR` type tosignal there was a problem\. Then we can change `\fImain\fR` to convert an `\fIErr\fR`variant into a more practical error for our users without the surrounding textabout `\fIthread 'main'\fR` and `\fIRUST_BACKTRACE\fR` that a call to `\fIpanic!\fR` causes\.
.P
Listing 12\-9 shows the changes we need to make to the return value of`\fIConfig::new\fR` and the body of the function needed to return a `\fIResult\fR`\. Notethat this won’t compile until we update `\fImain\fR` as well, which we’ll do in thenext listing\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# 
# fn main() {
#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::new(&args);
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.filename);
# 
#     let contents = fs::read_to_string(config\.filename)
#         \.expect("Something went wrong reading the file");
# 
#     println!("With text:\n{}", contents);
# }
# 
# struct Config {
#     query: String,
#     filename: String,
# }
# 
impl Config {
    fn new(args: &[String]) \-> Result<Config, &str> {
        if args\.len() < 3 {
            return Err("not enough arguments");
        }

        let query = args[1]\.clone();
        let filename = args[2]\.clone();

        Ok(Config { query, filename })
    }
}

.EE

.RE
Listing 12\-9: Returning a `\fIResult\fR` from`\fIConfig::new\fR`
.P
Our `\fInew\fR` function now returns a `\fIResult\fR` with a `\fIConfig\fR` instance in thesuccess case and a `\fI&str\fR` in the error case\.
.P
We’ve made two changes in the body of the `\fInew\fR` function: instead of calling`\fIpanic!\fR` when the user doesn’t pass enough arguments, we now return an `\fIErr\fR`value, and we’ve wrapped the `\fIConfig\fR` return value in an `\fIOk\fR`\. These changesmake the function conform to its new type signature\.
.P
Returning an `\fIErr\fR` value from `\fIConfig::new\fR` allows the `\fImain\fR` function tohandle the `\fIResult\fR` value returned from the `\fInew\fR` function and exit the processmore cleanly in the error case\.
.br

.br
\fBCalling \fR
.br
==========
.br
`\fIConfig::new\fR` and Handling Errors
.P
To handle the error case and print a user\-friendly message, we need to update`\fImain\fR` to handle the `\fIResult\fR` being returned by `\fIConfig::new\fR`, as shown inListing 12\-10\. We’ll also take the responsibility of exiting the command linetool with a nonzero error code from `\fIpanic!\fR` and implement it by hand\. Anonzero exit status is a convention to signal to the process that called ourprogram that the program exited with an error state\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
use std::process;

fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = Config::new(&args)\.unwrap_or_else(|err| {
        println!("Problem parsing arguments: {}", err);
        process::exit(1);
    });

    // \-\-snip\-\-
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.filename);
# 
#     let contents = fs::read_to_string(config\.filename)
#         \.expect("Something went wrong reading the file");
# 
#     println!("With text:\n{}", contents);
# }
# 
# struct Config {
#     query: String,
#     filename: String,
# }
# 
# impl Config {
#     fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }

.EE

.RE
Listing 12\-10: Exiting with an error code if creating anew `\fIConfig\fR` fails
.P
In this listing, we’ve used a method we haven’t covered in detail yet:`\fIunwrap_or_else\fR`, which is defined on `\fIResult<T, E>\fR` by the standard library\.Using `\fIunwrap_or_else\fR` allows us to define some custom, non\-`\fIpanic!\fR` errorhandling\. If the `\fIResult\fR` is an `\fIOk\fR` value, this method’s behavior is similarto `\fIunwrap\fR`: it returns the inner value `\fIOk\fR` is wrapping\. However, if the valueis an `\fIErr\fR` value, this method calls the code in the \fIclosure\fR, which is ananonymous function we define and pass as an argument to `\fIunwrap_or_else\fR`\. We’llcover closures in more detail in 
.UR ch13\-00\-functional\-features\.html
.UE
Chapter 13\. For now,you just need to know that `\fIunwrap_or_else\fR` will pass the inner value of the`\fIErr\fR`, which in this case is the static string `\fI"not enough arguments"\fR` that weadded in Listing 12\-9, to our closure in the argument `\fIerr\fR` that appearsbetween the vertical pipes\. The code in the closure can then use the `\fIerr\fR`value when it runs\.
.P
We’ve added a new `\fIuse\fR` line to bring `\fIprocess\fR` from the standard library intoscope\. The code in the closure that will be run in the error case is only twolines: we print the `\fIerr\fR` value and then call `\fIprocess::exit\fR`\. The`\fIprocess::exit\fR` function will stop the program immediately and return thenumber that was passed as the exit status code\. This is similar to the`\fIpanic!\fR`\-based handling we used in Listing 12\-8, but we no longer get all theextra output\. Let’s try it:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.48s
     Running `target/debug/minigrep`
Problem parsing arguments: not enough arguments

.EE

.RE
.P
Great! This output is much friendlier for our users\.
.br

.br
\fBExtracting Logic from \fR
.br
========================
.br
`\fImain\fR`
.P
Now that we’ve finished refactoring the configuration parsing, let’s turn tothe program’s logic\. As we stated in 
.UR #separation\-of\-concerns\-for\-binary\-projects
.UE
“Separation of Concerns for BinaryProjects”, we’llextract a function named `\fIrun\fR` that will hold all the logic currently in the`\fImain\fR` function that isn’t involved with setting up configuration or handlingerrors\. When we’re done, `\fImain\fR` will be concise and easy to verify byinspection, and we’ll be able to write tests for all the other logic\.
.P
Listing 12\-11 shows the extracted `\fIrun\fR` function\. For now, we’re just makingthe small, incremental improvement of extracting the function\. We’re stilldefining the function in \fIsrc/main\.rs\fR\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# use std::process;
# 
fn main() {
    // \-\-snip\-\-

#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::new(&args)\.unwrap_or_else(|err| {
#         println!("Problem parsing arguments: {}", err);
#         process::exit(1);
#     });
# 
    println!("Searching for {}", config\.query);
    println!("In file {}", config\.filename);

    run(config);
}

fn run(config: Config) {
    let contents = fs::read_to_string(config\.filename)
        \.expect("Something went wrong reading the file");

    println!("With text:\n{}", contents);
}

// \-\-snip\-\-
# 
# struct Config {
#     query: String,
#     filename: String,
# }
# 
# impl Config {
#     fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }

.EE

.RE
Listing 12\-11: Extracting a `\fIrun\fR` function containing therest of the program logic
.P
The `\fIrun\fR` function now contains all the remaining logic from `\fImain\fR`, startingfrom reading the file\. The `\fIrun\fR` function takes the `\fIConfig\fR` instance as anargument\.
.br

.br
\fBReturning Errors from the \fR
.br
============================
.br
`\fIrun\fR` Function
.P
With the remaining program logic separated into the `\fIrun\fR` function, we canimprove the error handling, as we did with `\fIConfig::new\fR` in Listing 12\-9\.Instead of allowing the program to panic by calling `\fIexpect\fR`, the `\fIrun\fR`function will return a `\fIResult<T, E>\fR` when something goes wrong\. This will letus further consolidate into `\fImain\fR` the logic around handling errors in auser\-friendly way\. Listing 12\-12 shows the changes we need to make to thesignature and body of `\fIrun\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::fs;
# use std::process;
use std::error::Error;

// \-\-snip\-\-

# 
# fn main() {
#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::new(&args)\.unwrap_or_else(|err| {
#         println!("Problem parsing arguments: {}", err);
#         process::exit(1);
#     });
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.filename);
# 
#     run(config);
# }
# 
fn run(config: Config) \-> Result<(), Box<dyn Error>> {
    let contents = fs::read_to_string(config\.filename)?;

    println!("With text:\n{}", contents);

    Ok(())
}
# 
# struct Config {
#     query: String,
#     filename: String,
# }
# 
# impl Config {
#     fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }

.EE

.RE
Listing 12\-12: Changing the `\fIrun\fR` function to return`\fIResult\fR`
.P
We’ve made three significant changes here\. First, we changed the return type ofthe `\fIrun\fR` function to `\fIResult<(), Box<dyn Error>>\fR`\. This function previouslyreturned the unit type, `\fI()\fR`, and we keep that as the value returned in the`\fIOk\fR` case\.
.P
For the error type, we used the \fItrait object\fR `\fIBox<dyn Error>\fR` (and we’vebrought `\fIstd::error::Error\fR` into scope with a `\fIuse\fR` statement at the top)\.We’ll cover trait objects in 
.UR ch17\-00\-oop\.html
.UE
Chapter 17\. For now, justknow that `\fIBox<dyn Error>\fR` means the function will return a type thatimplements the `\fIError\fR` trait, but we don’t have to specify what particular typethe return value will be\. This gives us flexibility to return error values thatmay be of different types in different error cases\. The `\fIdyn\fR` keyword is shortfor “dynamic\.”
.P
Second, we’ve removed the call to `\fIexpect\fR` in favor of the `\fI?\fR` operator, as wetalked about in 
.UR ch09\-02\-recoverable\-errors\-with\-result\.html#a\-shortcut\-for\-propagating\-errors\-the\-\-operator
.UE
Chapter 9\. Rather than`\fIpanic!\fR` on an error, `\fI?\fR` will return the error value from the current functionfor the caller to handle\.
.P
Third, the `\fIrun\fR` function now returns an `\fIOk\fR` value in the success case\. We’vedeclared the `\fIrun\fR` function’s success type as `\fI()\fR` in the signature, whichmeans we need to wrap the unit type value in the `\fIOk\fR` value\. This `\fIOk(())\fR`syntax might look a bit strange at first, but using `\fI()\fR` like this is theidiomatic way to indicate that we’re calling `\fIrun\fR` for its side effects only;it doesn’t return a value we need\.
.P
When you run this code, it will compile but will display a warning:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run the poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
warning: unused `Result` that must be used
  \-\-> src/main\.rs:19:5
   |
19 |     run(config);
   |     ^^^^^^^^^^^^
   |
   = note: `#[warn(unused_must_use)]` on by default
   = note: this `Result` may be an `Err` variant, which should be handled

warning: 1 warning emitted

    Finished dev [unoptimized + debuginfo] target(s) in 0\.71s
     Running `target/debug/minigrep the poem\.txt`
Searching for the
In file poem\.txt
With text:
I'm nobody! Who are you?
Are you nobody, too?
Then there's a pair of us \- don't tell!
They'd banish us, you know\.

How dreary to be somebody!
How public, like a frog
To tell your name the livelong day
To an admiring bog!


.EE

.RE
.P
Rust tells us that our code ignored the `\fIResult\fR` value and the `\fIResult\fR` valuemight indicate that an error occurred\. But we’re not checking to see whether ornot there was an error, and the compiler reminds us that we probably meant tohave some error\-handling code here! Let’s rectify that problem now\.
.br

.br
\fBHandling Errors Returned from \fR
.br
================================
.br
`\fIrun\fR` in `\fImain\fR`
.P
We’ll check for errors and handle them using a technique similar to one we usedwith `\fIConfig::new\fR` in Listing 12\-10, but with a slight difference:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# use std::process;
# 
fn main() {
    // \-\-snip\-\-

#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::new(&args)\.unwrap_or_else(|err| {
#         println!("Problem parsing arguments: {}", err);
#         process::exit(1);
#     });
# 
    println!("Searching for {}", config\.query);
    println!("In file {}", config\.filename);

    if let Err(e) = run(config) {
        println!("Application error: {}", e);

        process::exit(1);
    }
}
# 
# fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     println!("With text:\n{}", contents);
# 
#     Ok(())
# }
# 
# struct Config {
#     query: String,
#     filename: String,
# }
# 
# impl Config {
#     fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }

.EE

.RE
.P
We use `\fIif let\fR` rather than `\fIunwrap_or_else\fR` to check whether `\fIrun\fR` returns an`\fIErr\fR` value and call `\fIprocess::exit(1)\fR` if it does\. The `\fIrun\fR` function doesn’treturn a value that we want to `\fIunwrap\fR` in the same way that `\fIConfig::new\fR`returns the `\fIConfig\fR` instance\. Because `\fIrun\fR` returns `\fI()\fR` in the success case,we only care about detecting an error, so we don’t need `\fIunwrap_or_else\fR` toreturn the unwrapped value because it would only be `\fI()\fR`\.
.P
The bodies of the `\fIif let\fR` and the `\fIunwrap_or_else\fR` functions are the same inboth cases: we print the error and exit\.
.br

.br
\fBSplitting Code into a Library Crate\fR
.br
=====================================
.br

.P
Our `\fIminigrep\fR` project is looking good so far! Now we’ll split the\fIsrc/main\.rs\fR file and put some code into the \fIsrc/lib\.rs\fR file so we can testit and have a \fIsrc/main\.rs\fR file with fewer responsibilities\.
.P
Let’s move all the code that isn’t the `\fImain\fR` function from \fIsrc/main\.rs\fR to\fIsrc/lib\.rs\fR:
.P
The `\fIrun\fR` function definition
.P
The relevant `\fIuse\fR` statements
.P
The definition of `\fIConfig\fR`
.P
The `\fIConfig::new\fR` function definition
.P
The contents of \fIsrc/lib\.rs\fR should have the signatures shown in Listing 12\-13(we’ve omitted the bodies of the functions for brevity)\. Note that this won’tcompile until we modify \fIsrc/main\.rs\fR in Listing 12\-14\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::error::Error;
use std::fs;

pub struct Config {
    pub query: String,
    pub filename: String,
}

impl Config {
    pub fn new(args: &[String]) \-> Result<Config, &str> {
        // \-\-snip\-\-
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
    }
}

pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
    // \-\-snip\-\-
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     println!("With text:\n{}", contents);
# 
#     Ok(())
}

.EE

.RE
Listing 12\-13: Moving `\fIConfig\fR` and `\fIrun\fR` into\fIsrc/lib\.rs\fR
.P
We’ve made liberal use of the `\fIpub\fR` keyword: on `\fIConfig\fR`, on its fields and its`\fInew\fR` method, and on the `\fIrun\fR` function\. We now have a library crate that has apublic API that we can test!
.P
Now we need to bring the code we moved to \fIsrc/lib\.rs\fR into the scope of thebinary crate in \fIsrc/main\.rs\fR, as shown in Listing 12\-14\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use std::env;
use std::process;

use minigrep::Config;

fn main() {
    // \-\-snip\-\-
#     let args: Vec<String> = env::args()\.collect();
# 
#     let config = Config::new(&args)\.unwrap_or_else(|err| {
#         println!("Problem parsing arguments: {}", err);
#         process::exit(1);
#     });
# 
#     println!("Searching for {}", config\.query);
#     println!("In file {}", config\.filename);
# 
    if let Err(e) = minigrep::run(config) {
        // \-\-snip\-\-
#         println!("Application error: {}", e);
# 
#         process::exit(1);
    }
}

.EE

.RE
Listing 12\-14: Using the `\fIminigrep\fR` library crate in\fIsrc/main\.rs\fR
.P
We add a `\fIuse minigrep::Config\fR` line to bring the `\fIConfig\fR` type from thelibrary crate into the binary crate’s scope, and we prefix the `\fIrun\fR` functionwith our crate name\. Now all the functionality should be connected and shouldwork\. Run the program with `\fIcargo run\fR` and make sure everything workscorrectly\.
.P
Whew! That was a lot of work, but we’ve set ourselves up for success in thefuture\. Now it’s much easier to handle errors, and we’ve made the code moremodular\. Almost all of our work will be done in \fIsrc/lib\.rs\fR from here on out\.
.P
Let’s take advantage of this newfound modularity by doing something that wouldhave been difficult with the old code but is easy with the new code: we’llwrite some tests!
.SH "Developing the Library’s Functionality with Test Driven Development"

.br

.br
\fBDeveloping the Library’s Functionality with Test\-Driven Development\fR
.br
=======================================================================
.br

.P
Now that we’ve extracted the logic into \fIsrc/lib\.rs\fR and left the argumentcollecting and error handling in \fIsrc/main\.rs\fR, it’s much easier to write testsfor the core functionality of our code\. We can call functions directly withvarious arguments and check return values without having to call our binaryfrom the command line\. Feel free to write some tests for the functionality inthe `\fIConfig::new\fR` and `\fIrun\fR` functions on your own\.
.P
In this section, we’ll add the searching logic to the `\fIminigrep\fR` program byusing the Test\-driven development (TDD) process\. This software developmenttechnique follows these steps:
.P
Write a test that fails and run it to make sure it fails for the reason youexpect\.
.P
Write or modify just enough code to make the new test pass\.
.P
Refactor the code you just added or changed and make sure the testscontinue to pass\.
.P
Repeat from step 1!
.P
This process is just one of many ways to write software, but TDD can help drivecode design as well\. Writing the test before you write the code that makes thetest pass helps to maintain high test coverage throughout the process\.
.P
We’ll test drive the implementation of the functionality that will actually dothe searching for the query string in the file contents and produce a list oflines that match the query\. We’ll add this functionality in a function called`\fIsearch\fR`\.
.br

.br
\fBWriting a Failing Test\fR
.br
========================
.br

.P
Because we don’t need them anymore, let’s remove the `\fIprintln!\fR` statements from\fIsrc/lib\.rs\fR and \fIsrc/main\.rs\fR that we used to check the program’s behavior\.Then, in \fIsrc/lib\.rs\fR, we’ll add a `\fItests\fR` module with a test function, as wedid in 
.UR ch11\-01\-writing\-tests\.html#the\-anatomy\-of\-a\-test\-function
.UE
Chapter 11\. The test function specifiesthe behavior we want the `\fIsearch\fR` function to have: it will take a query andthe text to search for the query in, and it will return only the lines from thetext that contain the query\. Listing 12\-15 shows this test, which won’t compileyet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     Ok(())
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn one_result() {
        let query = "duct";
        let contents = "\
Rust:
safe, fast, productive\.
Pick three\.";

        assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
    }
}

.EE

.RE
Listing 12\-15: Creating a failing test for the `\fIsearch\fR`function we wish we had
.P
This test searches for the string `\fI"duct"\fR`\. The text we’re searching is threelines, only one of which contains `\fI"duct"\fR` (Note that the backslash after theopening double quote tells Rust not to put a newline character at the beginningof the contents of this string literal)\. We assert that the value returned fromthe `\fIsearch\fR` function contains only the line we expect\.
.P
We aren’t able to run this test and watch it fail because the test doesn’t evencompile: the `\fIsearch\fR` function doesn’t exist yet! So now we’ll add just enoughcode to get the test to compile and run by adding a definition of the `\fIsearch\fR`function that always returns an empty vector, as shown in Listing 12\-16\. Thenthe test should compile and fail because an empty vector doesn’t match a vectorcontaining the line `\fI"safe, fast, productive\."\fR`Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    vec![]
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 12\-16: Defining just enough of the `\fIsearch\fR`function so our test will compile
.P
Notice that we need an explicit lifetime `\fI'a\fR` defined in the signature of`\fIsearch\fR` and used with the `\fIcontents\fR` argument and the return value\. Recall in
.UR ch10\-03\-lifetime\-syntax\.html
.UE
Chapter 10 that the lifetime parametersspecify which argument lifetime is connected to the lifetime of the returnvalue\. In this case, we indicate that the returned vector should contain stringslices that reference slices of the argument `\fIcontents\fR` (rather than theargument `\fIquery\fR`)\.
.P
In other words, we tell Rust that the data returned by the `\fIsearch\fR` functionwill live as long as the data passed into the `\fIsearch\fR` function in the`\fIcontents\fR` argument\. This is important! The data referenced \fIby\fR a slice needsto be valid for the reference to be valid; if the compiler assumes we’re makingstring slices of `\fIquery\fR` rather than `\fIcontents\fR`, it will do its safety checkingincorrectly\.
.P
If we forget the lifetime annotations and try to compile this function, we’llget this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
error[E0106]: missing lifetime specifier
  \-\-> src/lib\.rs:28:51
   |
28 | pub fn search(query: &str, contents: &str) \-> Vec<&str> {
   |                      \-\-\-\-            \-\-\-\-         ^ expected named lifetime parameter
   |
   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `query` or `contents`
help: consider introducing a named lifetime parameter
   |
28 | pub fn search<'a>(query: &'a str, contents: &'a str) \-> Vec<&'a str> {
   |              ^^^^        ^^^^^^^            ^^^^^^^         ^^^

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0106`\.
error: could not compile `minigrep`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Rust can’t possibly know which of the two arguments we need, so we need to tellit\. Because `\fIcontents\fR` is the argument that contains all of our text and wewant to return the parts of that text that match, we know `\fIcontents\fR` is theargument that should be connected to the return value using the lifetime syntax\.
.P
Other programming languages don’t require you to connect arguments to returnvalues in the signature\. Although this might seem strange, it will get easierover time\. You might want to compare this example with the 
.UR ch10\-03\-lifetime\-syntax\.html#validating\-references\-with\-lifetimes
.UE
“ValidatingReferences with Lifetimes” section in Chapter 10\.
.P
Now let’s run the test:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished test [unoptimized + debuginfo] target(s) in 0\.97s
     Running unittests (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 1 test
test tests::one_result \.\.\. FAILED

failures:

\-\-\-\- tests::one_result stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `["safe, fast, productive\."]`,
 right: `[]`', src/lib\.rs:44:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::one_result

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Great, the test fails, exactly as we expected\. Let’s get the test to pass!
.br

.br
\fBWriting Code to Pass the Test\fR
.br
===============================
.br

.P
Currently, our test is failing because we always return an empty vector\. To fixthat and implement `\fIsearch\fR`, our program needs to follow these steps:
.P
Iterate through each line of the contents\.
.P
Check whether the line contains our query string\.
.P
If it does, add it to the list of values we’re returning\.
.P
If it doesn’t, do nothing\.
.P
Return the list of results that match\.
.P
Let’s work through each step, starting with iterating through lines\.
.br

.br
\fBIterating Through Lines with the \fR
.br
===================================
.br
`\fIlines\fR` Method
.P
Rust has a helpful method to handle line\-by\-line iteration of strings,conveniently named `\fIlines\fR`, that works as shown in Listing 12\-17\. Note thiswon’t compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    for line in contents\.lines() {
        // do something with line
    }
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 12\-17: Iterating through each line in `\fIcontents\fR`
.P
The `\fIlines\fR` method returns an iterator\. We’ll talk about iterators in depth in
.UR ch13\-02\-iterators\.html
.UE
Chapter 13, but recall that you saw this way of using aniterator in 
.UR ch03\-05\-control\-flow\.html#looping\-through\-a\-collection\-with\-for
.UE
Listing 3\-5, where we used a `\fIfor\fR` loopwith an iterator to run some code on each item in a collection\.
.br

.br
\fBSearching Each Line for the Query\fR
.br
===================================
.br

.P
Next, we’ll check whether the current line contains our query string\.Fortunately, strings have a helpful method named `\fIcontains\fR` that does this forus! Add a call to the `\fIcontains\fR` method in the `\fIsearch\fR` function, as shown inListing 12\-18\. Note this still won’t compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    for line in contents\.lines() {
        if line\.contains(query) {
            // do something with line
        }
    }
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 12\-18: Adding functionality to see whether theline contains the string in `\fIquery\fR`
.br

.br
\fBStoring Matching Lines\fR
.br
========================
.br

.P
We also need a way to store the lines that contain our query string\. For that,we can make a mutable vector before the `\fIfor\fR` loop and call the `\fIpush\fR` methodto store a `\fIline\fR` in the vector\. After the `\fIfor\fR` loop, we return the vector, asshown in Listing 12\-19\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    let mut results = Vec::new();

    for line in contents\.lines() {
        if line\.contains(query) {
            results\.push(line);
        }
    }

    results
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 12\-19: Storing the lines that match so we canreturn them
.P
Now the `\fIsearch\fR` function should return only the lines that contain `\fIquery\fR`,and our test should pass\. Let’s run the test:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished test [unoptimized + debuginfo] target(s) in 1\.22s
     Running unittests (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 1 test
test tests::one_result \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running unittests (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests minigrep

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Our test passed, so we know it works!
.P
At this point, we could consider opportunities for refactoring theimplementation of the search function while keeping the tests passing tomaintain the same functionality\. The code in the search function isn’t too bad,but it doesn’t take advantage of some useful features of iterators\. We’llreturn to this example in 
.UR ch13\-02\-iterators\.html
.UE
Chapter 13, where we’llexplore iterators in detail, and look at how to improve it\.
.br

.br
\fBUsing the \fR
.br
============
.br
`\fIsearch\fR` Function in the `\fIrun\fR` Function
.P
Now that the `\fIsearch\fR` function is working and tested, we need to call `\fIsearch\fR`from our `\fIrun\fR` function\. We need to pass the `\fIconfig\.query\fR` value and the`\fIcontents\fR` that `\fIrun\fR` reads from the file to the `\fIsearch\fR` function\. Then `\fIrun\fR`will print each line returned from `\fIsearch\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
    let contents = fs::read_to_string(config\.filename)?;

    for line in search(&config\.query, &contents) {
        println!("{}", line);
    }

    Ok(())
}
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
.P
We’re still using a `\fIfor\fR` loop to return each line from `\fIsearch\fR` and print it\.
.P
Now the entire program should work! Let’s try it out, first with a word thatshould return exactly one line from the Emily Dickinson poem, “frog”:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run frog poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.38s
     Running `target/debug/minigrep frog poem\.txt`
How public, like a frog

.EE

.RE
.P
Cool! Now let’s try a word that will match multiple lines, like “body”:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run body poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep body poem\.txt`
I'm nobody! Who are you?
Are you nobody, too?
How dreary to be somebody!

.EE

.RE
.P
And finally, let’s make sure that we don’t get any lines when we search for aword that isn’t anywhere in the poem, such as “monomorphization”:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run monomorphization poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep monomorphization poem\.txt`

.EE

.RE
.P
Excellent! We’ve built our own mini version of a classic tool and learned a lotabout how to structure applications\. We’ve also learned a bit about file inputand output, lifetimes, testing, and command line parsing\.
.P
To round out this project, we’ll briefly demonstrate how to work withenvironment variables and how to print to standard error, both of which areuseful when you’re writing command line programs\.
.SH "Working with Environment Variables"

.br

.br
\fBWorking with Environment Variables\fR
.br
====================================
.br

.P
We’ll improve `\fIminigrep\fR` by adding an extra feature: an option forcase\-insensitive searching that the user can turn on via an environmentvariable\. We could make this feature a command line option and require thatusers enter it each time they want it to apply, but instead we’ll use anenvironment variable\. Doing so allows our users to set the environment variableonce and have all their searches be case insensitive in that terminal session\.
.br

.br
\fBWriting a Failing Test for the Case\-Insensitive \fR
.br
==================================================
.br
`\fIsearch\fR` Function
.P
We want to add a new `\fIsearch_case_insensitive\fR` function that we’ll call whenthe environment variable is on\. We’ll continue to follow the TDD process, sothe first step is again to write a failing test\. We’ll add a new test for thenew `\fIsearch_case_insensitive\fR` function and rename our old test from`\fIone_result\fR` to `\fIcase_sensitive\fR` to clarify the differences between the twotests, as shown in Listing 12\-20\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     for line in search(&config\.query, &contents) {
#         println!("{}", line);
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn case_sensitive() {
        let query = "duct";
        let contents = "\
Rust:
safe, fast, productive\.
Pick three\.
Duct tape\.";

        assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
    }

    #[test]
    fn case_insensitive() {
        let query = "rUsT";
        let contents = "\
Rust:
safe, fast, productive\.
Pick three\.
Trust me\.";

        assert_eq!(
            vec!["Rust:", "Trust me\."],
            search_case_insensitive(query, contents)
        );
    }
}

.EE

.RE
Listing 12\-20: Adding a new failing test for thecase\-insensitive function we’re about to add
.P
Note that we’ve edited the old test’s `\fIcontents\fR` too\. We’ve added a new linewith the text `\fI"Duct tape\."\fR` using a capital D that shouldn’t match the query`\fI"duct"\fR` when we’re searching in a case\-sensitive manner\. Changing the old testin this way helps ensure that we don’t accidentally break the case\-sensitivesearch functionality that we’ve already implemented\. This test should pass nowand should continue to pass as we work on the case\-insensitive search\.
.P
The new test for the case\-\fIinsensitive\fR search uses `\fI"rUsT"\fR` as its query\. Inthe `\fIsearch_case_insensitive\fR` function we’re about to add, the query `\fI"rUsT"\fR`should match the line containing `\fI"Rust:"\fR` with a capital R and match the line`\fI"Trust me\."\fR` even though both have different casing from the query\. This isour failing test, and it will fail to compile because we haven’t yet definedthe `\fIsearch_case_insensitive\fR` function\. Feel free to add a skeletonimplementation that always returns an empty vector, similar to the way we didfor the `\fIsearch\fR` function in Listing 12\-16 to see the test compile and fail\.
.br

.br
\fBImplementing the \fR
.br
===================
.br
`\fIsearch_case_insensitive\fR` Function
.P
The `\fIsearch_case_insensitive\fR` function, shown in Listing 12\-21, will be almostthe same as the `\fIsearch\fR` function\. The only difference is that we’ll lowercasethe `\fIquery\fR` and each `\fIline\fR` so whatever the case of the input arguments,they’ll be the same case when we check whether the line contains the query\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     for line in search(&config\.query, &contents) {
#         println!("{}", line);
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
pub fn search_case_insensitive<'a>(
    query: &str,
    contents: &'a str,
) \-> Vec<&'a str> {
    let query = query\.to_lowercase();
    let mut results = Vec::new();

    for line in contents\.lines() {
        if line\.to_lowercase()\.contains(&query) {
            results\.push(line);
        }
    }

    results
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 12\-21: Defining the `\fIsearch_case_insensitive\fR`function to lowercase the query and the line before comparing them
.P
First, we lowercase the `\fIquery\fR` string and store it in a shadowed variable withthe same name\. Calling `\fIto_lowercase\fR` on the query is necessary so no matterwhether the user’s query is `\fI"rust"\fR`, `\fI"RUST"\fR`, `\fI"Rust"\fR`, or `\fI"rUsT"\fR`, we’lltreat the query as if it were `\fI"rust"\fR` and be insensitive to the case\. While`\fIto_lowercase\fR` will handle basic Unicode, it won't be 100% accurate\. If we werewriting a real application, we'd want to do a bit more work here, but this sectionis about environment variables, not Unicode, so we'll leave it at that here\.
.P
Note that `\fIquery\fR` is now a `\fIString\fR` rather than a string slice, because calling`\fIto_lowercase\fR` creates new data rather than referencing existing data\. Say thequery is `\fI"rUsT"\fR`, as an example: that string slice doesn’t contain a lowercase`\fIu\fR` or `\fIt\fR` for us to use, so we have to allocate a new `\fIString\fR` containing`\fI"rust"\fR`\. When we pass `\fIquery\fR` as an argument to the `\fIcontains\fR` method now, weneed to add an ampersand because the signature of `\fIcontains\fR` is defined to takea string slice\.
.P
Next, we add a call to `\fIto_lowercase\fR` on each `\fIline\fR` before we check whether itcontains `\fIquery\fR` to lowercase all characters\. Now that we’ve converted `\fIline\fR`and `\fIquery\fR` to lowercase, we’ll find matches no matter what the case of thequery is\.
.P
Let’s see if this implementation passes the tests:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished test [unoptimized + debuginfo] target(s) in 1\.33s
     Running unittests (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 2 tests
test tests::case_insensitive \.\.\. ok
test tests::case_sensitive \.\.\. ok

test result: ok\. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running unittests (target/debug/deps/minigrep\-9cd200e5fac0fc94)

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests minigrep

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s


.EE

.RE
.P
Great! They passed\. Now, let’s call the new `\fIsearch_case_insensitive\fR` functionfrom the `\fIrun\fR` function\. First, we’ll add a configuration option to the`\fIConfig\fR` struct to switch between case\-sensitive and case\-insensitive search\.Adding this field will cause compiler errors because we aren’t initializingthis field anywhere yet:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
pub struct Config {
    pub query: String,
    pub filename: String,
    pub case_sensitive: bool,
}
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     let results = if config\.case_sensitive {
#         search(&config\.query, &contents)
#     } else {
#         search_case_insensitive(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{}", line);
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
.P
Note that we added the `\fIcase_sensitive\fR` field that holds a Boolean\. Next, weneed the `\fIrun\fR` function to check the `\fIcase_sensitive\fR` field’s value and usethat to decide whether to call the `\fIsearch\fR` function or the`\fIsearch_case_insensitive\fR` function, as shown in Listing 12\-22\. Note this stillwon’t compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
#     pub case_sensitive: bool,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
    let contents = fs::read_to_string(config\.filename)?;

    let results = if config\.case_sensitive {
        search(&config\.query, &contents)
    } else {
        search_case_insensitive(&config\.query, &contents)
    };

    for line in results {
        println!("{}", line);
    }

    Ok(())
}
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 12\-22: Calling either `\fIsearch\fR` or`\fIsearch_case_insensitive\fR` based on the value in `\fIconfig\.case_sensitive\fR`
.P
Finally, we need to check for the environment variable\. The functions forworking with environment variables are in the `\fIenv\fR` module in the standardlibrary, so we want to bring that module into scope with a `\fIuse std::env;\fR` lineat the top of \fIsrc/lib\.rs\fR\. Then we’ll use the `\fIvar\fR` function from the `\fIenv\fR`module to check for an environment variable named `\fICASE_INSENSITIVE\fR`, as shownin Listing 12\-23\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::env;
// \-\-snip\-\-

# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
#     pub case_sensitive: bool,
# }
# 
impl Config {
    pub fn new(args: &[String]) \-> Result<Config, &str> {
        if args\.len() < 3 {
            return Err("not enough arguments");
        }

        let query = args[1]\.clone();
        let filename = args[2]\.clone();

        let case_sensitive = env::var("CASE_INSENSITIVE")\.is_err();

        Ok(Config {
            query,
            filename,
            case_sensitive,
        })
    }
}
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     let results = if config\.case_sensitive {
#         search(&config\.query, &contents)
#     } else {
#         search_case_insensitive(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{}", line);
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 12\-23: Checking for an environment variable named`\fICASE_INSENSITIVE\fR`
.P
Here, we create a new variable `\fIcase_sensitive\fR`\. To set its value, we call the`\fIenv::var\fR` function and pass it the name of the `\fICASE_INSENSITIVE\fR` environmentvariable\. The `\fIenv::var\fR` function returns a `\fIResult\fR` that will be the successful`\fIOk\fR` variant that contains the value of the environment variable if theenvironment variable is set\. It will return the `\fIErr\fR` variant if theenvironment variable is not set\.
.P
We’re using the `\fIis_err\fR` method on the `\fIResult\fR` to check whether it’s an errorand therefore unset, which means it \fIshould\fR do a case\-sensitive search\. If the`\fICASE_INSENSITIVE\fR` environment variable is set to anything, `\fIis_err\fR` willreturn false and the program will perform a case\-insensitive search\. We don’tcare about the \fIvalue\fR of the environment variable, just whether it’s set orunset, so we’re checking `\fIis_err\fR` rather than using `\fIunwrap\fR`, `\fIexpect\fR`, or anyof the other methods we’ve seen on `\fIResult\fR`\.
.P
We pass the value in the `\fIcase_sensitive\fR` variable to the `\fIConfig\fR` instance sothe `\fIrun\fR` function can read that value and decide whether to call `\fIsearch\fR` or`\fIsearch_case_insensitive\fR`, as we implemented in Listing 12\-22\.
.P
Let’s give it a try! First, we’ll run our program without the environmentvariable set and with the query `\fIto\fR`, which should match any line that containsthe word “to” in all lowercase:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run to poem\.txt
   Compiling minigrep v0\.1\.0 (file:///projects/minigrep)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep to poem\.txt`
Are you nobody, too?
How dreary to be somebody!

.EE

.RE
.P
Looks like that still works! Now, let’s run the program with `\fICASE_INSENSITIVE\fR`set to `\fI1\fR` but with the same query `\fIto\fR`\.
.P
If you're using PowerShell, you will need to set the environmentvariable and run the program as separate commands:
.RS
.IP \fBconsole\fR 2

.br
.EX
PS> $Env:CASE_INSENSITIVE=1; cargo run to poem\.txt

.EE

.RE
.P
This will make `\fICASE_INSENSITIVE\fR` persist for the remainder of your shellsession\. It can be unset with the `\fIRemove\-Item\fR` cmdlet:
.RS
.IP \fBconsole\fR 2

.br
.EX
PS> Remove\-Item Env:CASE_INSENSITIVE

.EE

.RE
.P
We should get lines that contain “to” that might have uppercase letters:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ CASE_INSENSITIVE=1 cargo run to poem\.txt
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/minigrep to poem\.txt`
Are you nobody, too?
How dreary to be somebody!
To tell your name the livelong day
To an admiring bog!

.EE

.RE
.P
Excellent, we also got lines containing “To”! Our `\fIminigrep\fR` program can now docase\-insensitive searching controlled by an environment variable\. Now you knowhow to manage options set using either command line arguments or environmentvariables\.
.P
Some programs allow arguments \fIand\fR environment variables for the sameconfiguration\. In those cases, the programs decide that one or the other takesprecedence\. For another exercise on your own, try controlling caseinsensitivity through either a command line argument or an environmentvariable\. Decide whether the command line argument or the environment variableshould take precedence if the program is run with one set to case sensitive andone set to case insensitive\.
.P
The `\fIstd::env\fR` module contains many more useful features for dealing withenvironment variables: check out its documentation to see what is available\.
.SH "Writing Error Messages to Standard Error Instead of Standard Output"

.br

.br
\fBWriting Error Messages to Standard Error Instead of Standard Output\fR
.br
=====================================================================
.br

.P
At the moment, we’re writing all of our output to the terminal using the`\fIprintln!\fR` macro\. Most terminals provide two kinds of output: \fIstandard\fRoutput (`\fIstdout\fR`) for general information and \fIstandard error\fR (`\fIstderr\fR`)for error messages\. This distinction enables users to choose to direct thesuccessful output of a program to a file but still print error messages to thescreen\.
.P
The `\fIprintln!\fR` macro is only capable of printing to standard output, so wehave to use something else to print to standard error\.
.br

.br
\fBChecking Where Errors Are Written\fR
.br
===================================
.br

.P
First, let’s observe how the content printed by `\fIminigrep\fR` is currently beingwritten to standard output, including any error messages we want to write tostandard error instead\. We’ll do that by redirecting the standard output streamto a file while also intentionally causing an error\. We won’t redirect thestandard error stream, so any content sent to standard error will continue todisplay on the screen\.
.P
Command line programs are expected to send error messages to the standard errorstream so we can still see error messages on the screen even if we redirect thestandard output stream to a file\. Our program is not currently well\-behaved:we’re about to see that it saves the error message output to a file instead!
.P
The way to demonstrate this behavior is by running the program with `\fI>\fR` and thefilename, \fIoutput\.txt\fR, that we want to redirect the standard output stream to\.We won’t pass any arguments, which should cause an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run > output\.txt

.EE

.RE
.P
The `\fI>\fR` syntax tells the shell to write the contents of standard output to\fIoutput\.txt\fR instead of the screen\. We didn’t see the error message we wereexpecting printed to the screen, so that means it must have ended up in thefile\. This is what \fIoutput\.txt\fR contains:
.RS
.IP \fBtext\fR 2

.br
.EX
Problem parsing arguments: not enough arguments

.EE

.RE
.P
Yup, our error message is being printed to standard output\. It’s much moreuseful for error messages like this to be printed to standard error so onlydata from a successful run ends up in the file\. We’ll change that\.
.br

.br
\fBPrinting Errors to Standard Error\fR
.br
===================================
.br

.P
We’ll use the code in Listing 12\-24 to change how error messages are printed\.Because of the refactoring we did earlier in this chapter, all the code thatprints error messages is in one function, `\fImain\fR`\. The standard library providesthe `\fIeprintln!\fR` macro that prints to the standard error stream, so let’s changethe two places we were calling `\fIprintln!\fR` to print errors to use `\fIeprintln!\fR`instead\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::process;
# 
# use minigrep::Config;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = Config::new(&args)\.unwrap_or_else(|err| {
        eprintln!("Problem parsing arguments: {}", err);
        process::exit(1);
    });

    if let Err(e) = minigrep::run(config) {
        eprintln!("Application error: {}", e);

        process::exit(1);
    }
}

.EE

.RE
Listing 12\-24: Writing error messages to standard errorinstead of standard output using `\fIeprintln!\fR`
.P
After changing `\fIprintln!\fR` to `\fIeprintln!\fR`, let’s run the program again in thesame way, without any arguments and redirecting standard output with `\fI>\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run > output\.txt
Problem parsing arguments: not enough arguments

.EE

.RE
.P
Now we see the error onscreen and \fIoutput\.txt\fR contains nothing, which is thebehavior we expect of command line programs\.
.P
Let’s run the program again with arguments that don’t cause an error but stillredirect standard output to a file, like so:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run to poem\.txt > output\.txt

.EE

.RE
.P
We won’t see any output to the terminal, and \fIoutput\.txt\fR will contain ourresults:Filename: output\.txt
.RS
.IP \fBtext\fR 2

.br
.EX
Are you nobody, too?
How dreary to be somebody!

.EE

.RE
.P
This demonstrates that we’re now using standard output for successful outputand standard error for error output as appropriate\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
This chapter recapped some of the major concepts you’ve learned so far andcovered how to perform common I/O operations in Rust\. By using command linearguments, files, environment variables, and the `\fIeprintln!\fR` macro for printingerrors, you’re now prepared to write command line applications\. By using theconcepts in previous chapters, your code will be well organized, store dataeffectively in the appropriate data structures, handle errors nicely, and bewell tested\.
.P
Next, we’ll explore some Rust features that were influenced by functionallanguages: closures and iterators\.
.SH "Functional Language Features: Iterators and Closures"

.br

.br
\fBFunctional Language Features: Iterators and Closures\fR
.br
======================================================
.br

.P
Rust’s design has taken inspiration from many existing languages andtechniques, and one significant influence is \fIfunctional programming\fR\.Programming in a functional style often includes using functions as values bypassing them in arguments, returning them from other functions, assigning themto variables for later execution, and so forth\.
.P
In this chapter, we won’t debate the issue of what functional programming is orisn’t but will instead discuss some features of Rust that are similar tofeatures in many languages often referred to as functional\.
.P
More specifically, we’ll cover:\fIClosures\fR, a function\-like construct you can store in a variable\fIIterators\fR, a way of processing a series of elements
.P
How to use these two features to improve the I/O project in Chapter 12
.P
The performance of these two features (Spoiler alert: they’re faster than youmight think!)
.P
Other Rust features, such as pattern matching and enums, which we’ve covered inother chapters, are influenced by the functional style as well\. Masteringclosures and iterators is an important part of writing idiomatic, fast Rustcode, so we’ll devote this entire chapter to them\.
.SH "Closures: Anonymous Functions that Can Capture Their Environment"

.br

.br
\fBClosures: Anonymous Functions that Can Capture Their Environment\fR
.br
==================================================================
.br

.P
Rust’s closures are anonymous functions you can save in a variable or pass asarguments to other functions\. You can create the closure in one place and thencall the closure to evaluate it in a different context\. Unlike functions,closures can capture values from the scope in which they’re defined\. We’lldemonstrate how these closure features allow for code reuse and behaviorcustomization\.
.br

.br
\fBCreating an Abstraction of Behavior with Closures\fR
.br
===================================================
.br

.P
Let’s work on an example of a situation in which it’s useful to store a closureto be executed later\. Along the way, we’ll talk about the syntax of closures,type inference, and traits\.
.P
Consider this hypothetical situation: we work at a startup that’s making an appto generate custom exercise workout plans\. The backend is written in Rust, andthe algorithm that generates the workout plan takes into account many factors,such as the app user’s age, body mass index, exercise preferences, recentworkouts, and an intensity number they specify\. The actual algorithm used isn’timportant in this example; what’s important is that this calculation takes afew seconds\. We want to call this algorithm only when we need to and only callit once so we don’t make the user wait more than necessary\.
.P
We’ll simulate calling this hypothetical algorithm with the function`\fIsimulated_expensive_calculation\fR` shown in Listing 13\-1, which will print`\fIcalculating slowly\.\.\.\fR`, wait for two seconds, and then return whatever numberwe passed in\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;
use std::time::Duration;

fn simulated_expensive_calculation(intensity: u32) \-> u32 {
    println!("calculating slowly\.\.\.");
    thread::sleep(Duration::from_secs(2));
    intensity
}
# 
# fn main() {}

.EE

.RE
Listing 13\-1: A function to stand in for a hypotheticalcalculation that takes about 2 seconds to run
.P
Next is the `\fImain\fR` function, which contains the parts of the workout appimportant for this example\. This function represents the code that the app willcall when a user asks for a workout plan\. Because the interaction with theapp’s frontend isn’t relevant to the use of closures, we’ll hardcode valuesrepresenting inputs to our program and print the outputs\.
.P
The required inputs are these:
.P
An intensity number from the user, which is specified when they requesta workout to indicate whether they want a low\-intensity workout or ahigh\-intensity workout
.P
A random number that will generate some variety in the workout plans
.P
The output will be the recommended workout plan\. Listing 13\-2 shows the `\fImain\fR`function we’ll use\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::thread;
# use std::time::Duration;
# 
# fn simulated_expensive_calculation(intensity: u32) \-> u32 {
#     println!("calculating slowly\.\.\.");
#     thread::sleep(Duration::from_secs(2));
#     intensity
# }
# 
# fn generate_workout(intensity: u32, random_number: u32) {}
# 
fn main() {
    let simulated_user_specified_value = 10;
    let simulated_random_number = 7;

    generate_workout(simulated_user_specified_value, simulated_random_number);
}

.EE

.RE
Listing 13\-2: A `\fImain\fR` function with hardcoded values tosimulate user input and random number generation
.P
We’ve hardcoded the variable `\fIsimulated_user_specified_value\fR` as 10 and thevariable `\fIsimulated_random_number\fR` as 7 for simplicity’s sake; in an actualprogram, we’d get the intensity number from the app frontend, and we’d use the`\fIrand\fR` crate to generate a random number, as we did in the Guessing Gameexample in Chapter 2\. The `\fImain\fR` function calls a `\fIgenerate_workout\fR` functionwith the simulated input values\.
.P
Now that we have the context, let’s get to the algorithm\. The function`\fIgenerate_workout\fR` in Listing 13\-3 contains the business logic of theapp that we’re most concerned with in this example\. The rest of the codechanges in this example will be made to this function\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::thread;
# use std::time::Duration;
# 
# fn simulated_expensive_calculation(intensity: u32) \-> u32 {
#     println!("calculating slowly\.\.\.");
#     thread::sleep(Duration::from_secs(2));
#     intensity
# }
# 
fn generate_workout(intensity: u32, random_number: u32) {
    if intensity < 25 {
        println!(
            "Today, do {} pushups!",
            simulated_expensive_calculation(intensity)
        );
        println!(
            "Next, do {} situps!",
            simulated_expensive_calculation(intensity)
        );
    } else {
        if random_number == 3 {
            println!("Take a break today! Remember to stay hydrated!");
        } else {
            println!(
                "Today, run for {} minutes!",
                simulated_expensive_calculation(intensity)
            );
        }
    }
}
# 
# fn main() {
#     let simulated_user_specified_value = 10;
#     let simulated_random_number = 7;
# 
#     generate_workout(simulated_user_specified_value, simulated_random_number);
# }

.EE

.RE
Listing 13\-3: The business logic that prints the workoutplans based on the inputs and calls to the `\fIsimulated_expensive_calculation\fR`function
.P
The code in Listing 13\-3 has multiple calls to the slow calculation function\.The first `\fIif\fR` block calls `\fIsimulated_expensive_calculation\fR` twice, the `\fIif\fR`inside the outer `\fIelse\fR` doesn’t call it at all, and the code inside thesecond `\fIelse\fR` case calls it once\.
.P
The desired behavior of the `\fIgenerate_workout\fR` function is to first checkwhether the user wants a low\-intensity workout (indicated by a number less than25) or a high\-intensity workout (a number of 25 or greater)\.
.P
Low\-intensity workout plans will recommend a number of push\-ups and sit\-upsbased on the complex algorithm we’re simulating\.
.P
If the user wants a high\-intensity workout, there’s some additional logic: ifthe value of the random number generated by the app happens to be 3, the appwill recommend a break and hydration\. If not, the user will get a number ofminutes of running based on the complex algorithm\.
.P
This code works the way the business wants it to now, but let’s say the datascience team decides that we need to make some changes to the way we call the`\fIsimulated_expensive_calculation\fR` function in the future\. To simplify theupdate when those changes happen, we want to refactor this code so it calls the`\fIsimulated_expensive_calculation\fR` function only once\. We also want to cut theplace where we’re currently unnecessarily calling the function twice withoutadding any other calls to that function in the process\. That is, we don’t wantto call it if the result isn’t needed, and we still want to call it only once\.
.br

.br
\fBRefactoring Using Functions\fR
.br
=============================
.br

.P
We could restructure the workout program in many ways\. First, we’ll tryextracting the duplicated call to the `\fIsimulated_expensive_calculation\fR`function into a variable, as shown in Listing 13\-4\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::thread;
# use std::time::Duration;
# 
# fn simulated_expensive_calculation(intensity: u32) \-> u32 {
#     println!("calculating slowly\.\.\.");
#     thread::sleep(Duration::from_secs(2));
#     intensity
# }
# 
fn generate_workout(intensity: u32, random_number: u32) {
    let expensive_result = simulated_expensive_calculation(intensity);

    if intensity < 25 {
        println!("Today, do {} pushups!", expensive_result);
        println!("Next, do {} situps!", expensive_result);
    } else {
        if random_number == 3 {
            println!("Take a break today! Remember to stay hydrated!");
        } else {
            println!("Today, run for {} minutes!", expensive_result);
        }
    }
}
# 
# fn main() {
#     let simulated_user_specified_value = 10;
#     let simulated_random_number = 7;
# 
#     generate_workout(simulated_user_specified_value, simulated_random_number);
# }

.EE

.RE
Listing 13\-4: Extracting the calls to`\fIsimulated_expensive_calculation\fR` to one place and storing the result in the`\fIexpensive_result\fR` variable
.P
This change unifies all the calls to `\fIsimulated_expensive_calculation\fR` andsolves the problem of the first `\fIif\fR` block unnecessarily calling the functiontwice\. Unfortunately, we’re now calling this function and waiting for theresult in all cases, which includes the inner `\fIif\fR` block that doesn’t use theresult value at all\.
.P
We want to refer to `\fIsimulated_expensive_calculation\fR` only once in`\fIgenerate_workout\fR`, but defer the expensive calculation to only wherewe actually need the result\. This is a use case for closures!
.br

.br
\fBRefactoring with Closures to Store Code\fR
.br
=========================================
.br

.P
Instead of always calling the `\fIsimulated_expensive_calculation\fR` function beforethe `\fIif\fR` blocks, we can define a closure and store the \fIclosure\fR in a variablerather than storing the result of the function call, as shown in Listing 13\-5\.We can actually move the whole body of `\fIsimulated_expensive_calculation\fR` withinthe closure we’re introducing here\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::thread;
# use std::time::Duration;
# 
# fn generate_workout(intensity: u32, random_number: u32) {
    let expensive_closure = |num| {
        println!("calculating slowly\.\.\.");
        thread::sleep(Duration::from_secs(2));
        num
    };
# 
#     if intensity < 25 {
#         println!("Today, do {} pushups!", expensive_closure(intensity));
#         println!("Next, do {} situps!", expensive_closure(intensity));
#     } else {
#         if random_number == 3 {
#             println!("Take a break today! Remember to stay hydrated!");
#         } else {
#             println!(
#                 "Today, run for {} minutes!",
#                 expensive_closure(intensity)
#             );
#         }
#     }
# }
# 
# fn main() {
#     let simulated_user_specified_value = 10;
#     let simulated_random_number = 7;
# 
#     generate_workout(simulated_user_specified_value, simulated_random_number);
# }

.EE

.RE
Listing 13\-5: Defining a closure and storing it in the`\fIexpensive_closure\fR` variable
.P
The closure definition comes after the `\fI=\fR` to assign it to the variable`\fIexpensive_closure\fR`\. To define a closure, we start with a pair of verticalpipes (`\fI|\fR`), inside which we specify the parameters to the closure; this syntaxwas chosen because of its similarity to closure definitions in Smalltalk andRuby\. This closure has one parameter named `\fInum\fR`: if we had more than oneparameter, we would separate them with commas, like `\fI|param1, param2|\fR`\.
.P
After the parameters, we place curly brackets that hold the body of theclosure—these are optional if the closure body is a single expression\. The endof the closure, after the curly brackets, needs a semicolon to complete the`\fIlet\fR` statement\. The value returned from the last line in the closure body(`\fInum\fR`) will be the value returned from the closure when it’s called, becausethat line doesn’t end in a semicolon; just as in function bodies\.
.P
Note that this `\fIlet\fR` statement means `\fIexpensive_closure\fR` contains the\fIdefinition\fR of an anonymous function, not the \fIresulting value\fR of calling theanonymous function\. Recall that we’re using a closure because we want to definethe code to call at one point, store that code, and call it at a later point;the code we want to call is now stored in `\fIexpensive_closure\fR`\.
.P
With the closure defined, we can change the code in the `\fIif\fR` blocks to call theclosure to execute the code and get the resulting value\. We call a closure likewe do a function: we specify the variable name that holds the closuredefinition and follow it with parentheses containing the argument values wewant to use, as shown in Listing 13\-6\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::thread;
# use std::time::Duration;
# 
fn generate_workout(intensity: u32, random_number: u32) {
    let expensive_closure = |num| {
        println!("calculating slowly\.\.\.");
        thread::sleep(Duration::from_secs(2));
        num
    };

    if intensity < 25 {
        println!("Today, do {} pushups!", expensive_closure(intensity));
        println!("Next, do {} situps!", expensive_closure(intensity));
    } else {
        if random_number == 3 {
            println!("Take a break today! Remember to stay hydrated!");
        } else {
            println!(
                "Today, run for {} minutes!",
                expensive_closure(intensity)
            );
        }
    }
}
# 
# fn main() {
#     let simulated_user_specified_value = 10;
#     let simulated_random_number = 7;
# 
#     generate_workout(simulated_user_specified_value, simulated_random_number);
# }

.EE

.RE
Listing 13\-6: Calling the `\fIexpensive_closure\fR` we’vedefined
.P
Now how to perform the expensive calculation is defined in only oneplace, and we’re only executing that code where we need the results\.
.P
However, we’ve reintroduced one of the problems from Listing 13\-3: we’re stillcalling the closure twice in the first `\fIif\fR` block, which will call theexpensive code twice and make the user wait twice as long as they need to\. Wecould fix this problem by creating a variable local to that `\fIif\fR` block to holdthe result of calling the closure, but closures provide us with anothersolution\. We’ll talk about that solution in a bit\. But first let’s talk aboutwhy there aren’t type annotations in the closure definition and the traitsinvolved with closures\.
.br

.br
\fBClosure Type Inference and Annotation\fR
.br
=======================================
.br

.P
Closures don’t require you to annotate the types of the parameters or thereturn value like `\fIfn\fR` functions do\. Type annotations are required on functionsbecause they’re part of an explicit interface exposed to your users\. Definingthis interface rigidly is important for ensuring that everyone agrees on whattypes of values a function uses and returns\. But closures aren’t used in anexposed interface like this: they’re stored in variables and used withoutnaming them and exposing them to users of our library\.
.P
Closures are usually short and relevant only within a narrow context ratherthan in any arbitrary scenario\. Within these limited contexts, the compiler isreliably able to infer the types of the parameters and the return type, similarto how it’s able to infer the types of most variables\.
.P
Making programmers annotate the types in these small, anonymous functions wouldbe annoying and largely redundant with the information the compiler already hasavailable\.
.P
As with variables, we can add type annotations if we want to increaseexplicitness and clarity at the cost of being more verbose than is strictlynecessary\. Annotating the types for the closure we defined in Listing 13\-5would look like the definition shown in Listing 13\-7\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::thread;
# use std::time::Duration;
# 
# fn generate_workout(intensity: u32, random_number: u32) {
    let expensive_closure = |num: u32| \-> u32 {
        println!("calculating slowly\.\.\.");
        thread::sleep(Duration::from_secs(2));
        num
    };
# 
#     if intensity < 25 {
#         println!("Today, do {} pushups!", expensive_closure(intensity));
#         println!("Next, do {} situps!", expensive_closure(intensity));
#     } else {
#         if random_number == 3 {
#             println!("Take a break today! Remember to stay hydrated!");
#         } else {
#             println!(
#                 "Today, run for {} minutes!",
#                 expensive_closure(intensity)
#             );
#         }
#     }
# }
# 
# fn main() {
#     let simulated_user_specified_value = 10;
#     let simulated_random_number = 7;
# 
#     generate_workout(simulated_user_specified_value, simulated_random_number);
# }

.EE

.RE
Listing 13\-7: Adding optional type annotations of theparameter and return value types in the closure
.P
With type annotations added, the syntax of closures looks more similar to thesyntax of functions\. The following is a vertical comparison of the syntax forthe definition of a function that adds 1 to its parameter and a closure thathas the same behavior\. We’ve added some spaces to line up the relevant parts\.This illustrates how closure syntax is similar to function syntax except forthe use of pipes and the amount of syntax that is optional:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn  add_one_v1   (x: u32) \-> u32 { x + 1 }
let add_one_v2 = |x: u32| \-> u32 { x + 1 };
let add_one_v3 = |x|             { x + 1 };
let add_one_v4 = |x|               x + 1  ;

.EE

.RE
.P
The first line shows a function definition, and the second line shows a fullyannotated closure definition\. The third line removes the type annotations fromthe closure definition, and the fourth line removes the brackets, which areoptional because the closure body has only one expression\. These are all validdefinitions that will produce the same behavior when they’re called\. Callingthe closures is required for `\fIadd_one_v3\fR` and `\fIadd_one_v4\fR` to be able tocompile because the types will be inferred from their usage\.
.P
Closure definitions will have one concrete type inferred for each of theirparameters and for their return value\. For instance, Listing 13\-8 shows thedefinition of a short closure that just returns the value it receives as aparameter\. This closure isn’t very useful except for the purposes of thisexample\. Note that we haven’t added any type annotations to the definition: ifwe then try to call the closure twice, using a `\fIString\fR` as an argument thefirst time and a `\fIu32\fR` the second time, we’ll get an error\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let example_closure = |x| x;

    let s = example_closure(String::from("hello"));
    let n = example_closure(5);
# }

.EE

.RE
Listing 13\-8: Attempting to call a closure whose typesare inferred with two different types
.P
The compiler gives us this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling closure\-example v0\.1\.0 (file:///projects/closure\-example)
error[E0308]: mismatched types
 \-\-> src/main\.rs:5:29
  |
5 |     let n = example_closure(5);
  |                             ^
  |                             |
  |                             expected struct `String`, found integer
  |                             help: try using a conversion method: `5\.to_string()`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `closure\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The first time we call `\fIexample_closure\fR` with the `\fIString\fR` value, the compilerinfers the type of `\fIx\fR` and the return type of the closure to be `\fIString\fR`\. Thosetypes are then locked into the closure in `\fIexample_closure\fR`, and we get a typeerror if we try to use a different type with the same closure\.
.br

.br
\fBStoring Closures Using Generic Parameters and the \fR
.br
====================================================
.br
`\fIFn\fR` Traits
.P
Let’s return to our workout generation app\. In Listing 13\-6, our code was stillcalling the expensive calculation closure more times than it needed to\. Oneoption to solve this issue is to save the result of the expensive closure in avariable for reuse and use the variable in each place we need the result,instead of calling the closure again\. However, this method could result in alot of repeated code\.
.P
Fortunately, another solution is available to us\. We can create a struct thatwill hold the closure and the resulting value of calling the closure\. Thestruct will execute the closure only if we need the resulting value, and itwill cache the resulting value so the rest of our code doesn’t have to beresponsible for saving and reusing the result\. You may know this pattern as\fImemoization\fR or \fIlazy evaluation\fR\.
.P
To make a struct that holds a closure, we need to specify the type of theclosure, because a struct definition needs to know the types of each of itsfields\. Each closure instance has its own unique anonymous type: that is, evenif two closures have the same signature, their types are still considereddifferent\. To define structs, enums, or function parameters that use closures,we use generics and trait bounds, as we discussed in Chapter 10\.
.P
The `\fIFn\fR` traits are provided by the standard library\. All closures implement atleast one of the traits: `\fIFn\fR`, `\fIFnMut\fR`, or `\fIFnOnce\fR`\. We’ll discuss thedifference between these traits in the 
.UR #capturing\-the\-environment\-with\-closures
.UE
“Capturing the Environment withClosures” section; inthis example, we can use the `\fIFn\fR` trait\.
.P
We add types to the `\fIFn\fR` trait bound to represent the types of the parametersand return values the closures must have to match this trait bound\. In thiscase, our closure has a parameter of type `\fIu32\fR` and returns a `\fIu32\fR`, so thetrait bound we specify is `\fIFn(u32) \-> u32\fR`\.
.P
Listing 13\-9 shows the definition of the `\fICacher\fR` struct that holds a closureand an optional result value\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Cacher<T>
where
    T: Fn(u32) \-> u32,
{
    calculation: T,
    value: Option<u32>,
}
# 
# fn main() {}

.EE

.RE
Listing 13\-9: Defining a `\fICacher\fR` struct that holds aclosure in `\fIcalculation\fR` and an optional result in `\fIvalue\fR`
.P
The `\fICacher\fR` struct has a `\fIcalculation\fR` field of the generic type `\fIT\fR`\. Thetrait bounds on `\fIT\fR` specify that it’s a closure by using the `\fIFn\fR` trait\. Anyclosure we want to store in the `\fIcalculation\fR` field must have one `\fIu32\fR`parameter (specified within the parentheses after `\fIFn\fR`) and must return a`\fIu32\fR` (specified after the `\fI\->\fR`)\.
.P
Note: Functions can implement all three of the `\fIFn\fR` traits too\. If what wewant to do doesn’t require capturing a value from the environment, we can usea function rather than a closure where we need something that implements an`\fIFn\fR` trait\.
.P
The `\fIvalue\fR` field is of type `\fIOption<u32>\fR`\. Before we execute the closure,`\fIvalue\fR` will be `\fINone\fR`\. When code using a `\fICacher\fR` asks for the \fIresult\fR of theclosure, the `\fICacher\fR` will execute the closure at that time and store theresult within a `\fISome\fR` variant in the `\fIvalue\fR` field\. Then if the code asks forthe result of the closure again, instead of executing the closure again, the`\fICacher\fR` will return the result held in the `\fISome\fR` variant\.
.P
The logic around the `\fIvalue\fR` field we’ve just described is defined in Listing13\-10\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# struct Cacher<T>
# where
#     T: Fn(u32) \-> u32,
# {
#     calculation: T,
#     value: Option<u32>,
# }
# 
impl<T> Cacher<T>
where
    T: Fn(u32) \-> u32,
{
    fn new(calculation: T) \-> Cacher<T> {
        Cacher {
            calculation,
            value: None,
        }
    }

    fn value(&mut self, arg: u32) \-> u32 {
        match self\.value {
            Some(v) => v,
            None => {
                let v = (self\.calculation)(arg);
                self\.value = Some(v);
                v
            }
        }
    }
}
# 
# fn main() {}

.EE

.RE
Listing 13\-10: The caching logic of `\fICacher\fR`
.P
We want `\fICacher\fR` to manage the struct fields’ values rather than letting thecalling code potentially change the values in these fields directly, so thesefields are private\.
.P
The `\fICacher::new\fR` function takes a generic parameter `\fIT\fR`, which we’ve definedas having the same trait bound as the `\fICacher\fR` struct\. Then `\fICacher::new\fR`returns a `\fICacher\fR` instance that holds the closure specified in the`\fIcalculation\fR` field and a `\fINone\fR` value in the `\fIvalue\fR` field, because we haven’texecuted the closure yet\.
.P
When the calling code needs the result of evaluating the closure, instead ofcalling the closure directly, it will call the `\fIvalue\fR` method\. This methodchecks whether we already have a resulting value in `\fIself\.value\fR` in a `\fISome\fR`;if we do, it returns the value within the `\fISome\fR` without executing the closureagain\.
.P
If `\fIself\.value\fR` is `\fINone\fR`, the code calls the closure stored in`\fIself\.calculation\fR`, saves the result in `\fIself\.value\fR` for future use, andreturns the value as well\.
.P
Listing 13\-11 shows how we can use this `\fICacher\fR` struct in the function`\fIgenerate_workout\fR` from Listing 13\-6\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::thread;
# use std::time::Duration;
# 
# struct Cacher<T>
# where
#     T: Fn(u32) \-> u32,
# {
#     calculation: T,
#     value: Option<u32>,
# }
# 
# impl<T> Cacher<T>
# where
#     T: Fn(u32) \-> u32,
# {
#     fn new(calculation: T) \-> Cacher<T> {
#         Cacher {
#             calculation,
#             value: None,
#         }
#     }
# 
#     fn value(&mut self, arg: u32) \-> u32 {
#         match self\.value {
#             Some(v) => v,
#             None => {
#                 let v = (self\.calculation)(arg);
#                 self\.value = Some(v);
#                 v
#             }
#         }
#     }
# }
# 
fn generate_workout(intensity: u32, random_number: u32) {
    let mut expensive_result = Cacher::new(|num| {
        println!("calculating slowly\.\.\.");
        thread::sleep(Duration::from_secs(2));
        num
    });

    if intensity < 25 {
        println!("Today, do {} pushups!", expensive_result\.value(intensity));
        println!("Next, do {} situps!", expensive_result\.value(intensity));
    } else {
        if random_number == 3 {
            println!("Take a break today! Remember to stay hydrated!");
        } else {
            println!(
                "Today, run for {} minutes!",
                expensive_result\.value(intensity)
            );
        }
    }
}
# 
# fn main() {
#     let simulated_user_specified_value = 10;
#     let simulated_random_number = 7;
# 
#     generate_workout(simulated_user_specified_value, simulated_random_number);
# }

.EE

.RE
Listing 13\-11: Using `\fICacher\fR` in the `\fIgenerate_workout\fR`function to abstract away the caching logic
.P
Instead of saving the closure in a variable directly, we save a new instance of`\fICacher\fR` that holds the closure\. Then, in each place we want the result, wecall the `\fIvalue\fR` method on the `\fICacher\fR` instance\. We can call the `\fIvalue\fR`method as many times as we want, or not call it at all, and the expensivecalculation will be run a maximum of once\.
.P
Try running this program with the `\fImain\fR` function from Listing 13\-2\. Change thevalues in the `\fIsimulated_user_specified_value\fR` and `\fIsimulated_random_number\fR`variables to verify that in all the cases in the various `\fIif\fR` and `\fIelse\fR`blocks, `\fIcalculating slowly\.\.\.\fR` appears only once and only when needed\. The`\fICacher\fR` takes care of the logic necessary to ensure we aren’t calling theexpensive calculation more than we need to so `\fIgenerate_workout\fR` can focus onthe business logic\.
.br

.br
\fBLimitations of the \fR
.br
=====================
.br
`\fICacher\fR` Implementation
.P
Caching values is a generally useful behavior that we might want to use inother parts of our code with different closures\. However, there are twoproblems with the current implementation of `\fICacher\fR` that would make reusing itin different contexts difficult\.
.P
The first problem is that a `\fICacher\fR` instance assumes it will always get thesame value for the parameter `\fIarg\fR` to the `\fIvalue\fR` method\. That is, this test of`\fICacher\fR` will fail:
.RS
.IP \fBrust,ignore,panics\fR 2

.br
.EX
# struct Cacher<T>
# where
#     T: Fn(u32) \-> u32,
# {
#     calculation: T,
#     value: Option<u32>,
# }
# 
# impl<T> Cacher<T>
# where
#     T: Fn(u32) \-> u32,
# {
#     fn new(calculation: T) \-> Cacher<T> {
#         Cacher {
#             calculation,
#             value: None,
#         }
#     }
# 
#     fn value(&mut self, arg: u32) \-> u32 {
#         match self\.value {
#             Some(v) => v,
#             None => {
#                 let v = (self\.calculation)(arg);
#                 self\.value = Some(v);
#                 v
#             }
#         }
#     }
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
    #[test]
    fn call_with_different_values() {
        let mut c = Cacher::new(|a| a);

        let v1 = c\.value(1);
        let v2 = c\.value(2);

        assert_eq!(v2, 2);
    }
# }

.EE

.RE
.P
This test creates a new `\fICacher\fR` instance with a closure that returns the valuepassed into it\. We call the `\fIvalue\fR` method on this `\fICacher\fR` instance with an`\fIarg\fR` value of 1 and then an `\fIarg\fR` value of 2, and we expect the call to`\fIvalue\fR` with the `\fIarg\fR` value of 2 to return 2\.
.P
Run this test with the `\fICacher\fR` implementation in Listing 13\-9 and Listing13\-10, and the test will fail on the `\fIassert_eq!\fR` with this message:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling cacher v0\.1\.0 (file:///projects/cacher)
    Finished test [unoptimized + debuginfo] target(s) in 0\.72s
     Running unittests (target/debug/deps/cacher\-074d7c200c000afa)

running 1 test
test tests::call_with_different_values \.\.\. FAILED

failures:

\-\-\-\- tests::call_with_different_values stdout \-\-\-\-
thread 'main' panicked at 'assertion failed: `(left == right)`
  left: `1`,
 right: `2`', src/lib\.rs:43:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::call_with_different_values

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
The problem is that the first time we called `\fIc\.value\fR` with 1, the `\fICacher\fR`instance saved `\fISome(1)\fR` in `\fIself\.value\fR`\. Thereafter, no matter what we pass intothe `\fIvalue\fR` method, it will always return 1\.
.P
Try modifying `\fICacher\fR` to hold a hash map rather than a single value\. The keysof the hash map will be the `\fIarg\fR` values that are passed in, and the values ofthe hash map will be the result of calling the closure on that key\. Instead oflooking at whether `\fIself\.value\fR` directly has a `\fISome\fR` or a `\fINone\fR` value, the`\fIvalue\fR` function will look up the `\fIarg\fR` in the hash map and return the value ifit’s present\. If it’s not present, the `\fICacher\fR` will call the closure and savethe resulting value in the hash map associated with its `\fIarg\fR` value\.
.P
The second problem with the current `\fICacher\fR` implementation is that it onlyaccepts closures that take one parameter of type `\fIu32\fR` and return a `\fIu32\fR`\. Wemight want to cache the results of closures that take a string slice and return`\fIusize\fR` values, for example\. To fix this issue, try introducing more genericparameters to increase the flexibility of the `\fICacher\fR` functionality\.
.br

.br
\fBCapturing the Environment with Closures\fR
.br
=========================================
.br

.P
In the workout generator example, we only used closures as inline anonymousfunctions\. However, closures have an additional capability that functions don’thave: they can capture their environment and access variables from the scope inwhich they’re defined\.
.P
Listing 13\-12 has an example of a closure stored in the `\fIequal_to_x\fR` variablethat uses the `\fIx\fR` variable from the closure’s surrounding environment\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 4;

    let equal_to_x = |z| z == x;

    let y = 4;

    assert!(equal_to_x(y));
}

.EE

.RE
Listing 13\-12: Example of a closure that refers to avariable in its enclosing scope
.P
Here, even though `\fIx\fR` is not one of the parameters of `\fIequal_to_x\fR`, the`\fIequal_to_x\fR` closure is allowed to use the `\fIx\fR` variable that’s defined in thesame scope that `\fIequal_to_x\fR` is defined in\.
.P
We can’t do the same with functions; if we try with the following example, ourcode won’t compile:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = 4;

    fn equal_to_x(z: i32) \-> bool {
        z == x
    }

    let y = 4;

    assert!(equal_to_x(y));
}

.EE

.RE
.P
We get an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling equal\-to\-x v0\.1\.0 (file:///projects/equal\-to\-x)
error[E0434]: can't capture dynamic environment in a fn item
 \-\-> src/main\.rs:5:14
  |
5 |         z == x
  |              ^
  |
  = help: use the `|| { \.\.\. }` closure form instead

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0434`\.
error: could not compile `equal\-to\-x`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The compiler even reminds us that this only works with closures!
.P
When a closure captures a value from its environment, it uses memory to storethe values for use in the closure body\. This use of memory is overhead that wedon’t want to pay in more common cases where we want to execute code thatdoesn’t capture its environment\. Because functions are never allowed to capturetheir environment, defining and using functions will never incur this overhead\.
.P
Closures can capture values from their environment in three ways, whichdirectly map to the three ways a function can take a parameter: takingownership, borrowing mutably, and borrowing immutably\. These are encoded in thethree `\fIFn\fR` traits as follows:`\fIFnOnce\fR` consumes the variables it captures from its enclosing scope, knownas the closure’s \fIenvironment\fR\. To consume the captured variables, theclosure must take ownership of these variables and move them into the closurewhen it is defined\. The `\fIOnce\fR` part of the name represents the fact that theclosure can’t take ownership of the same variables more than once, so it canbe called only once\.`\fIFnMut\fR` can change the environment because it mutably borrows values\.`\fIFn\fR` borrows values from the environment immutably\.
.P
When you create a closure, Rust infers which trait to use based on how theclosure uses the values from the environment\. All closures implement `\fIFnOnce\fR`because they can all be called at least once\. Closures that don’t move thecaptured variables also implement `\fIFnMut\fR`, and closures that don’t need mutableaccess to the captured variables also implement `\fIFn\fR`\. In Listing 13\-12, the`\fIequal_to_x\fR` closure borrows `\fIx\fR` immutably (so `\fIequal_to_x\fR` has the `\fIFn\fR` trait)because the body of the closure only needs to read the value in `\fIx\fR`\.
.P
If you want to force the closure to take ownership of the values it uses in theenvironment, you can use the `\fImove\fR` keyword before the parameter list\. Thistechnique is mostly useful when passing a closure to a new thread to move thedata so it’s owned by the new thread\.
.P
Note: `\fImove\fR` closures may still implement `\fIFn\fR` or `\fIFnMut\fR`, even thoughthey capture variables by move\. This is because the traits implemented by aclosure type are determined by what the closure does with captured values,not how it captures them\. The `\fImove\fR` keyword only specifies the latter\.
.P
We’ll have more examples of `\fImove\fR` closures in Chapter 16 when we talk aboutconcurrency\. For now, here’s the code from Listing 13\-12 with the `\fImove\fR`keyword added to the closure definition and using vectors instead of integers,because integers can be copied rather than moved; note that this code will notyet compile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = vec![1, 2, 3];

    let equal_to_x = move |z| z == x;

    println!("can't use x here: {:?}", x);

    let y = vec![1, 2, 3];

    assert!(equal_to_x(y));
}

.EE

.RE
.P
We receive the following error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling equal\-to\-x v0\.1\.0 (file:///projects/equal\-to\-x)
error[E0382]: borrow of moved value: `x`
 \-\-> src/main\.rs:6:40
  |
2 |     let x = vec![1, 2, 3];
  |         \- move occurs because `x` has type `Vec<i32>`, which does not implement the `Copy` trait
3 | 
4 |     let equal_to_x = move |z| z == x;
  |                      \-\-\-\-\-\-\-\-      \- variable moved due to use in closure
  |                      |
  |                      value moved into closure here
5 | 
6 |     println!("can't use x here: {:?}", x);
  |                                        ^ value borrowed here after move

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `equal\-to\-x`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The `\fIx\fR` value is moved into the closure when the closure is defined, because weadded the `\fImove\fR` keyword\. The closure then has ownership of `\fIx\fR`, and `\fImain\fR`isn’t allowed to use `\fIx\fR` anymore in the `\fIprintln!\fR` statement\. Removing`\fIprintln!\fR` will fix this example\.
.P
Most of the time when specifying one of the `\fIFn\fR` trait bounds, you can startwith `\fIFn\fR` and the compiler will tell you if you need `\fIFnMut\fR` or `\fIFnOnce\fR` basedon what happens in the closure body\.
.P
To illustrate situations where closures that can capture their environment areuseful as function parameters, let’s move on to our next topic: iterators\.
.SH "Processing a Series of Items with Iterators"

.br

.br
\fBProcessing a Series of Items with Iterators\fR
.br
=============================================
.br

.P
The iterator pattern allows you to perform some task on a sequence of items inturn\. An iterator is responsible for the logic of iterating over each item anddetermining when the sequence has finished\. When you use iterators, you don’thave to reimplement that logic yourself\.
.P
In Rust, iterators are \fIlazy\fR, meaning they have no effect until you callmethods that consume the iterator to use it up\. For example, the code inListing 13\-13 creates an iterator over the items in the vector `\fIv1\fR` by callingthe `\fIiter\fR` method defined on `\fIVec<T>\fR`\. This code by itself doesn’t do anythinguseful\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v1 = vec![1, 2, 3];

    let v1_iter = v1\.iter();
# }

.EE

.RE
Listing 13\-13: Creating an iterator
.P
Once we’ve created an iterator, we can use it in a variety of ways\. In Listing3\-5 in Chapter 3, we used iterators with `\fIfor\fR` loops to execute some code oneach item, although we glossed over what the call to `\fIiter\fR` did until now\.
.P
The example in Listing 13\-14 separates the creation of the iterator from theuse of the iterator in the `\fIfor\fR` loop\. The iterator is stored in the `\fIv1_iter\fR`variable, and no iteration takes place at that time\. When the `\fIfor\fR` loop iscalled using the iterator in `\fIv1_iter\fR`, each element in the iterator is used inone iteration of the loop, which prints out each value\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v1 = vec![1, 2, 3];

    let v1_iter = v1\.iter();

    for val in v1_iter {
        println!("Got: {}", val);
    }
# }

.EE

.RE
Listing 13\-14: Using an iterator in a `\fIfor\fR` loop
.P
In languages that don’t have iterators provided by their standard libraries,you would likely write this same functionality by starting a variable at index0, using that variable to index into the vector to get a value, andincrementing the variable value in a loop until it reached the total number ofitems in the vector\.
.P
Iterators handle all that logic for you, cutting down on repetitive code youcould potentially mess up\. Iterators give you more flexibility to use the samelogic with many different kinds of sequences, not just data structures you canindex into, like vectors\. Let’s examine how iterators do that\.
.br

.br
\fBThe \fR
.br
======
.br
`\fIIterator\fR` Trait and the `\fInext\fR` Method
.P
All iterators implement a trait named `\fIIterator\fR` that is defined in thestandard library\. The definition of the trait looks like this:
.RS
.IP \fBrust\fR 2

.br
.EX
pub trait Iterator {
    type Item;

    fn next(&mut self) \-> Option<Self::Item>;

    // methods with default implementations elided
}

.EE

.RE
.P
Notice this definition uses some new syntax: `\fItype Item\fR` and `\fISelf::Item\fR`,which are defining an \fIassociated type\fR with this trait\. We’ll talk aboutassociated types in depth in Chapter 19\. For now, all you need to know is thatthis code says implementing the `\fIIterator\fR` trait requires that you also definean `\fIItem\fR` type, and this `\fIItem\fR` type is used in the return type of the `\fInext\fR`method\. In other words, the `\fIItem\fR` type will be the type returned from theiterator\.
.P
The `\fIIterator\fR` trait only requires implementors to define one method: the`\fInext\fR` method, which returns one item of the iterator at a time wrapped in`\fISome\fR` and, when iteration is over, returns `\fINone\fR`\.
.P
We can call the `\fInext\fR` method on iterators directly; Listing 13\-15 demonstrateswhat values are returned from repeated calls to `\fInext\fR` on the iterator createdfrom the vector\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# #[cfg(test)]
# mod tests {
    #[test]
    fn iterator_demonstration() {
        let v1 = vec![1, 2, 3];

        let mut v1_iter = v1\.iter();

        assert_eq!(v1_iter\.next(), Some(&1));
        assert_eq!(v1_iter\.next(), Some(&2));
        assert_eq!(v1_iter\.next(), Some(&3));
        assert_eq!(v1_iter\.next(), None);
    }
# }

.EE

.RE
Listing 13\-15: Calling the `\fInext\fR` method on aniterator
.P
Note that we needed to make `\fIv1_iter\fR` mutable: calling the `\fInext\fR` method on aniterator changes internal state that the iterator uses to keep track of whereit is in the sequence\. In other words, this code \fIconsumes\fR, or uses up, theiterator\. Each call to `\fInext\fR` eats up an item from the iterator\. We didn’t needto make `\fIv1_iter\fR` mutable when we used a `\fIfor\fR` loop because the loop tookownership of `\fIv1_iter\fR` and made it mutable behind the scenes\.
.P
Also note that the values we get from the calls to `\fInext\fR` are immutablereferences to the values in the vector\. The `\fIiter\fR` method produces an iteratorover immutable references\. If we want to create an iterator that takesownership of `\fIv1\fR` and returns owned values, we can call `\fIinto_iter\fR` instead of`\fIiter\fR`\. Similarly, if we want to iterate over mutable references, we can call`\fIiter_mut\fR` instead of `\fIiter\fR`\.
.br

.br
\fBMethods that Consume the Iterator\fR
.br
===================================
.br

.P
The `\fIIterator\fR` trait has a number of different methods with defaultimplementations provided by the standard library; you can find out about thesemethods by looking in the standard library API documentation for the `\fIIterator\fR`trait\. Some of these methods call the `\fInext\fR` method in their definition, whichis why you’re required to implement the `\fInext\fR` method when implementing the`\fIIterator\fR` trait\.
.P
Methods that call `\fInext\fR` are called \fIconsuming adaptors\fR, because calling themuses up the iterator\. One example is the `\fIsum\fR` method, which takes ownership ofthe iterator and iterates through the items by repeatedly calling `\fInext\fR`, thusconsuming the iterator\. As it iterates through, it adds each item to a runningtotal and returns the total when iteration is complete\. Listing 13\-16 has atest illustrating a use of the `\fIsum\fR` method:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# #[cfg(test)]
# mod tests {
    #[test]
    fn iterator_sum() {
        let v1 = vec![1, 2, 3];

        let v1_iter = v1\.iter();

        let total: i32 = v1_iter\.sum();

        assert_eq!(total, 6);
    }
# }

.EE

.RE
Listing 13\-16: Calling the `\fIsum\fR` method to get the totalof all items in the iterator
.P
We aren’t allowed to use `\fIv1_iter\fR` after the call to `\fIsum\fR` because `\fIsum\fR` takesownership of the iterator we call it on\.
.br

.br
\fBMethods that Produce Other Iterators\fR
.br
======================================
.br

.P
Other methods defined on the `\fIIterator\fR` trait, known as \fIiterator adaptors\fR,allow you to change iterators into different kinds of iterators\. You can chainmultiple calls to iterator adaptors to perform complex actions in a readableway\. But because all iterators are lazy, you have to call one of the consumingadaptor methods to get results from calls to iterator adaptors\.
.P
Listing 13\-17 shows an example of calling the iterator adaptor method `\fImap\fR`,which takes a closure to call on each item to produce a new iterator\. Theclosure here creates a new iterator in which each item from the vector has beenincremented by 1\. However, this code produces a warning:Filename: src/main\.rs
.RS
.IP \fBrust,not_desired_behavior\fR 2

.br
.EX
# fn main() {
    let v1: Vec<i32> = vec![1, 2, 3];

    v1\.iter()\.map(|x| x + 1);
# }

.EE

.RE
Listing 13\-17: Calling the iterator adaptor `\fImap\fR` tocreate a new iterator
.P
The warning we get is this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling iterators v0\.1\.0 (file:///projects/iterators)
warning: unused `Map` that must be used
 \-\-> src/main\.rs:4:5
  |
4 |     v1\.iter()\.map(|x| x + 1);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_must_use)]` on by default
  = note: iterators are lazy and do nothing unless consumed

warning: 1 warning emitted

    Finished dev [unoptimized + debuginfo] target(s) in 0\.47s
     Running `target/debug/iterators`

.EE

.RE
.P
The code in Listing 13\-17 doesn’t do anything; the closure we’ve specifiednever gets called\. The warning reminds us why: iterator adaptors are lazy, andwe need to consume the iterator here\.
.P
To fix this and consume the iterator, we’ll use the `\fIcollect\fR` method, which weused in Chapter 12 with `\fIenv::args\fR` in Listing 12\-1\. This method consumes theiterator and collects the resulting values into a collection data type\.
.P
In Listing 13\-18, we collect the results of iterating over the iterator that’sreturned from the call to `\fImap\fR` into a vector\. This vector will end upcontaining each item from the original vector incremented by 1\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v1: Vec<i32> = vec![1, 2, 3];

    let v2: Vec<_> = v1\.iter()\.map(|x| x + 1)\.collect();

    assert_eq!(v2, vec![2, 3, 4]);
# }

.EE

.RE
Listing 13\-18: Calling the `\fImap\fR` method to create a newiterator and then calling the `\fIcollect\fR` method to consume the new iterator andcreate a vector
.P
Because `\fImap\fR` takes a closure, we can specify any operation we want to performon each item\. This is a great example of how closures let you customize somebehavior while reusing the iteration behavior that the `\fIIterator\fR` traitprovides\.
.br

.br
\fBUsing Closures that Capture Their Environment\fR
.br
===============================================
.br

.P
Now that we’ve introduced iterators, we can demonstrate a common use ofclosures that capture their environment by using the `\fIfilter\fR` iterator adaptor\.The `\fIfilter\fR` method on an iterator takes a closure that takes each item fromthe iterator and returns a Boolean\. If the closure returns `\fItrue\fR`, the valuewill be included in the iterator produced by `\fIfilter\fR`\. If the closure returns`\fIfalse\fR`, the value won’t be included in the resulting iterator\.
.P
In Listing 13\-19, we use `\fIfilter\fR` with a closure that captures the `\fIshoe_size\fR`variable from its environment to iterate over a collection of `\fIShoe\fR` structinstances\. It will return only shoes that are the specified size\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[derive(PartialEq, Debug)]
struct Shoe {
    size: u32,
    style: String,
}

fn shoes_in_size(shoes: Vec<Shoe>, shoe_size: u32) \-> Vec<Shoe> {
    shoes\.into_iter()\.filter(|s| s\.size == shoe_size)\.collect()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn filters_by_size() {
        let shoes = vec![
            Shoe {
                size: 10,
                style: String::from("sneaker"),
            },
            Shoe {
                size: 13,
                style: String::from("sandal"),
            },
            Shoe {
                size: 10,
                style: String::from("boot"),
            },
        ];

        let in_my_size = shoes_in_size(shoes, 10);

        assert_eq!(
            in_my_size,
            vec![
                Shoe {
                    size: 10,
                    style: String::from("sneaker")
                },
                Shoe {
                    size: 10,
                    style: String::from("boot")
                },
            ]
        );
    }
}

.EE

.RE
Listing 13\-19: Using the `\fIfilter\fR` method with a closurethat captures `\fIshoe_size\fR`
.P
The `\fIshoes_in_size\fR` function takes ownership of a vector of shoes and a shoesize as parameters\. It returns a vector containing only shoes of the specifiedsize\.
.P
In the body of `\fIshoes_in_size\fR`, we call `\fIinto_iter\fR` to create an iteratorthat takes ownership of the vector\. Then we call `\fIfilter\fR` to adapt thatiterator into a new iterator that only contains elements for which the closurereturns `\fItrue\fR`\.
.P
The closure captures the `\fIshoe_size\fR` parameter from the environment andcompares the value with each shoe’s size, keeping only shoes of the sizespecified\. Finally, calling `\fIcollect\fR` gathers the values returned by theadapted iterator into a vector that’s returned by the function\.
.P
The test shows that when we call `\fIshoes_in_size\fR`, we get back only shoesthat have the same size as the value we specified\.
.br

.br
\fBCreating Our Own Iterators with the \fR
.br
======================================
.br
`\fIIterator\fR` Trait
.P
We’ve shown that you can create an iterator by calling `\fIiter\fR`, `\fIinto_iter\fR`, or`\fIiter_mut\fR` on a vector\. You can create iterators from the other collectiontypes in the standard library, such as hash map\. You can also create iteratorsthat do anything you want by implementing the `\fIIterator\fR` trait on your owntypes\. As previously mentioned, the only method you’re required to provide adefinition for is the `\fInext\fR` method\. Once you’ve done that, you can use allother methods that have default implementations provided by the `\fIIterator\fR`trait!
.P
To demonstrate, let’s create an iterator that will only ever count from 1 to 5\.First, we’ll create a struct to hold some values\. Then we’ll make this structinto an iterator by implementing the `\fIIterator\fR` trait and using the values inthat implementation\.
.P
Listing 13\-20 has the definition of the `\fICounter\fR` struct and an associated`\fInew\fR` function to create instances of `\fICounter\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
struct Counter {
    count: u32,
}

impl Counter {
    fn new() \-> Counter {
        Counter { count: 0 }
    }
}

.EE

.RE
Listing 13\-20: Defining the `\fICounter\fR` struct and a `\fInew\fR`function that creates instances of `\fICounter\fR` with an initial value of 0 for`\fIcount\fR`
.P
The `\fICounter\fR` struct has one field named `\fIcount\fR`\. This field holds a `\fIu32\fR`value that will keep track of where we are in the process of iterating from 1to 5\. The `\fIcount\fR` field is private because we want the implementation of`\fICounter\fR` to manage its value\. The `\fInew\fR` function enforces the behavior ofalways starting new instances with a value of 0 in the `\fIcount\fR` field\.
.P
Next, we’ll implement the `\fIIterator\fR` trait for our `\fICounter\fR` type by definingthe body of the `\fInext\fR` method to specify what we want to happen when thisiterator is used, as shown in Listing 13\-21:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# struct Counter {
#     count: u32,
# }
# 
# impl Counter {
#     fn new() \-> Counter {
#         Counter { count: 0 }
#     }
# }
# 
impl Iterator for Counter {
    type Item = u32;

    fn next(&mut self) \-> Option<Self::Item> {
        if self\.count < 5 {
            self\.count += 1;
            Some(self\.count)
        } else {
            None
        }
    }
}

.EE

.RE
Listing 13\-21: Implementing the `\fIIterator\fR` trait on our`\fICounter\fR` struct
.P
We set the associated `\fIItem\fR` type for our iterator to `\fIu32\fR`, meaning theiterator will return `\fIu32\fR` values\. Again, don’t worry about associated typesyet, we’ll cover them in Chapter 19\.
.P
We want our iterator to add 1 to the current state, so we initialized `\fIcount\fR`to 0 so it would return 1 first\. If the value of `\fIcount\fR` is less than 5, `\fInext\fR`will increment `\fIcount\fR` and return the current value wrapped in `\fISome\fR`\. Once`\fIcount\fR` is 5, our iterator will stop incrementing `\fIcount\fR` and always return`\fINone\fR`\.
.br

.br
\fBUsing Our \fR
.br
============
.br
`\fICounter\fR` Iterator’s `\fInext\fR` Method
.P
Once we’ve implemented the `\fIIterator\fR` trait, we have an iterator! Listing 13\-22shows a test demonstrating that we can use the iterator functionality of our`\fICounter\fR` struct by calling the `\fInext\fR` method on it directly, just as we didwith the iterator created from a vector in Listing 13\-15\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# struct Counter {
#     count: u32,
# }
# 
# impl Counter {
#     fn new() \-> Counter {
#         Counter { count: 0 }
#     }
# }
# 
# impl Iterator for Counter {
#     type Item = u32;
# 
#     fn next(&mut self) \-> Option<Self::Item> {
#         if self\.count < 5 {
#             self\.count += 1;
#             Some(self\.count)
#         } else {
#             None
#         }
#     }
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
    #[test]
    fn calling_next_directly() {
        let mut counter = Counter::new();

        assert_eq!(counter\.next(), Some(1));
        assert_eq!(counter\.next(), Some(2));
        assert_eq!(counter\.next(), Some(3));
        assert_eq!(counter\.next(), Some(4));
        assert_eq!(counter\.next(), Some(5));
        assert_eq!(counter\.next(), None);
    }
# }

.EE

.RE
Listing 13\-22: Testing the functionality of the `\fInext\fR`method implementation
.P
This test creates a new `\fICounter\fR` instance in the `\fIcounter\fR` variable and thencalls `\fInext\fR` repeatedly, verifying that we have implemented the behavior wewant this iterator to have: returning the values from 1 to 5\.
.br

.br
\fBUsing Other \fR
.br
==============
.br
`\fIIterator\fR` Trait Methods
.P
We implemented the `\fIIterator\fR` trait by defining the `\fInext\fR` method, so wecan now use any `\fIIterator\fR` trait method’s default implementations as defined inthe standard library, because they all use the `\fInext\fR` method’s functionality\.
.P
For example, if for some reason we wanted to take the values produced by aninstance of `\fICounter\fR`, pair them with values produced by another `\fICounter\fR`instance after skipping the first value, multiply each pair together, keep onlythose results that are divisible by 3, and add all the resulting valuestogether, we could do so, as shown in the test in Listing 13\-23:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# struct Counter {
#     count: u32,
# }
# 
# impl Counter {
#     fn new() \-> Counter {
#         Counter { count: 0 }
#     }
# }
# 
# impl Iterator for Counter {
#     type Item = u32;
# 
#     fn next(&mut self) \-> Option<Self::Item> {
#         if self\.count < 5 {
#             self\.count += 1;
#             Some(self\.count)
#         } else {
#             None
#         }
#     }
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn calling_next_directly() {
#         let mut counter = Counter::new();
# 
#         assert_eq!(counter\.next(), Some(1));
#         assert_eq!(counter\.next(), Some(2));
#         assert_eq!(counter\.next(), Some(3));
#         assert_eq!(counter\.next(), Some(4));
#         assert_eq!(counter\.next(), Some(5));
#         assert_eq!(counter\.next(), None);
#     }
# 
    #[test]
    fn using_other_iterator_trait_methods() {
        let sum: u32 = Counter::new()
            \.zip(Counter::new()\.skip(1))
            \.map(|(a, b)| a * b)
            \.filter(|x| x % 3 == 0)
            \.sum();
        assert_eq!(18, sum);
    }
# }

.EE

.RE
Listing 13\-23: Using a variety of `\fIIterator\fR` traitmethods on our `\fICounter\fR` iterator
.P
Note that `\fIzip\fR` produces only four pairs; the theoretical fifth pair `\fI(5, None)\fR` is never produced because `\fIzip\fR` returns `\fINone\fR` when either of its inputiterators return `\fINone\fR`\.
.P
All of these method calls are possible because we specified how the `\fInext\fR`method works, and the standard library provides default implementations forother methods that call `\fInext\fR`\.
.SH "Improving Our I/O Project"

.br

.br
\fBImproving Our I/O Project\fR
.br
===========================
.br

.P
With this new knowledge about iterators, we can improve the I/O project inChapter 12 by using iterators to make places in the code clearer and moreconcise\. Let’s look at how iterators can improve our implementation of the`\fIConfig::new\fR` function and the `\fIsearch\fR` function\.
.br

.br
\fBRemoving a \fR
.br
=============
.br
`\fIclone\fR` Using an Iterator
.P
In Listing 12\-6, we added code that took a slice of `\fIString\fR` values and createdan instance of the `\fIConfig\fR` struct by indexing into the slice and cloning thevalues, allowing the `\fIConfig\fR` struct to own those values\. In Listing 13\-24,we’ve reproduced the implementation of the `\fIConfig::new\fR` function as it was inListing 12\-23:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
#     pub case_sensitive: bool,
# }
# 
impl Config {
    pub fn new(args: &[String]) \-> Result<Config, &str> {
        if args\.len() < 3 {
            return Err("not enough arguments");
        }

        let query = args[1]\.clone();
        let filename = args[2]\.clone();

        let case_sensitive = env::var("CASE_INSENSITIVE")\.is_err();

        Ok(Config {
            query,
            filename,
            case_sensitive,
        })
    }
}
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     let results = if config\.case_sensitive {
#         search(&config\.query, &contents)
#     } else {
#         search_case_insensitive(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{}", line);
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 13\-24: Reproduction of the `\fIConfig::new\fR` functionfrom Listing 12\-23
.P
At the time, we said not to worry about the inefficient `\fIclone\fR` calls becausewe would remove them in the future\. Well, that time is now!
.P
We needed `\fIclone\fR` here because we have a slice with `\fIString\fR` elements in theparameter `\fIargs\fR`, but the `\fInew\fR` function doesn’t own `\fIargs\fR`\. To returnownership of a `\fIConfig\fR` instance, we had to clone the values from the `\fIquery\fR`and `\fIfilename\fR` fields of `\fIConfig\fR` so the `\fIConfig\fR` instance can own its values\.
.P
With our new knowledge about iterators, we can change the `\fInew\fR` function totake ownership of an iterator as its argument instead of borrowing a slice\.We’ll use the iterator functionality instead of the code that checks the lengthof the slice and indexes into specific locations\. This will clarify what the`\fIConfig::new\fR` function is doing because the iterator will access the values\.
.P
Once `\fIConfig::new\fR` takes ownership of the iterator and stops using indexingoperations that borrow, we can move the `\fIString\fR` values from the iterator into`\fIConfig\fR` rather than calling `\fIclone\fR` and making a new allocation\.
.br

.br
\fBUsing the Returned Iterator Directly\fR
.br
======================================
.br

.P
Open your I/O project’s \fIsrc/main\.rs\fR file, which should look like this:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::process;
# 
# use minigrep::Config;
# 
fn main() {
    let args: Vec<String> = env::args()\.collect();

    let config = Config::new(&args)\.unwrap_or_else(|err| {
        eprintln!("Problem parsing arguments: {}", err);
        process::exit(1);
    });

    // \-\-snip\-\-
# 
#     if let Err(e) = minigrep::run(config) {
#         eprintln!("Application error: {}", e);
# 
#         process::exit(1);
#     }
}

.EE

.RE
.P
We’ll change the start of the `\fImain\fR` function that we had in Listing 12\-24 tothe code in Listing 13\-25\. This won’t compile until we update `\fIConfig::new\fR` aswell\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::process;
# 
# use minigrep::Config;
# 
fn main() {
    let config = Config::new(env::args())\.unwrap_or_else(|err| {
        eprintln!("Problem parsing arguments: {}", err);
        process::exit(1);
    });

    // \-\-snip\-\-
# 
#     if let Err(e) = minigrep::run(config) {
#         eprintln!("Application error: {}", e);
# 
#         process::exit(1);
#     }
}

.EE

.RE
Listing 13\-25: Passing the return value of `\fIenv::args\fR` to`\fIConfig::new\fR`
.P
The `\fIenv::args\fR` function returns an iterator! Rather than collecting theiterator values into a vector and then passing a slice to `\fIConfig::new\fR`, nowwe’re passing ownership of the iterator returned from `\fIenv::args\fR` to`\fIConfig::new\fR` directly\.
.P
Next, we need to update the definition of `\fIConfig::new\fR`\. In your I/O project’s\fIsrc/lib\.rs\fR file, let’s change the signature of `\fIConfig::new\fR` to look likeListing 13\-26\. This still won’t compile because we need to update the functionbody\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
#     pub case_sensitive: bool,
# }
# 
impl Config {
    pub fn new(mut args: env::Args) \-> Result<Config, &'static str> {
        // \-\-snip\-\-
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         let case_sensitive = env::var("CASE_INSENSITIVE")\.is_err();
# 
#         Ok(Config {
#             query,
#             filename,
#             case_sensitive,
#         })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     let results = if config\.case_sensitive {
#         search(&config\.query, &contents)
#     } else {
#         search_case_insensitive(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{}", line);
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 13\-26: Updating the signature of `\fIConfig::new\fR` toexpect an iterator
.P
The standard library documentation for the `\fIenv::args\fR` function shows that thetype of the iterator it returns is `\fIstd::env::Args\fR`\. We’ve updated thesignature of the `\fIConfig::new\fR` function so the parameter `\fIargs\fR` has the type`\fIstd::env::Args\fR` instead of `\fI&[String]\fR`\. Because we’re taking ownership of`\fIargs\fR` and we’ll be mutating `\fIargs\fR` by iterating over it, we can add the `\fImut\fR`keyword into the specification of the `\fIargs\fR` parameter to make it mutable\.
.P
We also needed to specify that the string slice error type can now only havethe `\fI'static\fR` lifetime\. Because we’re only ever returning string literals, thiswas true before\. However, when we had a reference in the parameters, there wasthe possibility that the reference in the return type could have had the samelifetime as the reference in the parameters\. The rules that we discussed in the
.UR ch10\-03\-lifetime\-syntax\.html#lifetime\-elision
.UE
“Lifetime Elision” section of Chapter 10 applied, and weweren’t required to annotate the lifetime of `\fI&str\fR`\. With the change to `\fIargs\fR`,the lifetime elision rules no longer apply, and we must specify the `\fI'static\fR`lifetime\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIIterator\fR` Trait Methods Instead of Indexing
.P
Next, we’ll fix the body of `\fIConfig::new\fR`\. The standard library documentationalso mentions that `\fIstd::env::Args\fR` implements the `\fIIterator\fR` trait, so we knowwe can call the `\fInext\fR` method on it! Listing 13\-27 updates the code fromListing 12\-23 to use the `\fInext\fR` method:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
#     pub case_sensitive: bool,
# }
# 
impl Config {
    pub fn new(mut args: env::Args) \-> Result<Config, &'static str> {
        args\.next();

        let query = match args\.next() {
            Some(arg) => arg,
            None => return Err("Didn't get a query string"),
        };

        let filename = match args\.next() {
            Some(arg) => arg,
            None => return Err("Didn't get a file name"),
        };

        let case_sensitive = env::var("CASE_INSENSITIVE")\.is_err();

        Ok(Config {
            query,
            filename,
            case_sensitive,
        })
    }
}
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     let results = if config\.case_sensitive {
#         search(&config\.query, &contents)
#     } else {
#         search_case_insensitive(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{}", line);
#     }
# 
#     Ok(())
# }
# 
# pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.contains(query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 13\-27: Changing the body of `\fIConfig::new\fR` to useiterator methods
.P
Remember that the first value in the return value of `\fIenv::args\fR` is the name ofthe program\. We want to ignore that and get to the next value, so first we call`\fInext\fR` and do nothing with the return value\. Second, we call `\fInext\fR` to get thevalue we want to put in the `\fIquery\fR` field of `\fIConfig\fR`\. If `\fInext\fR` returns a`\fISome\fR`, we use a `\fImatch\fR` to extract the value\. If it returns `\fINone\fR`, it meansnot enough arguments were given and we return early with an `\fIErr\fR` value\. We dothe same thing for the `\fIfilename\fR` value\.
.br

.br
\fBMaking Code Clearer with Iterator Adaptors\fR
.br
============================================
.br

.P
We can also take advantage of iterators in the `\fIsearch\fR` function in our I/Oproject, which is reproduced here in Listing 13\-28 as it was in Listing 12\-19:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
# }
# 
# impl Config {
#     pub fn new(args: &[String]) \-> Result<Config, &str> {
#         if args\.len() < 3 {
#             return Err("not enough arguments");
#         }
# 
#         let query = args[1]\.clone();
#         let filename = args[2]\.clone();
# 
#         Ok(Config { query, filename })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    let mut results = Vec::new();

    for line in contents\.lines() {
        if line\.contains(query) {
            results\.push(line);
        }
    }

    results
}
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn one_result() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# }

.EE

.RE
Listing 13\-28: The implementation of the `\fIsearch\fR`function from Listing 12\-19
.P
We can write this code in a more concise way using iterator adaptor methods\.Doing so also lets us avoid having a mutable intermediate `\fIresults\fR` vector\. Thefunctional programming style prefers to minimize the amount of mutable state tomake code clearer\. Removing the mutable state might enable a future enhancementto make searching happen in parallel, because we wouldn’t have to manageconcurrent access to the `\fIresults\fR` vector\. Listing 13\-29 shows this change:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::env;
# use std::error::Error;
# use std::fs;
# 
# pub struct Config {
#     pub query: String,
#     pub filename: String,
#     pub case_sensitive: bool,
# }
# 
# impl Config {
#     pub fn new(mut args: std::env::Args) \-> Result<Config, &'static str> {
#         args\.next();
# 
#         let query = match args\.next() {
#             Some(arg) => arg,
#             None => return Err("Didn't get a query string"),
#         };
# 
#         let filename = match args\.next() {
#             Some(arg) => arg,
#             None => return Err("Didn't get a file name"),
#         };
# 
#         let case_sensitive = env::var("CASE_INSENSITIVE")\.is_err();
# 
#         Ok(Config {
#             query,
#             filename,
#             case_sensitive,
#         })
#     }
# }
# 
# pub fn run(config: Config) \-> Result<(), Box<dyn Error>> {
#     let contents = fs::read_to_string(config\.filename)?;
# 
#     let results = if config\.case_sensitive {
#         search(&config\.query, &contents)
#     } else {
#         search_case_insensitive(&config\.query, &contents)
#     };
# 
#     for line in results {
#         println!("{}", line);
#     }
# 
#     Ok(())
# }
# 
pub fn search<'a>(query: &str, contents: &'a str) \-> Vec<&'a str> {
    contents
        \.lines()
        \.filter(|line| line\.contains(query))
        \.collect()
}
# 
# pub fn search_case_insensitive<'a>(
#     query: &str,
#     contents: &'a str,
# ) \-> Vec<&'a str> {
#     let query = query\.to_lowercase();
#     let mut results = Vec::new();
# 
#     for line in contents\.lines() {
#         if line\.to_lowercase()\.contains(&query) {
#             results\.push(line);
#         }
#     }
# 
#     results
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
# 
#     #[test]
#     fn case_sensitive() {
#         let query = "duct";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Duct tape\.";
# 
#         assert_eq!(vec!["safe, fast, productive\."], search(query, contents));
#     }
# 
#     #[test]
#     fn case_insensitive() {
#         let query = "rUsT";
#         let contents = "\
# Rust:
# safe, fast, productive\.
# Pick three\.
# Trust me\.";
# 
#         assert_eq!(
#             vec!["Rust:", "Trust me\."],
#             search_case_insensitive(query, contents)
#         );
#     }
# }

.EE

.RE
Listing 13\-29: Using iterator adaptor methods in theimplementation of the `\fIsearch\fR` function
.P
Recall that the purpose of the `\fIsearch\fR` function is to return all lines in`\fIcontents\fR` that contain the `\fIquery\fR`\. Similar to the `\fIfilter\fR` example in Listing13\-19, this code uses the `\fIfilter\fR` adaptor to keep only the lines that`\fIline\.contains(query)\fR` returns `\fItrue\fR` for\. We then collect the matching linesinto another vector with `\fIcollect\fR`\. Much simpler! Feel free to make the samechange to use iterator methods in the `\fIsearch_case_insensitive\fR` function aswell\.
.P
The next logical question is which style you should choose in your own code andwhy: the original implementation in Listing 13\-28 or the version usingiterators in Listing 13\-29\. Most Rust programmers prefer to use the iteratorstyle\. It’s a bit tougher to get the hang of at first, but once you get a feelfor the various iterator adaptors and what they do, iterators can be easier tounderstand\. Instead of fiddling with the various bits of looping and buildingnew vectors, the code focuses on the high\-level objective of the loop\. Thisabstracts away some of the commonplace code so it’s easier to see the conceptsthat are unique to this code, such as the filtering condition each element inthe iterator must pass\.
.P
But are the two implementations truly equivalent? The intuitive assumptionmight be that the more low\-level loop will be faster\. Let’s talk aboutperformance\.
.SH "Comparing Performance: Loops vs\. Iterators"

.br

.br
\fBComparing Performance: Loops vs\. Iterators\fR
.br
============================================
.br

.P
To determine whether to use loops or iterators, you need to know whichimplementation is faster: the version of the `\fIsearch\fR` function with an explicit`\fIfor\fR` loop or the version with iterators\.
.P
We ran a benchmark by loading the entire contents of \fIThe Adventures of\fRSherlock Holmes by Sir Arthur Conan Doyle into a `\fIString\fR` and looking for theword \fIthe\fR in the contents\. Here are the results of the benchmark on theversion of `\fIsearch\fR` using the `\fIfor\fR` loop and the version using iterators:
.RS
.IP \fBtext\fR 2

.br
.EX
test bench_search_for  \.\.\. bench:  19,620,300 ns/iter (+/\- 915,700)
test bench_search_iter \.\.\. bench:  19,234,900 ns/iter (+/\- 657,200)

.EE

.RE
.P
The iterator version was slightly faster! We won’t explain the benchmark codehere, because the point is not to prove that the two versions are equivalentbut to get a general sense of how these two implementations compareperformance\-wise\.
.P
For a more comprehensive benchmark, you should check using various texts ofvarious sizes as the `\fIcontents\fR`, different words and words of different lengthsas the `\fIquery\fR`, and all kinds of other variations\. The point is this:iterators, although a high\-level abstraction, get compiled down to roughly thesame code as if you’d written the lower\-level code yourself\. Iterators are oneof Rust’s \fIzero\-cost abstractions\fR, by which we mean using the abstractionimposes no additional runtime overhead\. This is analogous to how BjarneStroustrup, the original designer and implementor of C++, defines\fIzero\-overhead\fR in “Foundations of C++” (2012):
.P
In general, C++ implementations obey the zero\-overhead principle: What youdon’t use, you don’t pay for\. And further: What you do use, you couldn’t handcode any better\.
.P
As another example, the following code is taken from an audio decoder\. Thedecoding algorithm uses the linear prediction mathematical operation toestimate future values based on a linear function of the previous samples\. Thiscode uses an iterator chain to do some math on three variables in scope: a`\fIbuffer\fR` slice of data, an array of 12 `\fIcoefficients\fR`, and an amount by whichto shift data in `\fIqlp_shift\fR`\. We’ve declared the variables within this examplebut not given them any values; although this code doesn’t have much meaningoutside of its context, it’s still a concise, real\-world example of how Rusttranslates high\-level ideas to low\-level code\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let buffer: &mut [i32];
let coefficients: [i64; 12];
let qlp_shift: i16;

for i in 12\.\.buffer\.len() {
    let prediction = coefficients\.iter()
                                 \.zip(&buffer[i \- 12\.\.i])
                                 \.map(|(&c, &s)| c * s as i64)
                                 \.sum::<i64>() >> qlp_shift;
    let delta = buffer[i];
    buffer[i] = prediction as i32 + delta;
}

.EE

.RE
.P
To calculate the value of `\fIprediction\fR`, this code iterates through each of the12 values in `\fIcoefficients\fR` and uses the `\fIzip\fR` method to pair the coefficientvalues with the previous 12 values in `\fIbuffer\fR`\. Then, for each pair, wemultiply the values together, sum all the results, and shift the bits in thesum `\fIqlp_shift\fR` bits to the right\.
.P
Calculations in applications like audio decoders often prioritize performancemost highly\. Here, we’re creating an iterator, using two adaptors, and thenconsuming the value\. What assembly code would this Rust code compile to? Well,as of this writing, it compiles down to the same assembly you’d write by hand\.There’s no loop at all corresponding to the iteration over the values in`\fIcoefficients\fR`: Rust knows that there are 12 iterations, so it “unrolls” theloop\. \fIUnrolling\fR is an optimization that removes the overhead of the loopcontrolling code and instead generates repetitive code for each iteration ofthe loop\.
.P
All of the coefficients get stored in registers, which means accessing thevalues is very fast\. There are no bounds checks on the array access at runtime\.All these optimizations that Rust is able to apply make the resulting codeextremely efficient\. Now that you know this, you can use iterators and closureswithout fear! They make code seem like it’s higher level but don’t impose aruntime performance penalty for doing so\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Closures and iterators are Rust features inspired by functional programminglanguage ideas\. They contribute to Rust’s capability to clearly expresshigh\-level ideas at low\-level performance\. The implementations of closures anditerators are such that runtime performance is not affected\. This is part ofRust’s goal to strive to provide zero\-cost abstractions\.
.P
Now that we’ve improved the expressiveness of our I/O project, let’s look atsome more features of `\fIcargo\fR` that will help us share the project with theworld\.
.SH "More about Cargo and Crates\.io"

.br

.br
\fBMore About Cargo and Crates\.io\fR
.br
================================
.br

.P
So far we’ve used only the most basic features of Cargo to build, run, and testour code, but it can do a lot more\. In this chapter, we’ll discuss some of itsother, more advanced features to show you how to do the following:
.P
Customize your build through release profiles
.P
Publish libraries on 
.UR https://crates\.io/
.UE
crates\.io
.P
Organize large projects with workspaces
.P
Install binaries from 
.UR https://crates\.io/
.UE
crates\.io
.P
Extend Cargo using custom commands
.P
Cargo can do even more than what we cover in this chapter, so for a fullexplanation of all its features, see 
.UR https://doc\.rust\-lang\.org/cargo/
.UE
itsdocumentation\.
.SH "Customizing Builds with Release Profiles"

.br

.br
\fBCustomizing Builds with Release Profiles\fR
.br
==========================================
.br

.P
In Rust, \fIrelease profiles\fR are predefined and customizable profiles withdifferent configurations that allow a programmer to have more control overvarious options for compiling code\. Each profile is configured independently ofthe others\.
.P
Cargo has two main profiles: the `\fIdev\fR` profile Cargo uses when you run `\fIcargo build\fR` and the `\fIrelease\fR` profile Cargo uses when you run `\fIcargo build \-\-release\fR`\. The `\fIdev\fR` profile is defined with good defaults for development,and the `\fIrelease\fR` profile has good defaults for release builds\.
.P
These profile names might be familiar from the output of your builds:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
$ cargo build \-\-release
    Finished release [optimized] target(s) in 0\.0s

.EE

.RE
.P
The `\fIdev\fR` and `\fIrelease\fR` shown in this build output indicate that the compileris using different profiles\.
.P
Cargo has default settings for each of the profiles that apply when therearen’t any `\fI[profile\.*]\fR` sections in the project’s \fICargo\.toml\fR file\. By adding`\fI[profile\.*]\fR` sections for any profile you want to customize, you can overrideany subset of the default settings\. For example, here are the default valuesfor the `\fIopt\-level\fR` setting for the `\fIdev\fR` and `\fIrelease\fR` profiles:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[profile\.dev]
opt\-level = 0

[profile\.release]
opt\-level = 3

.EE

.RE
.P
The `\fIopt\-level\fR` setting controls the number of optimizations Rust will apply toyour code, with a range of 0 to 3\. Applying more optimizations extendscompiling time, so if you’re in development and compiling your code often,you’ll want faster compiling even if the resulting code runs slower\. That isthe reason the default `\fIopt\-level\fR` for `\fIdev\fR` is `\fI0\fR`\. When you’re ready torelease your code, it’s best to spend more time compiling\. You’ll only compilein release mode once, but you’ll run the compiled program many times, sorelease mode trades longer compile time for code that runs faster\. That is whythe default `\fIopt\-level\fR` for the `\fIrelease\fR` profile is `\fI3\fR`\.
.P
You can override any default setting by adding a different value for it in\fICargo\.toml\fR\. For example, if we want to use optimization level 1 in thedevelopment profile, we can add these two lines to our project’s \fICargo\.toml\fRfile:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[profile\.dev]
opt\-level = 1

.EE

.RE
.P
This code overrides the default setting of `\fI0\fR`\. Now when we run `\fIcargo build\fR`,Cargo will use the defaults for the `\fIdev\fR` profile plus our customization to`\fIopt\-level\fR`\. Because we set `\fIopt\-level\fR` to `\fI1\fR`, Cargo will apply moreoptimizations than the default, but not as many as in a release build\.
.P
For the full list of configuration options and defaults for each profile, see
.UR https://doc\.rust\-lang\.org/cargo/reference/profiles\.html
.UE
Cargo’s documentation\.
.SH "Publishing a Crate to Crates\.io"

.br

.br
\fBPublishing a Crate to Crates\.io\fR
.br
=================================
.br

.P
We’ve used packages from 
.UR https://crates\.io/
.UE
crates\.io asdependencies of our project, but you can also share your code with other peopleby publishing your own packages\. The crate registry at
.UR https://crates\.io/
.UE
crates\.io distributes the source code ofyour packages, so it primarily hosts code that is open source\.
.P
Rust and Cargo have features that help make your published package easier forpeople to use and to find in the first place\. We’ll talk about some of thesefeatures next and then explain how to publish a package\.
.br

.br
\fBMaking Useful Documentation Comments\fR
.br
======================================
.br

.P
Accurately documenting your packages will help other users know how and when touse them, so it’s worth investing the time to write documentation\. In Chapter3, we discussed how to comment Rust code using two slashes, `\fI//\fR`\. Rust also hasa particular kind of comment for documentation, known conveniently as a\fIdocumentation comment\fR, that will generate HTML documentation\. The HTMLdisplays the contents of documentation comments for public API items intendedfor programmers interested in knowing how to \fIuse\fR your crate as opposed to howyour crate is \fIimplemented\fR\.
.P
Documentation comments use three slashes, `\fI///\fR`, instead of two and supportMarkdown notation for formatting the text\. Place documentation comments justbefore the item they’re documenting\. Listing 14\-1 shows documentation commentsfor an `\fIadd_one\fR` function in a crate named `\fImy_crate\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
/// Adds one to the number given\.
///
/// # Examples
///
/// ```
/// let arg = 5;
/// let answer = my_crate::add_one(arg);
///
/// assert_eq!(6, answer);
/// ```
pub fn add_one(x: i32) \-> i32 {
    x + 1
}

.EE

.RE
Listing 14\-1: A documentation comment for afunction
.P
Here, we give a description of what the `\fIadd_one\fR` function does, start asection with the heading `\fIExamples\fR`, and then provide code that demonstrateshow to use the `\fIadd_one\fR` function\. We can generate the HTML documentation fromthis documentation comment by running `\fIcargo doc\fR`\. This command runs the`\fIrustdoc\fR` tool distributed with Rust and puts the generated HTML documentationin the \fItarget/doc\fR directory\.
.P
For convenience, running `\fIcargo doc \-\-open\fR` will build the HTML for yourcurrent crate’s documentation (as well as the documentation for all of yourcrate’s dependencies) and open the result in a web browser\. Navigate to the`\fIadd_one\fR` function and you’ll see how the text in the documentation comments isrendered, as shown in Figure 14\-1:Figure 14\-1: HTML documentation for the `\fIadd_one\fR`function
.br

.br
\fBCommonly Used Sections\fR
.br
========================
.br

.P
We used the `\fI# Examples\fR` Markdown heading in Listing 14\-1 to create a sectionin the HTML with the title “Examples\.” Here are some other sections that crateauthors commonly use in their documentation:\fBPanics\fR: The scenarios in which the function being documented couldpanic\. Callers of the function who don’t want their programs to panic shouldmake sure they don’t call the function in these situations\.\fBErrors\fR: If the function returns a `\fIResult\fR`, describing the kinds oferrors that might occur and what conditions might cause those errors to bereturned can be helpful to callers so they can write code to handle thedifferent kinds of errors in different ways\.\fBSafety\fR: If the function is `\fIunsafe\fR` to call (we discuss unsafety inChapter 19), there should be a section explaining why the function is unsafeand covering the invariants that the function expects callers to uphold\.
.P
Most documentation comments don’t need all of these sections, but this is agood checklist to remind you of the aspects of your code that people callingyour code will be interested in knowing about\.
.br

.br
\fBDocumentation Comments as Tests\fR
.br
=================================
.br

.P
Adding example code blocks in your documentation comments can help demonstratehow to use your library, and doing so has an additional bonus: running `\fIcargo test\fR` will run the code examples in your documentation as tests! Nothing isbetter than documentation with examples\. But nothing is worse than examplesthat don’t work because the code has changed since the documentation waswritten\. If we run `\fIcargo test\fR` with the documentation for the `\fIadd_one\fR`function from Listing 14\-1, we will see a section in the test results like this:
.RS
.IP \fBtext\fR 2

.br
.EX
   Doc\-tests my_crate

running 1 test
test src/lib\.rs \- add_one (line 5) \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.27s

.EE

.RE
.P
Now if we change either the function or the example so the `\fIassert_eq!\fR` in theexample panics and run `\fIcargo test\fR` again, we’ll see that the doc tests catchthat the example and the code are out of sync with each other!
.br

.br
\fBCommenting Contained Items\fR
.br
============================
.br

.P
Another style of doc comment, `\fI//!\fR`, adds documentation to the item thatcontains the comments rather than adding documentation to the items followingthe comments\. We typically use these doc comments inside the crate root file(\fIsrc/lib\.rs\fR by convention) or inside a module to document the crate or themodule as a whole\.
.P
For example, if we want to add documentation that describes the purpose of the`\fImy_crate\fR` crate that contains the `\fIadd_one\fR` function, we can add documentationcomments that start with `\fI//!\fR` to the beginning of the \fIsrc/lib\.rs\fR file, asshown in Listing 14\-2:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
//! # My Crate
//!
//! `my_crate` is a collection of utilities to make performing certain
//! calculations more convenient\.

/// Adds one to the number given\.
// \-\-snip\-\-
# ///
# /// # Examples
# ///
# /// ```
# /// let arg = 5;
# /// let answer = my_crate::add_one(arg);
# ///
# /// assert_eq!(6, answer);
# /// ```
# pub fn add_one(x: i32) \-> i32 {
#     x + 1
# }

.EE

.RE
Listing 14\-2: Documentation for the `\fImy_crate\fR` crate as awhole
.P
Notice there isn’t any code after the last line that begins with `\fI//!\fR`\. Becausewe started the comments with `\fI//!\fR` instead of `\fI///\fR`, we’re documenting the itemthat contains this comment rather than an item that follows this comment\. Inthis case, the item that contains this comment is the \fIsrc/lib\.rs\fR file, whichis the crate root\. These comments describe the entire crate\.
.P
When we run `\fIcargo doc \-\-open\fR`, these comments will display on the frontpage of the documentation for `\fImy_crate\fR` above the list of public items in thecrate, as shown in Figure 14\-2:Figure 14\-2: Rendered documentation for `\fImy_crate\fR`,including the comment describing the crate as a whole
.P
Documentation comments within items are useful for describing crates andmodules especially\. Use them to explain the overall purpose of the container tohelp your users understand the crate’s organization\.
.br

.br
\fBExporting a Convenient Public API with \fR
.br
=========================================
.br
`\fIpub use\fR`
.P
In Chapter 7, we covered how to organize our code into modules using the `\fImod\fR`keyword, how to make items public using the `\fIpub\fR` keyword, and how to bringitems into a scope with the `\fIuse\fR` keyword\. However, the structure that makessense to you while you’re developing a crate might not be very convenient foryour users\. You might want to organize your structs in a hierarchy containingmultiple levels, but then people who want to use a type you’ve defined deep inthe hierarchy might have trouble finding out that type exists\. They might alsobe annoyed at having to enter `\fIuse\fR``\fImy_crate::some_module::another_module::UsefulType;\fR` rather than `\fIuse\fR``\fImy_crate::UsefulType;\fR`\.
.P
The structure of your public API is a major consideration when publishing acrate\. People who use your crate are less familiar with the structure than youare and might have difficulty finding the pieces they want to use if your cratehas a large module hierarchy\.
.P
The good news is that if the structure \fIisn’t\fR convenient for others to usefrom another library, you don’t have to rearrange your internal organization:instead, you can re\-export items to make a public structure that’s differentfrom your private structure by using `\fIpub use\fR`\. Re\-exporting takes a publicitem in one location and makes it public in another location, as if it weredefined in the other location instead\.
.P
For example, say we made a library named `\fIart\fR` for modeling artistic concepts\.Within this library are two modules: a `\fIkinds\fR` module containing two enumsnamed `\fIPrimaryColor\fR` and `\fISecondaryColor\fR` and a `\fIutils\fR` module containing afunction named `\fImix\fR`, as shown in Listing 14\-3:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground,test_harness\fR 2

.br
.EX
//! # Art
//!
//! A library for modeling artistic concepts\.

pub mod kinds {
    /// The primary colors according to the RYB color model\.
    pub enum PrimaryColor {
        Red,
        Yellow,
        Blue,
    }

    /// The secondary colors according to the RYB color model\.
    pub enum SecondaryColor {
        Orange,
        Green,
        Purple,
    }
}

pub mod utils {
    use crate::kinds::*;

    /// Combines two primary colors in equal amounts to create
    /// a secondary color\.
    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) \-> SecondaryColor {
        // \-\-snip\-\-
#         unimplemented!();
    }
}

.EE

.RE
Listing 14\-3: An `\fIart\fR` library with items organized into`\fIkinds\fR` and `\fIutils\fR` modules
.P
Figure 14\-3 shows what the front page of the documentation for this crategenerated by `\fIcargo doc\fR` would look like:Figure 14\-3: Front page of the documentation for `\fIart\fR`that lists the `\fIkinds\fR` and `\fIutils\fR` modules
.P
Note that the `\fIPrimaryColor\fR` and `\fISecondaryColor\fR` types aren’t listed on thefront page, nor is the `\fImix\fR` function\. We have to click `\fIkinds\fR` and `\fIutils\fR` tosee them\.
.P
Another crate that depends on this library would need `\fIuse\fR` statements thatbring the items from `\fIart\fR` into scope, specifying the module structure that’scurrently defined\. Listing 14\-4 shows an example of a crate that uses the`\fIPrimaryColor\fR` and `\fImix\fR` items from the `\fIart\fR` crate:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use art::kinds::PrimaryColor;
use art::utils::mix;

fn main() {
    let red = PrimaryColor::Red;
    let yellow = PrimaryColor::Yellow;
    mix(red, yellow);
}

.EE

.RE
Listing 14\-4: A crate using the `\fIart\fR` crate’s items withits internal structure exported
.P
The author of the code in Listing 14\-4, which uses the `\fIart\fR` crate, had tofigure out that `\fIPrimaryColor\fR` is in the `\fIkinds\fR` module and `\fImix\fR` is in the`\fIutils\fR` module\. The module structure of the `\fIart\fR` crate is more relevant todevelopers working on the `\fIart\fR` crate than to developers using the `\fIart\fR` crate\.The internal structure that organizes parts of the crate into the `\fIkinds\fR`module and the `\fIutils\fR` module doesn’t contain any useful information forsomeone trying to understand how to use the `\fIart\fR` crate\. Instead, the `\fIart\fR`crate’s module structure causes confusion because developers have to figure outwhere to look, and the structure is inconvenient because developers mustspecify the module names in the `\fIuse\fR` statements\.
.P
To remove the internal organization from the public API, we can modify the`\fIart\fR` crate code in Listing 14\-3 to add `\fIpub use\fR` statements to re\-export theitems at the top level, as shown in Listing 14\-5:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
//! # Art
//!
//! A library for modeling artistic concepts\.

pub use self::kinds::PrimaryColor;
pub use self::kinds::SecondaryColor;
pub use self::utils::mix;

pub mod kinds {
    // \-\-snip\-\-
#     /// The primary colors according to the RYB color model\.
#     pub enum PrimaryColor {
#         Red,
#         Yellow,
#         Blue,
#     }
# 
#     /// The secondary colors according to the RYB color model\.
#     pub enum SecondaryColor {
#         Orange,
#         Green,
#         Purple,
#     }
}

pub mod utils {
    // \-\-snip\-\-
#     use crate::kinds::*;
# 
#     /// Combines two primary colors in equal amounts to create
#     /// a secondary color\.
#     pub fn mix(c1: PrimaryColor, c2: PrimaryColor) \-> SecondaryColor {
#         SecondaryColor::Orange
#     }
}

.EE

.RE
Listing 14\-5: Adding `\fIpub use\fR` statements to re\-exportitems
.P
The API documentation that `\fIcargo doc\fR` generates for this crate will now listand link re\-exports on the front page, as shown in Figure 14\-4, making the`\fIPrimaryColor\fR` and `\fISecondaryColor\fR` types and the `\fImix\fR` function easier to find\.Figure 14\-4: The front page of the documentation for `\fIart\fR`that lists the re\-exports
.P
The `\fIart\fR` crate users can still see and use the internal structure from Listing14\-3 as demonstrated in Listing 14\-4, or they can use the more convenientstructure in Listing 14\-5, as shown in Listing 14\-6:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use art::mix;
use art::PrimaryColor;

fn main() {
    // \-\-snip\-\-
#     let red = PrimaryColor::Red;
#     let yellow = PrimaryColor::Yellow;
#     mix(red, yellow);
}

.EE

.RE
Listing 14\-6: A program using the re\-exported items fromthe `\fIart\fR` crate
.P
In cases where there are many nested modules, re\-exporting the types at the toplevel with `\fIpub use\fR` can make a significant difference in the experience ofpeople who use the crate\.
.P
Creating a useful public API structure is more of an art than a science, andyou can iterate to find the API that works best for your users\. Choosing `\fIpub use\fR` gives you flexibility in how you structure your crate internally anddecouples that internal structure from what you present to your users\. Look atsome of the code of crates you’ve installed to see if their internal structurediffers from their public API\.
.br

.br
\fBSetting Up a Crates\.io Account\fR
.br
================================
.br

.P
Before you can publish any crates, you need to create an account on
.UR https://crates\.io/
.UE
crates\.io and get an API token\. To do so,visit the home page at 
.UR https://crates\.io/
.UE
crates\.io and log invia a GitHub account\. (The GitHub account is currently a requirement, but thesite might support other ways of creating an account in the future\.) Onceyou’re logged in, visit your account settings at
.UR https://crates\.io/me/
.UE
https://crates\.io/me/ and retrieve yourAPI key\. Then run the `\fIcargo login\fR` command with your API key, like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo login abcdefghijklmnopqrstuvwxyz012345

.EE

.RE
.P
This command will inform Cargo of your API token and store it locally in\fI~/\.cargo/credentials\fR\. Note that this token is a \fIsecret\fR: do not share itwith anyone else\. If you do share it with anyone for any reason, you shouldrevoke it and generate a new token on 
.UR https://crates\.io/
.UE
crates\.io\.
.br

.br
\fBAdding Metadata to a New Crate\fR
.br
================================
.br

.P
Now that you have an account, let’s say you have a crate you want to publish\.Before publishing, you’ll need to add some metadata to your crate by adding itto the `\fI[package]\fR` section of the crate’s \fICargo\.toml\fR file\.
.P
Your crate will need a unique name\. While you’re working on a crate locally,you can name a crate whatever you’d like\. However, crate names on
.UR https://crates\.io/
.UE
crates\.io are allocated on a first\-come,first\-served basis\. Once a crate name is taken, no one else can publish a cratewith that name\. Before attempting to publish a crate, search for the name youwant to use on the site\. If the name has been used by another crate, you willneed to find another name and edit the `\fIname\fR` field in the \fICargo\.toml\fR fileunder the `\fI[package]\fR` section to use the new name for publishing, like so:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "guessing_game"

.EE

.RE
.P
Even if you’ve chosen a unique name, when you run `\fIcargo publish\fR` to publishthe crate at this point, you’ll get a warning and then an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo publish
    Updating crates\.io index
warning: manifest has no description, license, license\-file, documentation, homepage or repository\.
See https://doc\.rust\-lang\.org/cargo/reference/manifest\.html#package\-metadata for more info\.
\-\-snip\-\-
error: api errors (status 200 OK): missing or empty metadata fields: description, license\. Please see https://doc\.rust\-lang\.org/cargo/reference/manifest\.html for how to upload metadata

.EE

.RE
.P
The reason is that you’re missing some crucial information: a description andlicense are required so people will know what your crate does and under whatterms they can use it\. To rectify this error, you need to include thisinformation in the \fICargo\.toml\fR file\.
.P
Add a description that is just a sentence or two, because it will appear withyour crate in search results\. For the `\fIlicense\fR` field, you need to give a\fIlicense identifier value\fR\. The 
.UR http://spdx\.org/licenses/
.UE
Linux Foundation’s Software Package DataExchange (SPDX) lists the identifiers you can use for this value\. Forexample, to specify that you’ve licensed your crate using the MIT License, addthe `\fIMIT\fR` identifier:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "guessing_game"
license = "MIT"

.EE

.RE
.P
If you want to use a license that doesn’t appear in the SPDX, you need to placethe text of that license in a file, include the file in your project, and thenuse `\fIlicense\-file\fR` to specify the name of that file instead of using the`\fIlicense\fR` key\.
.P
Guidance on which license is appropriate for your project is beyond the scopeof this book\. Many people in the Rust community license their projects in thesame way as Rust by using a dual license of `\fIMIT OR Apache\-2\.0\fR`\. This practicedemonstrates that you can also specify multiple license identifiers separatedby `\fIOR\fR` to have multiple licenses for your project\.
.P
With a unique name, the version, your description, and a license added, the\fICargo\.toml\fR file for a project that is ready to publish might look like this:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[package]
name = "guessing_game"
version = "0\.1\.0"
edition = "2018"
description = "A fun game where you guess what number the computer has chosen\."
license = "MIT OR Apache\-2\.0"

[dependencies]

.EE

.RE
.UR https://doc\.rust\-lang\.org/cargo/
.UE
Cargo’s documentation describes othermetadata you can specify to ensure others can discover and use your crate moreeasily\.
.br

.br
\fBPublishing to Crates\.io\fR
.br
=========================
.br

.P
Now that you’ve created an account, saved your API token, chosen a name foryour crate, and specified the required metadata, you’re ready to publish!Publishing a crate uploads a specific version to
.UR https://crates\.io/
.UE
crates\.io for others to use\.
.P
Be careful when publishing a crate because a publish is \fIpermanent\fR\. Theversion can never be overwritten, and the code cannot be deleted\. One majorgoal of 
.UR https://crates\.io/
.UE
crates\.io is to act as a permanentarchive of code so that builds of all projects that depend on crates from
.UR https://crates\.io/
.UE
crates\.io will continue to work\. Allowingversion deletions would make fulfilling that goal impossible\. However, there isno limit to the number of crate versions you can publish\.
.P
Run the `\fIcargo publish\fR` command again\. It should succeed now:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo publish
    Updating crates\.io index
   Packaging guessing_game v0\.1\.0 (file:///projects/guessing_game)
   Verifying guessing_game v0\.1\.0 (file:///projects/guessing_game)
   Compiling guessing_game v0\.1\.0
(file:///projects/guessing_game/target/package/guessing_game\-0\.1\.0)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.19s
   Uploading guessing_game v0\.1\.0 (file:///projects/guessing_game)

.EE

.RE
.P
Congratulations! You’ve now shared your code with the Rust community, andanyone can easily add your crate as a dependency of their project\.
.br

.br
\fBPublishing a New Version of an Existing Crate\fR
.br
===============================================
.br

.P
When you’ve made changes to your crate and are ready to release a new version,you change the `\fIversion\fR` value specified in your \fICargo\.toml\fR file andrepublish\. Use the 
.UR http://semver\.org/
.UE
Semantic Versioning rules to decide what anappropriate next version number is based on the kinds of changes you’ve made\.Then run `\fIcargo publish\fR` to upload the new version\.
.br

.br
\fBRemoving Versions from Crates\.io with \fR
.br
========================================
.br
`\fIcargo yank\fR`
.P
Although you can’t remove previous versions of a crate, you can prevent anyfuture projects from adding them as a new dependency\. This is useful when acrate version is broken for one reason or another\. In such situations, Cargosupports \fIyanking\fR a crate version\.
.P
Yanking a version prevents new projects from starting to depend on that versionwhile allowing all existing projects that depend on it to continue to downloadand depend on that version\. Essentially, a yank means that all projects with a\fICargo\.lock\fR will not break, and any future \fICargo\.lock\fR files generated willnot use the yanked version\.
.P
To yank a version of a crate, run `\fIcargo yank\fR` and specify which version youwant to yank:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo yank \-\-vers 1\.0\.1

.EE

.RE
.P
By adding `\fI\-\-undo\fR` to the command, you can also undo a yank and allow projectsto start depending on a version again:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo yank \-\-vers 1\.0\.1 \-\-undo

.EE

.RE
.P
A yank \fIdoes not\fR delete any code\. For example, the yank feature is notintended for deleting accidentally uploaded secrets\. If that happens, you mustreset those secrets immediately\.
.SH "Cargo Workspaces"

.br

.br
\fBCargo Workspaces\fR
.br
==================
.br

.P
In Chapter 12, we built a package that included a binary crate and a librarycrate\. As your project develops, you might find that the library cratecontinues to get bigger and you want to split up your package further intomultiple library crates\. In this situation, Cargo offers a feature called\fIworkspaces\fR that can help manage multiple related packages that are developedin tandem\.
.br

.br
\fBCreating a Workspace\fR
.br
======================
.br

.P
A \fIworkspace\fR is a set of packages that share the same \fICargo\.lock\fR and outputdirectory\. Let’s make a project using a workspace—we’ll use trivial code so wecan concentrate on the structure of the workspace\. There are multiple ways tostructure a workspace; we’re going to show one common way\. We’ll have aworkspace containing a binary and two libraries\. The binary, which will providethe main functionality, will depend on the two libraries\. One library willprovide an `\fIadd_one\fR` function, and a second library an `\fIadd_two\fR` function\.These three crates will be part of the same workspace\. We’ll start by creatinga new directory for the workspace:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ mkdir add
$ cd add

.EE

.RE
.P
Next, in the \fIadd\fR directory, we create the \fICargo\.toml\fR file that willconfigure the entire workspace\. This file won’t have a `\fI[package]\fR` section orthe metadata we’ve seen in other \fICargo\.toml\fR files\. Instead, it will startwith a `\fI[workspace]\fR` section that will allow us to add members to the workspaceby specifying the path to the package with our binary crate; in this case,that path is \fIadder\fR:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[workspace]

members = [
    "adder",
]

.EE

.RE
.P
Next, we’ll create the `\fIadder\fR` binary crate by running `\fIcargo new\fR` within the\fIadd\fR directory:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new adder
     Created binary (application) `adder` package

.EE

.RE
.P
At this point, we can build the workspace by running `\fIcargo build\fR`\. The filesin your \fIadd\fR directory should look like this:
.RS
.IP \fBtext\fR 2

.br
.EX
├── Cargo\.lock
├── Cargo\.toml
├── adder
│   ├── Cargo\.toml
│   └── src
│       └── main\.rs
└── target

.EE

.RE
.P
The workspace has one \fItarget\fR directory at the top level for the compiledartifacts to be placed into; the `\fIadder\fR` package doesn’t have its own \fItarget\fRdirectory\. Even if we were to run `\fIcargo build\fR` from inside the \fIadder\fRdirectory, the compiled artifacts would still end up in \fIadd/target\fR ratherthan \fIadd/adder/target\fR\. Cargo structures the \fItarget\fR directory in a workspacelike this because the crates in a workspace are meant to depend on each other\.If each crate had its own \fItarget\fR directory, each crate would have torecompile each of the other crates in the workspace to have the artifacts inits own \fItarget\fR directory\. By sharing one \fItarget\fR directory, the crates canavoid unnecessary rebuilding\.
.br

.br
\fBCreating the Second Package in the Workspace\fR
.br
==============================================
.br

.P
Next, let’s create another member package in the workspace and call it `\fIadd\-one\fR`\.Change the top\-level \fICargo\.toml\fR to specify the \fIadd\-one\fR path in the`\fImembers\fR` list:Filename: Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
[workspace]

members = [
    "adder",
    "add\-one",
]

.EE

.RE
.P
Then generate a new library crate named `\fIadd\-one\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new add\-one \-\-lib
     Created library `add\-one` package

.EE

.RE
.P
Your \fIadd\fR directory should now have these directories and files:
.RS
.IP \fBtext\fR 2

.br
.EX
├── Cargo\.lock
├── Cargo\.toml
├── add\-one
│   ├── Cargo\.toml
│   └── src
│       └── lib\.rs
├── adder
│   ├── Cargo\.toml
│   └── src
│       └── main\.rs
└── target

.EE

.RE
.P
In the \fIadd\-one/src/lib\.rs\fR file, let’s add an `\fIadd_one\fR` function:Filename: add\-one/src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_one(x: i32) \-> i32 {
    x + 1
}

.EE

.RE
.P
Now that we have another package in the workspace, we can have the `\fIadder\fR`package with our binary depend on the `\fIadd\-one\fR` package, that has ourlibrary\. First, we’ll need to add a path dependency on `\fIadd\-one\fR` to\fIadder/Cargo\.toml\fR\.Filename: adder/Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX

add\-one = { path = "\.\./add\-one" }

.EE

.RE
.P
Cargo doesn’t assume that crates in a workspace will depend on each other, sowe need to be explicit about the dependency relationships between the crates\.
.P
Next, let’s use the `\fIadd_one\fR` function from the `\fIadd\-one\fR` crate in the `\fIadder\fR`crate\. Open the \fIadder/src/main\.rs\fR file and add a `\fIuse\fR` line at the top tobring the new `\fIadd\-one\fR` library crate into scope\. Then change the `\fImain\fR`function to call the `\fIadd_one\fR` function, as in Listing 14\-7\.Filename: adder/src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use add_one;

fn main() {
    let num = 10;
    println!(
        "Hello, world! {} plus one is {}!",
        num,
        add_one::add_one(num)
    );
}

.EE

.RE
Listing 14\-7: Using the `\fIadd\-one\fR` library crate from the`\fIadder\fR` crate
.P
Let’s build the workspace by running `\fIcargo build\fR` in the top\-level \fIadd\fRdirectory!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling add\-one v0\.1\.0 (file:///projects/add/add\-one)
   Compiling adder v0\.1\.0 (file:///projects/add/adder)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.68s

.EE

.RE
.P
To run the binary crate from the \fIadd\fR directory, we can specify whichpackage in the workspace we want to run by using the `\fI\-p\fR` argument and thepackage name with `\fIcargo run\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run \-p adder
    Finished dev [unoptimized + debuginfo] target(s) in 0\.0s
     Running `target/debug/adder`
Hello, world! 10 plus one is 11!

.EE

.RE
.P
This runs the code in \fIadder/src/main\.rs\fR, which depends on the `\fIadd\-one\fR` crate\.
.br

.br
\fBDepending on an External Package in a Workspace\fR
.br
=================================================
.br

.P
Notice that the workspace has only one \fICargo\.lock\fR file at the top level ofthe workspace rather than having a \fICargo\.lock\fR in each crate’s directory\. Thisensures that all crates are using the same version of all dependencies\. If weadd the `\fIrand\fR` package to the \fIadder/Cargo\.toml\fR and \fIadd\-one/Cargo\.toml\fRfiles, Cargo will resolve both of those to one version of `\fIrand\fR` and recordthat in the one \fICargo\.lock\fR\. Making all crates in the workspace use the samedependencies means the crates in the workspace will always be compatible witheach other\. Let’s add the `\fIrand\fR` crate to the `\fI[dependencies]\fR` section in the\fIadd\-one/Cargo\.toml\fR file to be able to use the `\fIrand\fR` crate in the `\fIadd\-one\fR`crate:Filename: add\-one/Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
rand = "0\.8\.3"

.EE

.RE
.P
We can now add `\fIuse rand;\fR` to the \fIadd\-one/src/lib\.rs\fR file, and building thewhole workspace by running `\fIcargo build\fR` in the \fIadd\fR directory will bring inand compile the `\fIrand\fR` crate\. We will get one warning because we aren’treferring to the `\fIrand\fR` we brought into scope:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
    Updating crates\.io index
  Downloaded rand v0\.8\.3
   \-\-snip\-\-
   Compiling rand v0\.8\.3
   Compiling add\-one v0\.1\.0 (file:///projects/add/add\-one)
warning: unused import: `rand`
 \-\-> add\-one/src/lib\.rs:1:5
  |
1 | use rand;
  |     ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: 1 warning emitted

   Compiling adder v0\.1\.0 (file:///projects/add/adder)
    Finished dev [unoptimized + debuginfo] target(s) in 10\.18s

.EE

.RE
.P
The top\-level \fICargo\.lock\fR now contains information about the dependency of`\fIadd\-one\fR` on `\fIrand\fR`\. However, even though `\fIrand\fR` is used somewhere in theworkspace, we can’t use it in other crates in the workspace unless we add`\fIrand\fR` to their \fICargo\.toml\fR files as well\. For example, if we add `\fIuse rand;\fR`to the \fIadder/src/main\.rs\fR file for the `\fIadder\fR` package, we’ll get an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
  \-\-snip\-\-
   Compiling adder v0\.1\.0 (file:///projects/add/adder)
error[E0432]: unresolved import `rand`
 \-\-> adder/src/main\.rs:2:5
  |
2 | use rand;
  |     ^^^^ no external crate `rand`

.EE

.RE
.P
To fix this, edit the \fICargo\.toml\fR file for the `\fIadder\fR` package and indicatethat `\fIrand\fR` is a dependency for it as well\. Building the `\fIadder\fR` package willadd `\fIrand\fR` to the list of dependencies for `\fIadder\fR` in \fICargo\.lock\fR, but noadditional copies of `\fIrand\fR` will be downloaded\. Cargo has ensured that everycrate in every package in the workspace using the `\fIrand\fR` package will beusing the same version\. Using the same version of `\fIrand\fR` across the workspacesaves space because we won’t have multiple copies and ensures that the cratesin the workspace will be compatible with each other\.
.br

.br
\fBAdding a Test to a Workspace\fR
.br
==============================
.br

.P
For another enhancement, let’s add a test of the `\fIadd_one::add_one\fR` functionwithin the `\fIadd_one\fR` crate:Filename: add\-one/src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub fn add_one(x: i32) \-> i32 {
    x + 1
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_works() {
        assert_eq!(3, add_one(2));
    }
}

.EE

.RE
.P
Now run `\fIcargo test\fR` in the top\-level \fIadd\fR directory:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling add\-one v0\.1\.0 (file:///projects/add/add\-one)
   Compiling adder v0\.1\.0 (file:///projects/add/adder)
    Finished test [unoptimized + debuginfo] target(s) in 0\.27s
     Running target/debug/deps/add_one\-f0253159197f7841

running 1 test
test tests::it_works \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

     Running target/debug/deps/adder\-49979ff40686fa8e

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests add\-one

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

.EE

.RE
.P
The first section of the output shows that the `\fIit_works\fR` test in the `\fIadd\-one\fR`crate passed\. The next section shows that zero tests were found in the `\fIadder\fR`crate, and then the last section shows zero documentation tests were found inthe `\fIadd\-one\fR` crate\. Running `\fIcargo test\fR` in a workspace structured like thisone will run the tests for all the crates in the workspace\.
.P
We can also run tests for one particular crate in a workspace from thetop\-level directory by using the `\fI\-p\fR` flag and specifying the name of the cratewe want to test:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test \-p add\-one
    Finished test [unoptimized + debuginfo] target(s) in 0\.00s
     Running target/debug/deps/add_one\-b3235fea9a156f74

running 1 test
test tests::it_works \.\.\. ok

test result: ok\. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

   Doc\-tests add\-one

running 0 tests

test result: ok\. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

.EE

.RE
.P
This output shows `\fIcargo test\fR` only ran the tests for the `\fIadd\-one\fR` crate anddidn’t run the `\fIadder\fR` crate tests\.
.P
If you publish the crates in the workspace to 
.UR https://crates\.io/
.UE
crates\.io,each crate in the workspace will need to be published separately\. The `\fIcargo publish\fR` command does not have an `\fI\-\-all\fR` flag or a `\fI\-p\fR` flag, so you mustchange to each crate’s directory and run `\fIcargo publish\fR` on each crate in theworkspace to publish the crates\.
.P
For additional practice, add an `\fIadd\-two\fR` crate to this workspace in a similarway as the `\fIadd\-one\fR` crate!
.P
As your project grows, consider using a workspace: it’s easier to understandsmaller, individual components than one big blob of code\. Furthermore, keepingthe crates in a workspace can make coordination between them easier if they areoften changed at the same time\.
.SH "Installing Binaries from Crates\.io with cargo install"

.br

.br
\fBInstalling Binaries from Crates\.io with \fR
.br
==========================================
.br
`\fIcargo install\fR`
.P
The `\fIcargo install\fR` command allows you to install and use binary crateslocally\. This isn’t intended to replace system packages; it’s meant to be aconvenient way for Rust developers to install tools that others have shared on
.UR https://crates\.io/
.UE
crates\.io\. Note that you can only installpackages that have binary targets\. A \fIbinary target\fR is the runnable programthat is created if the crate has a \fIsrc/main\.rs\fR file or another file specifiedas a binary, as opposed to a library target that isn’t runnable on its own butis suitable for including within other programs\. Usually, crates haveinformation in the \fIREADME\fR file about whether a crate is a library, has abinary target, or both\.
.P
All binaries installed with `\fIcargo install\fR` are stored in the installationroot’s \fIbin\fR folder\. If you installed Rust using \fIrustup\.rs\fR and don’t have anycustom configurations, this directory will be \fI$HOME/\.cargo/bin\fR\. Ensure thatdirectory is in your `\fI$PATH\fR` to be able to run programs you’ve installed with`\fIcargo install\fR`\.
.P
For example, in Chapter 12 we mentioned that there’s a Rust implementation ofthe `\fIgrep\fR` tool called `\fIripgrep\fR` for searching files\. If we want to install`\fIripgrep\fR`, we can run the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo install ripgrep
    Updating crates\.io index
  Downloaded ripgrep v11\.0\.2
  Downloaded 1 crate (243\.3 KB) in 0\.88s
  Installing ripgrep v11\.0\.2
\-\-snip\-\-
   Compiling ripgrep v11\.0\.2
    Finished release [optimized + debuginfo] target(s) in 3m 10s
  Installing ~/\.cargo/bin/rg
   Installed package `ripgrep v11\.0\.2` (executable `rg`)

.EE

.RE
.P
The second\-to\-last line of the output shows the location and the name of theinstalled binary, which in the case of `\fIripgrep\fR` is `\fIrg\fR`\. As long as theinstallation directory is in your `\fI$PATH\fR`, as mentioned previously, you canthen run `\fIrg \-\-help\fR` and start using a faster, rustier tool for searching files!
.SH "Extending Cargo with Custom Commands"

.br

.br
\fBExtending Cargo with Custom Commands\fR
.br
======================================
.br

.P
Cargo is designed so you can extend it with new subcommands without having tomodify Cargo\. If a binary in your `\fI$PATH\fR` is named `\fIcargo\-something\fR`, you canrun it as if it was a Cargo subcommand by running `\fIcargo something\fR`\. Customcommands like this are also listed when you run `\fIcargo \-\-list\fR`\. Being able touse `\fIcargo install\fR` to install extensions and then run them just like thebuilt\-in Cargo tools is a super convenient benefit of Cargo’s design!
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Sharing code with Cargo and 
.UR https://crates\.io/
.UE
crates\.io ispart of what makes the Rust ecosystem useful for many different tasks\. Rust’sstandard library is small and stable, but crates are easy to share, use, andimprove on a timeline different from that of the language\. Don’t be shy aboutsharing code that’s useful to you on 
.UR https://crates\.io/
.UE
crates\.io; it’s likely that it will be useful to someone else as well!
.SH "Smart Pointers"

.br

.br
\fBSmart Pointers\fR
.br
================
.br

.P
A \fIpointer\fR is a general concept for a variable that contains an address inmemory\. This address refers to, or “points at,” some other data\. The mostcommon kind of pointer in Rust is a reference, which you learned about inChapter 4\. References are indicated by the `\fI&\fR` symbol and borrow the value theypoint to\. They don’t have any special capabilities other than referring todata\. Also, they don’t have any overhead and are the kind of pointer we usemost often\.\fISmart pointers\fR, on the other hand, are data structures that not only act likea pointer but also have additional metadata and capabilities\. The concept ofsmart pointers isn’t unique to Rust: smart pointers originated in C++ and existin other languages as well\. In Rust, the different smart pointers defined inthe standard library provide functionality beyond that provided by references\.One example that we’ll explore in this chapter is the \fIreference counting\fRsmart pointer type\. This pointer enables you to have multiple owners of data bykeeping track of the number of owners and, when no owners remain, cleaning upthe data\.
.P
In Rust, which uses the concept of ownership and borrowing, an additionaldifference between references and smart pointers is that references arepointers that only borrow data; in contrast, in many cases, smart pointers\fIown\fR the data they point to\.
.P
We’ve already encountered a few smart pointers in this book, such as `\fIString\fR`and `\fIVec<T>\fR` in Chapter 8, although we didn’t call them smart pointers at thetime\. Both these types count as smart pointers because they own some memory andallow you to manipulate it\. They also have metadata (such as their capacity)and extra capabilities or guarantees (such as with `\fIString\fR` ensuring its datawill always be valid UTF\-8)\.
.P
Smart pointers are usually implemented using structs\. The characteristic thatdistinguishes a smart pointer from an ordinary struct is that smart pointersimplement the `\fIDeref\fR` and `\fIDrop\fR` traits\. The `\fIDeref\fR` trait allows an instanceof the smart pointer struct to behave like a reference so you can write codethat works with either references or smart pointers\. The `\fIDrop\fR` trait allowsyou to customize the code that is run when an instance of the smart pointergoes out of scope\. In this chapter, we’ll discuss both traits and demonstratewhy they’re important to smart pointers\.
.P
Given that the smart pointer pattern is a general design pattern usedfrequently in Rust, this chapter won’t cover every existing smart pointer\. Manylibraries have their own smart pointers, and you can even write your own\. We’llcover the most common smart pointers in the standard library:`\fIBox<T>\fR` for allocating values on the heap`\fIRc<T>\fR`, a reference counting type that enables multiple ownership`\fIRef<T>\fR` and `\fIRefMut<T>\fR`, accessed through `\fIRefCell<T>\fR`, a type that enforcesthe borrowing rules at runtime instead of compile time
.P
In addition, we’ll cover the \fIinterior mutability\fR pattern where an immutabletype exposes an API for mutating an interior value\. We’ll also discuss\fIreference cycles\fR: how they can leak memory and how to prevent them\.
.P
Let’s dive in!
.SH "Using Box<T> to Point to Data on the Heap"

.br

.br
\fBUsing \fR
.br
========
.br
`\fIBox<T>\fR` to Point to Data on the Heap
.P
The most straightforward smart pointer is a \fIbox\fR, whose type is written`\fIBox<T>\fR`\. Boxes allow you to store data on the heap rather than the stack\. Whatremains on the stack is the pointer to the heap data\. Refer to Chapter 4 toreview the difference between the stack and the heap\.
.P
Boxes don’t have performance overhead, other than storing their data on theheap instead of on the stack\. But they don’t have many extra capabilitieseither\. You’ll use them most often in these situations:
.P
When you have a type whose size can’t be known at compile time and you wantto use a value of that type in a context that requires an exact size
.P
When you have a large amount of data and you want to transfer ownership butensure the data won’t be copied when you do so
.P
When you want to own a value and you care only that it’s a type thatimplements a particular trait rather than being of a specific type
.P
We’ll demonstrate the first situation in the 
.UR #enabling\-recursive\-types\-with\-boxes
.UE
“Enabling Recursive Types withBoxes” section\. In thesecond case, transferring ownership of a large amount of data can take a longtime because the data is copied around on the stack\. To improve performance inthis situation, we can store the large amount of data on the heap in a box\.Then, only the small amount of pointer data is copied around on the stack,while the data it references stays in one place on the heap\. The third case isknown as a \fItrait object\fR, and Chapter 17 devotes an entire section, 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
“UsingTrait Objects That Allow for Values of Different Types,” just to that topic\. So what you learn here you’ll apply again inChapter 17!
.br

.br
\fBUsing a \fR
.br
==========
.br
`\fIBox<T>\fR` to Store Data on the Heap
.P
Before we discuss this use case for `\fIBox<T>\fR`, we’ll cover the syntax and how tointeract with values stored within a `\fIBox<T>\fR`\.
.P
Listing 15\-1 shows how to use a box to store an `\fIi32\fR` value on the heap:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let b = Box::new(5);
    println!("b = {}", b);
}

.EE

.RE
Listing 15\-1: Storing an `\fIi32\fR` value on the heap using abox
.P
We define the variable `\fIb\fR` to have the value of a `\fIBox\fR` that points to thevalue `\fI5\fR`, which is allocated on the heap\. This program will print `\fIb = 5\fR`; inthis case, we can access the data in the box similar to how we would if thisdata were on the stack\. Just like any owned value, when a box goes out ofscope, as `\fIb\fR` does at the end of `\fImain\fR`, it will be deallocated\. Thedeallocation happens for the box (stored on the stack) and the data it pointsto (stored on the heap)\.
.P
Putting a single value on the heap isn’t very useful, so you won’t use boxes bythemselves in this way very often\. Having values like a single `\fIi32\fR` on thestack, where they’re stored by default, is more appropriate in the majority ofsituations\. Let’s look at a case where boxes allow us to define types that wewouldn’t be allowed to if we didn’t have boxes\.
.br

.br
\fBEnabling Recursive Types with Boxes\fR
.br
=====================================
.br

.P
At compile time, Rust needs to know how much space a type takes up\. One typewhose size can’t be known at compile time is a \fIrecursive type\fR, where a valuecan have as part of itself another value of the same type\. Because this nestingof values could theoretically continue infinitely, Rust doesn’t know how muchspace a value of a recursive type needs\. However, boxes have a known size, soby inserting a box in a recursive type definition, you can have recursive types\.
.P
Let’s explore the \fIcons list\fR, which is a data type common in functionalprogramming languages, as an example of a recursive type\. The cons list typewe’ll define is straightforward except for the recursion; therefore, theconcepts in the example we’ll work with will be useful any time you get intomore complex situations involving recursive types\.
.br

.br
\fBMore Information About the Cons List\fR
.br
======================================
.br

.P
A \fIcons list\fR is a data structure that comes from the Lisp programming languageand its dialects\. In Lisp, the `\fIcons\fR` function (short for “construct function”)constructs a new pair from its two arguments, which usually are a single valueand another pair\. These pairs containing pairs form a list\.
.P
The cons function concept has made its way into more general functionalprogramming jargon: “to cons \fIx\fR onto \fIy\fR” informally means to construct a newcontainer instance by putting the element \fIx\fR at the start of this newcontainer, followed by the container \fIy\fR\.
.P
Each item in a cons list contains two elements: the value of the current itemand the next item\. The last item in the list contains only a value called `\fINil\fR`without a next item\. A cons list is produced by recursively calling the `\fIcons\fR`function\. The canonical name to denote the base case of the recursion is `\fINil\fR`\.Note that this is not the same as the “null” or “nil” concept in Chapter 6,which is an invalid or absent value\.
.P
Although functional programming languages use cons lists frequently, the conslist isn’t a commonly used data structure in Rust\. Most of the time when youhave a list of items in Rust, `\fIVec<T>\fR` is a better choice to use\. Other, morecomplex recursive data types \fIare\fR useful in various situations, but bystarting with the cons list, we can explore how boxes let us define a recursivedata type without much distraction\.
.P
Listing 15\-2 contains an enum definition for a cons list\. Note that this codewon’t compile yet because the `\fIList\fR` type doesn’t have a known size, whichwe’ll demonstrate\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
enum List {
    Cons(i32, List),
    Nil,
}
# 
# fn main() {}

.EE

.RE
Listing 15\-2: The first attempt at defining an enum torepresent a cons list data structure of `\fIi32\fR` values
.P
Note: We’re implementing a cons list that holds only `\fIi32\fR` values for thepurposes of this example\. We could have implemented it using generics, as wediscussed in Chapter 10, to define a cons list type that could store values ofany type\.
.P
Using the `\fIList\fR` type to store the list `\fI1, 2, 3\fR` would look like the code inListing 15\-3:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# enum List {
#     Cons(i32, List),
#     Nil,
# }
# 
use crate::List::{Cons, Nil};

fn main() {
    let list = Cons(1, Cons(2, Cons(3, Nil)));
}

.EE

.RE
Listing 15\-3: Using the `\fIList\fR` enum to store the list `\fI1, 2, 3\fR`
.P
The first `\fICons\fR` value holds `\fI1\fR` and another `\fIList\fR` value\. This `\fIList\fR` value isanother `\fICons\fR` value that holds `\fI2\fR` and another `\fIList\fR` value\. This `\fIList\fR` valueis one more `\fICons\fR` value that holds `\fI3\fR` and a `\fIList\fR` value, which is finally`\fINil\fR`, the non\-recursive variant that signals the end of the list\.
.P
If we try to compile the code in Listing 15\-3, we get the error shown inListing 15\-4:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
error[E0072]: recursive type `List` has infinite size
 \-\-> src/main\.rs:1:1
  |
1 | enum List {
  | ^^^^^^^^^ recursive type has infinite size
2 |     Cons(i32, List),
  |               \-\-\-\- recursive without indirection
  |
help: insert some indirection (e\.g\., a `Box`, `Rc`, or `&`) to make `List` representable
  |
2 |     Cons(i32, Box<List>),
  |               ^^^^    ^

error[E0391]: cycle detected when computing drop\-check constraints for `List`
 \-\-> src/main\.rs:1:1
  |
1 | enum List {
  | ^^^^^^^^^
  |
  = note: \.\.\.which again requires computing drop\-check constraints for `List`, completing the cycle
  = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: List } }`

error: aborting due to 2 previous errors

Some errors have detailed explanations: E0072, E0391\.
For more information about an error, try `rustc \-\-explain E0072`\.
error: could not compile `cons\-list`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
Listing 15\-4: The error we get when attempting to definea recursive enum
.P
The error shows this type “has infinite size\.” The reason is that we’ve defined`\fIList\fR` with a variant that is recursive: it holds another value of itselfdirectly\. As a result, Rust can’t figure out how much space it needs to store a`\fIList\fR` value\. Let’s break down why we get this error a bit\. First, let’s lookat how Rust decides how much space it needs to store a value of a non\-recursivetype\.
.br

.br
\fBComputing the Size of a Non\-Recursive Type\fR
.br
============================================
.br

.P
Recall the `\fIMessage\fR` enum we defined in Listing 6\-2 when we discussed enumdefinitions in Chapter 6:
.RS
.IP \fBrust\fR 2

.br
.EX
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}
# 
# fn main() {}

.EE

.RE
.P
To determine how much space to allocate for a `\fIMessage\fR` value, Rust goesthrough each of the variants to see which variant needs the most space\. Rustsees that `\fIMessage::Quit\fR` doesn’t need any space, `\fIMessage::Move\fR` needs enoughspace to store two `\fIi32\fR` values, and so forth\. Because only one variant will beused, the most space a `\fIMessage\fR` value will need is the space it would take tostore the largest of its variants\.
.P
Contrast this with what happens when Rust tries to determine how much space arecursive type like the `\fIList\fR` enum in Listing 15\-2 needs\. The compiler startsby looking at the `\fICons\fR` variant, which holds a value of type `\fIi32\fR` and a valueof type `\fIList\fR`\. Therefore, `\fICons\fR` needs an amount of space equal to the size ofan `\fIi32\fR` plus the size of a `\fIList\fR`\. To figure out how much memory the `\fIList\fR`type needs, the compiler looks at the variants, starting with the `\fICons\fR`variant\. The `\fICons\fR` variant holds a value of type `\fIi32\fR` and a value of type`\fIList\fR`, and this process continues infinitely, as shown in Figure 15\-1\.Figure 15\-1: An infinite `\fIList\fR` consisting of infinite`\fICons\fR` variants
.br

.br
\fBUsing \fR
.br
========
.br
`\fIBox<T>\fR` to Get a Recursive Type with a Known Size
.P
Rust can’t figure out how much space to allocate for recursively defined types,so the compiler gives the error in Listing 15\-4\. But the error does includethis helpful suggestion:
.RS
.IP \fBtext\fR 2

.br
.EX
help: insert some indirection (e\.g\., a `Box`, `Rc`, or `&`) to make `List` representable
  |
2 |     Cons(i32, Box<List>),
  |               ^^^^    ^

.EE

.RE
.P
In this suggestion, “indirection” means that instead of storing a valuedirectly, we’ll change the data structure to store the value indirectly bystoring a pointer to the value instead\.
.P
Because a `\fIBox<T>\fR` is a pointer, Rust always knows how much space a `\fIBox<T>\fR`needs: a pointer’s size doesn’t change based on the amount of data it’spointing to\. This means we can put a `\fIBox<T>\fR` inside the `\fICons\fR` variant insteadof another `\fIList\fR` value directly\. The `\fIBox<T>\fR` will point to the next `\fIList\fR`value that will be on the heap rather than inside the `\fICons\fR` variant\.Conceptually, we still have a list, created with lists “holding” other lists,but this implementation is now more like placing the items next to one anotherrather than inside one another\.
.P
We can change the definition of the `\fIList\fR` enum in Listing 15\-2 and the usageof the `\fIList\fR` in Listing 15\-3 to the code in Listing 15\-5, which will compile:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
enum List {
    Cons(i32, Box<List>),
    Nil,
}

use crate::List::{Cons, Nil};

fn main() {
    let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3, Box::new(Nil))))));
}

.EE

.RE
Listing 15\-5: Definition of `\fIList\fR` that uses `\fIBox<T>\fR` inorder to have a known size
.P
The `\fICons\fR` variant will need the size of an `\fIi32\fR` plus the space to store thebox’s pointer data\. The `\fINil\fR` variant stores no values, so it needs less spacethan the `\fICons\fR` variant\. We now know that any `\fIList\fR` value will take up thesize of an `\fIi32\fR` plus the size of a box’s pointer data\. By using a box, we’vebroken the infinite, recursive chain, so the compiler can figure out the sizeit needs to store a `\fIList\fR` value\. Figure 15\-2 shows what the `\fICons\fR` variantlooks like now\.Figure 15\-2: A `\fIList\fR` that is not infinitely sizedbecause `\fICons\fR` holds a `\fIBox\fR`
.P
Boxes provide only the indirection and heap allocation; they don’t have anyother special capabilities, like those we’ll see with the other smart pointertypes\. They also don’t have any performance overhead that these specialcapabilities incur, so they can be useful in cases like the cons list where theindirection is the only feature we need\. We’ll look at more use cases for boxesin Chapter 17, too\.
.P
The `\fIBox<T>\fR` type is a smart pointer because it implements the `\fIDeref\fR` trait,which allows `\fIBox<T>\fR` values to be treated like references\. When a `\fIBox<T>\fR`value goes out of scope, the heap data that the box is pointing to is cleanedup as well because of the `\fIDrop\fR` trait implementation\. Let’s explore these twotraits in more detail\. These two traits will be even more important to thefunctionality provided by the other smart pointer types we’ll discuss in therest of this chapter\.
.SH "Treating Smart Pointers Like Regular References with the Deref Trait"

.br

.br
\fBTreating Smart Pointers Like Regular References with the \fR
.br
===========================================================
.br
`\fIDeref\fR` Trait
.P
Implementing the `\fIDeref\fR` trait allows you to customize the behavior of the\fIdereference operator\fR, `\fI*\fR` (as opposed to the multiplication or globoperator)\. By implementing `\fIDeref\fR` in such a way that a smart pointer can betreated like a regular reference, you can write code that operates onreferences and use that code with smart pointers too\.
.P
Let’s first look at how the dereference operator works with regular references\.Then we’ll try to define a custom type that behaves like `\fIBox<T>\fR`, and see whythe dereference operator doesn’t work like a reference on our newly definedtype\. We’ll explore how implementing the `\fIDeref\fR` trait makes it possible forsmart pointers to work in ways similar to references\. Then we’ll look atRust’s \fIderef coercion\fR feature and how it lets us work with either referencesor smart pointers\.
.P
Note: there’s one big difference between the `\fIMyBox<T>\fR` type we’re about tobuild and the real `\fIBox<T>\fR`: our version will not store its data on the heap\.We are focusing this example on `\fIDeref\fR`, so where the data is actually storedis less important than the pointer\-like behavior\.
.br

.br
\fBFollowing the Pointer to the Value with the Dereference Operator\fR
.br
==================================================================
.br

.P
A regular reference is a type of pointer, and one way to think of a pointer isas an arrow to a value stored somewhere else\. In Listing 15\-6, we create areference to an `\fIi32\fR` value and then use the dereference operator to follow thereference to the data:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 5;
    let y = &x;

    assert_eq!(5, x);
    assert_eq!(5, *y);
}

.EE

.RE
Listing 15\-6: Using the dereference operator to follow areference to an `\fIi32\fR` value
.P
The variable `\fIx\fR` holds an `\fIi32\fR` value, `\fI5\fR`\. We set `\fIy\fR` equal to a reference to`\fIx\fR`\. We can assert that `\fIx\fR` is equal to `\fI5\fR`\. However, if we want to make anassertion about the value in `\fIy\fR`, we have to use `\fI*y\fR` to follow the referenceto the value it’s pointing to (hence \fIdereference\fR)\. Once we dereference `\fIy\fR`,we have access to the integer value `\fIy\fR` is pointing to that we can compare with`\fI5\fR`\.
.P
If we tried to write `\fIassert_eq!(5, y);\fR` instead, we would get this compilationerror:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling deref\-example v0\.1\.0 (file:///projects/deref\-example)
error[E0277]: can't compare `{integer}` with `&{integer}`
 \-\-> src/main\.rs:6:5
  |
6 |     assert_eq!(5, y);
  |     ^^^^^^^^^^^^^^^^^ no implementation for `{integer} == &{integer}`
  |
  = help: the trait `PartialEq<&{integer}>` is not implemented for `{integer}`
  = note: this error originates in the macro `assert_eq` (in Nightly builds, run with \-Z macro\-backtrace for more info)

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `deref\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Comparing a number and a reference to a number isn’t allowed because they’redifferent types\. We must use the dereference operator to follow the referenceto the value it’s pointing to\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIBox<T>\fR` Like a Reference
.P
We can rewrite the code in Listing 15\-6 to use a `\fIBox<T>\fR` instead of areference; the dereference operator will work as shown in Listing 15\-7:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 5;
    let y = Box::new(x);

    assert_eq!(5, x);
    assert_eq!(5, *y);
}

.EE

.RE
Listing 15\-7: Using the dereference operator on a`\fIBox<i32>\fR`
.P
The only difference between Listing 15\-7 and Listing 15\-6 is that here we set`\fIy\fR` to be an instance of a box pointing to a copied value of `\fIx\fR` rather than areference pointing to the value of `\fIx\fR`\. In the last assertion, we can use thedereference operator to follow the box’s pointer in the same way that we didwhen `\fIy\fR` was a reference\. Next, we’ll explore what is special about `\fIBox<T>\fR`that enables us to use the dereference operator by defining our own box type\.
.br

.br
\fBDefining Our Own Smart Pointer\fR
.br
================================
.br

.P
Let’s build a smart pointer similar to the `\fIBox<T>\fR` type provided by thestandard library to experience how smart pointers behave differently fromreferences by default\. Then we’ll look at how to add the ability to use thedereference operator\.
.P
The `\fIBox<T>\fR` type is ultimately defined as a tuple struct with one element, soListing 15\-8 defines a `\fIMyBox<T>\fR` type in the same way\. We’ll also define a`\fInew\fR` function to match the `\fInew\fR` function defined on `\fIBox<T>\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct MyBox<T>(T);

impl<T> MyBox<T> {
    fn new(x: T) \-> MyBox<T> {
        MyBox(x)
    }
}
# 
# fn main() {}

.EE

.RE
Listing 15\-8: Defining a `\fIMyBox<T>\fR` type
.P
We define a struct named `\fIMyBox\fR` and declare a generic parameter `\fIT\fR`, becausewe want our type to hold values of any type\. The `\fIMyBox\fR` type is a tuple structwith one element of type `\fIT\fR`\. The `\fIMyBox::new\fR` function takes one parameter oftype `\fIT\fR` and returns a `\fIMyBox\fR` instance that holds the value passed in\.
.P
Let’s try adding the `\fImain\fR` function in Listing 15\-7 to Listing 15\-8 andchanging it to use the `\fIMyBox<T>\fR` type we’ve defined instead of `\fIBox<T>\fR`\. Thecode in Listing 15\-9 won’t compile because Rust doesn’t know how to dereference`\fIMyBox\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# struct MyBox<T>(T);
# 
# impl<T> MyBox<T> {
#     fn new(x: T) \-> MyBox<T> {
#         MyBox(x)
#     }
# }
# 
fn main() {
    let x = 5;
    let y = MyBox::new(x);

    assert_eq!(5, x);
    assert_eq!(5, *y);
}

.EE

.RE
Listing 15\-9: Attempting to use `\fIMyBox<T>\fR` in the sameway we used references and `\fIBox<T>\fR`
.P
Here’s the resulting compilation error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling deref\-example v0\.1\.0 (file:///projects/deref\-example)
error[E0614]: type `MyBox<{integer}>` cannot be dereferenced
  \-\-> src/main\.rs:14:19
   |
14 |     assert_eq!(5, *y);
   |                   ^^

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0614`\.
error: could not compile `deref\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Our `\fIMyBox<T>\fR` type can’t be dereferenced because we haven’t implemented thatability on our type\. To enable dereferencing with the `\fI*\fR` operator, weimplement the `\fIDeref\fR` trait\.
.br

.br
\fBTreating a Type Like a Reference by Implementing the \fR
.br
=======================================================
.br
`\fIDeref\fR` Trait
.P
As discussed in Chapter 10, to implement a trait, we need to provideimplementations for the trait’s required methods\. The `\fIDeref\fR` trait, providedby the standard library, requires us to implement one method named `\fIderef\fR` thatborrows `\fIself\fR` and returns a reference to the inner data\. Listing 15\-10contains an implementation of `\fIDeref\fR` to add to the definition of `\fIMyBox\fR`:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::ops::Deref;

impl<T> Deref for MyBox<T> {
    type Target = T;

    fn deref(&self) \-> &Self::Target {
        &self\.0
    }
}
# 
# struct MyBox<T>(T);
# 
# impl<T> MyBox<T> {
#     fn new(x: T) \-> MyBox<T> {
#         MyBox(x)
#     }
# }
# 
# fn main() {
#     let x = 5;
#     let y = MyBox::new(x);
# 
#     assert_eq!(5, x);
#     assert_eq!(5, *y);
# }

.EE

.RE
Listing 15\-10: Implementing `\fIDeref\fR` on `\fIMyBox<T>\fR`
.P
The `\fItype Target = T;\fR` syntax defines an associated type for the `\fIDeref\fR` traitto use\. Associated types are a slightly different way of declaring a genericparameter, but you don’t need to worry about them for now; we’ll cover them inmore detail in Chapter 19\.
.P
We fill in the body of the `\fIderef\fR` method with `\fI&self\.0\fR` so `\fIderef\fR` returns areference to the value we want to access with the `\fI*\fR` operator\. The `\fImain\fR`function in Listing 15\-9 that calls `\fI*\fR` on the `\fIMyBox<T>\fR` value now compiles,and the assertions pass!
.P
Without the `\fIDeref\fR` trait, the compiler can only dereference `\fI&\fR` references\.The `\fIderef\fR` method gives the compiler the ability to take a value of any typethat implements `\fIDeref\fR` and call the `\fIderef\fR` method to get a `\fI&\fR` reference thatit knows how to dereference\.
.P
When we entered `\fI*y\fR` in Listing 15\-9, behind the scenes Rust actually ran thiscode:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
*(y\.deref())

.EE

.RE
.P
Rust substitutes the `\fI*\fR` operator with a call to the `\fIderef\fR` method and then aplain dereference so we don’t have to think about whether or not we need tocall the `\fIderef\fR` method\. This Rust feature lets us write code that functionsidentically whether we have a regular reference or a type that implements`\fIDeref\fR`\.
.P
The reason the `\fIderef\fR` method returns a reference to a value, and that the plaindereference outside the parentheses in `\fI*(y\.deref())\fR` is still necessary, is theownership system\. If the `\fIderef\fR` method returned the value directly instead ofa reference to the value, the value would be moved out of `\fIself\fR`\. We don’t wantto take ownership of the inner value inside `\fIMyBox<T>\fR` in this case or in mostcases where we use the dereference operator\.
.P
Note that the `\fI*\fR` operator is replaced with a call to the `\fIderef\fR` method andthen a call to the `\fI*\fR` operator just once, each time we use a `\fI*\fR` in our code\.Because the substitution of the `\fI*\fR` operator does not recurse infinitely, weend up with data of type `\fIi32\fR`, which matches the `\fI5\fR` in `\fIassert_eq!\fR` inListing 15\-9\.
.br

.br
\fBImplicit Deref Coercions with Functions and Methods\fR
.br
=====================================================
.br
\fIDeref coercion\fR is a convenience that Rust performs on arguments to functionsand methods\. Deref coercion works only on types that implement the `\fIDeref\fR`trait\. Deref coercion converts such a type into a reference to another type\.For example, deref coercion can convert `\fI&String\fR` to `\fI&str\fR` because `\fIString\fR`implements the `\fIDeref\fR` trait such that it returns `\fI&str\fR`\. Deref coercion happensautomatically when we pass a reference to a particular type’s value as anargument to a function or method that doesn’t match the parameter type in thefunction or method definition\. A sequence of calls to the `\fIderef\fR` methodconverts the type we provided into the type the parameter needs\.
.P
Deref coercion was added to Rust so that programmers writing function andmethod calls don’t need to add as many explicit references and dereferenceswith `\fI&\fR` and `\fI*\fR`\. The deref coercion feature also lets us write more code thatcan work for either references or smart pointers\.
.P
To see deref coercion in action, let’s use the `\fIMyBox<T>\fR` type we defined inListing 15\-8 as well as the implementation of `\fIDeref\fR` that we added in Listing15\-10\. Listing 15\-11 shows the definition of a function that has a string sliceparameter:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn hello(name: &str) {
    println!("Hello, {}!", name);
}
# 
# fn main() {}

.EE

.RE
Listing 15\-11: A `\fIhello\fR` function that has the parameter`\fIname\fR` of type `\fI&str\fR`
.P
We can call the `\fIhello\fR` function with a string slice as an argument, such as`\fIhello("Rust");\fR` for example\. Deref coercion makes it possible to call `\fIhello\fR`with a reference to a value of type `\fIMyBox<String>\fR`, as shown in Listing 15\-12:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::ops::Deref;
# 
# impl<T> Deref for MyBox<T> {
#     type Target = T;
# 
#     fn deref(&self) \-> &T {
#         &self\.0
#     }
# }
# 
# struct MyBox<T>(T);
# 
# impl<T> MyBox<T> {
#     fn new(x: T) \-> MyBox<T> {
#         MyBox(x)
#     }
# }
# 
# fn hello(name: &str) {
#     println!("Hello, {}!", name);
# }
# 
fn main() {
    let m = MyBox::new(String::from("Rust"));
    hello(&m);
}

.EE

.RE
Listing 15\-12: Calling `\fIhello\fR` with a reference to a`\fIMyBox<String>\fR` value, which works because of deref coercion
.P
Here we’re calling the `\fIhello\fR` function with the argument `\fI&m\fR`, which is areference to a `\fIMyBox<String>\fR` value\. Because we implemented the `\fIDeref\fR` traiton `\fIMyBox<T>\fR` in Listing 15\-10, Rust can turn `\fI&MyBox<String>\fR` into `\fI&String\fR`by calling `\fIderef\fR`\. The standard library provides an implementation of `\fIDeref\fR`on `\fIString\fR` that returns a string slice, and this is in the API documentationfor `\fIDeref\fR`\. Rust calls `\fIderef\fR` again to turn the `\fI&String\fR` into `\fI&str\fR`, whichmatches the `\fIhello\fR` function’s definition\.
.P
If Rust didn’t implement deref coercion, we would have to write the code inListing 15\-13 instead of the code in Listing 15\-12 to call `\fIhello\fR` with a valueof type `\fI&MyBox<String>\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::ops::Deref;
# 
# impl<T> Deref for MyBox<T> {
#     type Target = T;
# 
#     fn deref(&self) \-> &T {
#         &self\.0
#     }
# }
# 
# struct MyBox<T>(T);
# 
# impl<T> MyBox<T> {
#     fn new(x: T) \-> MyBox<T> {
#         MyBox(x)
#     }
# }
# 
# fn hello(name: &str) {
#     println!("Hello, {}!", name);
# }
# 
fn main() {
    let m = MyBox::new(String::from("Rust"));
    hello(&(*m)[\.\.]);
}

.EE

.RE
Listing 15\-13: The code we would have to write if Rustdidn’t have deref coercion
.P
The `\fI(*m)\fR` dereferences the `\fIMyBox<String>\fR` into a `\fIString\fR`\. Then the `\fI&\fR` and`\fI[\.\.]\fR` take a string slice of the `\fIString\fR` that is equal to the whole string tomatch the signature of `\fIhello\fR`\. The code without deref coercions is harder toread, write, and understand with all of these symbols involved\. Deref coercionallows Rust to handle these conversions for us automatically\.
.P
When the `\fIDeref\fR` trait is defined for the types involved, Rust will analyze thetypes and use `\fIDeref::deref\fR` as many times as necessary to get a reference tomatch the parameter’s type\. The number of times that `\fIDeref::deref\fR` needs to beinserted is resolved at compile time, so there is no runtime penalty for takingadvantage of deref coercion!
.br

.br
\fBHow Deref Coercion Interacts with Mutability\fR
.br
==============================================
.br

.P
Similar to how you use the `\fIDeref\fR` trait to override the `\fI*\fR` operator onimmutable references, you can use the `\fIDerefMut\fR` trait to override the `\fI*\fR`operator on mutable references\.
.P
Rust does deref coercion when it finds types and trait implementations in threecases:
.P
From `\fI&T\fR` to `\fI&U\fR` when `\fIT: Deref<Target=U>\fR`
.P
From `\fI&mut T\fR` to `\fI&mut U\fR` when `\fIT: DerefMut<Target=U>\fR`
.P
From `\fI&mut T\fR` to `\fI&U\fR` when `\fIT: Deref<Target=U>\fR`
.P
The first two cases are the same except for mutability\. The first case statesthat if you have a `\fI&T\fR`, and `\fIT\fR` implements `\fIDeref\fR` to some type `\fIU\fR`, you canget a `\fI&U\fR` transparently\. The second case states that the same deref coercionhappens for mutable references\.
.P
The third case is trickier: Rust will also coerce a mutable reference to animmutable one\. But the reverse is \fInot\fR possible: immutable references willnever coerce to mutable references\. Because of the borrowing rules, if you havea mutable reference, that mutable reference must be the only reference to thatdata (otherwise, the program wouldn’t compile)\. Converting one mutablereference to one immutable reference will never break the borrowing rules\.Converting an immutable reference to a mutable reference would require that theinitial immutable reference is the only immutable reference to that data, butthe borrowing rules don’t guarantee that\. Therefore, Rust can’t make theassumption that converting an immutable reference to a mutable reference ispossible\.
.SH "Running Code on Cleanup with the Drop Trait"

.br

.br
\fBRunning Code on Cleanup with the \fR
.br
===================================
.br
`\fIDrop\fR` Trait
.P
The second trait important to the smart pointer pattern is `\fIDrop\fR`, which letsyou customize what happens when a value is about to go out of scope\. You canprovide an implementation for the `\fIDrop\fR` trait on any type, and the code youspecify can be used to release resources like files or network connections\.We’re introducing `\fIDrop\fR` in the context of smart pointers because thefunctionality of the `\fIDrop\fR` trait is almost always used when implementing asmart pointer\. For example, when a `\fIBox<T>\fR` is dropped it will deallocate the spaceon the heap that the box points to\.
.P
In some languages, the programmer must call code to free memory or resourcesevery time they finish using an instance of a smart pointer\. If they forget,the system might become overloaded and crash\. In Rust, you can specify that aparticular bit of code be run whenever a value goes out of scope, and thecompiler will insert this code automatically\. As a result, you don’t need to becareful about placing cleanup code everywhere in a program that an instance ofa particular type is finished with—you still won’t leak resources!
.P
Specify the code to run when a value goes out of scope by implementing the`\fIDrop\fR` trait\. The `\fIDrop\fR` trait requires you to implement one method named`\fIdrop\fR` that takes a mutable reference to `\fIself\fR`\. To see when Rust calls `\fIdrop\fR`,let’s implement `\fIdrop\fR` with `\fIprintln!\fR` statements for now\.
.P
Listing 15\-14 shows a `\fICustomSmartPointer\fR` struct whose only customfunctionality is that it will print `\fIDropping CustomSmartPointer!\fR` when theinstance goes out of scope\. This example demonstrates when Rust runs the `\fIdrop\fR`function\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct CustomSmartPointer {
    data: String,
}

impl Drop for CustomSmartPointer {
    fn drop(&mut self) {
        println!("Dropping CustomSmartPointer with data `{}`!", self\.data);
    }
}

fn main() {
    let c = CustomSmartPointer {
        data: String::from("my stuff"),
    };
    let d = CustomSmartPointer {
        data: String::from("other stuff"),
    };
    println!("CustomSmartPointers created\.");
}

.EE

.RE
Listing 15\-14: A `\fICustomSmartPointer\fR` struct thatimplements the `\fIDrop\fR` trait where we would put our cleanup code
.P
The `\fIDrop\fR` trait is included in the prelude, so we don’t need to bring it intoscope\. We implement the `\fIDrop\fR` trait on `\fICustomSmartPointer\fR` and provide animplementation for the `\fIdrop\fR` method that calls `\fIprintln!\fR`\. The body of the`\fIdrop\fR` function is where you would place any logic that you wanted to run whenan instance of your type goes out of scope\. We’re printing some text here todemonstrate when Rust will call `\fIdrop\fR`\.
.P
In `\fImain\fR`, we create two instances of `\fICustomSmartPointer\fR` and then print`\fICustomSmartPointers created\fR`\. At the end of `\fImain\fR`, our instances of`\fICustomSmartPointer\fR` will go out of scope, and Rust will call the code we putin the `\fIdrop\fR` method, printing our final message\. Note that we didn’t need tocall the `\fIdrop\fR` method explicitly\.
.P
When we run this program, we’ll see the following output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling drop\-example v0\.1\.0 (file:///projects/drop\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.60s
     Running `target/debug/drop\-example`
CustomSmartPointers created\.
Dropping CustomSmartPointer with data `other stuff`!
Dropping CustomSmartPointer with data `my stuff`!

.EE

.RE
.P
Rust automatically called `\fIdrop\fR` for us when our instances went out of scope,calling the code we specified\. Variables are dropped in the reverse order oftheir creation, so `\fId\fR` was dropped before `\fIc\fR`\. This example gives you a visualguide to how the `\fIdrop\fR` method works; usually you would specify the cleanupcode that your type needs to run rather than a print message\.
.br

.br
\fBDropping a Value Early with \fR
.br
==============================
.br
`\fIstd::mem::drop\fR`
.P
Unfortunately, it’s not straightforward to disable the automatic `\fIdrop\fR`functionality\. Disabling `\fIdrop\fR` isn’t usually necessary; the whole point of the`\fIDrop\fR` trait is that it’s taken care of automatically\. Occasionally, however,you might want to clean up a value early\. One example is when using smartpointers that manage locks: you might want to force the `\fIdrop\fR` method thatreleases the lock so that other code in the same scope can acquire the lock\.Rust doesn’t let you call the `\fIDrop\fR` trait’s `\fIdrop\fR` method manually; insteadyou have to call the `\fIstd::mem::drop\fR` function provided by the standard libraryif you want to force a value to be dropped before the end of its scope\.
.P
If we try to call the `\fIDrop\fR` trait’s `\fIdrop\fR` method manually by modifying the`\fImain\fR` function from Listing 15\-14, as shown in Listing 15\-15, we’ll get acompiler error:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# struct CustomSmartPointer {
#     data: String,
# }
# 
# impl Drop for CustomSmartPointer {
#     fn drop(&mut self) {
#         println!("Dropping CustomSmartPointer with data `{}`!", self\.data);
#     }
# }
# 
fn main() {
    let c = CustomSmartPointer {
        data: String::from("some data"),
    };
    println!("CustomSmartPointer created\.");
    c\.drop();
    println!("CustomSmartPointer dropped before the end of main\.");
}

.EE

.RE
Listing 15\-15: Attempting to call the `\fIdrop\fR` method fromthe `\fIDrop\fR` trait manually to clean up early
.P
When we try to compile this code, we’ll get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling drop\-example v0\.1\.0 (file:///projects/drop\-example)
error[E0040]: explicit use of destructor method
  \-\-> src/main\.rs:16:7
   |
16 |     c\.drop();
   |     \-\-^^^^\-\-
   |     | |
   |     | explicit destructor calls not allowed
   |     help: consider using `drop` function: `drop(c)`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0040`\.
error: could not compile `drop\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This error message states that we’re not allowed to explicitly call `\fIdrop\fR`\. Theerror message uses the term \fIdestructor\fR, which is the general programming termfor a function that cleans up an instance\. A \fIdestructor\fR is analogous to a\fIconstructor\fR, which creates an instance\. The `\fIdrop\fR` function in Rust is oneparticular destructor\.
.P
Rust doesn’t let us call `\fIdrop\fR` explicitly because Rust would stillautomatically call `\fIdrop\fR` on the value at the end of `\fImain\fR`\. This would be a\fIdouble free\fR error because Rust would be trying to clean up the same valuetwice\.
.P
We can’t disable the automatic insertion of `\fIdrop\fR` when a value goes out ofscope, and we can’t call the `\fIdrop\fR` method explicitly\. So, if we need to forcea value to be cleaned up early, we can use the `\fIstd::mem::drop\fR` function\.
.P
The `\fIstd::mem::drop\fR` function is different from the `\fIdrop\fR` method in the `\fIDrop\fR`trait\. We call it by passing the value we want to force to be dropped early asan argument\. The function is in the prelude, so we can modify `\fImain\fR` in Listing15\-15 to call the `\fIdrop\fR` function, as shown in Listing 15\-16:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# struct CustomSmartPointer {
#     data: String,
# }
# 
# impl Drop for CustomSmartPointer {
#     fn drop(&mut self) {
#         println!("Dropping CustomSmartPointer with data `{}`!", self\.data);
#     }
# }
# 
fn main() {
    let c = CustomSmartPointer {
        data: String::from("some data"),
    };
    println!("CustomSmartPointer created\.");
    drop(c);
    println!("CustomSmartPointer dropped before the end of main\.");
}

.EE

.RE
Listing 15\-16: Calling `\fIstd::mem::drop\fR` to explicitlydrop a value before it goes out of scope
.P
Running this code will print the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling drop\-example v0\.1\.0 (file:///projects/drop\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.73s
     Running `target/debug/drop\-example`
CustomSmartPointer created\.
Dropping CustomSmartPointer with data `some data`!
CustomSmartPointer dropped before the end of main\.

.EE

.RE
.P
The text `\fIDropping CustomSmartPointer with data `some data`!\fR` is printedbetween the `\fICustomSmartPointer created\.\fR` and `\fICustomSmartPointer dropped before the end of main\.\fR` text, showing that the `\fIdrop\fR` method code is called todrop `\fIc\fR` at that point\.
.P
You can use code specified in a `\fIDrop\fR` trait implementation in many ways tomake cleanup convenient and safe: for instance, you could use it to create yourown memory allocator! With the `\fIDrop\fR` trait and Rust’s ownership system, youdon’t have to remember to clean up because Rust does it automatically\.
.P
You also don’t have to worry about problems resulting from accidentallycleaning up values still in use: the ownership system that makes surereferences are always valid also ensures that `\fIdrop\fR` gets called only once whenthe value is no longer being used\.
.P
Now that we’ve examined `\fIBox<T>\fR` and some of the characteristics of smartpointers, let’s look at a few other smart pointers defined in the standardlibrary\.
.SH "Rc<T>, the Reference Counted Smart Pointer"
`\fIRc<T>\fR`, the Reference Counted Smart Pointer
.P
In the majority of cases, ownership is clear: you know exactly which variableowns a given value\. However, there are cases when a single value might havemultiple owners\. For example, in graph data structures, multiple edges mightpoint to the same node, and that node is conceptually owned by all of the edgesthat point to it\. A node shouldn’t be cleaned up unless it doesn’t have anyedges pointing to it\.
.P
To enable multiple ownership, Rust has a type called `\fIRc<T>\fR`, which is anabbreviation for \fIreference counting\fR\. The `\fIRc<T>\fR` type keeps track of thenumber of references to a value to determine whether or not the value is stillin use\. If there are zero references to a value, the value can be cleaned upwithout any references becoming invalid\.
.P
Imagine `\fIRc<T>\fR` as a TV in a family room\. When one person enters to watch TV,they turn it on\. Others can come into the room and watch the TV\. When the lastperson leaves the room, they turn off the TV because it’s no longer being used\.If someone turns off the TV while others are still watching it, there would beuproar from the remaining TV watchers!
.P
We use the `\fIRc<T>\fR` type when we want to allocate some data on the heap formultiple parts of our program to read and we can’t determine at compile timewhich part will finish using the data last\. If we knew which part would finishlast, we could just make that part the data’s owner, and the normal ownershiprules enforced at compile time would take effect\.
.P
Note that `\fIRc<T>\fR` is only for use in single\-threaded scenarios\. When we discussconcurrency in Chapter 16, we’ll cover how to do reference counting inmultithreaded programs\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIRc<T>\fR` to Share Data
.P
Let’s return to our cons list example in Listing 15\-5\. Recall that we definedit using `\fIBox<T>\fR`\. This time, we’ll create two lists that both share ownershipof a third list\. Conceptually, this looks similar to Figure 15\-3:Figure 15\-3: Two lists, `\fIb\fR` and `\fIc\fR`, sharing ownership ofa third list, `\fIa\fR`
.P
We’ll create list `\fIa\fR` that contains 5 and then 10\. Then we’ll make two morelists: `\fIb\fR` that starts with 3 and `\fIc\fR` that starts with 4\. Both `\fIb\fR` and `\fIc\fR`lists will then continue on to the first `\fIa\fR` list containing 5 and 10\. In otherwords, both lists will share the first list containing 5 and 10\.
.P
Trying to implement this scenario using our definition of `\fIList\fR` with `\fIBox<T>\fR`won’t work, as shown in Listing 15\-17:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
enum List {
    Cons(i32, Box<List>),
    Nil,
}

use crate::List::{Cons, Nil};

fn main() {
    let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));
    let b = Cons(3, Box::new(a));
    let c = Cons(4, Box::new(a));
}

.EE

.RE
Listing 15\-17: Demonstrating we’re not allowed to havetwo lists using `\fIBox<T>\fR` that try to share ownership of a third list
.P
When we compile this code, we get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
error[E0382]: use of moved value: `a`
  \-\-> src/main\.rs:11:30
   |
9  |     let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));
   |         \- move occurs because `a` has type `List`, which does not implement the `Copy` trait
10 |     let b = Cons(3, Box::new(a));
   |                              \- value moved here
11 |     let c = Cons(4, Box::new(a));
   |                              ^ value used here after move

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `cons\-list`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The `\fICons\fR` variants own the data they hold, so when we create the `\fIb\fR` list, `\fIa\fR`is moved into `\fIb\fR` and `\fIb\fR` owns `\fIa\fR`\. Then, when we try to use `\fIa\fR` again whencreating `\fIc\fR`, we’re not allowed to because `\fIa\fR` has been moved\.
.P
We could change the definition of `\fICons\fR` to hold references instead, but thenwe would have to specify lifetime parameters\. By specifying lifetimeparameters, we would be specifying that every element in the list will live atleast as long as the entire list\. The borrow checker wouldn’t let us compile`\fIlet a = Cons(10, &Nil);\fR` for example, because the temporary `\fINil\fR` value wouldbe dropped before `\fIa\fR` could take a reference to it\.
.P
Instead, we’ll change our definition of `\fIList\fR` to use `\fIRc<T>\fR` in place of`\fIBox<T>\fR`, as shown in Listing 15\-18\. Each `\fICons\fR` variant will now hold a valueand an `\fIRc<T>\fR` pointing to a `\fIList\fR`\. When we create `\fIb\fR`, instead of takingownership of `\fIa\fR`, we’ll clone the `\fIRc<List>\fR` that `\fIa\fR` is holding, therebyincreasing the number of references from one to two and letting `\fIa\fR` and `\fIb\fR`share ownership of the data in that `\fIRc<List>\fR`\. We’ll also clone `\fIa\fR` whencreating `\fIc\fR`, increasing the number of references from two to three\. Every timewe call `\fIRc::clone\fR`, the reference count to the data within the `\fIRc<List>\fR` willincrease, and the data won’t be cleaned up unless there are zero references toit\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
enum List {
    Cons(i32, Rc<List>),
    Nil,
}

use crate::List::{Cons, Nil};
use std::rc::Rc;

fn main() {
    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));
    let b = Cons(3, Rc::clone(&a));
    let c = Cons(4, Rc::clone(&a));
}

.EE

.RE
Listing 15\-18: A definition of `\fIList\fR` that uses`\fIRc<T>\fR`
.P
We need to add a `\fIuse\fR` statement to bring `\fIRc<T>\fR` into scope because it’s notin the prelude\. In `\fImain\fR`, we create the list holding 5 and 10 and store it ina new `\fIRc<List>\fR` in `\fIa\fR`\. Then when we create `\fIb\fR` and `\fIc\fR`, we call the`\fIRc::clone\fR` function and pass a reference to the `\fIRc<List>\fR` in `\fIa\fR` as anargument\.
.P
We could have called `\fIa\.clone()\fR` rather than `\fIRc::clone(&a)\fR`, but Rust’sconvention is to use `\fIRc::clone\fR` in this case\. The implementation of`\fIRc::clone\fR` doesn’t make a deep copy of all the data like most types’implementations of `\fIclone\fR` do\. The call to `\fIRc::clone\fR` only increments thereference count, which doesn’t take much time\. Deep copies of data can take alot of time\. By using `\fIRc::clone\fR` for reference counting, we can visuallydistinguish between the deep\-copy kinds of clones and the kinds of clones thatincrease the reference count\. When looking for performance problems in thecode, we only need to consider the deep\-copy clones and can disregard calls to`\fIRc::clone\fR`\.
.br

.br
\fBCloning an \fR
.br
=============
.br
`\fIRc<T>\fR` Increases the Reference Count
.P
Let’s change our working example in Listing 15\-18 so we can see the referencecounts changing as we create and drop references to the `\fIRc<List>\fR` in `\fIa\fR`\.
.P
In Listing 15\-19, we’ll change `\fImain\fR` so it has an inner scope around list `\fIc\fR`;then we can see how the reference count changes when `\fIc\fR` goes out of scope\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# enum List {
#     Cons(i32, Rc<List>),
#     Nil,
# }
# 
# use crate::List::{Cons, Nil};
# use std::rc::Rc;
# 
fn main() {
    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));
    println!("count after creating a = {}", Rc::strong_count(&a));
    let b = Cons(3, Rc::clone(&a));
    println!("count after creating b = {}", Rc::strong_count(&a));
    {
        let c = Cons(4, Rc::clone(&a));
        println!("count after creating c = {}", Rc::strong_count(&a));
    }
    println!("count after c goes out of scope = {}", Rc::strong_count(&a));
}

.EE

.RE
Listing 15\-19: Printing the reference count
.P
At each point in the program where the reference count changes, we print thereference count, which we can get by calling the `\fIRc::strong_count\fR` function\.This function is named `\fIstrong_count\fR` rather than `\fIcount\fR` because the `\fIRc<T>\fR`type also has a `\fIweak_count\fR`; we’ll see what `\fIweak_count\fR` is used for in the
.UR ch15\-06\-reference\-cycles\.html#preventing\-reference\-cycles\-turning\-an\-rct\-into\-a\-weakt
.UE
“Preventing Reference Cycles: Turning an `\fIRc<T>\fR` into a`\fIWeak<T>\fR`” section\.
.P
This code prints the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.45s
     Running `target/debug/cons\-list`
count after creating a = 1
count after creating b = 2
count after creating c = 3
count after c goes out of scope = 2

.EE

.RE
.P
We can see that the `\fIRc<List>\fR` in `\fIa\fR` has an initial reference count of 1; theneach time we call `\fIclone\fR`, the count goes up by 1\. When `\fIc\fR` goes out of scope,the count goes down by 1\. We don’t have to call a function to decrease thereference count like we have to call `\fIRc::clone\fR` to increase the referencecount: the implementation of the `\fIDrop\fR` trait decreases the reference countautomatically when an `\fIRc<T>\fR` value goes out of scope\.
.P
What we can’t see in this example is that when `\fIb\fR` and then `\fIa\fR` go out of scopeat the end of `\fImain\fR`, the count is then 0, and the `\fIRc<List>\fR` is cleaned upcompletely at that point\. Using `\fIRc<T>\fR` allows a single value to havemultiple owners, and the count ensures that the value remains valid as long asany of the owners still exist\.
.P
Via immutable references, `\fIRc<T>\fR` allows you to share data between multipleparts of your program for reading only\. If `\fIRc<T>\fR` allowed you to have multiplemutable references too, you might violate one of the borrowing rules discussedin Chapter 4: multiple mutable borrows to the same place can cause data racesand inconsistencies\. But being able to mutate data is very useful! In the nextsection, we’ll discuss the interior mutability pattern and the `\fIRefCell<T>\fR`type that you can use in conjunction with an `\fIRc<T>\fR` to work with thisimmutability restriction\.
.SH "RefCell<T> and the Interior Mutability Pattern"
`\fIRefCell<T>\fR` and the Interior Mutability Pattern\fIInterior mutability\fR is a design pattern in Rust that allows you to mutatedata even when there are immutable references to that data; normally, thisaction is disallowed by the borrowing rules\. To mutate data, the pattern uses`\fIunsafe\fR` code inside a data structure to bend Rust’s usual rules that governmutation and borrowing\. We haven’t yet covered unsafe code; we will in Chapter19\. We can use types that use the interior mutability pattern when we canensure that the borrowing rules will be followed at runtime, even though thecompiler can’t guarantee that\. The `\fIunsafe\fR` code involved is then wrapped in asafe API, and the outer type is still immutable\.
.P
Let’s explore this concept by looking at the `\fIRefCell<T>\fR` type that follows theinterior mutability pattern\.
.br

.br
\fBEnforcing Borrowing Rules at Runtime with \fR
.br
============================================
.br
`\fIRefCell<T>\fR`
.P
Unlike `\fIRc<T>\fR`, the `\fIRefCell<T>\fR` type represents single ownership over the datait holds\. So, what makes `\fIRefCell<T>\fR` different from a type like `\fIBox<T>\fR`?Recall the borrowing rules you learned in Chapter 4:
.P
At any given time, you can have \fIeither\fR (but not both of) one mutablereference or any number of immutable references\.
.P
References must always be valid\.
.P
With references and `\fIBox<T>\fR`, the borrowing rules’ invariants are enforced atcompile time\. With `\fIRefCell<T>\fR`, these invariants are enforced \fIat runtime\fR\.With references, if you break these rules, you’ll get a compiler error\. With`\fIRefCell<T>\fR`, if you break these rules, your program will panic and exit\.
.P
The advantages of checking the borrowing rules at compile time are that errorswill be caught sooner in the development process, and there is no impact onruntime performance because all the analysis is completed beforehand\. For thosereasons, checking the borrowing rules at compile time is the best choice in themajority of cases, which is why this is Rust’s default\.
.P
The advantage of checking the borrowing rules at runtime instead is thatcertain memory\-safe scenarios are then allowed, whereas they are disallowed bythe compile\-time checks\. Static analysis, like the Rust compiler, is inherentlyconservative\. Some properties of code are impossible to detect by analyzing thecode: the most famous example is the Halting Problem, which is beyond the scopeof this book but is an interesting topic to research\.
.P
Because some analysis is impossible, if the Rust compiler can’t be sure thecode complies with the ownership rules, it might reject a correct program; inthis way, it’s conservative\. If Rust accepted an incorrect program, userswouldn’t be able to trust in the guarantees Rust makes\. However, if Rustrejects a correct program, the programmer will be inconvenienced, but nothingcatastrophic can occur\. The `\fIRefCell<T>\fR` type is useful when you’re sure yourcode follows the borrowing rules but the compiler is unable to understand andguarantee that\.
.P
Similar to `\fIRc<T>\fR`, `\fIRefCell<T>\fR` is only for use in single\-threaded scenariosand will give you a compile\-time error if you try using it in a multithreadedcontext\. We’ll talk about how to get the functionality of `\fIRefCell<T>\fR` in amultithreaded program in Chapter 16\.
.P
Here is a recap of the reasons to choose `\fIBox<T>\fR`, `\fIRc<T>\fR`, or `\fIRefCell<T>\fR`:`\fIRc<T>\fR` enables multiple owners of the same data; `\fIBox<T>\fR` and `\fIRefCell<T>\fR`have single owners\.`\fIBox<T>\fR` allows immutable or mutable borrows checked at compile time; `\fIRc<T>\fR`allows only immutable borrows checked at compile time; `\fIRefCell<T>\fR` allowsimmutable or mutable borrows checked at runtime\.
.P
Because `\fIRefCell<T>\fR` allows mutable borrows checked at runtime, you canmutate the value inside the `\fIRefCell<T>\fR` even when the `\fIRefCell<T>\fR` isimmutable\.
.P
Mutating the value inside an immutable value is the \fIinterior mutability\fRpattern\. Let’s look at a situation in which interior mutability is useful andexamine how it’s possible\.
.br

.br
\fBInterior Mutability: A Mutable Borrow to an Immutable Value\fR
.br
=============================================================
.br

.P
A consequence of the borrowing rules is that when you have an immutable value,you can’t borrow it mutably\. For example, this code won’t compile:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let x = 5;
    let y = &mut x;
}

.EE

.RE
.P
If you tried to compile this code, you’d get the following error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling borrowing v0\.1\.0 (file:///projects/borrowing)
error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable
 \-\-> src/main\.rs:3:13
  |
2 |     let x = 5;
  |         \- help: consider changing this to be mutable: `mut x`
3 |     let y = &mut x;
  |             ^^^^^^ cannot borrow as mutable

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0596`\.
error: could not compile `borrowing`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
However, there are situations in which it would be useful for a value to mutateitself in its methods but appear immutable to other code\. Code outside thevalue’s methods would not be able to mutate the value\. Using `\fIRefCell<T>\fR` isone way to get the ability to have interior mutability\. But `\fIRefCell<T>\fR`doesn’t get around the borrowing rules completely: the borrow checker in thecompiler allows this interior mutability, and the borrowing rules are checkedat runtime instead\. If you violate the rules, you’ll get a `\fIpanic!\fR` instead ofa compiler error\.
.P
Let’s work through a practical example where we can use `\fIRefCell<T>\fR` to mutatean immutable value and see why that is useful\.
.br

.br
\fBA Use Case for Interior Mutability: Mock Objects\fR
.br
==================================================
.br

.P
A \fItest double\fR is the general programming concept for a type used in place ofanother type during testing\. \fIMock objects\fR are specific types of test doublesthat record what happens during a test so you can assert that the correctactions took place\.
.P
Rust doesn’t have objects in the same sense as other languages have objects,and Rust doesn’t have mock object functionality built into the standard libraryas some other languages do\. However, you can definitely create a struct thatwill serve the same purposes as a mock object\.
.P
Here’s the scenario we’ll test: we’ll create a library that tracks a valueagainst a maximum value and sends messages based on how close to the maximumvalue the current value is\. This library could be used to keep track of auser’s quota for the number of API calls they’re allowed to make, for example\.
.P
Our library will only provide the functionality of tracking how close to themaximum a value is and what the messages should be at what times\. Applicationsthat use our library will be expected to provide the mechanism for sending themessages: the application could put a message in the application, send anemail, send a text message, or something else\. The library doesn’t need to knowthat detail\. All it needs is something that implements a trait we’ll providecalled `\fIMessenger\fR`\. Listing 15\-20 shows the library code:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Messenger {
    fn send(&self, msg: &str);
}

pub struct LimitTracker<'a, T: Messenger> {
    messenger: &'a T,
    value: usize,
    max: usize,
}

impl<'a, T> LimitTracker<'a, T>
where
    T: Messenger,
{
    pub fn new(messenger: &T, max: usize) \-> LimitTracker<T> {
        LimitTracker {
            messenger,
            value: 0,
            max,
        }
    }

    pub fn set_value(&mut self, value: usize) {
        self\.value = value;

        let percentage_of_max = self\.value as f64 / self\.max as f64;

        if percentage_of_max >= 1\.0 {
            self\.messenger\.send("Error: You are over your quota!");
        } else if percentage_of_max >= 0\.9 {
            self\.messenger
                \.send("Urgent warning: You've used up over 90% of your quota!");
        } else if percentage_of_max >= 0\.75 {
            self\.messenger
                \.send("Warning: You've used up over 75% of your quota!");
        }
    }
}

.EE

.RE
Listing 15\-20: A library to keep track of how close avalue is to a maximum value and warn when the value is at certain levels
.P
One important part of this code is that the `\fIMessenger\fR` trait has one methodcalled `\fIsend\fR` that takes an immutable reference to `\fIself\fR` and the text of themessage\. This trait is the interface our mock object needs to implement so thatthe mock can be used in the same way a real object is\. The other important partis that we want to test the behavior of the `\fIset_value\fR` method on the`\fILimitTracker\fR`\. We can change what we pass in for the `\fIvalue\fR` parameter, but`\fIset_value\fR` doesn’t return anything for us to make assertions on\. We want to beable to say that if we create a `\fILimitTracker\fR` with something that implementsthe `\fIMessenger\fR` trait and a particular value for `\fImax\fR`, when we pass differentnumbers for `\fIvalue\fR`, the messenger is told to send the appropriate messages\.
.P
We need a mock object that, instead of sending an email or text message when wecall `\fIsend\fR`, will only keep track of the messages it’s told to send\. We cancreate a new instance of the mock object, create a `\fILimitTracker\fR` that uses themock object, call the `\fIset_value\fR` method on `\fILimitTracker\fR`, and then check thatthe mock object has the messages we expect\. Listing 15\-21 shows an attempt toimplement a mock object to do just that, but the borrow checker won’t allow it:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# pub trait Messenger {
#     fn send(&self, msg: &str);
# }
# 
# pub struct LimitTracker<'a, T: Messenger> {
#     messenger: &'a T,
#     value: usize,
#     max: usize,
# }
# 
# impl<'a, T> LimitTracker<'a, T>
# where
#     T: Messenger,
# {
#     pub fn new(messenger: &T, max: usize) \-> LimitTracker<T> {
#         LimitTracker {
#             messenger,
#             value: 0,
#             max,
#         }
#     }
# 
#     pub fn set_value(&mut self, value: usize) {
#         self\.value = value;
# 
#         let percentage_of_max = self\.value as f64 / self\.max as f64;
# 
#         if percentage_of_max >= 1\.0 {
#             self\.messenger\.send("Error: You are over your quota!");
#         } else if percentage_of_max >= 0\.9 {
#             self\.messenger
#                 \.send("Urgent warning: You've used up over 90% of your quota!");
#         } else if percentage_of_max >= 0\.75 {
#             self\.messenger
#                 \.send("Warning: You've used up over 75% of your quota!");
#         }
#     }
# }
# 
#[cfg(test)]
mod tests {
    use super::*;

    struct MockMessenger {
        sent_messages: Vec<String>,
    }

    impl MockMessenger {
        fn new() \-> MockMessenger {
            MockMessenger {
                sent_messages: vec![],
            }
        }
    }

    impl Messenger for MockMessenger {
        fn send(&self, message: &str) {
            self\.sent_messages\.push(String::from(message));
        }
    }

    #[test]
    fn it_sends_an_over_75_percent_warning_message() {
        let mock_messenger = MockMessenger::new();
        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);

        limit_tracker\.set_value(80);

        assert_eq!(mock_messenger\.sent_messages\.len(), 1);
    }
}

.EE

.RE
Listing 15\-21: An attempt to implement a `\fIMockMessenger\fR`that isn’t allowed by the borrow checker
.P
This test code defines a `\fIMockMessenger\fR` struct that has a `\fIsent_messages\fR`field with a `\fIVec\fR` of `\fIString\fR` values to keep track of the messages it’s toldto send\. We also define an associated function `\fInew\fR` to make it convenient tocreate new `\fIMockMessenger\fR` values that start with an empty list of messages\. Wethen implement the `\fIMessenger\fR` trait for `\fIMockMessenger\fR` so we can give a`\fIMockMessenger\fR` to a `\fILimitTracker\fR`\. In the definition of the `\fIsend\fR` method, wetake the message passed in as a parameter and store it in the `\fIMockMessenger\fR`list of `\fIsent_messages\fR`\.
.P
In the test, we’re testing what happens when the `\fILimitTracker\fR` is told to set`\fIvalue\fR` to something that is more than 75 percent of the `\fImax\fR` value\. First, wecreate a new `\fIMockMessenger\fR`, which will start with an empty list of messages\.Then we create a new `\fILimitTracker\fR` and give it a reference to the new`\fIMockMessenger\fR` and a `\fImax\fR` value of 100\. We call the `\fIset_value\fR` method on the`\fILimitTracker\fR` with a value of 80, which is more than 75 percent of 100\. Thenwe assert that the list of messages that the `\fIMockMessenger\fR` is keeping trackof should now have one message in it\.
.P
However, there’s one problem with this test, as shown here:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling limit\-tracker v0\.1\.0 (file:///projects/limit\-tracker)
error[E0596]: cannot borrow `self\.sent_messages` as mutable, as it is behind a `&` reference
  \-\-> src/lib\.rs:58:13
   |
2  |     fn send(&self, msg: &str);
   |             \-\-\-\-\- help: consider changing that to be a mutable reference: `&mut self`
\.\.\.
58 |             self\.sent_messages\.push(String::from(message));
   |             ^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0596`\.
error: could not compile `limit\-tracker`

To learn more, run the command again with \-\-verbose\.
warning: build failed, waiting for other jobs to finish\.\.\.
error: build failed

.EE

.RE
.P
We can’t modify the `\fIMockMessenger\fR` to keep track of the messages, because the`\fIsend\fR` method takes an immutable reference to `\fIself\fR`\. We also can’t take thesuggestion from the error text to use `\fI&mut self\fR` instead, because then thesignature of `\fIsend\fR` wouldn’t match the signature in the `\fIMessenger\fR` traitdefinition (feel free to try and see what error message you get)\.
.P
This is a situation in which interior mutability can help! We’ll store the`\fIsent_messages\fR` within a `\fIRefCell<T>\fR`, and then the `\fIsend\fR` method will beable to modify `\fIsent_messages\fR` to store the messages we’ve seen\. Listing 15\-22shows what that looks like:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Messenger {
#     fn send(&self, msg: &str);
# }
# 
# pub struct LimitTracker<'a, T: Messenger> {
#     messenger: &'a T,
#     value: usize,
#     max: usize,
# }
# 
# impl<'a, T> LimitTracker<'a, T>
# where
#     T: Messenger,
# {
#     pub fn new(messenger: &T, max: usize) \-> LimitTracker<T> {
#         LimitTracker {
#             messenger,
#             value: 0,
#             max,
#         }
#     }
# 
#     pub fn set_value(&mut self, value: usize) {
#         self\.value = value;
# 
#         let percentage_of_max = self\.value as f64 / self\.max as f64;
# 
#         if percentage_of_max >= 1\.0 {
#             self\.messenger\.send("Error: You are over your quota!");
#         } else if percentage_of_max >= 0\.9 {
#             self\.messenger
#                 \.send("Urgent warning: You've used up over 90% of your quota!");
#         } else if percentage_of_max >= 0\.75 {
#             self\.messenger
#                 \.send("Warning: You've used up over 75% of your quota!");
#         }
#     }
# }
# 
#[cfg(test)]
mod tests {
    use super::*;
    use std::cell::RefCell;

    struct MockMessenger {
        sent_messages: RefCell<Vec<String>>,
    }

    impl MockMessenger {
        fn new() \-> MockMessenger {
            MockMessenger {
                sent_messages: RefCell::new(vec![]),
            }
        }
    }

    impl Messenger for MockMessenger {
        fn send(&self, message: &str) {
            self\.sent_messages\.borrow_mut()\.push(String::from(message));
        }
    }

    #[test]
    fn it_sends_an_over_75_percent_warning_message() {
        // \-\-snip\-\-
#         let mock_messenger = MockMessenger::new();
#         let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);
# 
#         limit_tracker\.set_value(80);

        assert_eq!(mock_messenger\.sent_messages\.borrow()\.len(), 1);
    }
}

.EE

.RE
Listing 15\-22: Using `\fIRefCell<T>\fR` to mutate an innervalue while the outer value is considered immutable
.P
The `\fIsent_messages\fR` field is now of type `\fIRefCell<Vec<String>>\fR` instead of`\fIVec<String>\fR`\. In the `\fInew\fR` function, we create a new `\fIRefCell<Vec<String>>\fR`instance around the empty vector\.
.P
For the implementation of the `\fIsend\fR` method, the first parameter is still animmutable borrow of `\fIself\fR`, which matches the trait definition\. We call`\fIborrow_mut\fR` on the `\fIRefCell<Vec<String>>\fR` in `\fIself\.sent_messages\fR` to get amutable reference to the value inside the `\fIRefCell<Vec<String>>\fR`, which isthe vector\. Then we can call `\fIpush\fR` on the mutable reference to the vector tokeep track of the messages sent during the test\.
.P
The last change we have to make is in the assertion: to see how many items arein the inner vector, we call `\fIborrow\fR` on the `\fIRefCell<Vec<String>>\fR` to get animmutable reference to the vector\.
.P
Now that you’ve seen how to use `\fIRefCell<T>\fR`, let’s dig into how it works!
.br

.br
\fBKeeping Track of Borrows at Runtime with \fR
.br
===========================================
.br
`\fIRefCell<T>\fR`
.P
When creating immutable and mutable references, we use the `\fI&\fR` and `\fI&mut\fR`syntax, respectively\. With `\fIRefCell<T>\fR`, we use the `\fIborrow\fR` and `\fIborrow_mut\fR`methods, which are part of the safe API that belongs to `\fIRefCell<T>\fR`\. The`\fIborrow\fR` method returns the smart pointer type `\fIRef<T>\fR`, and `\fIborrow_mut\fR`returns the smart pointer type `\fIRefMut<T>\fR`\. Both types implement `\fIDeref\fR`, so wecan treat them like regular references\.
.P
The `\fIRefCell<T>\fR` keeps track of how many `\fIRef<T>\fR` and `\fIRefMut<T>\fR` smartpointers are currently active\. Every time we call `\fIborrow\fR`, the `\fIRefCell<T>\fR`increases its count of how many immutable borrows are active\. When a `\fIRef<T>\fR`value goes out of scope, the count of immutable borrows goes down by one\. Justlike the compile\-time borrowing rules, `\fIRefCell<T>\fR` lets us have many immutableborrows or one mutable borrow at any point in time\.
.P
If we try to violate these rules, rather than getting a compiler error as wewould with references, the implementation of `\fIRefCell<T>\fR` will panic atruntime\. Listing 15\-23 shows a modification of the implementation of `\fIsend\fR` inListing 15\-22\. We’re deliberately trying to create two mutable borrows activefor the same scope to illustrate that `\fIRefCell<T>\fR` prevents us from doing thisat runtime\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,panics\fR 2

.br
.EX
# pub trait Messenger {
#     fn send(&self, msg: &str);
# }
# 
# pub struct LimitTracker<'a, T: Messenger> {
#     messenger: &'a T,
#     value: usize,
#     max: usize,
# }
# 
# impl<'a, T> LimitTracker<'a, T>
# where
#     T: Messenger,
# {
#     pub fn new(messenger: &T, max: usize) \-> LimitTracker<T> {
#         LimitTracker {
#             messenger,
#             value: 0,
#             max,
#         }
#     }
# 
#     pub fn set_value(&mut self, value: usize) {
#         self\.value = value;
# 
#         let percentage_of_max = self\.value as f64 / self\.max as f64;
# 
#         if percentage_of_max >= 1\.0 {
#             self\.messenger\.send("Error: You are over your quota!");
#         } else if percentage_of_max >= 0\.9 {
#             self\.messenger
#                 \.send("Urgent warning: You've used up over 90% of your quota!");
#         } else if percentage_of_max >= 0\.75 {
#             self\.messenger
#                 \.send("Warning: You've used up over 75% of your quota!");
#         }
#     }
# }
# 
# #[cfg(test)]
# mod tests {
#     use super::*;
#     use std::cell::RefCell;
# 
#     struct MockMessenger {
#         sent_messages: RefCell<Vec<String>>,
#     }
# 
#     impl MockMessenger {
#         fn new() \-> MockMessenger {
#             MockMessenger {
#                 sent_messages: RefCell::new(vec![]),
#             }
#         }
#     }
# 
    impl Messenger for MockMessenger {
        fn send(&self, message: &str) {
            let mut one_borrow = self\.sent_messages\.borrow_mut();
            let mut two_borrow = self\.sent_messages\.borrow_mut();

            one_borrow\.push(String::from(message));
            two_borrow\.push(String::from(message));
        }
    }
# 
#     #[test]
#     fn it_sends_an_over_75_percent_warning_message() {
#         let mock_messenger = MockMessenger::new();
#         let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);
# 
#         limit_tracker\.set_value(80);
# 
#         assert_eq!(mock_messenger\.sent_messages\.borrow()\.len(), 1);
#     }
# }

.EE

.RE
Listing 15\-23: Creating two mutable references in thesame scope to see that `\fIRefCell<T>\fR` will panic
.P
We create a variable `\fIone_borrow\fR` for the `\fIRefMut<T>\fR` smart pointer returnedfrom `\fIborrow_mut\fR`\. Then we create another mutable borrow in the same way in thevariable `\fItwo_borrow\fR`\. This makes two mutable references in the same scope,which isn’t allowed\. When we run the tests for our library, the code in Listing15\-23 will compile without any errors, but the test will fail:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo test
   Compiling limit\-tracker v0\.1\.0 (file:///projects/limit\-tracker)
    Finished test [unoptimized + debuginfo] target(s) in 0\.91s
     Running unittests (target/debug/deps/limit_tracker\-e599811fa246dbde)

running 1 test
test tests::it_sends_an_over_75_percent_warning_message \.\.\. FAILED

failures:

\-\-\-\- tests::it_sends_an_over_75_percent_warning_message stdout \-\-\-\-
thread 'main' panicked at 'already borrowed: BorrowMutError', src/lib\.rs:60:53
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::it_sends_an_over_75_percent_warning_message

test result: FAILED\. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0\.00s

error: test failed, to rerun pass '\-\-lib'

.EE

.RE
.P
Notice that the code panicked with the message `\fIalready borrowed: BorrowMutError\fR`\. This is how `\fIRefCell<T>\fR` handles violations of the borrowingrules at runtime\.
.P
Catching borrowing errors at runtime rather than compile time means that youwould find a mistake in your code later in the development process and possiblynot until your code was deployed to production\. Also, your code would incur asmall runtime performance penalty as a result of keeping track of the borrowsat runtime rather than compile time\. However, using `\fIRefCell<T>\fR` makes itpossible to write a mock object that can modify itself to keep track of themessages it has seen while you’re using it in a context where only immutablevalues are allowed\. You can use `\fIRefCell<T>\fR` despite its trade\-offs to get morefunctionality than regular references provide\.
.br

.br
\fBHaving Multiple Owners of Mutable Data by Combining \fR
.br
======================================================
.br
`\fIRc<T>\fR` and `\fIRefCell<T>\fR`
.P
A common way to use `\fIRefCell<T>\fR` is in combination with `\fIRc<T>\fR`\. Recall that`\fIRc<T>\fR` lets you have multiple owners of some data, but it only gives immutableaccess to that data\. If you have an `\fIRc<T>\fR` that holds a `\fIRefCell<T>\fR`, you canget a value that can have multiple owners \fIand\fR that you can mutate!
.P
For example, recall the cons list example in Listing 15\-18 where we used`\fIRc<T>\fR` to allow multiple lists to share ownership of another list\. Because`\fIRc<T>\fR` holds only immutable values, we can’t change any of the values in thelist once we’ve created them\. Let’s add in `\fIRefCell<T>\fR` to gain the ability tochange the values in the lists\. Listing 15\-24 shows that by using a`\fIRefCell<T>\fR` in the `\fICons\fR` definition, we can modify the value stored in allthe lists:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
#[derive(Debug)]
enum List {
    Cons(Rc<RefCell<i32>>, Rc<List>),
    Nil,
}

use crate::List::{Cons, Nil};
use std::cell::RefCell;
use std::rc::Rc;

fn main() {
    let value = Rc::new(RefCell::new(5));

    let a = Rc::new(Cons(Rc::clone(&value), Rc::new(Nil)));

    let b = Cons(Rc::new(RefCell::new(3)), Rc::clone(&a));
    let c = Cons(Rc::new(RefCell::new(4)), Rc::clone(&a));

    *value\.borrow_mut() += 10;

    println!("a after = {:?}", a);
    println!("b after = {:?}", b);
    println!("c after = {:?}", c);
}

.EE

.RE
Listing 15\-24: Using `\fIRc<RefCell<i32>>\fR` to create a`\fIList\fR` that we can mutate
.P
We create a value that is an instance of `\fIRc<RefCell<i32>>\fR` and store it in avariable named `\fIvalue\fR` so we can access it directly later\. Then we create a`\fIList\fR` in `\fIa\fR` with a `\fICons\fR` variant that holds `\fIvalue\fR`\. We need to clone`\fIvalue\fR` so both `\fIa\fR` and `\fIvalue\fR` have ownership of the inner `\fI5\fR` value ratherthan transferring ownership from `\fIvalue\fR` to `\fIa\fR` or having `\fIa\fR` borrow from`\fIvalue\fR`\.
.P
We wrap the list `\fIa\fR` in an `\fIRc<T>\fR` so when we create lists `\fIb\fR` and `\fIc\fR`, theycan both refer to `\fIa\fR`, which is what we did in Listing 15\-18\.
.P
After we’ve created the lists in `\fIa\fR`, `\fIb\fR`, and `\fIc\fR`, we add 10 to the value in`\fIvalue\fR`\. We do this by calling `\fIborrow_mut\fR` on `\fIvalue\fR`, which uses theautomatic dereferencing feature we discussed in Chapter 5 (see the section
.UR ch05\-03\-method\-syntax\.html#wheres\-the\-\-\-operator
.UE
“Where’s the `\fI\->\fR` Operator?”) todereference the `\fIRc<T>\fR` to the inner `\fIRefCell<T>\fR` value\. The `\fIborrow_mut\fR`method returns a `\fIRefMut<T>\fR` smart pointer, and we use the dereference operatoron it and change the inner value\.
.P
When we print `\fIa\fR`, `\fIb\fR`, and `\fIc\fR`, we can see that they all have the modifiedvalue of 15 rather than 5:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.63s
     Running `target/debug/cons\-list`
a after = Cons(RefCell { value: 15 }, Nil)
b after = Cons(RefCell { value: 3 }, Cons(RefCell { value: 15 }, Nil))
c after = Cons(RefCell { value: 4 }, Cons(RefCell { value: 15 }, Nil))

.EE

.RE
.P
This technique is pretty neat! By using `\fIRefCell<T>\fR`, we have an outwardlyimmutable `\fIList\fR` value\. But we can use the methods on `\fIRefCell<T>\fR` that provideaccess to its interior mutability so we can modify our data when we need to\.The runtime checks of the borrowing rules protect us from data races, and it’ssometimes worth trading a bit of speed for this flexibility in our datastructures\.
.P
The standard library has other types that provide interior mutability, such as`\fICell<T>\fR`, which is similar except that instead of giving references to theinner value, the value is copied in and out of the `\fICell<T>\fR`\. There’s also`\fIMutex<T>\fR`, which offers interior mutability that’s safe to use across threads;we’ll discuss its use in Chapter 16\. Check out the standard library docs formore details on the differences between these types\.
.SH "Reference Cycles Can Leak Memory"

.br

.br
\fBReference Cycles Can Leak Memory\fR
.br
==================================
.br

.P
Rust’s memory safety guarantees make it difficult, but not impossible, toaccidentally create memory that is never cleaned up (known as a \fImemory leak\fR)\.Preventing memory leaks entirely is not one of Rust’s guarantees in the sameway that disallowing data races at compile time is, meaning memory leaks arememory safe in Rust\. We can see that Rust allows memory leaks by using `\fIRc<T>\fR`and `\fIRefCell<T>\fR`: it’s possible to create references where items refer to eachother in a cycle\. This creates memory leaks because the reference count of eachitem in the cycle will never reach 0, and the values will never be dropped\.
.br

.br
\fBCreating a Reference Cycle\fR
.br
============================
.br

.P
Let’s look at how a reference cycle might happen and how to prevent it,starting with the definition of the `\fIList\fR` enum and a `\fItail\fR` method in Listing15\-25:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use crate::List::{Cons, Nil};
use std::cell::RefCell;
use std::rc::Rc;

#[derive(Debug)]
enum List {
    Cons(i32, RefCell<Rc<List>>),
    Nil,
}

impl List {
    fn tail(&self) \-> Option<&RefCell<Rc<List>>> {
        match self {
            Cons(_, item) => Some(item),
            Nil => None,
        }
    }
}

fn main() {}

.EE

.RE
Listing 15\-25: A cons list definition that holds a`\fIRefCell<T>\fR` so we can modify what a `\fICons\fR` variant is referring to
.P
We’re using another variation of the `\fIList\fR` definition from Listing 15\-5\. Thesecond element in the `\fICons\fR` variant is now `\fIRefCell<Rc<List>>\fR`, meaning thatinstead of having the ability to modify the `\fIi32\fR` value as we did in Listing15\-24, we want to modify which `\fIList\fR` value a `\fICons\fR` variant is pointing to\.We’re also adding a `\fItail\fR` method to make it convenient for us to access thesecond item if we have a `\fICons\fR` variant\.
.P
In Listing 15\-26, we’re adding a `\fImain\fR` function that uses the definitions inListing 15\-25\. This code creates a list in `\fIa\fR` and a list in `\fIb\fR` that points tothe list in `\fIa\fR`\. Then it modifies the list in `\fIa\fR` to point to `\fIb\fR`, creating areference cycle\. There are `\fIprintln!\fR` statements along the way to show what thereference counts are at various points in this process\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use crate::List::{Cons, Nil};
# use std::cell::RefCell;
# use std::rc::Rc;
# 
# #[derive(Debug)]
# enum List {
#     Cons(i32, RefCell<Rc<List>>),
#     Nil,
# }
# 
# impl List {
#     fn tail(&self) \-> Option<&RefCell<Rc<List>>> {
#         match self {
#             Cons(_, item) => Some(item),
#             Nil => None,
#         }
#     }
# }
# 
fn main() {
    let a = Rc::new(Cons(5, RefCell::new(Rc::new(Nil))));

    println!("a initial rc count = {}", Rc::strong_count(&a));
    println!("a next item = {:?}", a\.tail());

    let b = Rc::new(Cons(10, RefCell::new(Rc::clone(&a))));

    println!("a rc count after b creation = {}", Rc::strong_count(&a));
    println!("b initial rc count = {}", Rc::strong_count(&b));
    println!("b next item = {:?}", b\.tail());

    if let Some(link) = a\.tail() {
        *link\.borrow_mut() = Rc::clone(&b);
    }

    println!("b rc count after changing a = {}", Rc::strong_count(&b));
    println!("a rc count after changing a = {}", Rc::strong_count(&a));

    // Uncomment the next line to see that we have a cycle;
    // it will overflow the stack
    // println!("a next item = {:?}", a\.tail());
}

.EE

.RE
Listing 15\-26: Creating a reference cycle of two `\fIList\fR`values pointing to each other
.P
We create an `\fIRc<List>\fR` instance holding a `\fIList\fR` value in the variable `\fIa\fR`with an initial list of `\fI5, Nil\fR`\. We then create an `\fIRc<List>\fR` instanceholding another `\fIList\fR` value in the variable `\fIb\fR` that contains the value 10 andpoints to the list in `\fIa\fR`\.
.P
We modify `\fIa\fR` so it points to `\fIb\fR` instead of `\fINil\fR`, creating a cycle\. Wedo that by using the `\fItail\fR` method to get a reference to the`\fIRefCell<Rc<List>>\fR` in `\fIa\fR`, which we put in the variable `\fIlink\fR`\. Then we usethe `\fIborrow_mut\fR` method on the `\fIRefCell<Rc<List>>\fR` to change the value insidefrom an `\fIRc<List>\fR` that holds a `\fINil\fR` value to the `\fIRc<List>\fR` in `\fIb\fR`\.
.P
When we run this code, keeping the last `\fIprintln!\fR` commented out for themoment, we’ll get this output:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling cons\-list v0\.1\.0 (file:///projects/cons\-list)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.53s
     Running `target/debug/cons\-list`
a initial rc count = 1
a next item = Some(RefCell { value: Nil })
a rc count after b creation = 2
b initial rc count = 1
b next item = Some(RefCell { value: Cons(5, RefCell { value: Nil }) })
b rc count after changing a = 2
a rc count after changing a = 2

.EE

.RE
.P
The reference count of the `\fIRc<List>\fR` instances in both `\fIa\fR` and `\fIb\fR` are 2 afterwe change the list in `\fIa\fR` to point to `\fIb\fR`\. At the end of `\fImain\fR`, Rust drops thevariable `\fIb\fR`, which decreases the reference count of the `\fIRc<List>\fR` instancefrom 2 to 1\. The memory that `\fIRc<List>\fR` has on the heap won’t be dropped atthis point, because its reference count is 1, not 0\. Then Rust drops `\fIa\fR`, whichdecreases the reference count of the `\fIa\fR` `\fIRc<List>\fR` instance from 2 to 1 aswell\. This instance's memory can’t be dropped either, because the other`\fIRc<List>\fR` instance still refers to it\. The memory allocated to the list willremain uncollected forever\. To visualize this reference cycle, we’ve created adiagram in Figure 15\-4\.Figure 15\-4: A reference cycle of lists `\fIa\fR` and `\fIb\fR`pointing to each other
.P
If you uncomment the last `\fIprintln!\fR` and run the program, Rust will try toprint this cycle with `\fIa\fR` pointing to `\fIb\fR` pointing to `\fIa\fR` and so forth until itoverflows the stack\.
.P
In this case, right after we create the reference cycle, the program ends\. Theconsequences of this cycle aren’t very dire\. However, if a more complex programallocated lots of memory in a cycle and held onto it for a long time, theprogram would use more memory than it needed and might overwhelm the system,causing it to run out of available memory\.
.P
Creating reference cycles is not easily done, but it’s not impossible either\.If you have `\fIRefCell<T>\fR` values that contain `\fIRc<T>\fR` values or similar nestedcombinations of types with interior mutability and reference counting, you mustensure that you don’t create cycles; you can’t rely on Rust to catch them\.Creating a reference cycle would be a logic bug in your program that you shoulduse automated tests, code reviews, and other software development practices tominimize\.
.P
Another solution for avoiding reference cycles is reorganizing your datastructures so that some references express ownership and some references don’t\.As a result, you can have cycles made up of some ownership relationships andsome non\-ownership relationships, and only the ownership relationships affectwhether or not a value can be dropped\. In Listing 15\-25, we always want `\fICons\fR`variants to own their list, so reorganizing the data structure isn’t possible\.Let’s look at an example using graphs made up of parent nodes and child nodesto see when non\-ownership relationships are an appropriate way to preventreference cycles\.
.br

.br
\fBPreventing Reference Cycles: Turning an \fR
.br
==========================================
.br
`\fIRc<T>\fR` into a `\fIWeak<T>\fR`
.P
So far, we’ve demonstrated that calling `\fIRc::clone\fR` increases the`\fIstrong_count\fR` of an `\fIRc<T>\fR` instance, and an `\fIRc<T>\fR` instance is only cleanedup if its `\fIstrong_count\fR` is 0\. You can also create a \fIweak reference\fR to thevalue within an `\fIRc<T>\fR` instance by calling `\fIRc::downgrade\fR` and passing areference to the `\fIRc<T>\fR`\. When you call `\fIRc::downgrade\fR`, you get a smartpointer of type `\fIWeak<T>\fR`\. Instead of increasing the `\fIstrong_count\fR` in the`\fIRc<T>\fR` instance by 1, calling `\fIRc::downgrade\fR` increases the `\fIweak_count\fR` by 1\.The `\fIRc<T>\fR` type uses `\fIweak_count\fR` to keep track of how many `\fIWeak<T>\fR`references exist, similar to `\fIstrong_count\fR`\. The difference is the `\fIweak_count\fR`doesn’t need to be 0 for the `\fIRc<T>\fR` instance to be cleaned up\.
.P
Strong references are how you can share ownership of an `\fIRc<T>\fR` instance\. Weakreferences don’t express an ownership relationship\. They won’t cause areference cycle because any cycle involving some weak references will be brokenonce the strong reference count of values involved is 0\.
.P
Because the value that `\fIWeak<T>\fR` references might have been dropped, to doanything with the value that a `\fIWeak<T>\fR` is pointing to, you must make sure thevalue still exists\. Do this by calling the `\fIupgrade\fR` method on a `\fIWeak<T>\fR`instance, which will return an `\fIOption<Rc<T>>\fR`\. You’ll get a result of `\fISome\fR`if the `\fIRc<T>\fR` value has not been dropped yet and a result of `\fINone\fR` if the`\fIRc<T>\fR` value has been dropped\. Because `\fIupgrade\fR` returns an `\fIOption<Rc<T>>\fR`,Rust will ensure that the `\fISome\fR` case and the `\fINone\fR` case are handled, andthere won’t be an invalid pointer\.
.P
As an example, rather than using a list whose items know only about the nextitem, we’ll create a tree whose items know about their children items \fIand\fRtheir parent items\.
.br

.br
\fBCreating a Tree Data Structure: a \fR
.br
====================================
.br
`\fINode\fR` with Child Nodes
.P
To start, we’ll build a tree with nodes that know about their child nodes\.We’ll create a struct named `\fINode\fR` that holds its own `\fIi32\fR` value as well asreferences to its children `\fINode\fR` values:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::cell::RefCell;
use std::rc::Rc;

#[derive(Debug)]
struct Node {
    value: i32,
    children: RefCell<Vec<Rc<Node>>>,
}
# 
# fn main() {
#     let leaf = Rc::new(Node {
#         value: 3,
#         children: RefCell::new(vec![]),
#     });
# 
#     let branch = Rc::new(Node {
#         value: 5,
#         children: RefCell::new(vec![Rc::clone(&leaf)]),
#     });
# }

.EE

.RE
.P
We want a `\fINode\fR` to own its children, and we want to share that ownership withvariables so we can access each `\fINode\fR` in the tree directly\. To do this, wedefine the `\fIVec<T>\fR` items to be values of type `\fIRc<Node>\fR`\. We also want tomodify which nodes are children of another node, so we have a `\fIRefCell<T>\fR` in`\fIchildren\fR` around the `\fIVec<Rc<Node>>\fR`\.
.P
Next, we’ll use our struct definition and create one `\fINode\fR` instance named`\fIleaf\fR` with the value 3 and no children, and another instance named `\fIbranch\fR`with the value 5 and `\fIleaf\fR` as one of its children, as shown in Listing 15\-27:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::cell::RefCell;
# use std::rc::Rc;
# 
# #[derive(Debug)]
# struct Node {
#     value: i32,
#     children: RefCell<Vec<Rc<Node>>>,
# }
# 
fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        children: RefCell::new(vec![]),
    });

    let branch = Rc::new(Node {
        value: 5,
        children: RefCell::new(vec![Rc::clone(&leaf)]),
    });
}

.EE

.RE
Listing 15\-27: Creating a `\fIleaf\fR` node with no childrenand a `\fIbranch\fR` node with `\fIleaf\fR` as one of its children
.P
We clone the `\fIRc<Node>\fR` in `\fIleaf\fR` and store that in `\fIbranch\fR`, meaning the`\fINode\fR` in `\fIleaf\fR` now has two owners: `\fIleaf\fR` and `\fIbranch\fR`\. We can get from`\fIbranch\fR` to `\fIleaf\fR` through `\fIbranch\.children\fR`, but there’s no way to get from`\fIleaf\fR` to `\fIbranch\fR`\. The reason is that `\fIleaf\fR` has no reference to `\fIbranch\fR` anddoesn’t know they’re related\. We want `\fIleaf\fR` to know that `\fIbranch\fR` is itsparent\. We’ll do that next\.
.br

.br
\fBAdding a Reference from a Child to Its Parent\fR
.br
===============================================
.br

.P
To make the child node aware of its parent, we need to add a `\fIparent\fR` field toour `\fINode\fR` struct definition\. The trouble is in deciding what the type of`\fIparent\fR` should be\. We know it can’t contain an `\fIRc<T>\fR`, because that wouldcreate a reference cycle with `\fIleaf\.parent\fR` pointing to `\fIbranch\fR` and`\fIbranch\.children\fR` pointing to `\fIleaf\fR`, which would cause their `\fIstrong_count\fR`values to never be 0\.
.P
Thinking about the relationships another way, a parent node should own itschildren: if a parent node is dropped, its child nodes should be dropped aswell\. However, a child should not own its parent: if we drop a child node, theparent should still exist\. This is a case for weak references!
.P
So instead of `\fIRc<T>\fR`, we’ll make the type of `\fIparent\fR` use `\fIWeak<T>\fR`,specifically a `\fIRefCell<Weak<Node>>\fR`\. Now our `\fINode\fR` struct definition lookslike this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::cell::RefCell;
use std::rc::{Rc, Weak};

#[derive(Debug)]
struct Node {
    value: i32,
    parent: RefCell<Weak<Node>>,
    children: RefCell<Vec<Rc<Node>>>,
}
# 
# fn main() {
#     let leaf = Rc::new(Node {
#         value: 3,
#         parent: RefCell::new(Weak::new()),
#         children: RefCell::new(vec![]),
#     });
# 
#     println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());
# 
#     let branch = Rc::new(Node {
#         value: 5,
#         parent: RefCell::new(Weak::new()),
#         children: RefCell::new(vec![Rc::clone(&leaf)]),
#     });
# 
#     *leaf\.parent\.borrow_mut() = Rc::downgrade(&branch);
# 
#     println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());
# }

.EE

.RE
.P
A node will be able to refer to its parent node but doesn’t own its parent\.In Listing 15\-28, we update `\fImain\fR` to use this new definition so the `\fIleaf\fR`node will have a way to refer to its parent, `\fIbranch\fR`:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::cell::RefCell;
# use std::rc::{Rc, Weak};
# 
# #[derive(Debug)]
# struct Node {
#     value: i32,
#     parent: RefCell<Weak<Node>>,
#     children: RefCell<Vec<Rc<Node>>>,
# }
# 
fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());

    let branch = Rc::new(Node {
        value: 5,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![Rc::clone(&leaf)]),
    });

    *leaf\.parent\.borrow_mut() = Rc::downgrade(&branch);

    println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());
}

.EE

.RE
Listing 15\-28: A `\fIleaf\fR` node with a weak reference to itsparent node `\fIbranch\fR`
.P
Creating the `\fIleaf\fR` node looks similar to how creating the `\fIleaf\fR` node lookedin Listing 15\-27 with the exception of the `\fIparent\fR` field: `\fIleaf\fR` starts outwithout a parent, so we create a new, empty `\fIWeak<Node>\fR` reference instance\.
.P
At this point, when we try to get a reference to the parent of `\fIleaf\fR` by usingthe `\fIupgrade\fR` method, we get a `\fINone\fR` value\. We see this in the output from thefirst `\fIprintln!\fR` statement:
.RS
.IP \fBtext\fR 2

.br
.EX
leaf parent = None

.EE

.RE
.P
When we create the `\fIbranch\fR` node, it will also have a new `\fIWeak<Node>\fR`reference in the `\fIparent\fR` field, because `\fIbranch\fR` doesn’t have a parent node\.We still have `\fIleaf\fR` as one of the children of `\fIbranch\fR`\. Once we have the`\fINode\fR` instance in `\fIbranch\fR`, we can modify `\fIleaf\fR` to give it a `\fIWeak<Node>\fR`reference to its parent\. We use the `\fIborrow_mut\fR` method on the`\fIRefCell<Weak<Node>>\fR` in the `\fIparent\fR` field of `\fIleaf\fR`, and then we use the`\fIRc::downgrade\fR` function to create a `\fIWeak<Node>\fR` reference to `\fIbranch\fR` fromthe `\fIRc<Node>\fR` in `\fIbranch\.\fR`
.P
When we print the parent of `\fIleaf\fR` again, this time we’ll get a `\fISome\fR` variantholding `\fIbranch\fR`: now `\fIleaf\fR` can access its parent! When we print `\fIleaf\fR`, wealso avoid the cycle that eventually ended in a stack overflow like we had inListing 15\-26; the `\fIWeak<Node>\fR` references are printed as `\fI(Weak)\fR`:
.RS
.IP \fBtext\fR 2

.br
.EX
leaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) },
children: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) },
children: RefCell { value: [] } }] } })

.EE

.RE
.P
The lack of infinite output indicates that this code didn’t create a referencecycle\. We can also tell this by looking at the values we get from calling`\fIRc::strong_count\fR` and `\fIRc::weak_count\fR`\.
.br

.br
\fBVisualizing Changes to \fR
.br
=========================
.br
`\fIstrong_count\fR` and `\fIweak_count\fR`
.P
Let’s look at how the `\fIstrong_count\fR` and `\fIweak_count\fR` values of the `\fIRc<Node>\fR`instances change by creating a new inner scope and moving the creation of`\fIbranch\fR` into that scope\. By doing so, we can see what happens when `\fIbranch\fR` iscreated and then dropped when it goes out of scope\. The modifications are shownin Listing 15\-29:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# use std::cell::RefCell;
# use std::rc::{Rc, Weak};
# 
# #[derive(Debug)]
# struct Node {
#     value: i32,
#     parent: RefCell<Weak<Node>>,
#     children: RefCell<Vec<Rc<Node>>>,
# }
# 
fn main() {
    let leaf = Rc::new(Node {
        value: 3,
        parent: RefCell::new(Weak::new()),
        children: RefCell::new(vec![]),
    });

    println!(
        "leaf strong = {}, weak = {}",
        Rc::strong_count(&leaf),
        Rc::weak_count(&leaf),
    );

    {
        let branch = Rc::new(Node {
            value: 5,
            parent: RefCell::new(Weak::new()),
            children: RefCell::new(vec![Rc::clone(&leaf)]),
        });

        *leaf\.parent\.borrow_mut() = Rc::downgrade(&branch);

        println!(
            "branch strong = {}, weak = {}",
            Rc::strong_count(&branch),
            Rc::weak_count(&branch),
        );

        println!(
            "leaf strong = {}, weak = {}",
            Rc::strong_count(&leaf),
            Rc::weak_count(&leaf),
        );
    }

    println!("leaf parent = {:?}", leaf\.parent\.borrow()\.upgrade());
    println!(
        "leaf strong = {}, weak = {}",
        Rc::strong_count(&leaf),
        Rc::weak_count(&leaf),
    );
}

.EE

.RE
Listing 15\-29: Creating `\fIbranch\fR` in an inner scope andexamining strong and weak reference counts
.P
After `\fIleaf\fR` is created, its `\fIRc<Node>\fR` has a strong count of 1 and a weakcount of 0\. In the inner scope, we create `\fIbranch\fR` and associate it with`\fIleaf\fR`, at which point when we print the counts, the `\fIRc<Node>\fR` in `\fIbranch\fR`will have a strong count of 1 and a weak count of 1 (for `\fIleaf\.parent\fR` pointingto `\fIbranch\fR` with a `\fIWeak<Node>\fR`)\. When we print the counts in `\fIleaf\fR`, we’ll seeit will have a strong count of 2, because `\fIbranch\fR` now has a clone of the`\fIRc<Node>\fR` of `\fIleaf\fR` stored in `\fIbranch\.children\fR`, but will still have a weakcount of 0\.
.P
When the inner scope ends, `\fIbranch\fR` goes out of scope and the strong count ofthe `\fIRc<Node>\fR` decreases to 0, so its `\fINode\fR` is dropped\. The weak count of 1from `\fIleaf\.parent\fR` has no bearing on whether or not `\fINode\fR` is dropped, so wedon’t get any memory leaks!
.P
If we try to access the parent of `\fIleaf\fR` after the end of the scope, we’ll get`\fINone\fR` again\. At the end of the program, the `\fIRc<Node>\fR` in `\fIleaf\fR` has a strongcount of 1 and a weak count of 0, because the variable `\fIleaf\fR` is now the onlyreference to the `\fIRc<Node>\fR` again\.
.P
All of the logic that manages the counts and value dropping is built into`\fIRc<T>\fR` and `\fIWeak<T>\fR` and their implementations of the `\fIDrop\fR` trait\. Byspecifying that the relationship from a child to its parent should be a`\fIWeak<T>\fR` reference in the definition of `\fINode\fR`, you’re able to have parentnodes point to child nodes and vice versa without creating a reference cycleand memory leaks\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
This chapter covered how to use smart pointers to make different guarantees andtrade\-offs from those Rust makes by default with regular references\. The`\fIBox<T>\fR` type has a known size and points to data allocated on the heap\. The`\fIRc<T>\fR` type keeps track of the number of references to data on the heap sothat data can have multiple owners\. The `\fIRefCell<T>\fR` type with its interiormutability gives us a type that we can use when we need an immutable type butneed to change an inner value of that type; it also enforces the borrowingrules at runtime instead of at compile time\.
.P
Also discussed were the `\fIDeref\fR` and `\fIDrop\fR` traits, which enable a lot of thefunctionality of smart pointers\. We explored reference cycles that can causememory leaks and how to prevent them using `\fIWeak<T>\fR`\.
.P
If this chapter has piqued your interest and you want to implement your ownsmart pointers, check out 
.UR \.\./nomicon/index\.html
.UE
“The Rustonomicon” for more usefulinformation\.
.P
Next, we’ll talk about concurrency in Rust\. You’ll even learn about a few newsmart pointers\.
.SH "Fearless Concurrency"

.br

.br
\fBFearless Concurrency\fR
.br
======================
.br

.P
Handling concurrent programming safely and efficiently is another of Rust’smajor goals\. \fIConcurrent programming\fR, where different parts of a programexecute independently, and \fIparallel programming\fR, where different parts of aprogram execute at the same time, are becoming increasingly important as morecomputers take advantage of their multiple processors\. Historically,programming in these contexts has been difficult and error prone: Rust hopes tochange that\.
.P
Initially, the Rust team thought that ensuring memory safety and preventingconcurrency problems were two separate challenges to be solved with differentmethods\. Over time, the team discovered that the ownership and type systems area powerful set of tools to help manage memory safety \fIand\fR concurrencyproblems! By leveraging ownership and type checking, many concurrency errorsare compile\-time errors in Rust rather than runtime errors\. Therefore, ratherthan making you spend lots of time trying to reproduce the exact circumstancesunder which a runtime concurrency bug occurs, incorrect code will refuse tocompile and present an error explaining the problem\. As a result, you can fixyour code while you’re working on it rather than potentially after it has beenshipped to production\. We’ve nicknamed this aspect of Rust \fIfearless\fR\fIconcurrency\fR\. Fearless concurrency allows you to write code that is free ofsubtle bugs and is easy to refactor without introducing new bugs\.
.P
Note: For simplicity’s sake, we’ll refer to many of the problems as\fIconcurrent\fR rather than being more precise by saying \fIconcurrent and/or\fRparallel\. If this book were about concurrency and/or parallelism, we’d bemore specific\. For this chapter, please mentally substitute \fIconcurrent\fRand/or parallel whenever we use \fIconcurrent\fR\.
.P
Many languages are dogmatic about the solutions they offer for handlingconcurrent problems\. For example, Erlang has elegant functionality formessage\-passing concurrency but has only obscure ways to share state betweenthreads\. Supporting only a subset of possible solutions is a reasonablestrategy for higher\-level languages, because a higher\-level language promisesbenefits from giving up some control to gain abstractions\. However, lower\-levellanguages are expected to provide the solution with the best performance in anygiven situation and have fewer abstractions over the hardware\. Therefore, Rustoffers a variety of tools for modeling problems in whatever way is appropriatefor your situation and requirements\.
.P
Here are the topics we’ll cover in this chapter:
.P
How to create threads to run multiple pieces of code at the same time\fIMessage\-passing\fR concurrency, where channels send messages between threads\fIShared\-state\fR concurrency, where multiple threads have access to some pieceof data
.P
The `\fISync\fR` and `\fISend\fR` traits, which extend Rust’s concurrency guarantees touser\-defined types as well as types provided by the standard library
.SH "Using Threads to Run Code Simultaneously"

.br

.br
\fBUsing Threads to Run Code Simultaneously\fR
.br
==========================================
.br

.P
In most current operating systems, an executed program’s code is run in a\fIprocess\fR, and the operating system manages multiple processes at once\. Withinyour program, you can also have independent parts that run simultaneously\. Thefeatures that run these independent parts are called \fIthreads\fR\.
.P
Splitting the computation in your program into multiple threads can improveperformance because the program does multiple tasks at the same time, but italso adds complexity\. Because threads can run simultaneously, there’s noinherent guarantee about the order in which parts of your code on differentthreads will run\. This can lead to problems, such as:
.P
Race conditions, where threads are accessing data or resources in aninconsistent order
.P
Deadlocks, where two threads are waiting for each other to finish using aresource the other thread has, preventing both threads from continuing
.P
Bugs that happen only in certain situations and are hard to reproduce and fixreliably
.P
Rust attempts to mitigate the negative effects of using threads, butprogramming in a multithreaded context still takes careful thought and requiresa code structure that is different from that in programs running in a singlethread\.
.P
Programming languages implement threads in a few different ways\. Many operatingsystems provide an API for creating new threads\. This model where a languagecalls the operating system APIs to create threads is sometimes called \fI1:1\fR,meaning one operating system thread per one language thread\.
.P
Many programming languages provide their own special implementation of threads\.Programming language\-provided threads are known as \fIgreen\fR threads, andlanguages that use these green threads will execute them in the context of adifferent number of operating system threads\. For this reason, thegreen\-threaded model is called the \fIM:N\fR model: there are `\fIM\fR` green threads per`\fIN\fR` operating system threads, where `\fIM\fR` and `\fIN\fR` are not necessarily the samenumber\.
.P
Each model has its own advantages and trade\-offs, and the trade\-off mostimportant to Rust is runtime support\. \fIRuntime\fR is a confusing term and canhave different meanings in different contexts\.
.P
In this context, by \fIruntime\fR we mean code that is included by the language inevery binary\. This code can be large or small depending on the language, butevery non\-assembly language will have some amount of runtime code\. For thatreason, colloquially when people say a language has “no runtime,” they oftenmean “small runtime\.” Smaller runtimes have fewer features but have theadvantage of resulting in smaller binaries, which make it easier to combine thelanguage with other languages in more contexts\. Although many languages areokay with increasing the runtime size in exchange for more features, Rust needsto have nearly no runtime and cannot compromise on being able to call into C tomaintain performance\.
.P
The green\-threading M:N model requires a larger language runtime to managethreads\. As such, the Rust standard library only provides an implementation of1:1 threading\. Because Rust is such a low\-level language, there are crates thatimplement M:N threading if you would rather trade overhead for aspects such asmore control over which threads run when and lower costs of context switching,for example\.
.P
Now that we’ve defined threads in Rust, let’s explore how to use thethread\-related API provided by the standard library\.
.br

.br
\fBCreating a New Thread with \fR
.br
=============================
.br
`\fIspawn\fR`
.P
To create a new thread, we call the `\fIthread::spawn\fR` function and pass it aclosure (we talked about closures in Chapter 13) containing the code we want torun in the new thread\. The example in Listing 16\-1 prints some text from a mainthread and other text from a new thread:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;
use std::time::Duration;

fn main() {
    thread::spawn(|| {
        for i in 1\.\.10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1\.\.5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
}

.EE

.RE
Listing 16\-1: Creating a new thread to print one thingwhile the main thread prints something else
.P
Note that with this function, the new thread will be stopped when the mainthread ends, whether or not it has finished running\. The output from thisprogram might be a little different every time, but it will look similar to thefollowing:
.RS
.IP \fBtext\fR 2

.br
.EX
hi number 1 from the main thread!
hi number 1 from the spawned thread!
hi number 2 from the main thread!
hi number 2 from the spawned thread!
hi number 3 from the main thread!
hi number 3 from the spawned thread!
hi number 4 from the main thread!
hi number 4 from the spawned thread!
hi number 5 from the spawned thread!

.EE

.RE
.P
The calls to `\fIthread::sleep\fR` force a thread to stop its execution for a shortduration, allowing a different thread to run\. The threads will probably taketurns, but that isn’t guaranteed: it depends on how your operating systemschedules the threads\. In this run, the main thread printed first, even thoughthe print statement from the spawned thread appears first in the code\. And eventhough we told the spawned thread to print until `\fIi\fR` is 9, it only got to 5before the main thread shut down\.
.P
If you run this code and only see output from the main thread, or don’t see anyoverlap, try increasing the numbers in the ranges to create more opportunitiesfor the operating system to switch between the threads\.
.br

.br
\fBWaiting for All Threads to Finish Using \fR
.br
==========================================
.br
`\fIjoin\fR` Handles
.P
The code in Listing 16\-1 not only stops the spawned thread prematurely most ofthe time due to the main thread ending, but also can’t guarantee that thespawned thread will get to run at all\. The reason is that there is no guaranteeon the order in which threads run!
.P
We can fix the problem of the spawned thread not getting to run, or not gettingto run completely, by saving the return value of `\fIthread::spawn\fR` in a variable\.The return type of `\fIthread::spawn\fR` is `\fIJoinHandle\fR`\. A `\fIJoinHandle\fR` is an ownedvalue that, when we call the `\fIjoin\fR` method on it, will wait for its thread tofinish\. Listing 16\-2 shows how to use the `\fIJoinHandle\fR` of the thread we createdin Listing 16\-1 and call `\fIjoin\fR` to make sure the spawned thread finishes before`\fImain\fR` exits:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;
use std::time::Duration;

fn main() {
    let handle = thread::spawn(|| {
        for i in 1\.\.10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    for i in 1\.\.5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }

    handle\.join()\.unwrap();
}

.EE

.RE
Listing 16\-2: Saving a `\fIJoinHandle\fR` from `\fIthread::spawn\fR`to guarantee the thread is run to completion
.P
Calling `\fIjoin\fR` on the handle blocks the thread currently running until thethread represented by the handle terminates\. \fIBlocking\fR a thread means thatthread is prevented from performing work or exiting\. Because we’ve put the callto `\fIjoin\fR` after the main thread’s `\fIfor\fR` loop, running Listing 16\-2 shouldproduce output similar to this:
.RS
.IP \fBtext\fR 2

.br
.EX
hi number 1 from the main thread!
hi number 2 from the main thread!
hi number 1 from the spawned thread!
hi number 3 from the main thread!
hi number 2 from the spawned thread!
hi number 4 from the main thread!
hi number 3 from the spawned thread!
hi number 4 from the spawned thread!
hi number 5 from the spawned thread!
hi number 6 from the spawned thread!
hi number 7 from the spawned thread!
hi number 8 from the spawned thread!
hi number 9 from the spawned thread!

.EE

.RE
.P
The two threads continue alternating, but the main thread waits because of thecall to `\fIhandle\.join()\fR` and does not end until the spawned thread is finished\.
.P
But let’s see what happens when we instead move `\fIhandle\.join()\fR` before the`\fIfor\fR` loop in `\fImain\fR`, like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;
use std::time::Duration;

fn main() {
    let handle = thread::spawn(|| {
        for i in 1\.\.10 {
            println!("hi number {} from the spawned thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    });

    handle\.join()\.unwrap();

    for i in 1\.\.5 {
        println!("hi number {} from the main thread!", i);
        thread::sleep(Duration::from_millis(1));
    }
}

.EE

.RE
.P
The main thread will wait for the spawned thread to finish and then run its`\fIfor\fR` loop, so the output won’t be interleaved anymore, as shown here:
.RS
.IP \fBtext\fR 2

.br
.EX
hi number 1 from the spawned thread!
hi number 2 from the spawned thread!
hi number 3 from the spawned thread!
hi number 4 from the spawned thread!
hi number 5 from the spawned thread!
hi number 6 from the spawned thread!
hi number 7 from the spawned thread!
hi number 8 from the spawned thread!
hi number 9 from the spawned thread!
hi number 1 from the main thread!
hi number 2 from the main thread!
hi number 3 from the main thread!
hi number 4 from the main thread!

.EE

.RE
.P
Small details, such as where `\fIjoin\fR` is called, can affect whether or not yourthreads run at the same time\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fImove\fR` Closures with Threads
.P
The `\fImove\fR` closure is often used alongside `\fIthread::spawn\fR` because it allowsyou to use data from one thread in another thread\.
.P
In Chapter 13, we mentioned we can use the `\fImove\fR` keyword before the parameterlist of a closure to force the closure to take ownership of the values it usesin the environment\. This technique is especially useful when creating newthreads in order to transfer ownership of values from one thread to another\.
.P
Notice in Listing 16\-1 that the closure we pass to `\fIthread::spawn\fR` takes noarguments: we’re not using any data from the main thread in the spawnedthread’s code\. To use data from the main thread in the spawned thread, thespawned thread’s closure must capture the values it needs\. Listing 16\-3 showsan attempt to create a vector in the main thread and use it in the spawnedthread\. However, this won’t yet work, as you’ll see in a moment\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(|| {
        println!("Here's a vector: {:?}", v);
    });

    handle\.join()\.unwrap();
}

.EE

.RE
Listing 16\-3: Attempting to use a vector created by themain thread in another thread
.P
The closure uses `\fIv\fR`, so it will capture `\fIv\fR` and make it part of the closure’senvironment\. Because `\fIthread::spawn\fR` runs this closure in a new thread, weshould be able to access `\fIv\fR` inside that new thread\. But when we compile thisexample, we get the following error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling threads v0\.1\.0 (file:///projects/threads)
error[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function
 \-\-> src/main\.rs:6:32
  |
6 |     let handle = thread::spawn(|| {
  |                                ^^ may outlive borrowed value `v`
7 |         println!("Here's a vector: {:?}", v);
  |                                           \- `v` is borrowed here
  |
note: function requires argument type to outlive `'static`
 \-\-> src/main\.rs:6:18
  |
6 |       let handle = thread::spawn(|| {
  |  __________________^
7 | |         println!("Here's a vector: {:?}", v);
8 | |     });
  | |______^
help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword
  |
6 |     let handle = thread::spawn(move || {
  |                                ^^^^^^^

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0373`\.
error: could not compile `threads`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Rust \fIinfers\fR how to capture `\fIv\fR`, and because `\fIprintln!\fR` only needs a referenceto `\fIv\fR`, the closure tries to borrow `\fIv\fR`\. However, there’s a problem: Rust can’ttell how long the spawned thread will run, so it doesn’t know if the referenceto `\fIv\fR` will always be valid\.
.P
Listing 16\-4 provides a scenario that’s more likely to have a reference to `\fIv\fR`that won’t be valid:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(|| {
        println!("Here's a vector: {:?}", v);
    });

    drop(v); // oh no!

    handle\.join()\.unwrap();
}

.EE

.RE
Listing 16\-4: A thread with a closure that attempts tocapture a reference to `\fIv\fR` from a main thread that drops `\fIv\fR`
.P
If we were allowed to run this code, there’s a possibility the spawned threadwould be immediately put in the background without running at all\. The spawnedthread has a reference to `\fIv\fR` inside, but the main thread immediately drops`\fIv\fR`, using the `\fIdrop\fR` function we discussed in Chapter 15\. Then, when thespawned thread starts to execute, `\fIv\fR` is no longer valid, so a reference to itis also invalid\. Oh no!
.P
To fix the compiler error in Listing 16\-3, we can use the error message’sadvice:
.RS
.IP \fBtext\fR 2

.br
.EX
help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword
  |
6 |     let handle = thread::spawn(move || {
  |                                ^^^^^^^

.EE

.RE
.P
By adding the `\fImove\fR` keyword before the closure, we force the closure to takeownership of the values it’s using rather than allowing Rust to infer that itshould borrow the values\. The modification to Listing 16\-3 shown in Listing16\-5 will compile and run as we intend:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::thread;

fn main() {
    let v = vec![1, 2, 3];

    let handle = thread::spawn(move || {
        println!("Here's a vector: {:?}", v);
    });

    handle\.join()\.unwrap();
}

.EE

.RE
Listing 16\-5: Using the `\fImove\fR` keyword to force a closureto take ownership of the values it uses
.P
What would happen to the code in Listing 16\-4 where the main thread called`\fIdrop\fR` if we use a `\fImove\fR` closure? Would `\fImove\fR` fix that case? Unfortunately,no; we would get a different error because what Listing 16\-4 is trying to doisn’t allowed for a different reason\. If we added `\fImove\fR` to the closure, wewould move `\fIv\fR` into the closure’s environment, and we could no longer call`\fIdrop\fR` on it in the main thread\. We would get this compiler error instead:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling threads v0\.1\.0 (file:///projects/threads)
error[E0382]: use of moved value: `v`
  \-\-> src/main\.rs:10:10
   |
4  |     let v = vec![1, 2, 3];
   |         \- move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait
5  | 
6  |     let handle = thread::spawn(move || {
   |                                \-\-\-\-\-\-\- value moved into closure here
7  |         println!("Here's a vector: {:?}", v);
   |                                           \- variable moved due to use in closure
\.\.\.
10 |     drop(v); // oh no!
   |          ^ value used here after move

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `threads`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Rust’s ownership rules have saved us again! We got an error from the code inListing 16\-3 because Rust was being conservative and only borrowing `\fIv\fR` for thethread, which meant the main thread could theoretically invalidate the spawnedthread’s reference\. By telling Rust to move ownership of `\fIv\fR` to the spawnedthread, we’re guaranteeing Rust that the main thread won’t use `\fIv\fR` anymore\. Ifwe change Listing 16\-4 in the same way, we’re then violating the ownershiprules when we try to use `\fIv\fR` in the main thread\. The `\fImove\fR` keyword overridesRust’s conservative default of borrowing; it doesn’t let us violate theownership rules\.
.P
With a basic understanding of threads and the thread API, let’s look at what wecan \fIdo\fR with threads\.
.SH "Using Message Passing to Transfer Data Between Threads"

.br

.br
\fBUsing Message Passing to Transfer Data Between Threads\fR
.br
========================================================
.br

.P
One increasingly popular approach to ensuring safe concurrency is \fImessage\fRpassing, where threads or actors communicate by sending each other messagescontaining data\. Here’s the idea in a slogan from 
.UR https://golang\.org/doc/effective_go\.html#concurrency
.UE
the Go languagedocumentation:“Do not communicate by sharing memory; instead, share memory by communicating\.”
.P
One major tool Rust has for accomplishing message\-sending concurrency is the\fIchannel\fR, a programming concept that Rust’s standard library provides animplementation of\. You can imagine a channel in programming as being like achannel of water, such as a stream or a river\. If you put something like arubber duck or boat into a stream, it will travel downstream to the end of thewaterway\.
.P
A channel in programming has two halves: a transmitter and a receiver\. Thetransmitter half is the upstream location where you put rubber ducks into theriver, and the receiver half is where the rubber duck ends up downstream\. Onepart of your code calls methods on the transmitter with the data you want tosend, and another part checks the receiving end for arriving messages\. Achannel is said to be \fIclosed\fR if either the transmitter or receiver half isdropped\.
.P
Here, we’ll work up to a program that has one thread to generate values andsend them down a channel, and another thread that will receive the values andprint them out\. We’ll be sending simple values between threads using a channelto illustrate the feature\. Once you’re familiar with the technique, you coulduse channels to implement a chat system or a system where many threads performparts of a calculation and send the parts to one thread that aggregates theresults\.
.P
First, in Listing 16\-6, we’ll create a channel but not do anything with it\.Note that this won’t compile yet because Rust can’t tell what type of values wewant to send over the channel\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::sync::mpsc;

fn main() {
    let (tx, rx) = mpsc::channel();
}

.EE

.RE
Listing 16\-6: Creating a channel and assigning the twohalves to `\fItx\fR` and `\fIrx\fR`
.P
We create a new channel using the `\fImpsc::channel\fR` function; `\fImpsc\fR` stands for\fImultiple producer, single consumer\fR\. In short, the way Rust’s standard libraryimplements channels means a channel can have multiple \fIsending\fR ends thatproduce values but only one \fIreceiving\fR end that consumes those values\. Imaginemultiple streams flowing together into one big river: everything sent down anyof the streams will end up in one river at the end\. We’ll start with a singleproducer for now, but we’ll add multiple producers when we get this exampleworking\.
.P
The `\fImpsc::channel\fR` function returns a tuple, the first element of which is thesending end and the second element is the receiving end\. The abbreviations `\fItx\fR`and `\fIrx\fR` are traditionally used in many fields for \fItransmitter\fR and \fIreceiver\fRrespectively, so we name our variables as such to indicate each end\. We’reusing a `\fIlet\fR` statement with a pattern that destructures the tuples; we’lldiscuss the use of patterns in `\fIlet\fR` statements and destructuring in Chapter18\. Using a `\fIlet\fR` statement this way is a convenient approach to extract thepieces of the tuple returned by `\fImpsc::channel\fR`\.
.P
Let’s move the transmitting end into a spawned thread and have it send onestring so the spawned thread is communicating with the main thread, as shown inListing 16\-7\. This is like putting a rubber duck in the river upstream orsending a chat message from one thread to another\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::sync::mpsc;
use std::thread;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx\.send(val)\.unwrap();
    });
}

.EE

.RE
Listing 16\-7: Moving `\fItx\fR` to a spawned thread and sending“hi”
.P
Again, we’re using `\fIthread::spawn\fR` to create a new thread and then using `\fImove\fR`to move `\fItx\fR` into the closure so the spawned thread owns `\fItx\fR`\. The spawnedthread needs to own the transmitting end of the channel to be able to sendmessages through the channel\.
.P
The transmitting end has a `\fIsend\fR` method that takes the value we want to send\.The `\fIsend\fR` method returns a `\fIResult<T, E>\fR` type, so if the receiving end hasalready been dropped and there’s nowhere to send a value, the send operationwill return an error\. In this example, we’re calling `\fIunwrap\fR` to panic in caseof an error\. But in a real application, we would handle it properly: return toChapter 9 to review strategies for proper error handling\.
.P
In Listing 16\-8, we’ll get the value from the receiving end of the channel inthe main thread\. This is like retrieving the rubber duck from the water at theend of the river or like getting a chat message\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::sync::mpsc;
use std::thread;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx\.send(val)\.unwrap();
    });

    let received = rx\.recv()\.unwrap();
    println!("Got: {}", received);
}

.EE

.RE
Listing 16\-8: Receiving the value “hi” in the main threadand printing it
.P
The receiving end of a channel has two useful methods: `\fIrecv\fR` and `\fItry_recv\fR`\.We’re using `\fIrecv\fR`, short for \fIreceive\fR, which will block the main thread’sexecution and wait until a value is sent down the channel\. Once a value issent, `\fIrecv\fR` will return it in a `\fIResult<T, E>\fR`\. When the sending end of thechannel closes, `\fIrecv\fR` will return an error to signal that no more values willbe coming\.
.P
The `\fItry_recv\fR` method doesn’t block, but will instead return a `\fIResult<T, E>\fR`immediately: an `\fIOk\fR` value holding a message if one is available and an `\fIErr\fR`value if there aren’t any messages this time\. Using `\fItry_recv\fR` is useful ifthis thread has other work to do while waiting for messages: we could write aloop that calls `\fItry_recv\fR` every so often, handles a message if one isavailable, and otherwise does other work for a little while until checkingagain\.
.P
We’ve used `\fIrecv\fR` in this example for simplicity; we don’t have any other workfor the main thread to do other than wait for messages, so blocking the mainthread is appropriate\.
.P
When we run the code in Listing 16\-8, we’ll see the value printed from the mainthread:
.RS
.IP \fBtext\fR 2

.br
.EX
Got: hi

.EE

.RE
.P
Perfect!
.br

.br
\fBChannels and Ownership Transference\fR
.br
=====================================
.br

.P
The ownership rules play a vital role in message sending because they help youwrite safe, concurrent code\. Preventing errors in concurrent programming is theadvantage of thinking about ownership throughout your Rust programs\. Let’s doan experiment to show how channels and ownership work together to preventproblems: we’ll try to use a `\fIval\fR` value in the spawned thread \fIafter\fR we’vesent it down the channel\. Try compiling the code in Listing 16\-9 to see whythis code isn’t allowed:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::sync::mpsc;
use std::thread;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let val = String::from("hi");
        tx\.send(val)\.unwrap();
        println!("val is {}", val);
    });

    let received = rx\.recv()\.unwrap();
    println!("Got: {}", received);
}

.EE

.RE
Listing 16\-9: Attempting to use `\fIval\fR` after we’ve sent itdown the channel
.P
Here, we try to print `\fIval\fR` after we’ve sent it down the channel via `\fItx\.send\fR`\.Allowing this would be a bad idea: once the value has been sent to anotherthread, that thread could modify or drop it before we try to use the valueagain\. Potentially, the other thread’s modifications could cause errors orunexpected results due to inconsistent or nonexistent data\. However, Rust givesus an error if we try to compile the code in Listing 16\-9:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling message\-passing v0\.1\.0 (file:///projects/message\-passing)
error[E0382]: borrow of moved value: `val`
  \-\-> src/main\.rs:10:31
   |
8  |         let val = String::from("hi");
   |             \-\-\- move occurs because `val` has type `String`, which does not implement the `Copy` trait
9  |         tx\.send(val)\.unwrap();
   |                 \-\-\- value moved here
10 |         println!("val is {}", val);
   |                               ^^^ value borrowed here after move

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `message\-passing`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Our concurrency mistake has caused a compile time error\. The `\fIsend\fR` functiontakes ownership of its parameter, and when the value is moved, the receivertakes ownership of it\. This stops us from accidentally using the value againafter sending it; the ownership system checks that everything is okay\.
.br

.br
\fBSending Multiple Values and Seeing the Receiver Waiting\fR
.br
=========================================================
.br

.P
The code in Listing 16\-8 compiled and ran, but it didn’t clearly show us thattwo separate threads were talking to each other over the channel\. In Listing16\-10 we’ve made some modifications that will prove the code in Listing 16\-8 isrunning concurrently: the spawned thread will now send multiple messages andpause for a second between each message\.Filename: src/main\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::sync::mpsc;
use std::thread;
use std::time::Duration;

fn main() {
    let (tx, rx) = mpsc::channel();

    thread::spawn(move || {
        let vals = vec![
            String::from("hi"),
            String::from("from"),
            String::from("the"),
            String::from("thread"),
        ];

        for val in vals {
            tx\.send(val)\.unwrap();
            thread::sleep(Duration::from_secs(1));
        }
    });

    for received in rx {
        println!("Got: {}", received);
    }
}

.EE

.RE
Listing 16\-10: Sending multiple messages and pausingbetween each
.P
This time, the spawned thread has a vector of strings that we want to send tothe main thread\. We iterate over them, sending each individually, and pausebetween each by calling the `\fIthread::sleep\fR` function with a `\fIDuration\fR` value of1 second\.
.P
In the main thread, we’re not calling the `\fIrecv\fR` function explicitly anymore:instead, we’re treating `\fIrx\fR` as an iterator\. For each value received, we’reprinting it\. When the channel is closed, iteration will end\.
.P
When running the code in Listing 16\-10, you should see the following outputwith a 1\-second pause in between each line:
.RS
.IP \fBtext\fR 2

.br
.EX
Got: hi
Got: from
Got: the
Got: thread

.EE

.RE
.P
Because we don’t have any code that pauses or delays in the `\fIfor\fR` loop in themain thread, we can tell that the main thread is waiting to receive values fromthe spawned thread\.
.br

.br
\fBCreating Multiple Producers by Cloning the Transmitter\fR
.br
========================================================
.br

.P
Earlier we mentioned that `\fImpsc\fR` was an acronym for \fImultiple producer,\fRsingle consumer\. Let’s put `\fImpsc\fR` to use and expand the code in Listing 16\-10to create multiple threads that all send values to the same receiver\. We can doso by cloning the transmitting half of the channel, as shown in Listing 16\-11:Filename: src/main\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::thread;
# use std::time::Duration;
# 
# fn main() {
    // \-\-snip\-\-

    let (tx, rx) = mpsc::channel();

    let tx1 = tx\.clone();
    thread::spawn(move || {
        let vals = vec![
            String::from("hi"),
            String::from("from"),
            String::from("the"),
            String::from("thread"),
        ];

        for val in vals {
            tx1\.send(val)\.unwrap();
            thread::sleep(Duration::from_secs(1));
        }
    });

    thread::spawn(move || {
        let vals = vec![
            String::from("more"),
            String::from("messages"),
            String::from("for"),
            String::from("you"),
        ];

        for val in vals {
            tx\.send(val)\.unwrap();
            thread::sleep(Duration::from_secs(1));
        }
    });

    for received in rx {
        println!("Got: {}", received);
    }

    // \-\-snip\-\-
# }

.EE

.RE
Listing 16\-11: Sending multiple messages from multipleproducers
.P
This time, before we create the first spawned thread, we call `\fIclone\fR` on thesending end of the channel\. This will give us a new sending handle we can passto the first spawned thread\. We pass the original sending end of the channel toa second spawned thread\. This gives us two threads, each sending differentmessages to the receiving end of the channel\.
.P
When you run the code, your output should look something like this:
.RS
.IP \fBtext\fR 2

.br
.EX
Got: hi
Got: more
Got: from
Got: messages
Got: for
Got: the
Got: thread
Got: you

.EE

.RE
.P
You might see the values in another order; it depends on your system\. This iswhat makes concurrency interesting as well as difficult\. If you experiment with`\fIthread::sleep\fR`, giving it various values in the different threads, each runwill be more nondeterministic and create different output each time\.
.P
Now that we’ve looked at how channels work, let’s look at a different method ofconcurrency\.
.SH "Shared\-State Concurrency"

.br

.br
\fBShared\-State Concurrency\fR
.br
==========================
.br

.P
Message passing is a fine way of handling concurrency, but it’s not the onlyone\. Consider this part of the slogan from the Go language documentation again:“do not communicate by sharing memory\.”
.P
What would communicating by sharing memory look like? In addition, why wouldmessage\-passing enthusiasts not use it and do the opposite instead?
.P
In a way, channels in any programming language are similar to single ownership,because once you transfer a value down a channel, you should no longer use thatvalue\. Shared memory concurrency is like multiple ownership: multiple threadscan access the same memory location at the same time\. As you saw in Chapter 15,where smart pointers made multiple ownership possible, multiple ownership canadd complexity because these different owners need managing\. Rust’s type systemand ownership rules greatly assist in getting this management correct\. For anexample, let’s look at mutexes, one of the more common concurrency primitivesfor shared memory\.
.br

.br
\fBUsing Mutexes to Allow Access to Data from One Thread at a Time\fR
.br
=================================================================
.br
\fIMutex\fR is an abbreviation for \fImutual exclusion\fR, as in, a mutex allows onlyone thread to access some data at any given time\. To access the data in amutex, a thread must first signal that it wants access by asking to acquire themutex’s \fIlock\fR\. The lock is a data structure that is part of the mutex thatkeeps track of who currently has exclusive access to the data\. Therefore, themutex is described as \fIguarding\fR the data it holds via the locking system\.
.P
Mutexes have a reputation for being difficult to use because you have toremember two rules:
.P
You must attempt to acquire the lock before using the data\.
.P
When you’re done with the data that the mutex guards, you must unlock thedata so other threads can acquire the lock\.
.P
For a real\-world metaphor for a mutex, imagine a panel discussion at aconference with only one microphone\. Before a panelist can speak, they have toask or signal that they want to use the microphone\. When they get themicrophone, they can talk for as long as they want to and then hand themicrophone to the next panelist who requests to speak\. If a panelist forgets tohand the microphone off when they’re finished with it, no one else is able tospeak\. If management of the shared microphone goes wrong, the panel won’t workas planned!
.P
Management of mutexes can be incredibly tricky to get right, which is why somany people are enthusiastic about channels\. However, thanks to Rust’s typesystem and ownership rules, you can’t get locking and unlocking wrong\.
.br

.br
\fBThe API of \fR
.br
=============
.br
`\fIMutex<T>\fR`
.P
As an example of how to use a mutex, let’s start by using a mutex in asingle\-threaded context, as shown in Listing 16\-12:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::sync::Mutex;

fn main() {
    let m = Mutex::new(5);

    {
        let mut num = m\.lock()\.unwrap();
        *num = 6;
    }

    println!("m = {:?}", m);
}

.EE

.RE
Listing 16\-12: Exploring the API of `\fIMutex<T>\fR` in asingle\-threaded context for simplicity
.P
As with many types, we create a `\fIMutex<T>\fR` using the associated function `\fInew\fR`\.To access the data inside the mutex, we use the `\fIlock\fR` method to acquire thelock\. This call will block the current thread so it can’t do any work untilit’s our turn to have the lock\.
.P
The call to `\fIlock\fR` would fail if another thread holding the lock panicked\. Inthat case, no one would ever be able to get the lock, so we’ve chosen to`\fIunwrap\fR` and have this thread panic if we’re in that situation\.
.P
After we’ve acquired the lock, we can treat the return value, named `\fInum\fR` inthis case, as a mutable reference to the data inside\. The type system ensuresthat we acquire a lock before using the value in `\fIm\fR`: `\fIMutex<i32>\fR` is not an`\fIi32\fR`, so we \fImust\fR acquire the lock to be able to use the `\fIi32\fR` value\. Wecan’t forget; the type system won’t let us access the inner `\fIi32\fR` otherwise\.
.P
As you might suspect, `\fIMutex<T>\fR` is a smart pointer\. More accurately, the callto `\fIlock\fR` \fIreturns\fR a smart pointer called `\fIMutexGuard\fR`, wrapped in a`\fILockResult\fR` that we handled with the call to `\fIunwrap\fR`\. The `\fIMutexGuard\fR` smartpointer implements `\fIDeref\fR` to point at our inner data; the smart pointer alsohas a `\fIDrop\fR` implementation that releases the lock automatically when a`\fIMutexGuard\fR` goes out of scope, which happens at the end of the inner scope inListing 16\-12\. As a result, we don’t risk forgetting to release the lock andblocking the mutex from being used by other threads because the lock releasehappens automatically\.
.P
After dropping the lock, we can print the mutex value and see that we were ableto change the inner `\fIi32\fR` to 6\.
.br

.br
\fBSharing a \fR
.br
============
.br
`\fIMutex<T>\fR` Between Multiple Threads
.P
Now, let’s try to share a value between multiple threads using `\fIMutex<T>\fR`\.We’ll spin up 10 threads and have them each increment a counter value by 1, sothe counter goes from 0 to 10\. The next example in Listing 16\-13 will havea compiler error, and we’ll use that error to learn more about using`\fIMutex<T>\fR` and how Rust helps us use it correctly\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::sync::Mutex;
use std::thread;

fn main() {
    let counter = Mutex::new(0);
    let mut handles = vec![];

    for _ in 0\.\.10 {
        let handle = thread::spawn(move || {
            let mut num = counter\.lock()\.unwrap();

            *num += 1;
        });
        handles\.push(handle);
    }

    for handle in handles {
        handle\.join()\.unwrap();
    }

    println!("Result: {}", *counter\.lock()\.unwrap());
}

.EE

.RE
Listing 16\-13: Ten threads each increment a counterguarded by a `\fIMutex<T>\fR`
.P
We create a `\fIcounter\fR` variable to hold an `\fIi32\fR` inside a `\fIMutex<T>\fR`, as wedid in Listing 16\-12\. Next, we create 10 threads by iterating over a rangeof numbers\. We use `\fIthread::spawn\fR` and give all the threads the same closure,one that moves the counter into the thread, acquires a lock on the `\fIMutex<T>\fR`by calling the `\fIlock\fR` method, and then adds 1 to the value in the mutex\. When athread finishes running its closure, `\fInum\fR` will go out of scope and release thelock so another thread can acquire it\.
.P
In the main thread, we collect all the join handles\. Then, as we did in Listing16\-2, we call `\fIjoin\fR` on each handle to make sure all the threads finish\. Atthat point, the main thread will acquire the lock and print the result of thisprogram\.
.P
We hinted that this example wouldn’t compile\. Now let’s find out why!
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling shared\-state v0\.1\.0 (file:///projects/shared\-state)
error[E0382]: use of moved value: `counter`
  \-\-> src/main\.rs:9:36
   |
5  |     let counter = Mutex::new(0);
   |         \-\-\-\-\-\-\- move occurs because `counter` has type `Mutex<i32>`, which does not implement the `Copy` trait
\.\.\.
9  |         let handle = thread::spawn(move || {
   |                                    ^^^^^^^ value moved into closure here, in previous iteration of loop
10 |             let mut num = counter\.lock()\.unwrap();
   |                           \-\-\-\-\-\-\- use occurs due to use in closure

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `shared\-state`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The error message states that the `\fIcounter\fR` value was moved in the previousiteration of the loop\. So Rust is telling us that we can’t move the ownershipof lock `\fIcounter\fR` into multiple threads\. Let’s fix the compiler error with amultiple\-ownership method we discussed in Chapter 15\.
.br

.br
\fBMultiple Ownership with Multiple Threads\fR
.br
==========================================
.br

.P
In Chapter 15, we gave a value multiple owners by using the smart pointer`\fIRc<T>\fR` to create a reference counted value\. Let’s do the same here and seewhat happens\. We’ll wrap the `\fIMutex<T>\fR` in `\fIRc<T>\fR` in Listing 16\-14 and clonethe `\fIRc<T>\fR` before moving ownership to the thread\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use std::rc::Rc;
use std::sync::Mutex;
use std::thread;

fn main() {
    let counter = Rc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0\.\.10 {
        let counter = Rc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter\.lock()\.unwrap();

            *num += 1;
        });
        handles\.push(handle);
    }

    for handle in handles {
        handle\.join()\.unwrap();
    }

    println!("Result: {}", *counter\.lock()\.unwrap());
}

.EE

.RE
Listing 16\-14: Attempting to use `\fIRc<T>\fR` to allowmultiple threads to own the `\fIMutex<T>\fR`
.P
Once again, we compile and get\.\.\. different errors! The compiler is teaching usa lot\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling shared\-state v0\.1\.0 (file:///projects/shared\-state)
error[E0277]: `Rc<Mutex<i32>>` cannot be sent between threads safely
   \-\-> src/main\.rs:11:22
    |
11  |           let handle = thread::spawn(move || {
    |  ______________________^^^^^^^^^^^^^_\-
    | |                      |
    | |                      `Rc<Mutex<i32>>` cannot be sent between threads safely
12  | |             let mut num = counter\.lock()\.unwrap();
13  | |
14  | |             *num += 1;
15  | |         });
    | |_________\- within this `[closure@src/main\.rs:11:36: 15:10]`
    |
    = help: within `[closure@src/main\.rs:11:36: 15:10]`, the trait `Send` is not implemented for `Rc<Mutex<i32>>`
    = note: required because it appears within the type `[closure@src/main\.rs:11:36: 15:10]`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `shared\-state`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Wow, that error message is very wordy! Here’s the important part to focuson: `\fI`Rc<Mutex<i32>>` cannot be sent between threads safely\fR`\. The compileris also telling us the reason why: `\fIthe trait `Send` is not implemented for `Rc<Mutex<i32>>` \fR`\. We’ll talk about `\fISend\fR` in the next section: it’s one ofthe traits that ensures the types we use with threads are meant for use inconcurrent situations\.
.P
Unfortunately, `\fIRc<T>\fR` is not safe to share across threads\. When `\fIRc<T>\fR`manages the reference count, it adds to the count for each call to `\fIclone\fR` andsubtracts from the count when each clone is dropped\. But it doesn’t use anyconcurrency primitives to make sure that changes to the count can’t beinterrupted by another thread\. This could lead to wrong counts—subtle bugs thatcould in turn lead to memory leaks or a value being dropped before we’re donewith it\. What we need is a type exactly like `\fIRc<T>\fR` but one that makes changesto the reference count in a thread\-safe way\.
.br

.br
\fBAtomic Reference Counting with \fR
.br
=================================
.br
`\fIArc<T>\fR`
.P
Fortunately, `\fIArc<T>\fR` \fIis\fR a type like `\fIRc<T>\fR` that is safe to use inconcurrent situations\. The \fIa\fR stands for \fIatomic\fR, meaning it’s an \fIatomically\fRreference counted type\. Atomics are an additional kind of concurrencyprimitive that we won’t cover in detail here: see the standard librarydocumentation for 
.UR \.\./std/sync/atomic/index\.html
.UE
`\fIstd::sync::atomic\fR` for more details\. At this point, you justneed to know that atomics work like primitive types but are safe to shareacross threads\.
.P
You might then wonder why all primitive types aren’t atomic and why standardlibrary types aren’t implemented to use `\fIArc<T>\fR` by default\. The reason is thatthread safety comes with a performance penalty that you only want to pay whenyou really need to\. If you’re just performing operations on values within asingle thread, your code can run faster if it doesn’t have to enforce theguarantees atomics provide\.
.P
Let’s return to our example: `\fIArc<T>\fR` and `\fIRc<T>\fR` have the same API, so we fixour program by changing the `\fIuse\fR` line, the call to `\fInew\fR`, and the call to`\fIclone\fR`\. The code in Listing 16\-15 will finally compile and run:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::sync::{Arc, Mutex};
use std::thread;

fn main() {
    let counter = Arc::new(Mutex::new(0));
    let mut handles = vec![];

    for _ in 0\.\.10 {
        let counter = Arc::clone(&counter);
        let handle = thread::spawn(move || {
            let mut num = counter\.lock()\.unwrap();

            *num += 1;
        });
        handles\.push(handle);
    }

    for handle in handles {
        handle\.join()\.unwrap();
    }

    println!("Result: {}", *counter\.lock()\.unwrap());
}

.EE

.RE
Listing 16\-15: Using an `\fIArc<T>\fR` to wrap the `\fIMutex<T>\fR`to be able to share ownership across multiple threads
.P
This code will print the following:
.RS
.IP \fBtext\fR 2

.br
.EX
Result: 10

.EE

.RE
.P
We did it! We counted from 0 to 10, which may not seem very impressive, but itdid teach us a lot about `\fIMutex<T>\fR` and thread safety\. You could also use thisprogram’s structure to do more complicated operations than just incrementing acounter\. Using this strategy, you can divide a calculation into independentparts, split those parts across threads, and then use a `\fIMutex<T>\fR` to have eachthread update the final result with its part\.
.br

.br
\fBSimilarities Between \fR
.br
=======================
.br
`\fIRefCell<T>\fR`/`\fIRc<T>\fR` and `\fIMutex<T>\fR`/`\fIArc<T>\fR`
.P
You might have noticed that `\fIcounter\fR` is immutable but we could get a mutablereference to the value inside it; this means `\fIMutex<T>\fR` provides interiormutability, as the `\fICell\fR` family does\. In the same way we used `\fIRefCell<T>\fR` inChapter 15 to allow us to mutate contents inside an `\fIRc<T>\fR`, we use `\fIMutex<T>\fR`to mutate contents inside an `\fIArc<T>\fR`\.
.P
Another detail to note is that Rust can’t protect you from all kinds of logicerrors when you use `\fIMutex<T>\fR`\. Recall in Chapter 15 that using `\fIRc<T>\fR` camewith the risk of creating reference cycles, where two `\fIRc<T>\fR` values refer toeach other, causing memory leaks\. Similarly, `\fIMutex<T>\fR` comes with the risk ofcreating \fIdeadlocks\fR\. These occur when an operation needs to lock two resourcesand two threads have each acquired one of the locks, causing them to wait foreach other forever\. If you’re interested in deadlocks, try creating a Rustprogram that has a deadlock; then research deadlock mitigation strategies formutexes in any language and have a go at implementing them in Rust\. Thestandard library API documentation for `\fIMutex<T>\fR` and `\fIMutexGuard\fR` offersuseful information\.
.P
We’ll round out this chapter by talking about the `\fISend\fR` and `\fISync\fR` traits andhow we can use them with custom types\.
.SH "Extensible Concurrency with the Sync and Send Traits"

.br

.br
\fBExtensible Concurrency with the \fR
.br
==================================
.br
`\fISync\fR` and `\fISend\fR` Traits
.P
Interestingly, the Rust language has \fIvery\fR few concurrency features\. Almostevery concurrency feature we’ve talked about so far in this chapter has beenpart of the standard library, not the language\. Your options for handlingconcurrency are not limited to the language or the standard library; you canwrite your own concurrency features or use those written by others\.
.P
However, two concurrency concepts are embedded in the language: the`\fIstd::marker\fR` traits `\fISync\fR` and `\fISend\fR`\.
.br

.br
\fBAllowing Transference of Ownership Between Threads with \fR
.br
==========================================================
.br
`\fISend\fR`
.P
The `\fISend\fR` marker trait indicates that ownership of values of the type implementing`\fISend\fR` can be transferred between threads\. Almost every Rust type is `\fISend\fR`,but there are some exceptions, including `\fIRc<T>\fR`: this cannot be `\fISend\fR` becauseif you cloned an `\fIRc<T>\fR` value and tried to transfer ownership of the clone toanother thread, both threads might update the reference count at the same time\.For this reason, `\fIRc<T>\fR` is implemented for use in single\-threaded situationswhere you don’t want to pay the thread\-safe performance penalty\.
.P
Therefore, Rust’s type system and trait bounds ensure that you can neveraccidentally send an `\fIRc<T>\fR` value across threads unsafely\. When we tried to dothis in Listing 16\-14, we got the error `\fIthe trait Send is not implemented for Rc<Mutex<i32>>\fR`\. When we switched to `\fIArc<T>\fR`, which is `\fISend\fR`, the codecompiled\.
.P
Any type composed entirely of `\fISend\fR` types is automatically marked as `\fISend\fR` aswell\. Almost all primitive types are `\fISend\fR`, aside from raw pointers, whichwe’ll discuss in Chapter 19\.
.br

.br
\fBAllowing Access from Multiple Threads with \fR
.br
=============================================
.br
`\fISync\fR`
.P
The `\fISync\fR` marker trait indicates that it is safe for the type implementing`\fISync\fR` to be referenced from multiple threads\. In other words, any type `\fIT\fR` is`\fISync\fR` if `\fI&T\fR` (an immutable reference to `\fIT\fR`) is `\fISend\fR`, meaning the referencecan be sent safely to another thread\. Similar to `\fISend\fR`, primitive types are`\fISync\fR`, and types composed entirely of types that are `\fISync\fR` are also `\fISync\fR`\.
.P
The smart pointer `\fIRc<T>\fR` is also not `\fISync\fR` for the same reasons that it’s not`\fISend\fR`\. The `\fIRefCell<T>\fR` type (which we talked about in Chapter 15) and thefamily of related `\fICell<T>\fR` types are not `\fISync\fR`\. The implementation of borrowchecking that `\fIRefCell<T>\fR` does at runtime is not thread\-safe\. The smartpointer `\fIMutex<T>\fR` is `\fISync\fR` and can be used to share access with multiplethreads as you saw in the 
.UR ch16\-03\-shared\-state\.html#sharing\-a\-mutext\-between\-multiple\-threads
.UE
“Sharing a `\fIMutex<T>\fR` Between MultipleThreads” section\.
.br

.br
\fBImplementing \fR
.br
===============
.br
`\fISend\fR` and `\fISync\fR` Manually Is Unsafe
.P
Because types that are made up of `\fISend\fR` and `\fISync\fR` traits are automaticallyalso `\fISend\fR` and `\fISync\fR`, we don’t have to implement those traits manually\. Asmarker traits, they don’t even have any methods to implement\. They’re justuseful for enforcing invariants related to concurrency\.
.P
Manually implementing these traits involves implementing unsafe Rust code\.We’ll talk about using unsafe Rust code in Chapter 19; for now, the importantinformation is that building new concurrent types not made up of `\fISend\fR` and`\fISync\fR` parts requires careful thought to uphold the safety guarantees\. 
.UR \.\./nomicon/index\.html
.UE
“TheRustonomicon” has more information about these guarantees and how touphold them\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
This isn’t the last you’ll see of concurrency in this book: the project inChapter 20 will use the concepts in this chapter in a more realistic situationthan the smaller examples discussed here\.
.P
As mentioned earlier, because very little of how Rust handles concurrency ispart of the language, many concurrency solutions are implemented as crates\.These evolve more quickly than the standard library, so be sure to searchonline for the current, state\-of\-the\-art crates to use in multithreadedsituations\.
.P
The Rust standard library provides channels for message passing and smartpointer types, such as `\fIMutex<T>\fR` and `\fIArc<T>\fR`, that are safe to use inconcurrent contexts\. The type system and the borrow checker ensure that thecode using these solutions won’t end up with data races or invalid references\.Once you get your code to compile, you can rest assured that it will happilyrun on multiple threads without the kinds of hard\-to\-track\-down bugs common inother languages\. Concurrent programming is no longer a concept to be afraid of:go forth and make your programs concurrent, fearlessly!
.P
Next, we’ll talk about idiomatic ways to model problems and structure solutionsas your Rust programs get bigger\. In addition, we’ll discuss how Rust’s idiomsrelate to those you might be familiar with from object\-oriented programming\.
.SH "Object Oriented Programming Features of Rust"

.br

.br
\fBObject Oriented Programming Features of Rust\fR
.br
==============================================
.br

.P
Object\-oriented programming (OOP) is a way of modeling programs\. Objects camefrom Simula in the 1960s\. Those objects influenced Alan Kay’s programmingarchitecture in which objects pass messages to each other\. He coined the term\fIobject\-oriented programming\fR in 1967 to describe this architecture\. Manycompeting definitions describe what OOP is; some definitions would classifyRust as object oriented, but other definitions would not\. In this chapter,we’ll explore certain characteristics that are commonly considered objectoriented and how those characteristics translate to idiomatic Rust\. We’ll thenshow you how to implement an object\-oriented design pattern in Rust and discussthe trade\-offs of doing so versus implementing a solution using some of Rust’sstrengths instead\.
.SH "Characteristics of Object\-Oriented Languages"

.br

.br
\fBCharacteristics of Object\-Oriented Languages\fR
.br
==============================================
.br

.P
There is no consensus in the programming community about what features alanguage must have to be considered object oriented\. Rust is influenced by manyprogramming paradigms, including OOP; for example, we explored the featuresthat came from functional programming in Chapter 13\. Arguably, OOP languagesshare certain common characteristics, namely objects, encapsulation, andinheritance\. Let’s look at what each of those characteristics means and whetherRust supports it\.
.br

.br
\fBObjects Contain Data and Behavior\fR
.br
===================================
.br

.P
The book \fIDesign Patterns: Elements of Reusable Object\-Oriented Software\fR byErich Gamma, Richard Helm, Ralph Johnson, and John Vlissides (Addison\-WesleyProfessional, 1994) colloquially referred to as \fIThe Gang of Four\fR book, is acatalog of object\-oriented design patterns\. It defines OOP this way:
.P
Object\-oriented programs are made up of objects\. An \fIobject\fR packages bothdata and the procedures that operate on that data\. The procedures aretypically called \fImethods\fR or \fIoperations\fR\.
.P
Using this definition, Rust is object oriented: structs and enums have data,and `\fIimpl\fR` blocks provide methods on structs and enums\. Even though structs andenums with methods aren’t \fIcalled\fR objects, they provide the samefunctionality, according to the Gang of Four’s definition of objects\.
.br

.br
\fBEncapsulation that Hides Implementation Details\fR
.br
=================================================
.br

.P
Another aspect commonly associated with OOP is the idea of \fIencapsulation\fR,which means that the implementation details of an object aren’t accessible tocode using that object\. Therefore, the only way to interact with an object isthrough its public API; code using the object shouldn’t be able to reach intothe object’s internals and change data or behavior directly\. This enables theprogrammer to change and refactor an object’s internals without needing tochange the code that uses the object\.
.P
We discussed how to control encapsulation in Chapter 7: we can use the `\fIpub\fR`keyword to decide which modules, types, functions, and methods in our codeshould be public, and by default everything else is private\. For example, wecan define a struct `\fIAveragedCollection\fR` that has a field containing a vectorof `\fIi32\fR` values\. The struct can also have a field that contains the average ofthe values in the vector, meaning the average doesn’t have to be computedon demand whenever anyone needs it\. In other words, `\fIAveragedCollection\fR` willcache the calculated average for us\. Listing 17\-1 has the definition of the`\fIAveragedCollection\fR` struct:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct AveragedCollection {
    list: Vec<i32>,
    average: f64,
}

.EE

.RE
Listing 17\-1: An `\fIAveragedCollection\fR` struct thatmaintains a list of integers and the average of the items in thecollection
.P
The struct is marked `\fIpub\fR` so that other code can use it, but the fields withinthe struct remain private\. This is important in this case because we want toensure that whenever a value is added or removed from the list, the average isalso updated\. We do this by implementing `\fIadd\fR`, `\fIremove\fR`, and `\fIaverage\fR` methodson the struct, as shown in Listing 17\-2:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct AveragedCollection {
#     list: Vec<i32>,
#     average: f64,
# }
# 
impl AveragedCollection {
    pub fn add(&mut self, value: i32) {
        self\.list\.push(value);
        self\.update_average();
    }

    pub fn remove(&mut self) \-> Option<i32> {
        let result = self\.list\.pop();
        match result {
            Some(value) => {
                self\.update_average();
                Some(value)
            }
            None => None,
        }
    }

    pub fn average(&self) \-> f64 {
        self\.average
    }

    fn update_average(&mut self) {
        let total: i32 = self\.list\.iter()\.sum();
        self\.average = total as f64 / self\.list\.len() as f64;
    }
}

.EE

.RE
Listing 17\-2: Implementations of the public methods`\fIadd\fR`, `\fIremove\fR`, and `\fIaverage\fR` on `\fIAveragedCollection\fR`
.P
The public methods `\fIadd\fR`, `\fIremove\fR`, and `\fIaverage\fR` are the only ways to accessor modify data in an instance of `\fIAveragedCollection\fR`\. When an item is addedto `\fIlist\fR` using the `\fIadd\fR` method or removed using the `\fIremove\fR` method, theimplementations of each call the private `\fIupdate_average\fR` method that handlesupdating the `\fIaverage\fR` field as well\.
.P
We leave the `\fIlist\fR` and `\fIaverage\fR` fields private so there is no way forexternal code to add or remove items to the `\fIlist\fR` field directly; otherwise,the `\fIaverage\fR` field might become out of sync when the `\fIlist\fR` changes\. The`\fIaverage\fR` method returns the value in the `\fIaverage\fR` field, allowing externalcode to read the `\fIaverage\fR` but not modify it\.
.P
Because we’ve encapsulated the implementation details of the struct`\fIAveragedCollection\fR`, we can easily change aspects, such as the data structure,in the future\. For instance, we could use a `\fIHashSet<i32>\fR` instead of a`\fIVec<i32>\fR` for the `\fIlist\fR` field\. As long as the signatures of the `\fIadd\fR`,`\fIremove\fR`, and `\fIaverage\fR` public methods stay the same, code using`\fIAveragedCollection\fR` wouldn’t need to change\. If we made `\fIlist\fR` public instead,this wouldn’t necessarily be the case: `\fIHashSet<i32>\fR` and `\fIVec<i32>\fR` havedifferent methods for adding and removing items, so the external code wouldlikely have to change if it were modifying `\fIlist\fR` directly\.
.P
If encapsulation is a required aspect for a language to be considered objectoriented, then Rust meets that requirement\. The option to use `\fIpub\fR` or not fordifferent parts of code enables encapsulation of implementation details\.
.br

.br
\fBInheritance as a Type System and as Code Sharing\fR
.br
==================================================
.br
\fIInheritance\fR is a mechanism whereby an object can inherit from anotherobject’s definition, thus gaining the parent object’s data and behavior withoutyou having to define them again\.
.P
If a language must have inheritance to be an object\-oriented language, thenRust is not one\. There is no way to define a struct that inherits the parentstruct’s fields and method implementations\. However, if you’re used to havinginheritance in your programming toolbox, you can use other solutions in Rust,depending on your reason for reaching for inheritance in the first place\.
.P
You choose inheritance for two main reasons\. One is for reuse of code: you canimplement particular behavior for one type, and inheritance enables you toreuse that implementation for a different type\. You can share Rust code usingdefault trait method implementations instead, which you saw in Listing 10\-14when we added a default implementation of the `\fIsummarize\fR` method on the`\fISummary\fR` trait\. Any type implementing the `\fISummary\fR` trait would have the`\fIsummarize\fR` method available on it without any further code\. This is similar toa parent class having an implementation of a method and an inheriting childclass also having the implementation of the method\. We can also override thedefault implementation of the `\fIsummarize\fR` method when we implement the`\fISummary\fR` trait, which is similar to a child class overriding theimplementation of a method inherited from a parent class\.
.P
The other reason to use inheritance relates to the type system: to enable achild type to be used in the same places as the parent type\. This is alsocalled \fIpolymorphism\fR, which means that you can substitute multiple objects foreach other at runtime if they share certain characteristics\.
.br

.br
\fBPolymorphism\fR
.br
==============
.br

.P
To many people, polymorphism is synonymous with inheritance\. But it’sactually a more general concept that refers to code that can work with dataof multiple types\. For inheritance, those types are generally subclasses\.
.P
Rust instead uses generics to abstract over different possible types andtrait bounds to impose constraints on what those types must provide\. This issometimes called \fIbounded parametric polymorphism\fR\.
.P
Inheritance has recently fallen out of favor as a programming design solutionin many programming languages because it’s often at risk of sharing more codethan necessary\. Subclasses shouldn’t always share all characteristics of theirparent class but will do so with inheritance\. This can make a program’s designless flexible\. It also introduces the possibility of calling methods onsubclasses that don’t make sense or that cause errors because the methods don’tapply to the subclass\. In addition, some languages will only allow a subclassto inherit from one class, further restricting the flexibility of a program’sdesign\.
.P
For these reasons, Rust takes a different approach, using trait objects insteadof inheritance\. Let’s look at how trait objects enable polymorphism in Rust\.
.SH "Using Trait Objects That Allow for Values of Different Types"

.br

.br
\fBUsing Trait Objects That Allow for Values of Different Types\fR
.br
==============================================================
.br

.P
In Chapter 8, we mentioned that one limitation of vectors is that they canstore elements of only one type\. We created a workaround in Listing 8\-10 wherewe defined a `\fISpreadsheetCell\fR` enum that had variants to hold integers, floats,and text\. This meant we could store different types of data in each cell andstill have a vector that represented a row of cells\. This is a perfectly goodsolution when our interchangeable items are a fixed set of types that we knowwhen our code is compiled\.
.P
However, sometimes we want our library user to be able to extend the set oftypes that are valid in a particular situation\. To show how we might achievethis, we’ll create an example graphical user interface (GUI) tool that iteratesthrough a list of items, calling a `\fIdraw\fR` method on each one to draw it to thescreen—a common technique for GUI tools\. We’ll create a library crate called`\fIgui\fR` that contains the structure of a GUI library\. This crate might includesome types for people to use, such as `\fIButton\fR` or `\fITextField\fR`\. In addition,`\fIgui\fR` users will want to create their own types that can be drawn: forinstance, one programmer might add an `\fIImage\fR` and another might add a`\fISelectBox\fR`\.
.P
We won’t implement a fully fledged GUI library for this example but will showhow the pieces would fit together\. At the time of writing the library, we can’tknow and define all the types other programmers might want to create\. But we doknow that `\fIgui\fR` needs to keep track of many values of different types, and itneeds to call a `\fIdraw\fR` method on each of these differently typed values\. Itdoesn’t need to know exactly what will happen when we call the `\fIdraw\fR` method,just that the value will have that method available for us to call\.
.P
To do this in a language with inheritance, we might define a class named`\fIComponent\fR` that has a method named `\fIdraw\fR` on it\. The other classes, such as`\fIButton\fR`, `\fIImage\fR`, and `\fISelectBox\fR`, would inherit from `\fIComponent\fR` and thusinherit the `\fIdraw\fR` method\. They could each override the `\fIdraw\fR` method to definetheir custom behavior, but the framework could treat all of the types as ifthey were `\fIComponent\fR` instances and call `\fIdraw\fR` on them\. But because Rustdoesn’t have inheritance, we need another way to structure the `\fIgui\fR` library toallow users to extend it with new types\.
.br

.br
\fBDefining a Trait for Common Behavior\fR
.br
======================================
.br

.P
To implement the behavior we want `\fIgui\fR` to have, we’ll define a trait named`\fIDraw\fR` that will have one method named `\fIdraw\fR`\. Then we can define a vector thattakes a \fItrait object\fR\. A trait object points to both an instance of a typeimplementing our specified trait as well as a table used to look up traitmethods on that type at runtime\. We create a trait object by specifying somesort of pointer, such as a `\fI&\fR` reference or a `\fIBox<T>\fR` smart pointer, then the`\fIdyn\fR` keyword, and then specifying the relevant trait\. (We’ll talk about thereason trait objects must use a pointer in Chapter 19 in the section
.UR ch19\-04\-advanced\-types\.html#dynamically\-sized\-types\-and\-the\-sized\-trait
.UE
“Dynamically Sized Types and the `\fISized\fR` Trait\.”) We can use trait objects in place of a generic or concrete type\.Wherever we use a trait object, Rust’s type system will ensure at compile timethat any value used in that context will implement the trait object’s trait\.Consequently, we don’t need to know all the possible types at compile time\.
.P
We’ve mentioned that in Rust, we refrain from calling structs and enums“objects” to distinguish them from other languages’ objects\. In a struct orenum, the data in the struct fields and the behavior in `\fIimpl\fR` blocks areseparated, whereas in other languages, the data and behavior combined into oneconcept is often labeled an object\. However, trait objects \fIare\fR more likeobjects in other languages in the sense that they combine data and behavior\.But trait objects differ from traditional objects in that we can’t add data toa trait object\. Trait objects aren’t as generally useful as objects in otherlanguages: their specific purpose is to allow abstraction across commonbehavior\.
.P
Listing 17\-3 shows how to define a trait named `\fIDraw\fR` with one method named`\fIdraw\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Draw {
    fn draw(&self);
}

.EE

.RE
Listing 17\-3: Definition of the `\fIDraw\fR` trait
.P
This syntax should look familiar from our discussions on how to define traitsin Chapter 10\. Next comes some new syntax: Listing 17\-4 defines a struct named`\fIScreen\fR` that holds a vector named `\fIcomponents\fR`\. This vector is of type`\fIBox<dyn Draw>\fR`, which is a trait object; it’s a stand\-in for any type insidea `\fIBox\fR` that implements the `\fIDraw\fR` trait\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Draw {
#     fn draw(&self);
# }
# 
pub struct Screen {
    pub components: Vec<Box<dyn Draw>>,
}

.EE

.RE
Listing 17\-4: Definition of the `\fIScreen\fR` struct with a`\fIcomponents\fR` field holding a vector of trait objects that implement the `\fIDraw\fR`trait
.P
On the `\fIScreen\fR` struct, we’ll define a method named `\fIrun\fR` that will call the`\fIdraw\fR` method on each of its `\fIcomponents\fR`, as shown in Listing 17\-5:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Draw {
#     fn draw(&self);
# }
# 
# pub struct Screen {
#     pub components: Vec<Box<dyn Draw>>,
# }
# 
impl Screen {
    pub fn run(&self) {
        for component in self\.components\.iter() {
            component\.draw();
        }
    }
}

.EE

.RE
Listing 17\-5: A `\fIrun\fR` method on `\fIScreen\fR` that calls the`\fIdraw\fR` method on each component
.P
This works differently from defining a struct that uses a generic typeparameter with trait bounds\. A generic type parameter can only be substitutedwith one concrete type at a time, whereas trait objects allow for multipleconcrete types to fill in for the trait object at runtime\. For example, wecould have defined the `\fIScreen\fR` struct using a generic type and a trait boundas in Listing 17\-6:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Draw {
#     fn draw(&self);
# }
# 
pub struct Screen<T: Draw> {
    pub components: Vec<T>,
}

impl<T> Screen<T>
where
    T: Draw,
{
    pub fn run(&self) {
        for component in self\.components\.iter() {
            component\.draw();
        }
    }
}

.EE

.RE
Listing 17\-6: An alternate implementation of the `\fIScreen\fR`struct and its `\fIrun\fR` method using generics and trait bounds
.P
This restricts us to a `\fIScreen\fR` instance that has a list of components all oftype `\fIButton\fR` or all of type `\fITextField\fR`\. If you’ll only ever have homogeneouscollections, using generics and trait bounds is preferable because thedefinitions will be monomorphized at compile time to use the concrete types\.
.P
On the other hand, with the method using trait objects, one `\fIScreen\fR` instancecan hold a `\fIVec<T>\fR` that contains a `\fIBox<Button>\fR` as well as a`\fIBox<TextField>\fR`\. Let’s look at how this works, and then we’ll talk about theruntime performance implications\.
.br

.br
\fBImplementing the Trait\fR
.br
========================
.br

.P
Now we’ll add some types that implement the `\fIDraw\fR` trait\. We’ll provide the`\fIButton\fR` type\. Again, actually implementing a GUI library is beyond the scopeof this book, so the `\fIdraw\fR` method won’t have any useful implementation in itsbody\. To imagine what the implementation might look like, a `\fIButton\fR` structmight have fields for `\fIwidth\fR`, `\fIheight\fR`, and `\fIlabel\fR`, as shown in Listing 17\-7:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub trait Draw {
#     fn draw(&self);
# }
# 
# pub struct Screen {
#     pub components: Vec<Box<dyn Draw>>,
# }
# 
# impl Screen {
#     pub fn run(&self) {
#         for component in self\.components\.iter() {
#             component\.draw();
#         }
#     }
# }
# 
pub struct Button {
    pub width: u32,
    pub height: u32,
    pub label: String,
}

impl Draw for Button {
    fn draw(&self) {
        // code to actually draw a button
    }
}

.EE

.RE
Listing 17\-7: A `\fIButton\fR` struct that implements the`\fIDraw\fR` trait
.P
The `\fIwidth\fR`, `\fIheight\fR`, and `\fIlabel\fR` fields on `\fIButton\fR` will differ from thefields on other components, such as a `\fITextField\fR` type, that might have thosefields plus a `\fIplaceholder\fR` field instead\. Each of the types we want to draw onthe screen will implement the `\fIDraw\fR` trait but will use different code in the`\fIdraw\fR` method to define how to draw that particular type, as `\fIButton\fR` has here(without the actual GUI code, which is beyond the scope of this chapter)\. The`\fIButton\fR` type, for instance, might have an additional `\fIimpl\fR` block containingmethods related to what happens when a user clicks the button\. These kinds ofmethods won’t apply to types like `\fITextField\fR`\.
.P
If someone using our library decides to implement a `\fISelectBox\fR` struct that has`\fIwidth\fR`, `\fIheight\fR`, and `\fIoptions\fR` fields, they implement the `\fIDraw\fR` trait on the`\fISelectBox\fR` type as well, as shown in Listing 17\-8:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use gui::Draw;

struct SelectBox {
    width: u32,
    height: u32,
    options: Vec<String>,
}

impl Draw for SelectBox {
    fn draw(&self) {
        // code to actually draw a select box
    }
}
# 
# fn main() {}

.EE

.RE
Listing 17\-8: Another crate using `\fIgui\fR` and implementingthe `\fIDraw\fR` trait on a `\fISelectBox\fR` struct
.P
Our library’s user can now write their `\fImain\fR` function to create a `\fIScreen\fR`instance\. To the `\fIScreen\fR` instance, they can add a `\fISelectBox\fR` and a `\fIButton\fR`by putting each in a `\fIBox<T>\fR` to become a trait object\. They can then call the`\fIrun\fR` method on the `\fIScreen\fR` instance, which will call `\fIdraw\fR` on each of thecomponents\. Listing 17\-9 shows this implementation:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use gui::Draw;
# 
# struct SelectBox {
#     width: u32,
#     height: u32,
#     options: Vec<String>,
# }
# 
# impl Draw for SelectBox {
#     fn draw(&self) {
#         // code to actually draw a select box
#     }
# }
# 
use gui::{Button, Screen};

fn main() {
    let screen = Screen {
        components: vec![
            Box::new(SelectBox {
                width: 75,
                height: 10,
                options: vec![
                    String::from("Yes"),
                    String::from("Maybe"),
                    String::from("No"),
                ],
            }),
            Box::new(Button {
                width: 50,
                height: 10,
                label: String::from("OK"),
            }),
        ],
    };

    screen\.run();
}

.EE

.RE
Listing 17\-9: Using trait objects to store values ofdifferent types that implement the same trait
.P
When we wrote the library, we didn’t know that someone might add the`\fISelectBox\fR` type, but our `\fIScreen\fR` implementation was able to operate on thenew type and draw it because `\fISelectBox\fR` implements the `\fIDraw\fR` trait, whichmeans it implements the `\fIdraw\fR` method\.
.P
This concept—of being concerned only with the messages a value responds torather than the value’s concrete type—is similar to the concept of \fIduck\fRtyping in dynamically typed languages: if it walks like a duck and quackslike a duck, then it must be a duck! In the implementation of `\fIrun\fR` on `\fIScreen\fR`in Listing 17\-5, `\fIrun\fR` doesn’t need to know what the concrete type of eachcomponent is\. It doesn’t check whether a component is an instance of a `\fIButton\fR`or a `\fISelectBox\fR`, it just calls the `\fIdraw\fR` method on the component\. Byspecifying `\fIBox<dyn Draw>\fR` as the type of the values in the `\fIcomponents\fR`vector, we’ve defined `\fIScreen\fR` to need values that we can call the `\fIdraw\fR`method on\.
.P
The advantage of using trait objects and Rust’s type system to write codesimilar to code using duck typing is that we never have to check whether avalue implements a particular method at runtime or worry about getting errorsif a value doesn’t implement a method but we call it anyway\. Rust won’t compileour code if the values don’t implement the traits that the trait objects need\.
.P
For example, Listing 17\-10 shows what happens if we try to create a `\fIScreen\fR`with a `\fIString\fR` as a component:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use gui::Screen;

fn main() {
    let screen = Screen {
        components: vec![Box::new(String::from("Hi"))],
    };

    screen\.run();
}

.EE

.RE
Listing 17\-10: Attempting to use a type that doesn’timplement the trait object’s trait
.P
We’ll get this error because `\fIString\fR` doesn’t implement the `\fIDraw\fR` trait:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling gui v0\.1\.0 (file:///projects/gui)
error[E0277]: the trait bound `String: Draw` is not satisfied
 \-\-> src/main\.rs:5:26
  |
5 |         components: vec![Box::new(String::from("Hi"))],
  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Draw` is not implemented for `String`
  |
  = note: required for the cast to the object type `dyn Draw`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `gui`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This error lets us know that either we’re passing something to `\fIScreen\fR` wedidn’t mean to pass and we should pass a different type or we should implement`\fIDraw\fR` on `\fIString\fR` so that `\fIScreen\fR` is able to call `\fIdraw\fR` on it\.
.br

.br
\fBTrait Objects Perform Dynamic Dispatch\fR
.br
========================================
.br

.P
Recall in the 
.UR ch10\-01\-syntax\.html#performance\-of\-code\-using\-generics
.UE
“Performance of Code UsingGenerics” section inChapter 10 our discussion on the monomorphization process performed by thecompiler when we use trait bounds on generics: the compiler generatesnongeneric implementations of functions and methods for each concrete typethat we use in place of a generic type parameter\. The code that results frommonomorphization is doing \fIstatic dispatch\fR, which is when the compiler knowswhat method you’re calling at compile time\. This is opposed to \fIdynamic\fRdispatch, which is when the compiler can’t tell at compile time which methodyou’re calling\. In dynamic dispatch cases, the compiler emits code that atruntime will figure out which method to call\.
.P
When we use trait objects, Rust must use dynamic dispatch\. The compiler doesn’tknow all the types that might be used with the code that is using traitobjects, so it doesn’t know which method implemented on which type to call\.Instead, at runtime, Rust uses the pointers inside the trait object to knowwhich method to call\. There is a runtime cost when this lookup happens thatdoesn’t occur with static dispatch\. Dynamic dispatch also prevents the compilerfrom choosing to inline a method’s code, which in turn prevents someoptimizations\. However, we did get extra flexibility in the code that we wrotein Listing 17\-5 and were able to support in Listing 17\-9, so it’s a trade\-offto consider\.
.br

.br
\fBObject Safety Is Required for Trait Objects\fR
.br
=============================================
.br

.P
You can only make \fIobject\-safe\fR traits into trait objects\. Some complex rulesgovern all the properties that make a trait object safe, but in practice, onlytwo rules are relevant\. A trait is object safe if all the methods defined inthe trait have the following properties:
.P
The return type isn’t `\fISelf\fR`\.
.P
There are no generic type parameters\.
.P
The `\fISelf\fR` keyword is an alias for the type we’re implementing the traits ormethods on\. Trait objects must be object safe because once you’ve used a traitobject, Rust no longer knows the concrete type that’s implementing that trait\.If a trait method returns the concrete `\fISelf\fR` type, but a trait object forgetsthe exact type that `\fISelf\fR` is, there is no way the method can use the originalconcrete type\. The same is true of generic type parameters that are filled inwith concrete type parameters when the trait is used: the concrete types becomepart of the type that implements the trait\. When the type is forgotten throughthe use of a trait object, there is no way to know what types to fill in thegeneric type parameters with\.
.P
An example of a trait whose methods are not object safe is the standardlibrary’s `\fIClone\fR` trait\. The signature for the `\fIclone\fR` method in the `\fIClone\fR`trait looks like this:
.RS
.IP \fBrust\fR 2

.br
.EX
pub trait Clone {
    fn clone(&self) \-> Self;
}

.EE

.RE
.P
The `\fIString\fR` type implements the `\fIClone\fR` trait, and when we call the `\fIclone\fR`method on an instance of `\fIString\fR` we get back an instance of `\fIString\fR`\.Similarly, if we call `\fIclone\fR` on an instance of `\fIVec<T>\fR`, we get back aninstance of `\fIVec<T>\fR`\. The signature of `\fIclone\fR` needs to know what type willstand in for `\fISelf\fR`, because that’s the return type\.
.P
The compiler will indicate when you’re trying to do something that violates therules of object safety in regard to trait objects\. For example, let’s say wetried to implement the `\fIScreen\fR` struct in Listing 17\-4 to hold types thatimplement the `\fIClone\fR` trait instead of the `\fIDraw\fR` trait, like this:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
pub struct Screen {
    pub components: Vec<Box<dyn Clone>>,
}

.EE

.RE
.P
We would get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling gui v0\.1\.0 (file:///projects/gui)
error[E0038]: the trait `Clone` cannot be made into an object
 \-\-> src/lib\.rs:2:21
  |
2 |     pub components: Vec<Box<dyn Clone>>,
  |                     ^^^^^^^^^^^^^^^^^^^ `Clone` cannot be made into an object
  |
  = note: the trait cannot be made into an object because it requires `Self: Sized`
  = note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc\.rust\-lang\.org/reference/items/traits\.html#object\-safety>

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0038`\.
error: could not compile `gui`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This error means you can’t use this trait as a trait object in this way\. Ifyou’re interested in more details on object safety, see 
.UR https://github\.com/rust\-lang/rfcs/blob/master/text/0255\-object\-safety\.md
.UE
Rust RFC 255 or check theobject safety section in the 
.UR \.\./reference/items/traits\.html#object\-safety
.UE
Rust Reference\.
.SH "Implementing an Object\-Oriented Design Pattern"

.br

.br
\fBImplementing an Object\-Oriented Design Pattern\fR
.br
================================================
.br

.P
The \fIstate pattern\fR is an object\-oriented design pattern\. The crux of thepattern is that a value has some internal state, which is represented by a setof \fIstate objects\fR, and the value’s behavior changes based on the internalstate\. The state objects share functionality: in Rust, of course, we usestructs and traits rather than objects and inheritance\. Each state object isresponsible for its own behavior and for governing when it should change intoanother state\. The value that holds a state object knows nothing about thedifferent behavior of the states or when to transition between states\.
.P
Using the state pattern means when the business requirements of the programchange, we won’t need to change the code of the value holding the state or thecode that uses the value\. We’ll only need to update the code inside one of thestate objects to change its rules or perhaps add more state objects\. Let’s lookat an example of the state design pattern and how to use it in Rust\.
.P
We’ll implement a blog post workflow in an incremental way\. The blog’s finalfunctionality will look like this:
.P
A blog post starts as an empty draft\.
.P
When the draft is done, a review of the post is requested\.
.P
When the post is approved, it gets published\.
.P
Only published blog posts return content to print, so unapproved posts can’taccidentally be published\.
.P
Any other changes attempted on a post should have no effect\. For example, if wetry to approve a draft blog post before we’ve requested a review, the postshould remain an unpublished draft\.
.P
Listing 17\-11 shows this workflow in code form: this is an example usage of theAPI we’ll implement in a library crate named `\fIblog\fR`\. This won’t compile yetbecause we haven’t implemented the `\fIblog\fR` crate yet\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use blog::Post;

fn main() {
    let mut post = Post::new();

    post\.add_text("I ate a salad for lunch today");
    assert_eq!("", post\.content());

    post\.request_review();
    assert_eq!("", post\.content());

    post\.approve();
    assert_eq!("I ate a salad for lunch today", post\.content());
}

.EE

.RE
Listing 17\-11: Code that demonstrates the desiredbehavior we want our `\fIblog\fR` crate to have
.P
We want to allow the user to create a new draft blog post with `\fIPost::new\fR`\.Then we want to allow text to be added to the blog post while it’s in the draftstate\. If we try to get the post’s content immediately, before approval,nothing should happen because the post is still a draft\. We’ve added`\fIassert_eq!\fR` in the code for demonstration purposes\. An excellent unit test forthis would be to assert that a draft blog post returns an empty string from the`\fIcontent\fR` method, but we’re not going to write tests for this example\.
.P
Next, we want to enable a request for a review of the post, and we want`\fIcontent\fR` to return an empty string while waiting for the review\. When the postreceives approval, it should get published, meaning the text of the post willbe returned when `\fIcontent\fR` is called\.
.P
Notice that the only type we’re interacting with from the crate is the `\fIPost\fR`type\. This type will use the state pattern and will hold a value that will beone of three state objects representing the various states a post can bein—draft, waiting for review, or published\. Changing from one state to anotherwill be managed internally within the `\fIPost\fR` type\. The states change inresponse to the methods called by our library’s users on the `\fIPost\fR` instance,but they don’t have to manage the state changes directly\. Also, users can’tmake a mistake with the states, like publishing a post before it’s reviewed\.
.br

.br
\fBDefining \fR
.br
===========
.br
`\fIPost\fR` and Creating a New Instance in the Draft State
.P
Let’s get started on the implementation of the library! We know we need apublic `\fIPost\fR` struct that holds some content, so we’ll start with thedefinition of the struct and an associated public `\fInew\fR` function to create aninstance of `\fIPost\fR`, as shown in Listing 17\-12\. We’ll also make a private`\fIState\fR` trait\. Then `\fIPost\fR` will hold a trait object of `\fIBox<dyn State>\fR`inside an `\fIOption<T>\fR` in a private field named `\fIstate\fR`\. You’ll see why the`\fIOption<T>\fR` is necessary in a bit\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct Post {
    state: Option<Box<dyn State>>,
    content: String,
}

impl Post {
    pub fn new() \-> Post {
        Post {
            state: Some(Box::new(Draft {})),
            content: String::new(),
        }
    }
}

trait State {}

struct Draft {}

impl State for Draft {}

.EE

.RE
Listing 17\-12: Definition of a `\fIPost\fR` struct and a `\fInew\fR`function that creates a new `\fIPost\fR` instance, a `\fIState\fR` trait, and a `\fIDraft\fR`struct
.P
The `\fIState\fR` trait defines the behavior shared by different post states, and the`\fIDraft\fR`, `\fIPendingReview\fR`, and `\fIPublished\fR` states will all implement the `\fIState\fR`trait\. For now, the trait doesn’t have any methods, and we’ll start by definingjust the `\fIDraft\fR` state because that is the state we want a post to start in\.
.P
When we create a new `\fIPost\fR`, we set its `\fIstate\fR` field to a `\fISome\fR` value thatholds a `\fIBox\fR`\. This `\fIBox\fR` points to a new instance of the `\fIDraft\fR` struct\. Thisensures whenever we create a new instance of `\fIPost\fR`, it will start out as adraft\. Because the `\fIstate\fR` field of `\fIPost\fR` is private, there is no way tocreate a `\fIPost\fR` in any other state! In the `\fIPost::new\fR` function, we set the`\fIcontent\fR` field to a new, empty `\fIString\fR`\.
.br

.br
\fBStoring the Text of the Post Content\fR
.br
======================================
.br

.P
Listing 17\-11 showed that we want to be able to call a method named`\fIadd_text\fR` and pass it a `\fI&str\fR` that is then added to the text content of theblog post\. We implement this as a method rather than exposing the `\fIcontent\fR`field as `\fIpub\fR`\. This means we can implement a method later that will controlhow the `\fIcontent\fR` field’s data is read\. The `\fIadd_text\fR` method is prettystraightforward, so let’s add the implementation in Listing 17\-13 to the `\fIimpl Post\fR` block:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
    pub fn add_text(&mut self, text: &str) {
        self\.content\.push_str(text);
    }
}
# 
# trait State {}
# 
# struct Draft {}
# 
# impl State for Draft {}

.EE

.RE
Listing 17\-13: Implementing the `\fIadd_text\fR` method to addtext to a post’s `\fIcontent\fR`
.P
The `\fIadd_text\fR` method takes a mutable reference to `\fIself\fR`, because we’rechanging the `\fIPost\fR` instance that we’re calling `\fIadd_text\fR` on\. We then call`\fIpush_str\fR` on the `\fIString\fR` in `\fIcontent\fR` and pass the `\fItext\fR` argument to add tothe saved `\fIcontent\fR`\. This behavior doesn’t depend on the state the post is in,so it’s not part of the state pattern\. The `\fIadd_text\fR` method doesn’t interactwith the `\fIstate\fR` field at all, but it is part of the behavior we want tosupport\.
.br

.br
\fBEnsuring the Content of a Draft Post Is Empty\fR
.br
===============================================
.br

.P
Even after we’ve called `\fIadd_text\fR` and added some content to our post, we stillwant the `\fIcontent\fR` method to return an empty string slice because the post isstill in the draft state, as shown on line 7 of Listing 17\-11\. For now, let’simplement the `\fIcontent\fR` method with the simplest thing that will fulfill thisrequirement: always returning an empty string slice\. We’ll change this lateronce we implement the ability to change a post’s state so it can be published\.So far, posts can only be in the draft state, so the post content should alwaysbe empty\. Listing 17\-14 shows this placeholder implementation:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
    pub fn content(&self) \-> &str {
        ""
    }
}
# 
# trait State {}
# 
# struct Draft {}
# 
# impl State for Draft {}

.EE

.RE
Listing 17\-14: Adding a placeholder implementation forthe `\fIcontent\fR` method on `\fIPost\fR` that always returns an empty string slice
.P
With this added `\fIcontent\fR` method, everything in Listing 17\-11 up to line 7works as intended\.
.br

.br
\fBRequesting a Review of the Post Changes Its State\fR
.br
===================================================
.br

.P
Next, we need to add functionality to request a review of a post, which shouldchange its state from `\fIDraft\fR` to `\fIPendingReview\fR`\. Listing 17\-15 shows this code:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
#     pub fn content(&self) \-> &str {
#         ""
#     }
# 
    pub fn request_review(&mut self) {
        if let Some(s) = self\.state\.take() {
            self\.state = Some(s\.request_review())
        }
    }
}

trait State {
    fn request_review(self: Box<Self>) \-> Box<dyn State>;
}

struct Draft {}

impl State for Draft {
    fn request_review(self: Box<Self>) \-> Box<dyn State> {
        Box::new(PendingReview {})
    }
}

struct PendingReview {}

impl State for PendingReview {
    fn request_review(self: Box<Self>) \-> Box<dyn State> {
        self
    }
}

.EE

.RE
Listing 17\-15: Implementing `\fIrequest_review\fR` methods on`\fIPost\fR` and the `\fIState\fR` trait
.P
We give `\fIPost\fR` a public method named `\fIrequest_review\fR` that will take a mutablereference to `\fIself\fR`\. Then we call an internal `\fIrequest_review\fR` method on thecurrent state of `\fIPost\fR`, and this second `\fIrequest_review\fR` method consumes thecurrent state and returns a new state\.
.P
We’ve added the `\fIrequest_review\fR` method to the `\fIState\fR` trait; all types thatimplement the trait will now need to implement the `\fIrequest_review\fR` method\.Note that rather than having `\fIself\fR`, `\fI&self\fR`, or `\fI&mut self\fR` as the firstparameter of the method, we have `\fIself: Box<Self>\fR`\. This syntax means themethod is only valid when called on a `\fIBox\fR` holding the type\. This syntax takesownership of `\fIBox<Self>\fR`, invalidating the old state so the state value of the`\fIPost\fR` can transform into a new state\.
.P
To consume the old state, the `\fIrequest_review\fR` method needs to take ownershipof the state value\. This is where the `\fIOption\fR` in the `\fIstate\fR` field of `\fIPost\fR`comes in: we call the `\fItake\fR` method to take the `\fISome\fR` value out of the `\fIstate\fR`field and leave a `\fINone\fR` in its place, because Rust doesn’t let us haveunpopulated fields in structs\. This lets us move the `\fIstate\fR` value out of`\fIPost\fR` rather than borrowing it\. Then we’ll set the post’s `\fIstate\fR` value to theresult of this operation\.
.P
We need to set `\fIstate\fR` to `\fINone\fR` temporarily rather than setting it directlywith code like `\fIself\.state = self\.state\.request_review();\fR` to get ownership ofthe `\fIstate\fR` value\. This ensures `\fIPost\fR` can’t use the old `\fIstate\fR` value afterwe’ve transformed it into a new state\.
.P
The `\fIrequest_review\fR` method on `\fIDraft\fR` needs to return a new, boxed instance ofa new `\fIPendingReview\fR` struct, which represents the state when a post is waitingfor a review\. The `\fIPendingReview\fR` struct also implements the `\fIrequest_review\fR`method but doesn’t do any transformations\. Rather, it returns itself, becausewhen we request a review on a post already in the `\fIPendingReview\fR` state, itshould stay in the `\fIPendingReview\fR` state\.
.P
Now we can start seeing the advantages of the state pattern: the`\fIrequest_review\fR` method on `\fIPost\fR` is the same no matter its `\fIstate\fR` value\. Eachstate is responsible for its own rules\.
.P
We’ll leave the `\fIcontent\fR` method on `\fIPost\fR` as is, returning an empty stringslice\. We can now have a `\fIPost\fR` in the `\fIPendingReview\fR` state as well as in the`\fIDraft\fR` state, but we want the same behavior in the `\fIPendingReview\fR` state\.Listing 17\-11 now works up to line 10!
.br

.br
\fBAdding the \fR
.br
=============
.br
`\fIapprove\fR` Method that Changes the Behavior of `\fIcontent\fR`
.P
The `\fIapprove\fR` method will be similar to the `\fIrequest_review\fR` method: it willset `\fIstate\fR` to the value that the current state says it should have when thatstate is approved, as shown in Listing 17\-16:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
#     pub fn content(&self) \-> &str {
#         ""
#     }
# 
#     pub fn request_review(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.request_review())
#         }
#     }
# 
    pub fn approve(&mut self) {
        if let Some(s) = self\.state\.take() {
            self\.state = Some(s\.approve())
        }
    }
}

trait State {
    fn request_review(self: Box<Self>) \-> Box<dyn State>;
    fn approve(self: Box<Self>) \-> Box<dyn State>;
}

struct Draft {}

impl State for Draft {
    // \-\-snip\-\-
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(PendingReview {})
#     }
# 
    fn approve(self: Box<Self>) \-> Box<dyn State> {
        self
    }
}

struct PendingReview {}

impl State for PendingReview {
    // \-\-snip\-\-
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
    fn approve(self: Box<Self>) \-> Box<dyn State> {
        Box::new(Published {})
    }
}

struct Published {}

impl State for Published {
    fn request_review(self: Box<Self>) \-> Box<dyn State> {
        self
    }

    fn approve(self: Box<Self>) \-> Box<dyn State> {
        self
    }
}

.EE

.RE
Listing 17\-16: Implementing the `\fIapprove\fR` method on`\fIPost\fR` and the `\fIState\fR` trait
.P
We add the `\fIapprove\fR` method to the `\fIState\fR` trait and add a new struct thatimplements `\fIState\fR`, the `\fIPublished\fR` state\.
.P
Similar to `\fIrequest_review\fR`, if we call the `\fIapprove\fR` method on a `\fIDraft\fR`, itwill have no effect because it will return `\fIself\fR`\. When we call `\fIapprove\fR` on`\fIPendingReview\fR`, it returns a new, boxed instance of the `\fIPublished\fR` struct\.The `\fIPublished\fR` struct implements the `\fIState\fR` trait, and for both the`\fIrequest_review\fR` method and the `\fIapprove\fR` method, it returns itself, becausethe post should stay in the `\fIPublished\fR` state in those cases\.
.P
Now we need to update the `\fIcontent\fR` method on `\fIPost\fR`: if the state is`\fIPublished\fR`, we want to return the value in the post’s `\fIcontent\fR` field;otherwise, we want to return an empty string slice, as shown in Listing 17\-17:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
impl Post {
    // \-\-snip\-\-
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
    pub fn content(&self) \-> &str {
        self\.state\.as_ref()\.unwrap()\.content(self)
    }
    // \-\-snip\-\-
# 
#     pub fn request_review(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.request_review())
#         }
#     }
# 
#     pub fn approve(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.approve())
#         }
#     }
}
# 
# trait State {
#     fn request_review(self: Box<Self>) \-> Box<dyn State>;
#     fn approve(self: Box<Self>) \-> Box<dyn State>;
# }
# 
# struct Draft {}
# 
# impl State for Draft {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(PendingReview {})
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# }
# 
# struct PendingReview {}
# 
# impl State for PendingReview {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(Published {})
#     }
# }
# 
# struct Published {}
# 
# impl State for Published {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# }

.EE

.RE
Listing 17\-17: Updating the `\fIcontent\fR` method on `\fIPost\fR` todelegate to a `\fIcontent\fR` method on `\fIState\fR`
.P
Because the goal is to keep all these rules inside the structs that implement`\fIState\fR`, we call a `\fIcontent\fR` method on the value in `\fIstate\fR` and pass the postinstance (that is, `\fIself\fR`) as an argument\. Then we return the value that isreturned from using the `\fIcontent\fR` method on the `\fIstate\fR` value\.
.P
We call the `\fIas_ref\fR` method on the `\fIOption\fR` because we want a reference to thevalue inside the `\fIOption\fR` rather than ownership of the value\. Because `\fIstate\fR`is an `\fIOption<Box<dyn State>>\fR`, when we call `\fIas_ref\fR`, an `\fIOption<&Box<dyn State>>\fR` isreturned\. If we didn’t call `\fIas_ref\fR`, we would get an error because we can’tmove `\fIstate\fR` out of the borrowed `\fI&self\fR` of the function parameter\.
.P
We then call the `\fIunwrap\fR` method, which we know will never panic, because weknow the methods on `\fIPost\fR` ensure that `\fIstate\fR` will always contain a `\fISome\fR`value when those methods are done\. This is one of the cases we talked about inthe 
.UR ch09\-03\-to\-panic\-or\-not\-to\-panic\.html#cases\-in\-which\-you\-have\-more\-information\-than\-the\-compiler
.UE
“Cases In Which You Have More Information Than theCompiler” section of Chapter 9 when weknow that a `\fINone\fR` value is never possible, even though the compiler isn’t ableto understand that\.
.P
At this point, when we call `\fIcontent\fR` on the `\fI&Box<dyn State>\fR`, deref coercion willtake effect on the `\fI&\fR` and the `\fIBox\fR` so the `\fIcontent\fR` method will ultimately becalled on the type that implements the `\fIState\fR` trait\. That means we need to add`\fIcontent\fR` to the `\fIState\fR` trait definition, and that is where we’ll put thelogic for what content to return depending on which state we have, as shown inListing 17\-18:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     state: Option<Box<dyn State>>,
#     content: String,
# }
# 
# impl Post {
#     pub fn new() \-> Post {
#         Post {
#             state: Some(Box::new(Draft {})),
#             content: String::new(),
#         }
#     }
# 
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
#     pub fn content(&self) \-> &str {
#         self\.state\.as_ref()\.unwrap()\.content(self)
#     }
# 
#     pub fn request_review(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.request_review())
#         }
#     }
# 
#     pub fn approve(&mut self) {
#         if let Some(s) = self\.state\.take() {
#             self\.state = Some(s\.approve())
#         }
#     }
# }
# 
trait State {
    // \-\-snip\-\-
#     fn request_review(self: Box<Self>) \-> Box<dyn State>;
#     fn approve(self: Box<Self>) \-> Box<dyn State>;
# 
    fn content<'a>(&self, post: &'a Post) \-> &'a str {
        ""
    }
}

// \-\-snip\-\-
# 
# struct Draft {}
# 
# impl State for Draft {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(PendingReview {})
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# }
# 
# struct PendingReview {}
# 
# impl State for PendingReview {
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         Box::new(Published {})
#     }
# }
# 
struct Published {}

impl State for Published {
    // \-\-snip\-\-
#     fn request_review(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
#     fn approve(self: Box<Self>) \-> Box<dyn State> {
#         self
#     }
# 
    fn content<'a>(&self, post: &'a Post) \-> &'a str {
        &post\.content
    }
}

.EE

.RE
Listing 17\-18: Adding the `\fIcontent\fR` method to the `\fIState\fR`trait
.P
We add a default implementation for the `\fIcontent\fR` method that returns an emptystring slice\. That means we don’t need to implement `\fIcontent\fR` on the `\fIDraft\fR`and `\fIPendingReview\fR` structs\. The `\fIPublished\fR` struct will override the `\fIcontent\fR`method and return the value in `\fIpost\.content\fR`\.
.P
Note that we need lifetime annotations on this method, as we discussed inChapter 10\. We’re taking a reference to a `\fIpost\fR` as an argument and returning areference to part of that `\fIpost\fR`, so the lifetime of the returned reference isrelated to the lifetime of the `\fIpost\fR` argument\.
.P
And we’re done—all of Listing 17\-11 now works! We’ve implemented the statepattern with the rules of the blog post workflow\. The logic related to therules lives in the state objects rather than being scattered throughout `\fIPost\fR`\.
.br

.br
\fBTrade\-offs of the State Pattern\fR
.br
=================================
.br

.P
We’ve shown that Rust is capable of implementing the object\-oriented statepattern to encapsulate the different kinds of behavior a post should have ineach state\. The methods on `\fIPost\fR` know nothing about the various behaviors\. Theway we organized the code, we have to look in only one place to know thedifferent ways a published post can behave: the implementation of the `\fIState\fR`trait on the `\fIPublished\fR` struct\.
.P
If we were to create an alternative implementation that didn’t use the statepattern, we might instead use `\fImatch\fR` expressions in the methods on `\fIPost\fR` oreven in the `\fImain\fR` code that checks the state of the post and changes behaviorin those places\. That would mean we would have to look in several places tounderstand all the implications of a post being in the published state! Thiswould only increase the more states we added: each of those `\fImatch\fR` expressionswould need another arm\.
.P
With the state pattern, the `\fIPost\fR` methods and the places we use `\fIPost\fR` don’tneed `\fImatch\fR` expressions, and to add a new state, we would only need to add anew struct and implement the trait methods on that one struct\.
.P
The implementation using the state pattern is easy to extend to add morefunctionality\. To see the simplicity of maintaining code that uses the statepattern, try a few of these suggestions:
.P
Add a `\fIreject\fR` method that changes the post’s state from `\fIPendingReview\fR` backto `\fIDraft\fR`\.
.P
Require two calls to `\fIapprove\fR` before the state can be changed to `\fIPublished\fR`\.
.P
Allow users to add text content only when a post is in the `\fIDraft\fR` state\.Hint: have the state object responsible for what might change about thecontent but not responsible for modifying the `\fIPost\fR`\.
.P
One downside of the state pattern is that, because the states implement thetransitions between states, some of the states are coupled to each other\. If weadd another state between `\fIPendingReview\fR` and `\fIPublished\fR`, such as `\fIScheduled\fR`,we would have to change the code in `\fIPendingReview\fR` to transition to`\fIScheduled\fR` instead\. It would be less work if `\fIPendingReview\fR` didn’t need tochange with the addition of a new state, but that would mean switching toanother design pattern\.
.P
Another downside is that we’ve duplicated some logic\. To eliminate some of theduplication, we might try to make default implementations for the`\fIrequest_review\fR` and `\fIapprove\fR` methods on the `\fIState\fR` trait that return `\fIself\fR`;however, this would violate object safety, because the trait doesn’t know whatthe concrete `\fIself\fR` will be exactly\. We want to be able to use `\fIState\fR` as atrait object, so we need its methods to be object safe\.
.P
Other duplication includes the similar implementations of the `\fIrequest_review\fR`and `\fIapprove\fR` methods on `\fIPost\fR`\. Both methods delegate to the implementation ofthe same method on the value in the `\fIstate\fR` field of `\fIOption\fR` and set the newvalue of the `\fIstate\fR` field to the result\. If we had a lot of methods on `\fIPost\fR`that followed this pattern, we might consider defining a macro to eliminate therepetition (see the 
.UR ch19\-06\-macros\.html#macros
.UE
“Macros” section in Chapter 19)\.
.P
By implementing the state pattern exactly as it’s defined for object\-orientedlanguages, we’re not taking as full advantage of Rust’s strengths as we could\.Let’s look at some changes we can make to the `\fIblog\fR` crate that can makeinvalid states and transitions into compile time errors\.
.br

.br
\fBEncoding States and Behavior as Types\fR
.br
=======================================
.br

.P
We’ll show you how to rethink the state pattern to get a different set oftrade\-offs\. Rather than encapsulating the states and transitions completely sooutside code has no knowledge of them, we’ll encode the states into differenttypes\. Consequently, Rust’s type checking system will prevent attempts to usedraft posts where only published posts are allowed by issuing a compiler error\.
.P
Let’s consider the first part of `\fImain\fR` in Listing 17\-11:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use blog::Post;
# 
fn main() {
    let mut post = Post::new();

    post\.add_text("I ate a salad for lunch today");
    assert_eq!("", post\.content());
# 
#     post\.request_review();
#     assert_eq!("", post\.content());
# 
#     post\.approve();
#     assert_eq!("I ate a salad for lunch today", post\.content());
}

.EE

.RE
.P
We still enable the creation of new posts in the draft state using `\fIPost::new\fR`and the ability to add text to the post’s content\. But instead of having a`\fIcontent\fR` method on a draft post that returns an empty string, we’ll make it sodraft posts don’t have the `\fIcontent\fR` method at all\. That way, if we try to geta draft post’s content, we’ll get a compiler error telling us the methoddoesn’t exist\. As a result, it will be impossible for us to accidentallydisplay draft post content in production, because that code won’t even compile\.Listing 17\-19 shows the definition of a `\fIPost\fR` struct and a `\fIDraftPost\fR` struct,as well as methods on each:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct Post {
    content: String,
}

pub struct DraftPost {
    content: String,
}

impl Post {
    pub fn new() \-> DraftPost {
        DraftPost {
            content: String::new(),
        }
    }

    pub fn content(&self) \-> &str {
        &self\.content
    }
}

impl DraftPost {
    pub fn add_text(&mut self, text: &str) {
        self\.content\.push_str(text);
    }
}

.EE

.RE
Listing 17\-19: A `\fIPost\fR` with a `\fIcontent\fR` method and a`\fIDraftPost\fR` without a `\fIcontent\fR` method
.P
Both the `\fIPost\fR` and `\fIDraftPost\fR` structs have a private `\fIcontent\fR` field thatstores the blog post text\. The structs no longer have the `\fIstate\fR` field becausewe’re moving the encoding of the state to the types of the structs\. The `\fIPost\fR`struct will represent a published post, and it has a `\fIcontent\fR` method thatreturns the `\fIcontent\fR`\.
.P
We still have a `\fIPost::new\fR` function, but instead of returning an instance of`\fIPost\fR`, it returns an instance of `\fIDraftPost\fR`\. Because `\fIcontent\fR` is privateand there aren’t any functions that return `\fIPost\fR`, it’s not possible to createan instance of `\fIPost\fR` right now\.
.P
The `\fIDraftPost\fR` struct has an `\fIadd_text\fR` method, so we can add text to`\fIcontent\fR` as before, but note that `\fIDraftPost\fR` does not have a `\fIcontent\fR` methoddefined! So now the program ensures all posts start as draft posts, and draftposts don’t have their content available for display\. Any attempt to get aroundthese constraints will result in a compiler error\.
.br

.br
\fBImplementing Transitions as Transformations into Different Types\fR
.br
==================================================================
.br

.P
So how do we get a published post? We want to enforce the rule that a draftpost has to be reviewed and approved before it can be published\. A post in thepending review state should still not display any content\. Let’s implementthese constraints by adding another struct, `\fIPendingReviewPost\fR`, defining the`\fIrequest_review\fR` method on `\fIDraftPost\fR` to return a `\fIPendingReviewPost\fR`, anddefining an `\fIapprove\fR` method on `\fIPendingReviewPost\fR` to return a `\fIPost\fR`, asshown in Listing 17\-20:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct Post {
#     content: String,
# }
# 
# pub struct DraftPost {
#     content: String,
# }
# 
# impl Post {
#     pub fn new() \-> DraftPost {
#         DraftPost {
#             content: String::new(),
#         }
#     }
# 
#     pub fn content(&self) \-> &str {
#         &self\.content
#     }
# }
# 
impl DraftPost {
    // \-\-snip\-\-
#     pub fn add_text(&mut self, text: &str) {
#         self\.content\.push_str(text);
#     }
# 
    pub fn request_review(self) \-> PendingReviewPost {
        PendingReviewPost {
            content: self\.content,
        }
    }
}

pub struct PendingReviewPost {
    content: String,
}

impl PendingReviewPost {
    pub fn approve(self) \-> Post {
        Post {
            content: self\.content,
        }
    }
}

.EE

.RE
Listing 17\-20: A `\fIPendingReviewPost\fR` that gets created bycalling `\fIrequest_review\fR` on `\fIDraftPost\fR` and an `\fIapprove\fR` method that turns a`\fIPendingReviewPost\fR` into a published `\fIPost\fR`
.P
The `\fIrequest_review\fR` and `\fIapprove\fR` methods take ownership of `\fIself\fR`, thusconsuming the `\fIDraftPost\fR` and `\fIPendingReviewPost\fR` instances and transformingthem into a `\fIPendingReviewPost\fR` and a published `\fIPost\fR`, respectively\. This way,we won’t have any lingering `\fIDraftPost\fR` instances after we’ve called`\fIrequest_review\fR` on them, and so forth\. The `\fIPendingReviewPost\fR` struct doesn’thave a `\fIcontent\fR` method defined on it, so attempting to read its contentresults in a compiler error, as with `\fIDraftPost\fR`\. Because the only way to get apublished `\fIPost\fR` instance that does have a `\fIcontent\fR` method defined is to callthe `\fIapprove\fR` method on a `\fIPendingReviewPost\fR`, and the only way to get a`\fIPendingReviewPost\fR` is to call the `\fIrequest_review\fR` method on a `\fIDraftPost\fR`,we’ve now encoded the blog post workflow into the type system\.
.P
But we also have to make some small changes to `\fImain\fR`\. The `\fIrequest_review\fR` and`\fIapprove\fR` methods return new instances rather than modifying the struct they’recalled on, so we need to add more `\fIlet post =\fR` shadowing assignments to savethe returned instances\. We also can’t have the assertions about the draft andpending review post’s contents be empty strings, nor do we need them: we can’tcompile code that tries to use the content of posts in those states any longer\.The updated code in `\fImain\fR` is shown in Listing 17\-21:Filename: src/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use blog::Post;

fn main() {
    let mut post = Post::new();

    post\.add_text("I ate a salad for lunch today");

    let post = post\.request_review();

    let post = post\.approve();

    assert_eq!("I ate a salad for lunch today", post\.content());
}

.EE

.RE
Listing 17\-21: Modifications to `\fImain\fR` to use the newimplementation of the blog post workflow
.P
The changes we needed to make to `\fImain\fR` to reassign `\fIpost\fR` mean that thisimplementation doesn’t quite follow the object\-oriented state pattern anymore:the transformations between the states are no longer encapsulated entirelywithin the `\fIPost\fR` implementation\. However, our gain is that invalid states arenow impossible because of the type system and the type checking that happens atcompile time! This ensures that certain bugs, such as display of the content ofan unpublished post, will be discovered before they make it to production\.
.P
Try the tasks suggested for additional requirements that we mentioned at thestart of this section on the `\fIblog\fR` crate as it is after Listing 17\-20 to seewhat you think about the design of this version of the code\. Note that some ofthe tasks might be completed already in this design\.
.P
We’ve seen that even though Rust is capable of implementing object\-orienteddesign patterns, other patterns, such as encoding state into the type system,are also available in Rust\. These patterns have different trade\-offs\. Althoughyou might be very familiar with object\-oriented patterns, rethinking theproblem to take advantage of Rust’s features can provide benefits, such aspreventing some bugs at compile time\. Object\-oriented patterns won’t always bethe best solution in Rust due to certain features, like ownership, thatobject\-oriented languages don’t have\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
No matter whether or not you think Rust is an object\-oriented language afterreading this chapter, you now know that you can use trait objects to get someobject\-oriented features in Rust\. Dynamic dispatch can give your code someflexibility in exchange for a bit of runtime performance\. You can use thisflexibility to implement object\-oriented patterns that can help your code’smaintainability\. Rust also has other features, like ownership, thatobject\-oriented languages don’t have\. An object\-oriented pattern won’t alwaysbe the best way to take advantage of Rust’s strengths, but is an availableoption\.
.P
Next, we’ll look at patterns, which are another of Rust’s features that enablelots of flexibility\. We’ve looked at them briefly throughout the book buthaven’t seen their full capability yet\. Let’s go!
.SH "Patterns and Matching"

.br

.br
\fBPatterns and Matching\fR
.br
=======================
.br

.P
Patterns are a special syntax in Rust for matching against the structure oftypes, both complex and simple\. Using patterns in conjunction with `\fImatch\fR`expressions and other constructs gives you more control over a program’scontrol flow\. A pattern consists of some combination of the following:
.P
Literals
.P
Destructured arrays, enums, structs, or tuples
.P
Variables
.P
Wildcards
.P
Placeholders
.P
These components describe the shape of the data we’re working with, which wethen match against values to determine whether our program has the correct datato continue running a particular piece of code\.
.P
To use a pattern, we compare it to some value\. If the pattern matches thevalue, we use the value parts in our code\. Recall the `\fImatch\fR` expressions inChapter 6 that used patterns, such as the coin\-sorting machine example\. If thevalue fits the shape of the pattern, we can use the named pieces\. If itdoesn’t, the code associated with the pattern won’t run\.
.P
This chapter is a reference on all things related to patterns\. We’ll cover thevalid places to use patterns, the difference between refutable and irrefutablepatterns, and the different kinds of pattern syntax that you might see\. By theend of the chapter, you’ll know how to use patterns to express many concepts ina clear way\.
.SH "All the Places Patterns Can Be Used"

.br

.br
\fBAll the Places Patterns Can Be Used\fR
.br
=====================================
.br

.P
Patterns pop up in a number of places in Rust, and you’ve been using them a lotwithout realizing it! This section discusses all the places where patterns arevalid\.`\fImatch\fR` Arms
.P
As discussed in Chapter 6, we use patterns in the arms of `\fImatch\fR` expressions\.Formally, `\fImatch\fR` expressions are defined as the keyword `\fImatch\fR`, a value tomatch on, and one or more match arms that consist of a pattern and anexpression to run if the value matches that arm’s pattern, like this:
.RS
.IP \fBtext\fR 2

.br
.EX
match VALUE {
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
}

.EE

.RE
.P
One requirement for `\fImatch\fR` expressions is that they need to be \fIexhaustive\fR inthe sense that all possibilities for the value in the `\fImatch\fR` expression mustbe accounted for\. One way to ensure you’ve covered every possibility is to havea catchall pattern for the last arm: for example, a variable name matching anyvalue can never fail and thus covers every remaining case\.
.P
A particular pattern `\fI_\fR` will match anything, but it never binds to a variable,so it’s often used in the last match arm\. The `\fI_\fR` pattern can be useful whenyou want to ignore any value not specified, for example\. We’ll cover the `\fI_\fR`pattern in more detail in the 
.UR ch18\-03\-pattern\-syntax\.html#ignoring\-values\-in\-a\-pattern
.UE
“Ignoring Values in aPattern” section later in thischapter\.
.br

.br
\fBConditional \fR
.br
==============
.br
`\fIif let\fR` Expressions
.P
In Chapter 6 we discussed how to use `\fIif let\fR` expressions mainly as a shorterway to write the equivalent of a `\fImatch\fR` that only matches one case\.Optionally, `\fIif let\fR` can have a corresponding `\fIelse\fR` containing code to run ifthe pattern in the `\fIif let\fR` doesn’t match\.
.P
Listing 18\-1 shows that it’s also possible to mix and match `\fIif let\fR`, `\fIelse if\fR`, and `\fIelse if let\fR` expressions\. Doing so gives us more flexibility than a`\fImatch\fR` expression in which we can express only one value to compare with thepatterns\. Also, the conditions in a series of `\fIif let\fR`, `\fIelse if\fR`, `\fIelse if let\fR` arms aren’t required to relate to each other\.
.P
The code in Listing 18\-1 shows a series of checks for several conditions thatdecide what the background color should be\. For this example, we’ve createdvariables with hardcoded values that a real program might receive from userinput\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let favorite_color: Option<&str> = None;
    let is_tuesday = false;
    let age: Result<u8, _> = "34"\.parse();

    if let Some(color) = favorite_color {
        println!("Using your favorite color, {}, as the background", color);
    } else if is_tuesday {
        println!("Tuesday is green day!");
    } else if let Ok(age) = age {
        if age > 30 {
            println!("Using purple as the background color");
        } else {
            println!("Using orange as the background color");
        }
    } else {
        println!("Using blue as the background color");
    }
}

.EE

.RE
Listing 18\-1: Mixing `\fIif let\fR`, `\fIelse if\fR`, `\fIelse if let\fR`,and `\fIelse\fR`
.P
If the user specifies a favorite color, that color is the background color\. Iftoday is Tuesday, the background color is green\. If the user specifiestheir age as a string and we can parse it as a number successfully, the coloris either purple or orange depending on the value of the number\. If none ofthese conditions apply, the background color is blue\.
.P
This conditional structure lets us support complex requirements\. With thehardcoded values we have here, this example will print `\fIUsing purple as the background color\fR`\.
.P
You can see that `\fIif let\fR` can also introduce shadowed variables in the same waythat `\fImatch\fR` arms can: the line `\fIif let Ok(age) = age\fR` introduces a newshadowed `\fIage\fR` variable that contains the value inside the `\fIOk\fR` variant\. Thismeans we need to place the `\fIif age > 30\fR` condition within that block: we can’tcombine these two conditions into `\fIif let Ok(age) = age && age > 30\fR`\. Theshadowed `\fIage\fR` we want to compare to 30 isn’t valid until the new scope startswith the curly bracket\.
.P
The downside of using `\fIif let\fR` expressions is that the compiler doesn’t checkexhaustiveness, whereas with `\fImatch\fR` expressions it does\. If we omitted thelast `\fIelse\fR` block and therefore missed handling some cases, the compiler wouldnot alert us to the possible logic bug\.`\fIwhile let\fR` Conditional Loops
.P
Similar in construction to `\fIif let\fR`, the `\fIwhile let\fR` conditional loop allows a`\fIwhile\fR` loop to run for as long as a pattern continues to match\. The example inListing 18\-2 shows a `\fIwhile let\fR` loop that uses a vector as a stack and printsthe values in the vector in the opposite order in which they were pushed\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut stack = Vec::new();

    stack\.push(1);
    stack\.push(2);
    stack\.push(3);

    while let Some(top) = stack\.pop() {
        println!("{}", top);
    }
# }

.EE

.RE
Listing 18\-2: Using a `\fIwhile let\fR` loop to print valuesfor as long as `\fIstack\.pop()\fR` returns `\fISome\fR`
.P
This example prints 3, 2, and then 1\. The `\fIpop\fR` method takes the last elementout of the vector and returns `\fISome(value)\fR`\. If the vector is empty, `\fIpop\fR`returns `\fINone\fR`\. The `\fIwhile\fR` loop continues running the code in its block aslong as `\fIpop\fR` returns `\fISome\fR`\. When `\fIpop\fR` returns `\fINone\fR`, the loop stops\. We canuse `\fIwhile let\fR` to pop every element off our stack\.`\fIfor\fR` Loops
.P
In Chapter 3, we mentioned that the `\fIfor\fR` loop is the most common loopconstruction in Rust code, but we haven’t yet discussed the pattern that `\fIfor\fR`takes\. In a `\fIfor\fR` loop, the pattern is the value that directly follows thekeyword `\fIfor\fR`, so in `\fIfor x in y\fR` the `\fIx\fR` is the pattern\.
.P
Listing 18\-3 demonstrates how to use a pattern in a `\fIfor\fR` loop to destructure,or break apart, a tuple as part of the `\fIfor\fR` loop\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let v = vec!['a', 'b', 'c'];

    for (index, value) in v\.iter()\.enumerate() {
        println!("{} is at index {}", value, index);
    }
# }

.EE

.RE
Listing 18\-3: Using a pattern in a `\fIfor\fR` loop todestructure a tuple
.P
The code in Listing 18\-3 will print the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.52s
     Running `target/debug/patterns`
a is at index 0
b is at index 1
c is at index 2

.EE

.RE
.P
We use the `\fIenumerate\fR` method to adapt an iterator to produce a value and thatvalue’s index in the iterator, placed into a tuple\. The first value produced isthe tuple `\fI(0, 'a')\fR`\. When this value is matched to the pattern `\fI(index, value)\fR`, `\fIindex\fR` will be `\fI0\fR` and `\fIvalue\fR` will be `\fI'a'\fR`, printing the first lineof the output\.`\fIlet\fR` Statements
.P
Prior to this chapter, we had only explicitly discussed using patterns with`\fImatch\fR` and `\fIif let\fR`, but in fact, we’ve used patterns in other places as well,including in `\fIlet\fR` statements\. For example, consider this straightforwardvariable assignment with `\fIlet\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
let x = 5;

.EE

.RE
.P
Throughout this book, we’ve used `\fIlet\fR` like this hundreds of times, andalthough you might not have realized it, you were using patterns! Moreformally, a `\fIlet\fR` statement looks like this:
.RS
.IP \fBtext\fR 2

.br
.EX
let PATTERN = EXPRESSION;

.EE

.RE
.P
In statements like `\fIlet x = 5;\fR` with a variable name in the `\fIPATTERN\fR` slot, thevariable name is just a particularly simple form of a pattern\. Rust comparesthe expression against the pattern and assigns any names it finds\. So in the`\fIlet x = 5;\fR` example, `\fIx\fR` is a pattern that means “bind what matches here tothe variable `\fIx\fR`\.” Because the name `\fIx\fR` is the whole pattern, this patterneffectively means “bind everything to the variable `\fIx\fR`, whatever the value is\.”
.P
To see the pattern matching aspect of `\fIlet\fR` more clearly, consider Listing18\-4, which uses a pattern with `\fIlet\fR` to destructure a tuple\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let (x, y, z) = (1, 2, 3);
# }

.EE

.RE
Listing 18\-4: Using a pattern to destructure a tuple andcreate three variables at once
.P
Here, we match a tuple against a pattern\. Rust compares the value `\fI(1, 2, 3)\fR`to the pattern `\fI(x, y, z)\fR` and sees that the value matches the pattern, so Rustbinds `\fI1\fR` to `\fIx\fR`, `\fI2\fR` to `\fIy\fR`, and `\fI3\fR` to `\fIz\fR`\. You can think of this tuplepattern as nesting three individual variable patterns inside it\.
.P
If the number of elements in the pattern doesn’t match the number of elementsin the tuple, the overall type won’t match and we’ll get a compiler error\. Forexample, Listing 18\-5 shows an attempt to destructure a tuple with threeelements into two variables, which won’t work\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let (x, y) = (1, 2, 3);
# }

.EE

.RE
Listing 18\-5: Incorrectly constructing a pattern whosevariables don’t match the number of elements in the tuple
.P
Attempting to compile this code results in this type error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
error[E0308]: mismatched types
 \-\-> src/main\.rs:2:9
  |
2 |     let (x, y) = (1, 2, 3);
  |         ^^^^^^   \-\-\-\-\-\-\-\-\- this expression has type `({integer}, {integer}, {integer})`
  |         |
  |         expected a tuple with 3 elements, found one with 2 elements
  |
  = note: expected tuple `({integer}, {integer}, {integer})`
             found tuple `(_, _)`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0308`\.
error: could not compile `patterns`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
If we wanted to ignore one or more of the values in the tuple, we could use `\fI_\fR`or `\fI\.\.\fR`, as you’ll see in the 
.UR ch18\-03\-pattern\-syntax\.html#ignoring\-values\-in\-a\-pattern
.UE
“Ignoring Values in aPattern” section\. If the problemis that we have too many variables in the pattern, the solution is to make thetypes match by removing variables so the number of variables equals the numberof elements in the tuple\.
.br

.br
\fBFunction Parameters\fR
.br
=====================
.br

.P
Function parameters can also be patterns\. The code in Listing 18\-6, whichdeclares a function named `\fIfoo\fR` that takes one parameter named `\fIx\fR` of type`\fIi32\fR`, should by now look familiar\.
.RS
.IP \fBrust\fR 2

.br
.EX
fn foo(x: i32) {
    // code goes here
}
# 
# fn main() {}

.EE

.RE
Listing 18\-6: A function signature uses patterns in theparameters
.P
The `\fIx\fR` part is a pattern! As we did with `\fIlet\fR`, we could match a tuple in afunction’s arguments to the pattern\. Listing 18\-7 splits the values in a tupleas we pass it to a function\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn print_coordinates(&(x, y): &(i32, i32)) {
    println!("Current location: ({}, {})", x, y);
}

fn main() {
    let point = (3, 5);
    print_coordinates(&point);
}

.EE

.RE
Listing 18\-7: A function with parameters that destructurea tuple
.P
This code prints `\fICurrent location: (3, 5)\fR`\. The values `\fI&(3, 5)\fR` match thepattern `\fI&(x, y)\fR`, so `\fIx\fR` is the value `\fI3\fR` and `\fIy\fR` is the value `\fI5\fR`\.
.P
We can also use patterns in closure parameter lists in the same way as infunction parameter lists, because closures are similar to functions, asdiscussed in Chapter 13\.
.P
At this point, you’ve seen several ways of using patterns, but patterns don’twork the same in every place we can use them\. In some places, the patterns mustbe irrefutable; in other circumstances, they can be refutable\. We’ll discussthese two concepts next\.
.SH "Refutability: Whether a Pattern Might Fail to Match"

.br

.br
\fBRefutability: Whether a Pattern Might Fail to Match\fR
.br
=====================================================
.br

.P
Patterns come in two forms: refutable and irrefutable\. Patterns that will matchfor any possible value passed are \fIirrefutable\fR\. An example would be `\fIx\fR` in thestatement `\fIlet x = 5;\fR` because `\fIx\fR` matches anything and therefore cannot failto match\. Patterns that can fail to match for some possible value are\fIrefutable\fR\. An example would be `\fISome(x)\fR` in the expression `\fIif let Some(x) = a_value\fR` because if the value in the `\fIa_value\fR` variable is `\fINone\fR` rather than`\fISome\fR`, the `\fISome(x)\fR` pattern will not match\.
.P
Function parameters, `\fIlet\fR` statements, and `\fIfor\fR` loops can only acceptirrefutable patterns, because the program cannot do anything meaningful whenvalues don’t match\. The `\fIif let\fR` and `\fIwhile let\fR` expressions acceptrefutable and irrefutable patterns, but the compiler warns againstirrefutable patterns because by definition they’re intended to handle possiblefailure: the functionality of a conditional is in its ability to performdifferently depending on success or failure\.
.P
In general, you shouldn’t have to worry about the distinction between refutableand irrefutable patterns; however, you do need to be familiar with the conceptof refutability so you can respond when you see it in an error message\. Inthose cases, you’ll need to change either the pattern or the construct you’reusing the pattern with, depending on the intended behavior of the code\.
.P
Let’s look at an example of what happens when we try to use a refutable patternwhere Rust requires an irrefutable pattern and vice versa\. Listing 18\-8 shows a`\fIlet\fR` statement, but for the pattern we’ve specified `\fISome(x)\fR`, a refutablepattern\. As you might expect, this code will not compile\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let some_option_value: Option<i32> = None;
    let Some(x) = some_option_value;
# }

.EE

.RE
Listing 18\-8: Attempting to use a refutable pattern with`\fIlet\fR`
.P
If `\fIsome_option_value\fR` was a `\fINone\fR` value, it would fail to match the pattern`\fISome(x)\fR`, meaning the pattern is refutable\. However, the `\fIlet\fR` statement canonly accept an irrefutable pattern because there is nothing valid the code cando with a `\fINone\fR` value\. At compile time, Rust will complain that we’ve tried touse a refutable pattern where an irrefutable pattern is required:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
error[E0005]: refutable pattern in local binding: `None` not covered
   \-\-> src/main\.rs:3:9
    |
3   |     let Some(x) = some_option_value;
    |         ^^^^^^^ pattern `None` not covered
    |
    = note: `let` bindings require an "irrefutable pattern", like a `struct` or an `enum` with only one variant
    = note: for more information, visit https://doc\.rust\-lang\.org/book/ch18\-02\-refutability\.html
    = note: the matched value is of type `Option<i32>`
help: you might want to use `if let` to ignore the variant that isn't matched
    |
3   |     if let Some(x) = some_option_value { /* */ }
    |

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0005`\.
error: could not compile `patterns`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Because we didn’t cover (and couldn’t cover!) every valid value with thepattern `\fISome(x)\fR`, Rust rightfully produces a compiler error\.
.P
To fix the problem where we have a refutable pattern where an irrefutablepattern is needed, we can change the code that uses the pattern: instead ofusing `\fIlet\fR`, we can use `\fIif let\fR`\. Then if the pattern doesn’t match, the codewill just skip the code in the curly brackets, giving it a way to continuevalidly\. Listing 18\-9 shows how to fix the code in Listing 18\-8\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     let some_option_value: Option<i32> = None;
    if let Some(x) = some_option_value {
        println!("{}", x);
    }
# }

.EE

.RE
Listing 18\-9: Using `\fIif let\fR` and a block with refutablepatterns instead of `\fIlet\fR`
.P
We’ve given the code an out! This code is perfectly valid, although it means wecannot use an irrefutable pattern without receiving an error\. If we give `\fIif let\fR` a pattern that will always match, such as `\fIx\fR`, as shown in Listing 18\-10,the compiler will give a warning\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    if let x = 5 {
        println!("{}", x);
    };
# }

.EE

.RE
Listing 18\-10: Attempting to use an irrefutable patternwith `\fIif let\fR`
.P
Rust complains that it doesn’t make sense to use `\fIif let\fR` with an irrefutablepattern:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
warning: irrefutable `if let` pattern
 \-\-> src/main\.rs:2:5
  |
2 | /     if let x = 5 {
3 | |         println!("{}", x);
4 | |     };
  | |_____^
  |
  = note: `#[warn(irrefutable_let_patterns)]` on by default
  = note: this pattern will always match, so the `if let` is useless
  = help: consider replacing the `if let` with a `let`

warning: 1 warning emitted

    Finished dev [unoptimized + debuginfo] target(s) in 0\.39s
     Running `target/debug/patterns`
5

.EE

.RE
.P
For this reason, match arms must use refutable patterns, except for the lastarm, which should match any remaining values with an irrefutable pattern\. Rustallows us to use an irrefutable pattern in a `\fImatch\fR` with only one arm, butthis syntax isn’t particularly useful and could be replaced with a simpler`\fIlet\fR` statement\.
.P
Now that you know where to use patterns and the difference between refutableand irrefutable patterns, let’s cover all the syntax we can use to createpatterns\.
.SH "Pattern Syntax"

.br

.br
\fBPattern Syntax\fR
.br
================
.br

.P
Throughout the book, you’ve seen examples of many kinds of patterns\. In thissection, we gather all the syntax valid in patterns and discuss why you mightwant to use each one\.
.br

.br
\fBMatching Literals\fR
.br
===================
.br

.P
As you saw in Chapter 6, you can match patterns against literals directly\. Thefollowing code gives some examples:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 1;

    match x {
        1 => println!("one"),
        2 => println!("two"),
        3 => println!("three"),
        _ => println!("anything"),
    }
# }

.EE

.RE
.P
This code prints `\fIone\fR` because the value in `\fIx\fR` is 1\. This syntax is usefulwhen you want your code to take an action if it gets a particular concretevalue\.
.br

.br
\fBMatching Named Variables\fR
.br
==========================
.br

.P
Named variables are irrefutable patterns that match any value, and we’ve usedthem many times in the book\. However, there is a complication when you usenamed variables in `\fImatch\fR` expressions\. Because `\fImatch\fR` starts a new scope,variables declared as part of a pattern inside the `\fImatch\fR` expression willshadow those with the same name outside the `\fImatch\fR` construct, as is the casewith all variables\. In Listing 18\-11, we declare a variable named `\fIx\fR` with thevalue `\fISome(5)\fR` and a variable `\fIy\fR` with the value `\fI10\fR`\. We then create a`\fImatch\fR` expression on the value `\fIx\fR`\. Look at the patterns in the match arms and`\fIprintln!\fR` at the end, and try to figure out what the code will print beforerunning this code or reading further\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = Some(5);
    let y = 10;

    match x {
        Some(50) => println!("Got 50"),
        Some(y) => println!("Matched, y = {:?}", y),
        _ => println!("Default case, x = {:?}", x),
    }

    println!("at the end: x = {:?}, y = {:?}", x, y);
# }

.EE

.RE
Listing 18\-11: A `\fImatch\fR` expression with an arm thatintroduces a shadowed variable `\fIy\fR`
.P
Let’s walk through what happens when the `\fImatch\fR` expression runs\. The patternin the first match arm doesn’t match the defined value of `\fIx\fR`, so the codecontinues\.
.P
The pattern in the second match arm introduces a new variable named `\fIy\fR` thatwill match any value inside a `\fISome\fR` value\. Because we’re in a new scope insidethe `\fImatch\fR` expression, this is a new `\fIy\fR` variable, not the `\fIy\fR` we declared atthe beginning with the value 10\. This new `\fIy\fR` binding will match any valueinside a `\fISome\fR`, which is what we have in `\fIx\fR`\. Therefore, this new `\fIy\fR` binds tothe inner value of the `\fISome\fR` in `\fIx\fR`\. That value is `\fI5\fR`, so the expression forthat arm executes and prints `\fIMatched, y = 5\fR`\.
.P
If `\fIx\fR` had been a `\fINone\fR` value instead of `\fISome(5)\fR`, the patterns in the firsttwo arms wouldn’t have matched, so the value would have matched to theunderscore\. We didn’t introduce the `\fIx\fR` variable in the pattern of theunderscore arm, so the `\fIx\fR` in the expression is still the outer `\fIx\fR` that hasn’tbeen shadowed\. In this hypothetical case, the `\fImatch\fR` would print `\fIDefault case, x = None\fR`\.
.P
When the `\fImatch\fR` expression is done, its scope ends, and so does the scope ofthe inner `\fIy\fR`\. The last `\fIprintln!\fR` produces `\fIat the end: x = Some(5), y = 10\fR`\.
.P
To create a `\fImatch\fR` expression that compares the values of the outer `\fIx\fR` and`\fIy\fR`, rather than introducing a shadowed variable, we would need to use a matchguard conditional instead\. We’ll talk about match guards later in the 
.UR #extra\-conditionals\-with\-match\-guards
.UE
“ExtraConditionals with Match Guards” section\.
.br

.br
\fBMultiple Patterns\fR
.br
===================
.br

.P
In `\fImatch\fR` expressions, you can match multiple patterns using the `\fI|\fR` syntax,which means \fIor\fR\. For example, the following code matches the value of `\fIx\fR`against the match arms, the first of which has an \fIor\fR option, meaning if thevalue of `\fIx\fR` matches either of the values in that arm, that arm’s code willrun:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 1;

    match x {
        1 | 2 => println!("one or two"),
        3 => println!("three"),
        _ => println!("anything"),
    }
# }

.EE

.RE
.P
This code prints `\fIone or two\fR`\.
.br

.br
\fBMatching Ranges of Values with \fR
.br
=================================
.br
`\fI\.\.=\fR`
.P
The `\fI\.\.=\fR` syntax allows us to match to an inclusive range of values\. In thefollowing code, when a pattern matches any of the values within the range, thatarm will execute:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 5;

    match x {
        1\.\.=5 => println!("one through five"),
        _ => println!("something else"),
    }
# }

.EE

.RE
.P
If `\fIx\fR` is 1, 2, 3, 4, or 5, the first arm will match\. This syntax is moreconvenient than using the `\fI|\fR` operator to express the same idea; instead of`\fI1\.\.=5\fR`, we would have to specify `\fI1 | 2 | 3 | 4 | 5\fR` if we used `\fI|\fR`\.Specifying a range is much shorter, especially if we want to match, say, anynumber between 1 and 1,000!
.P
Ranges are only allowed with numeric values or `\fIchar\fR` values, because thecompiler checks that the range isn’t empty at compile time\. The only types forwhich Rust can tell if a range is empty or not are `\fIchar\fR` and numeric values\.
.P
Here is an example using ranges of `\fIchar\fR` values:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 'c';

    match x {
        'a'\.\.='j' => println!("early ASCII letter"),
        'k'\.\.='z' => println!("late ASCII letter"),
        _ => println!("something else"),
    }
# }

.EE

.RE
.P
Rust can tell that `\fIc\fR` is within the first pattern’s range and prints `\fIearly ASCII letter\fR`\.
.br

.br
\fBDestructuring to Break Apart Values\fR
.br
=====================================
.br

.P
We can also use patterns to destructure structs, enums, tuples, and referencesto use different parts of these values\. Let’s walk through each value\.
.br

.br
\fBDestructuring Structs\fR
.br
=======================
.br

.P
Listing 18\-12 shows a `\fIPoint\fR` struct with two fields, `\fIx\fR` and `\fIy\fR`, that we canbreak apart using a pattern with a `\fIlet\fR` statement\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x: a, y: b } = p;
    assert_eq!(0, a);
    assert_eq!(7, b);
}

.EE

.RE
Listing 18\-12: Destructuring a struct’s fields intoseparate variables
.P
This code creates the variables `\fIa\fR` and `\fIb\fR` that match the values of the `\fIx\fR`and `\fIy\fR` fields of the `\fIp\fR` struct\. This example shows that the names of thevariables in the pattern don’t have to match the field names of the struct\. Butit’s common to want the variable names to match the field names to make iteasier to remember which variables came from which fields\.
.P
Because having variable names match the fields is common and because writing`\fIlet Point { x: x, y: y } = p;\fR` contains a lot of duplication, there is ashorthand for patterns that match struct fields: you only need to list the nameof the struct field, and the variables created from the pattern will have thesame names\. Listing 18\-13 shows code that behaves in the same way as the codein Listing 18\-12, but the variables created in the `\fIlet\fR` pattern are `\fIx\fR` and`\fIy\fR` instead of `\fIa\fR` and `\fIb\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let p = Point { x: 0, y: 7 };

    let Point { x, y } = p;
    assert_eq!(0, x);
    assert_eq!(7, y);
}

.EE

.RE
Listing 18\-13: Destructuring struct fields using structfield shorthand
.P
This code creates the variables `\fIx\fR` and `\fIy\fR` that match the `\fIx\fR` and `\fIy\fR` fieldsof the `\fIp\fR` variable\. The outcome is that the variables `\fIx\fR` and `\fIy\fR` contain thevalues from the `\fIp\fR` struct\.
.P
We can also destructure with literal values as part of the struct patternrather than creating variables for all the fields\. Doing so allows us to testsome of the fields for particular values while creating variables todestructure the other fields\.
.P
Listing 18\-14 shows a `\fImatch\fR` expression that separates `\fIPoint\fR` values intothree cases: points that lie directly on the `\fIx\fR` axis (which is true when `\fIy = 0\fR`), on the `\fIy\fR` axis (`\fIx = 0\fR`), or neither\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# struct Point {
#     x: i32,
#     y: i32,
# }
# 
fn main() {
    let p = Point { x: 0, y: 7 };

    match p {
        Point { x, y: 0 } => println!("On the x axis at {}", x),
        Point { x: 0, y } => println!("On the y axis at {}", y),
        Point { x, y } => println!("On neither axis: ({}, {})", x, y),
    }
}

.EE

.RE
Listing 18\-14: Destructuring and matching literal valuesin one pattern
.P
The first arm will match any point that lies on the `\fIx\fR` axis by specifying thatthe `\fIy\fR` field matches if its value matches the literal `\fI0\fR`\. The pattern stillcreates an `\fIx\fR` variable that we can use in the code for this arm\.
.P
Similarly, the second arm matches any point on the `\fIy\fR` axis by specifying thatthe `\fIx\fR` field matches if its value is `\fI0\fR` and creates a variable `\fIy\fR` for thevalue of the `\fIy\fR` field\. The third arm doesn’t specify any literals, so itmatches any other `\fIPoint\fR` and creates variables for both the `\fIx\fR` and `\fIy\fR` fields\.
.P
In this example, the value `\fIp\fR` matches the second arm by virtue of `\fIx\fR`containing a 0, so this code will print `\fIOn the y axis at 7\fR`\.
.br

.br
\fBDestructuring Enums\fR
.br
=====================
.br

.P
We’ve destructured enums earlier in this book, for example, when wedestructured `\fIOption<i32>\fR` in Listing 6\-5 in Chapter 6\. One detail we haven’tmentioned explicitly is that the pattern to destructure an enum shouldcorrespond to the way the data stored within the enum is defined\. As anexample, in Listing 18\-15 we use the `\fIMessage\fR` enum from Listing 6\-2 and writea `\fImatch\fR` with patterns that will destructure each inner value\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32),
}

fn main() {
    let msg = Message::ChangeColor(0, 160, 255);

    match msg {
        Message::Quit => {
            println!("The Quit variant has no data to destructure\.")
        }
        Message::Move { x, y } => {
            println!(
                "Move in the x direction {} and in the y direction {}",
                x, y
            );
        }
        Message::Write(text) => println!("Text message: {}", text),
        Message::ChangeColor(r, g, b) => println!(
            "Change the color to red {}, green {}, and blue {}",
            r, g, b
        ),
    }
}

.EE

.RE
Listing 18\-15: Destructuring enum variants that holddifferent kinds of values
.P
This code will print `\fIChange the color to red 0, green 160, and blue 255\fR`\. Trychanging the value of `\fImsg\fR` to see the code from the other arms run\.
.P
For enum variants without any data, like `\fIMessage::Quit\fR`, we can’t destructurethe value any further\. We can only match on the literal `\fIMessage::Quit\fR` value,and no variables are in that pattern\.
.P
For struct\-like enum variants, such as `\fIMessage::Move\fR`, we can use a patternsimilar to the pattern we specify to match structs\. After the variant name, weplace curly brackets and then list the fields with variables so we break apartthe pieces to use in the code for this arm\. Here we use the shorthand form aswe did in Listing 18\-13\.
.P
For tuple\-like enum variants, like `\fIMessage::Write\fR` that holds a tuple with oneelement and `\fIMessage::ChangeColor\fR` that holds a tuple with three elements, thepattern is similar to the pattern we specify to match tuples\. The number ofvariables in the pattern must match the number of elements in the variant we’rematching\.
.br

.br
\fBDestructuring Nested Structs and Enums\fR
.br
========================================
.br

.P
Until now, all our examples have been matching structs or enums that were onelevel deep\. Matching can work on nested items too!
.P
For example, we can refactor the code in Listing 18\-15 to support RGB and HSVcolors in the `\fIChangeColor\fR` message, as shown in Listing 18\-16\.
.RS
.IP \fBrust\fR 2

.br
.EX
enum Color {
    Rgb(i32, i32, i32),
    Hsv(i32, i32, i32),
}

enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(Color),
}

fn main() {
    let msg = Message::ChangeColor(Color::Hsv(0, 160, 255));

    match msg {
        Message::ChangeColor(Color::Rgb(r, g, b)) => println!(
            "Change the color to red {}, green {}, and blue {}",
            r, g, b
        ),
        Message::ChangeColor(Color::Hsv(h, s, v)) => println!(
            "Change the color to hue {}, saturation {}, and value {}",
            h, s, v
        ),
        _ => (),
    }
}

.EE

.RE
Listing 18\-16: Matching on nested enums
.P
The pattern of the first arm in the `\fImatch\fR` expression matches a`\fIMessage::ChangeColor\fR` enum variant that contains a `\fIColor::Rgb\fR` variant; thenthe pattern binds to the three inner `\fIi32\fR` values\. The pattern of the secondarm also matches a `\fIMessage::ChangeColor\fR` enum variant, but the inner enummatches the `\fIColor::Hsv\fR` variant instead\. We can specify these complexconditions in one `\fImatch\fR` expression, even though two enums are involved\.
.br

.br
\fBDestructuring Structs and Tuples\fR
.br
==================================
.br

.P
We can mix, match, and nest destructuring patterns in even more complex ways\.The following example shows a complicated destructure where we nest structs andtuples inside a tuple and destructure all the primitive values out:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
#     struct Point {
#         x: i32,
#         y: i32,
#     }
# 
    let ((feet, inches), Point { x, y }) = ((3, 10), Point { x: 3, y: \-10 });
# }

.EE

.RE
.P
This code lets us break complex types into their component parts so we can usethe values we’re interested in separately\.
.P
Destructuring with patterns is a convenient way to use pieces of values, suchas the value from each field in a struct, separately from each other\.
.br

.br
\fBIgnoring Values in a Pattern\fR
.br
==============================
.br

.P
You’ve seen that it’s sometimes useful to ignore values in a pattern, such asin the last arm of a `\fImatch\fR`, to get a catchall that doesn’t actually doanything but does account for all remaining possible values\. There are a fewways to ignore entire values or parts of values in a pattern: using the `\fI_\fR`pattern (which you’ve seen), using the `\fI_\fR` pattern within another pattern,using a name that starts with an underscore, or using `\fI\.\.\fR` to ignore remainingparts of a value\. Let’s explore how and why to use each of these patterns\.
.br

.br
\fBIgnoring an Entire Value with \fR
.br
================================
.br
`\fI_\fR`
.P
We’ve used the underscore (`\fI_\fR`) as a wildcard pattern that will match any valuebut not bind to the value\. Although the underscore `\fI_\fR` pattern is especiallyuseful as the last arm in a `\fImatch\fR` expression, we can use it in any pattern,including function parameters, as shown in Listing 18\-17\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn foo(_: i32, y: i32) {
    println!("This code only uses the y parameter: {}", y);
}

fn main() {
    foo(3, 4);
}

.EE

.RE
Listing 18\-17: Using `\fI_\fR` in a function signature
.P
This code will completely ignore the value passed as the first argument, `\fI3\fR`,and will print `\fIThis code only uses the y parameter: 4\fR`\.
.P
In most cases when you no longer need a particular function parameter, youwould change the signature so it doesn’t include the unused parameter\. Ignoringa function parameter can be especially useful in some cases, for example, whenimplementing a trait when you need a certain type signature but the functionbody in your implementation doesn’t need one of the parameters\. The compilerwill then not warn about unused function parameters, as it would if you used aname instead\.
.br

.br
\fBIgnoring Parts of a Value with a Nested \fR
.br
==========================================
.br
`\fI_\fR`
.P
We can also use `\fI_\fR` inside another pattern to ignore just part of a value, forexample, when we want to test for only part of a value but have no use for theother parts in the corresponding code we want to run\. Listing 18\-18 shows coderesponsible for managing a setting’s value\. The business requirements are thatthe user should not be allowed to overwrite an existing customization of asetting but can unset the setting and give it a value if it is currently unset\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut setting_value = Some(5);
    let new_setting_value = Some(10);

    match (setting_value, new_setting_value) {
        (Some(_), Some(_)) => {
            println!("Can't overwrite an existing customized value");
        }
        _ => {
            setting_value = new_setting_value;
        }
    }

    println!("setting is {:?}", setting_value);
# }

.EE

.RE
Listing 18\-18: Using an underscore within patterns thatmatch `\fISome\fR` variants when we don’t need to use the value inside the`\fISome\fR`
.P
This code will print `\fICan't overwrite an existing customized value\fR` and then`\fIsetting is Some(5)\fR`\. In the first match arm, we don’t need to match on or usethe values inside either `\fISome\fR` variant, but we do need to test for the casewhen `\fIsetting_value\fR` and `\fInew_setting_value\fR` are the `\fISome\fR` variant\. In thatcase, we print why we’re not changing `\fIsetting_value\fR`, and it doesn’t getchanged\.
.P
In all other cases (if either `\fIsetting_value\fR` or `\fInew_setting_value\fR` are`\fINone\fR`) expressed by the `\fI_\fR` pattern in the second arm, we want to allow`\fInew_setting_value\fR` to become `\fIsetting_value\fR`\.
.P
We can also use underscores in multiple places within one pattern to ignoreparticular values\. Listing 18\-19 shows an example of ignoring the second andfourth values in a tuple of five items\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let numbers = (2, 4, 8, 16, 32);

    match numbers {
        (first, _, third, _, fifth) => {
            println!("Some numbers: {}, {}, {}", first, third, fifth)
        }
    }
# }

.EE

.RE
Listing 18\-19: Ignoring multiple parts of a tuple
.P
This code will print `\fISome numbers: 2, 8, 32\fR`, and the values 4 and 16 will beignored\.
.br

.br
\fBIgnoring an Unused Variable by Starting Its Name with \fR
.br
========================================================
.br
`\fI_\fR`
.P
If you create a variable but don’t use it anywhere, Rust will usually issue awarning because that could be a bug\. But sometimes it’s useful to create avariable you won’t use yet, such as when you’re prototyping or just starting aproject\. In this situation, you can tell Rust not to warn you about the unusedvariable by starting the name of the variable with an underscore\. In Listing18\-20, we create two unused variables, but when we compile this code, we shouldonly get a warning about one of them\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let _x = 5;
    let y = 10;
}

.EE

.RE
Listing 18\-20: Starting a variable name with anunderscore to avoid getting unused variable warnings
.P
Here we get a warning about not using the variable `\fIy\fR`, but we don’t get awarning about not using the variable preceded by the underscore\.
.P
Note that there is a subtle difference between using only `\fI_\fR` and using a namethat starts with an underscore\. The syntax `\fI_x\fR` still binds the value to thevariable, whereas `\fI_\fR` doesn’t bind at all\. To show a case where thisdistinction matters, Listing 18\-21 will provide us with an error\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let s = Some(String::from("Hello!"));

    if let Some(_s) = s {
        println!("found a string");
    }

    println!("{:?}", s);
# }

.EE

.RE
Listing 18\-21: An unused variable starting with anunderscore still binds the value, which might take ownership of the value
.P
We’ll receive an error because the `\fIs\fR` value will still be moved into `\fI_s\fR`,which prevents us from using `\fIs\fR` again\. However, using the underscore by itselfdoesn’t ever bind to the value\. Listing 18\-22 will compile without any errorsbecause `\fIs\fR` doesn’t get moved into `\fI_\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let s = Some(String::from("Hello!"));

    if let Some(_) = s {
        println!("found a string");
    }

    println!("{:?}", s);
# }

.EE

.RE
Listing 18\-22: Using an underscore does not bind thevalue
.P
This code works just fine because we never bind `\fIs\fR` to anything; it isn’t moved\.
.br

.br
\fBIgnoring Remaining Parts of a Value with \fR
.br
===========================================
.br
`\fI\.\.\fR`
.P
With values that have many parts, we can use the `\fI\.\.\fR` syntax to use only a fewparts and ignore the rest, avoiding the need to list underscores for eachignored value\. The `\fI\.\.\fR` pattern ignores any parts of a value that we haven’texplicitly matched in the rest of the pattern\. In Listing 18\-23, we have a`\fIPoint\fR` struct that holds a coordinate in three\-dimensional space\. In the`\fImatch\fR` expression, we want to operate only on the `\fIx\fR` coordinate and ignorethe values in the `\fIy\fR` and `\fIz\fR` fields\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    struct Point {
        x: i32,
        y: i32,
        z: i32,
    }

    let origin = Point { x: 0, y: 0, z: 0 };

    match origin {
        Point { x, \.\. } => println!("x is {}", x),
    }
# }

.EE

.RE
Listing 18\-23: Ignoring all fields of a `\fIPoint\fR` exceptfor `\fIx\fR` by using `\fI\.\.\fR`
.P
We list the `\fIx\fR` value and then just include the `\fI\.\.\fR` pattern\. This is quickerthan having to list `\fIy: _\fR` and `\fIz: _\fR`, particularly when we’re working withstructs that have lots of fields in situations where only one or two fields arerelevant\.
.P
The syntax `\fI\.\.\fR` will expand to as many values as it needs to be\. Listing 18\-24shows how to use `\fI\.\.\fR` with a tuple\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let numbers = (2, 4, 8, 16, 32);

    match numbers {
        (first, \.\., last) => {
            println!("Some numbers: {}, {}", first, last);
        }
    }
}

.EE

.RE
Listing 18\-24: Matching only the first and last values ina tuple and ignoring all other values
.P
In this code, the first and last value are matched with `\fIfirst\fR` and `\fIlast\fR`\. The`\fI\.\.\fR` will match and ignore everything in the middle\.
.P
However, using `\fI\.\.\fR` must be unambiguous\. If it is unclear which values areintended for matching and which should be ignored, Rust will give us an error\.Listing 18\-25 shows an example of using `\fI\.\.\fR` ambiguously, so it will notcompile\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn main() {
    let numbers = (2, 4, 8, 16, 32);

    match numbers {
        (\.\., second, \.\.) => {
            println!("Some numbers: {}", second)
        },
    }
}

.EE

.RE
Listing 18\-25: An attempt to use `\fI\.\.\fR` in an ambiguousway
.P
When we compile this example, we get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling patterns v0\.1\.0 (file:///projects/patterns)
error: `\.\.` can only be used once per tuple pattern
 \-\-> src/main\.rs:5:22
  |
5 |         (\.\., second, \.\.) => {
  |          \-\-          ^^ can only be used once per tuple pattern
  |          |
  |          previously used here

error: aborting due to previous error

error: could not compile `patterns`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
It’s impossible for Rust to determine how many values in the tuple to ignorebefore matching a value with `\fIsecond\fR` and then how many further values toignore thereafter\. This code could mean that we want to ignore `\fI2\fR`, bind`\fIsecond\fR` to `\fI4\fR`, and then ignore `\fI8\fR`, `\fI16\fR`, and `\fI32\fR`; or that we want to ignore`\fI2\fR` and `\fI4\fR`, bind `\fIsecond\fR` to `\fI8\fR`, and then ignore `\fI16\fR` and `\fI32\fR`; and so forth\.The variable name `\fIsecond\fR` doesn’t mean anything special to Rust, so we get acompiler error because using `\fI\.\.\fR` in two places like this is ambiguous\.
.br

.br
\fBExtra Conditionals with Match Guards\fR
.br
======================================
.br

.P
A \fImatch guard\fR is an additional `\fIif\fR` condition specified after the pattern ina `\fImatch\fR` arm that must also match, along with the pattern matching, for thatarm to be chosen\. Match guards are useful for expressing more complex ideasthan a pattern alone allows\.
.P
The condition can use variables created in the pattern\. Listing 18\-26 shows a`\fImatch\fR` where the first arm has the pattern `\fISome(x)\fR` and also has a matchguard of `\fIif x < 5\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let num = Some(4);

    match num {
        Some(x) if x < 5 => println!("less than five: {}", x),
        Some(x) => println!("{}", x),
        None => (),
    }
# }

.EE

.RE
Listing 18\-26: Adding a match guard to a pattern
.P
This example will print `\fIless than five: 4\fR`\. When `\fInum\fR` is compared to thepattern in the first arm, it matches, because `\fISome(4)\fR` matches `\fISome(x)\fR`\. Thenthe match guard checks whether the value in `\fIx\fR` is less than `\fI5\fR`, and becauseit is, the first arm is selected\.
.P
If `\fInum\fR` had been `\fISome(10)\fR` instead, the match guard in the first arm wouldhave been false because 10 is not less than 5\. Rust would then go to the secondarm, which would match because the second arm doesn’t have a match guard andtherefore matches any `\fISome\fR` variant\.
.P
There is no way to express the `\fIif x < 5\fR` condition within a pattern, so thematch guard gives us the ability to express this logic\.
.P
In Listing 18\-11, we mentioned that we could use match guards to solve ourpattern\-shadowing problem\. Recall that a new variable was created inside thepattern in the `\fImatch\fR` expression instead of using the variable outside the`\fImatch\fR`\. That new variable meant we couldn’t test against the value of theouter variable\. Listing 18\-27 shows how we can use a match guard to fix thisproblem\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = Some(5);
    let y = 10;

    match x {
        Some(50) => println!("Got 50"),
        Some(n) if n == y => println!("Matched, n = {}", n),
        _ => println!("Default case, x = {:?}", x),
    }

    println!("at the end: x = {:?}, y = {}", x, y);
}

.EE

.RE
Listing 18\-27: Using a match guard to test for equalitywith an outer variable
.P
This code will now print `\fIDefault case, x = Some(5)\fR`\. The pattern in the secondmatch arm doesn’t introduce a new variable `\fIy\fR` that would shadow the outer `\fIy\fR`,meaning we can use the outer `\fIy\fR` in the match guard\. Instead of specifying thepattern as `\fISome(y)\fR`, which would have shadowed the outer `\fIy\fR`, we specify`\fISome(n)\fR`\. This creates a new variable `\fIn\fR` that doesn’t shadow anything becausethere is no `\fIn\fR` variable outside the `\fImatch\fR`\.
.P
The match guard `\fIif n == y\fR` is not a pattern and therefore doesn’t introducenew variables\. This `\fIy\fR` \fIis\fR the outer `\fIy\fR` rather than a new shadowed `\fIy\fR`, andwe can look for a value that has the same value as the outer `\fIy\fR` by comparing`\fIn\fR` to `\fIy\fR`\.
.P
You can also use the \fIor\fR operator `\fI|\fR` in a match guard to specify multiplepatterns; the match guard condition will apply to all the patterns\. Listing18\-28 shows the precedence of combining a match guard with a pattern that uses`\fI|\fR`\. The important part of this example is that the `\fIif y\fR` match guard appliesto `\fI4\fR`, `\fI5\fR`, \fIand\fR `\fI6\fR`, even though it might look like `\fIif y\fR` only applies to`\fI6\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let x = 4;
    let y = false;

    match x {
        4 | 5 | 6 if y => println!("yes"),
        _ => println!("no"),
    }
# }

.EE

.RE
Listing 18\-28: Combining multiple patterns with a matchguard
.P
The match condition states that the arm only matches if the value of `\fIx\fR` isequal to `\fI4\fR`, `\fI5\fR`, or `\fI6\fR` \fIand\fR if `\fIy\fR` is `\fItrue\fR`\. When this code runs, thepattern of the first arm matches because `\fIx\fR` is `\fI4\fR`, but the match guard `\fIif y\fR`is false, so the first arm is not chosen\. The code moves on to the second arm,which does match, and this program prints `\fIno\fR`\. The reason is that the `\fIif\fR`condition applies to the whole pattern `\fI4 | 5 | 6\fR`, not only to the last value`\fI6\fR`\. In other words, the precedence of a match guard in relation to a patternbehaves like this:
.RS
.IP \fBtext\fR 2

.br
.EX
(4 | 5 | 6) if y => \.\.\.

.EE

.RE
.P
rather than this:
.RS
.IP \fBtext\fR 2

.br
.EX
4 | 5 | (6 if y) => \.\.\.

.EE

.RE
.P
After running the code, the precedence behavior is evident: if the match guardwere applied only to the final value in the list of values specified using the`\fI|\fR` operator, the arm would have matched and the program would have printed`\fIyes\fR`\.`\fI@\fR` Bindings
.P
The \fIat\fR operator (`\fI@\fR`) lets us create a variable that holds a value at thesame time we’re testing that value to see whether it matches a pattern\. Listing18\-29 shows an example where we want to test that a `\fIMessage::Hello\fR` `\fIid\fR` fieldis within the range `\fI3\.\.=7\fR`\. But we also want to bind the value to the variable`\fIid_variable\fR` so we can use it in the code associated with the arm\. We couldname this variable `\fIid\fR`, the same as the field, but for this example we’ll usea different name\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum Message {
        Hello { id: i32 },
    }

    let msg = Message::Hello { id: 5 };

    match msg {
        Message::Hello {
            id: id_variable @ 3\.\.=7,
        } => println!("Found an id in range: {}", id_variable),
        Message::Hello { id: 10\.\.=12 } => {
            println!("Found an id in another range")
        }
        Message::Hello { id } => println!("Found some other id: {}", id),
    }
# }

.EE

.RE
Listing 18\-29: Using `\fI@\fR` to bind to a value in a patternwhile also testing it
.P
This example will print `\fIFound an id in range: 5\fR`\. By specifying `\fIid_variable @\fR` before the range `\fI3\.\.=7\fR`, we’re capturing whatever value matched the rangewhile also testing that the value matched the range pattern\.
.P
In the second arm, where we only have a range specified in the pattern, the codeassociated with the arm doesn’t have a variable that contains the actual valueof the `\fIid\fR` field\. The `\fIid\fR` field’s value could have been 10, 11, or 12, butthe code that goes with that pattern doesn’t know which it is\. The pattern codeisn’t able to use the value from the `\fIid\fR` field, because we haven’t saved the`\fIid\fR` value in a variable\.
.P
In the last arm, where we’ve specified a variable without a range, we do havethe value available to use in the arm’s code in a variable named `\fIid\fR`\. Thereason is that we’ve used the struct field shorthand syntax\. But we haven’tapplied any test to the value in the `\fIid\fR` field in this arm, as we did with thefirst two arms: any value would match this pattern\.
.P
Using `\fI@\fR` lets us test a value and save it in a variable within one pattern\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Rust’s patterns are very useful in that they help distinguish between differentkinds of data\. When used in `\fImatch\fR` expressions, Rust ensures your patternscover every possible value, or your program won’t compile\. Patterns in `\fIlet\fR`statements and function parameters make those constructs more useful, enablingthe destructuring of values into smaller parts at the same time as assigning tovariables\. We can create simple or complex patterns to suit our needs\.
.P
Next, for the penultimate chapter of the book, we’ll look at some advancedaspects of a variety of Rust’s features\.
.SH "Advanced Features"

.br

.br
\fBAdvanced Features\fR
.br
===================
.br

.P
By now, you’ve learned the most commonly used parts of the Rust programminglanguage\. Before we do one more project in Chapter 20, we’ll look at a fewaspects of the language you might run into every once in a while\. You can usethis chapter as a reference for when you encounter any unknowns when usingRust\. The features you’ll learn to use in this chapter are useful in veryspecific situations\. Although you might not reach for them often, we want tomake sure you have a grasp of all the features Rust has to offer\.
.P
In this chapter, we’ll cover:
.P
Unsafe Rust: how to opt out of some of Rust’s guarantees and takeresponsibility for manually upholding those guarantees
.P
Advanced traits: associated types, default type parameters, fully qualifiedsyntax, supertraits, and the newtype pattern in relation to traits
.P
Advanced types: more about the newtype pattern, type aliases, the never type,and dynamically sized types
.P
Advanced functions and closures: function pointers and returning closures
.P
Macros: ways to define code that defines more code at compile time
.P
It’s a panoply of Rust features with something for everyone! Let’s dive in!
.SH "Unsafe Rust"

.br

.br
\fBUnsafe Rust\fR
.br
=============
.br

.P
All the code we’ve discussed so far has had Rust’s memory safety guaranteesenforced at compile time\. However, Rust has a second language hidden inside itthat doesn’t enforce these memory safety guarantees: it’s called \fIunsafe Rust\fRand works just like regular Rust, but gives us extra superpowers\.
.P
Unsafe Rust exists because, by nature, static analysis is conservative\. Whenthe compiler tries to determine whether or not code upholds the guarantees,it’s better for it to reject some valid programs rather than accept someinvalid programs\. Although the code \fImight\fR be okay, if the Rust compilerdoesn’t have enough information to be confident, it will reject the code\. Inthese cases, you can use unsafe code to tell the compiler, “Trust me, I knowwhat I’m doing\.” The downside is that you use it at your own risk: if you useunsafe code incorrectly, problems due to memory unsafety, such as null pointerdereferencing, can occur\.
.P
Another reason Rust has an unsafe alter ego is that the underlying computerhardware is inherently unsafe\. If Rust didn’t let you do unsafe operations, youcouldn’t do certain tasks\. Rust needs to allow you to do low\-level systemsprogramming, such as directly interacting with the operating system or evenwriting your own operating system\. Working with low\-level systems programmingis one of the goals of the language\. Let’s explore what we can do with unsafeRust and how to do it\.
.br

.br
\fBUnsafe Superpowers\fR
.br
====================
.br

.P
To switch to unsafe Rust, use the `\fIunsafe\fR` keyword and then start a new blockthat holds the unsafe code\. You can take five actions in unsafe Rust, called\fIunsafe superpowers\fR, that you can’t in safe Rust\. Those superpowers includethe ability to:
.P
Dereference a raw pointer
.P
Call an unsafe function or method
.P
Access or modify a mutable static variable
.P
Implement an unsafe trait
.P
Access fields of `\fIunion\fR`s
.P
It’s important to understand that `\fIunsafe\fR` doesn’t turn off the borrow checkeror disable any other of Rust’s safety checks: if you use a reference in unsafecode, it will still be checked\. The `\fIunsafe\fR` keyword only gives you access tothese five features that are then not checked by the compiler for memorysafety\. You’ll still get some degree of safety inside of an unsafe block\.
.P
In addition, `\fIunsafe\fR` does not mean the code inside the block is necessarilydangerous or that it will definitely have memory safety problems: the intent isthat as the programmer, you’ll ensure the code inside an `\fIunsafe\fR` block willaccess memory in a valid way\.
.P
People are fallible, and mistakes will happen, but by requiring these fiveunsafe operations to be inside blocks annotated with `\fIunsafe\fR` you’ll know thatany errors related to memory safety must be within an `\fIunsafe\fR` block\. Keep`\fIunsafe\fR` blocks small; you’ll be thankful later when you investigate memorybugs\.
.P
To isolate unsafe code as much as possible, it’s best to enclose unsafe codewithin a safe abstraction and provide a safe API, which we’ll discuss later inthe chapter when we examine unsafe functions and methods\. Parts of the standardlibrary are implemented as safe abstractions over unsafe code that has beenaudited\. Wrapping unsafe code in a safe abstraction prevents uses of `\fIunsafe\fR`from leaking out into all the places that you or your users might want to usethe functionality implemented with `\fIunsafe\fR` code, because using a safeabstraction is safe\.
.P
Let’s look at each of the five unsafe superpowers in turn\. We’ll also look atsome abstractions that provide a safe interface to unsafe code\.
.br

.br
\fBDereferencing a Raw Pointer\fR
.br
=============================
.br

.P
In Chapter 4, in the 
.UR ch04\-02\-references\-and\-borrowing\.html#dangling\-references
.UE
“Dangling References” section, we mentioned that the compiler ensures references are alwaysvalid\. Unsafe Rust has two new types called \fIraw pointers\fR that are similar toreferences\. As with references, raw pointers can be immutable or mutable andare written as `\fI*const T\fR` and `\fI*mut T\fR`, respectively\. The asterisk isn’t thedereference operator; it’s part of the type name\. In the context of rawpointers, \fIimmutable\fR means that the pointer can’t be directly assigned toafter being dereferenced\.
.P
Different from references and smart pointers, raw pointers:
.P
Are allowed to ignore the borrowing rules by having both immutable andmutable pointers or multiple mutable pointers to the same location
.P
Aren’t guaranteed to point to valid memory
.P
Are allowed to be null
.P
Don’t implement any automatic cleanup
.P
By opting out of having Rust enforce these guarantees, you can give upguaranteed safety in exchange for greater performance or the ability tointerface with another language or hardware where Rust’s guarantees don’t apply\.
.P
Listing 19\-1 shows how to create an immutable and a mutable raw pointer fromreferences\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut num = 5;

    let r1 = &num as *const i32;
    let r2 = &mut num as *mut i32;
# }

.EE

.RE
Listing 19\-1: Creating raw pointers from references
.P
Notice that we don’t include the `\fIunsafe\fR` keyword in this code\. We can createraw pointers in safe code; we just can’t dereference raw pointers outside anunsafe block, as you’ll see in a bit\.
.P
We’ve created raw pointers by using `\fIas\fR` to cast an immutable and a mutablereference into their corresponding raw pointer types\. Because we created themdirectly from references guaranteed to be valid, we know these particular rawpointers are valid, but we can’t make that assumption about just any rawpointer\.
.P
Next, we’ll create a raw pointer whose validity we can’t be so certain of\.Listing 19\-2 shows how to create a raw pointer to an arbitrary location inmemory\. Trying to use arbitrary memory is undefined: there might be data atthat address or there might not, the compiler might optimize the code so thereis no memory access, or the program might error with a segmentation fault\.Usually, there is no good reason to write code like this, but it is possible\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let address = 0x012345usize;
    let r = address as *const i32;
# }

.EE

.RE
Listing 19\-2: Creating a raw pointer to an arbitrarymemory address
.P
Recall that we can create raw pointers in safe code, but we can’t \fIdereference\fRraw pointers and read the data being pointed to\. In Listing 19\-3, we use thedereference operator `\fI*\fR` on a raw pointer that requires an `\fIunsafe\fR` block\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut num = 5;

    let r1 = &num as *const i32;
    let r2 = &mut num as *mut i32;

    unsafe {
        println!("r1 is: {}", *r1);
        println!("r2 is: {}", *r2);
    }
# }

.EE

.RE
Listing 19\-3: Dereferencing raw pointers within an`\fIunsafe\fR` block
.P
Creating a pointer does no harm; it’s only when we try to access the value thatit points at that we might end up dealing with an invalid value\.
.P
Note also that in Listing 19\-1 and 19\-3, we created `\fI*const i32\fR` and `\fI*mut i32\fR`raw pointers that both pointed to the same memory location, where `\fInum\fR` isstored\. If we instead tried to create an immutable and a mutable reference to`\fInum\fR`, the code would not have compiled because Rust’s ownership rules don’tallow a mutable reference at the same time as any immutable references\. Withraw pointers, we can create a mutable pointer and an immutable pointer to thesame location and change data through the mutable pointer, potentially creatinga data race\. Be careful!
.P
With all of these dangers, why would you ever use raw pointers? One major usecase is when interfacing with C code, as you’ll see in the next section,
.UR #calling\-an\-unsafe\-function\-or\-method
.UE
“Calling an Unsafe Function orMethod\.” Another case iswhen building up safe abstractions that the borrow checker doesn’t understand\.We’ll introduce unsafe functions and then look at an example of a safeabstraction that uses unsafe code\.
.br

.br
\fBCalling an Unsafe Function or Method\fR
.br
======================================
.br

.P
The second type of operation that requires an unsafe block is calls to unsafefunctions\. Unsafe functions and methods look exactly like regular functions andmethods, but they have an extra `\fIunsafe\fR` before the rest of the definition\. The`\fIunsafe\fR` keyword in this context indicates the function has requirements weneed to uphold when we call this function, because Rust can’t guarantee we’vemet these requirements\. By calling an unsafe function within an `\fIunsafe\fR` block,we’re saying that we’ve read this function’s documentation and takeresponsibility for upholding the function’s contracts\.
.P
Here is an unsafe function named `\fIdangerous\fR` that doesn’t do anything in itsbody:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    unsafe fn dangerous() {}

    unsafe {
        dangerous();
    }
# }

.EE

.RE
.P
We must call the `\fIdangerous\fR` function within a separate `\fIunsafe\fR` block\. If wetry to call `\fIdangerous\fR` without the `\fIunsafe\fR` block, we’ll get an error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling unsafe\-example v0\.1\.0 (file:///projects/unsafe\-example)
error[E0133]: call to unsafe function is unsafe and requires unsafe function or block
 \-\-> src/main\.rs:4:5
  |
4 |     dangerous();
  |     ^^^^^^^^^^^ call to unsafe function
  |
  = note: consult the function's documentation for information on how to avoid undefined behavior

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0133`\.
error: could not compile `unsafe\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
By inserting the `\fIunsafe\fR` block around our call to `\fIdangerous\fR`, we’re assertingto Rust that we’ve read the function’s documentation, we understand how to useit properly, and we’ve verified that we’re fulfilling the contract of thefunction\.
.P
Bodies of unsafe functions are effectively `\fIunsafe\fR` blocks, so to perform otherunsafe operations within an unsafe function, we don’t need to add another`\fIunsafe\fR` block\.
.br

.br
\fBCreating a Safe Abstraction over Unsafe Code\fR
.br
==============================================
.br

.P
Just because a function contains unsafe code doesn’t mean we need to mark theentire function as unsafe\. In fact, wrapping unsafe code in a safe function isa common abstraction\. As an example, let’s study a function from the standardlibrary, `\fIsplit_at_mut\fR`, that requires some unsafe code and explore how wemight implement it\. This safe method is defined on mutable slices: it takes oneslice and makes it two by splitting the slice at the index given as anargument\. Listing 19\-4 shows how to use `\fIsplit_at_mut\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let mut v = vec![1, 2, 3, 4, 5, 6];

    let r = &mut v[\.\.];

    let (a, b) = r\.split_at_mut(3);

    assert_eq!(a, &mut [1, 2, 3]);
    assert_eq!(b, &mut [4, 5, 6]);
# }

.EE

.RE
Listing 19\-4: Using the safe `\fIsplit_at_mut\fR`function
.P
We can’t implement this function using only safe Rust\. An attempt might looksomething like Listing 19\-5, which won’t compile\. For simplicity, we’llimplement `\fIsplit_at_mut\fR` as a function rather than a method and only for slicesof `\fIi32\fR` values rather than for a generic type `\fIT\fR`\.
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn split_at_mut(slice: &mut [i32], mid: usize) \-> (&mut [i32], &mut [i32]) {
    let len = slice\.len();

    assert!(mid <= len);

    (&mut slice[\.\.mid], &mut slice[mid\.\.])
}
# 
# fn main() {
#     let mut vector = vec![1, 2, 3, 4, 5, 6];
#     let (left, right) = split_at_mut(&mut vector, 3);
# }

.EE

.RE
Listing 19\-5: An attempted implementation of`\fIsplit_at_mut\fR` using only safe Rust
.P
This function first gets the total length of the slice\. Then it asserts thatthe index given as a parameter is within the slice by checking whether it’sless than or equal to the length\. The assertion means that if we pass an indexthat is greater than the length to split the slice at, the function will panicbefore it attempts to use that index\.
.P
Then we return two mutable slices in a tuple: one from the start of theoriginal slice to the `\fImid\fR` index and another from `\fImid\fR` to the end of theslice\.
.P
When we try to compile the code in Listing 19\-5, we’ll get an error\.
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling unsafe\-example v0\.1\.0 (file:///projects/unsafe\-example)
error[E0499]: cannot borrow `*slice` as mutable more than once at a time
 \-\-> src/main\.rs:6:30
  |
1 | fn split_at_mut(slice: &mut [i32], mid: usize) \-> (&mut [i32], &mut [i32]) {
  |                        \- let's call the lifetime of this reference `'1`
\.\.\.
6 |     (&mut slice[\.\.mid], &mut slice[mid\.\.])
  |     \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-^^^^^\-\-\-\-\-\-\-\-
  |     |     |                  |
  |     |     |                  second mutable borrow occurs here
  |     |     first mutable borrow occurs here
  |     returning this value requires that `*slice` is borrowed for `'1`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0499`\.
error: could not compile `unsafe\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Rust’s borrow checker can’t understand that we’re borrowing different parts ofthe slice; it only knows that we’re borrowing from the same slice twice\.Borrowing different parts of a slice is fundamentally okay because the twoslices aren’t overlapping, but Rust isn’t smart enough to know this\. When weknow code is okay, but Rust doesn’t, it’s time to reach for unsafe code\.
.P
Listing 19\-6 shows how to use an `\fIunsafe\fR` block, a raw pointer, and some callsto unsafe functions to make the implementation of `\fIsplit_at_mut\fR` work\.
.RS
.IP \fBrust\fR 2

.br
.EX
use std::slice;

fn split_at_mut(slice: &mut [i32], mid: usize) \-> (&mut [i32], &mut [i32]) {
    let len = slice\.len();
    let ptr = slice\.as_mut_ptr();

    assert!(mid <= len);

    unsafe {
        (
            slice::from_raw_parts_mut(ptr, mid),
            slice::from_raw_parts_mut(ptr\.add(mid), len \- mid),
        )
    }
}
# 
# fn main() {
#     let mut vector = vec![1, 2, 3, 4, 5, 6];
#     let (left, right) = split_at_mut(&mut vector, 3);
# }

.EE

.RE
Listing 19\-6: Using unsafe code in the implementation ofthe `\fIsplit_at_mut\fR` function
.P
Recall from 
.UR ch04\-03\-slices\.html#the\-slice\-type
.UE
“The Slice Type” section inChapter 4 that slices are a pointer to some data and the length of the slice\.We use the `\fIlen\fR` method to get the length of a slice and the `\fIas_mut_ptr\fR`method to access the raw pointer of a slice\. In this case, because we have amutable slice to `\fIi32\fR` values, `\fIas_mut_ptr\fR` returns a raw pointer with the type`\fI*mut i32\fR`, which we’ve stored in the variable `\fIptr\fR`\.
.P
We keep the assertion that the `\fImid\fR` index is within the slice\. Then we get tothe unsafe code: the `\fIslice::from_raw_parts_mut\fR` function takes a raw pointerand a length, and it creates a slice\. We use this function to create a slicethat starts from `\fIptr\fR` and is `\fImid\fR` items long\. Then we call the `\fIadd\fR`method on `\fIptr\fR` with `\fImid\fR` as an argument to get a raw pointer that starts at`\fImid\fR`, and we create a slice using that pointer and the remaining number ofitems after `\fImid\fR` as the length\.
.P
The function `\fIslice::from_raw_parts_mut\fR` is unsafe because it takes a rawpointer and must trust that this pointer is valid\. The `\fIadd\fR` method on rawpointers is also unsafe, because it must trust that the offset location is alsoa valid pointer\. Therefore, we had to put an `\fIunsafe\fR` block around our calls to`\fIslice::from_raw_parts_mut\fR` and `\fIadd\fR` so we could call them\. By looking atthe code and by adding the assertion that `\fImid\fR` must be less than or equal to`\fIlen\fR`, we can tell that all the raw pointers used within the `\fIunsafe\fR` blockwill be valid pointers to data within the slice\. This is an acceptable andappropriate use of `\fIunsafe\fR`\.
.P
Note that we don’t need to mark the resulting `\fIsplit_at_mut\fR` function as`\fIunsafe\fR`, and we can call this function from safe Rust\. We’ve created a safeabstraction to the unsafe code with an implementation of the function that uses`\fIunsafe\fR` code in a safe way, because it creates only valid pointers from thedata this function has access to\.
.P
In contrast, the use of `\fIslice::from_raw_parts_mut\fR` in Listing 19\-7 wouldlikely crash when the slice is used\. This code takes an arbitrary memorylocation and creates a slice 10,000 items long\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    use std::slice;

    let address = 0x01234usize;
    let r = address as *mut i32;

    let slice: &[i32] = unsafe { slice::from_raw_parts_mut(r, 10000) };
# }

.EE

.RE
Listing 19\-7: Creating a slice from an arbitrary memorylocation
.P
We don’t own the memory at this arbitrary location, and there is no guaranteethat the slice this code creates contains valid `\fIi32\fR` values\. Attempting to use`\fIslice\fR` as though it’s a valid slice results in undefined behavior\.
.br

.br
\fBUsing \fR
.br
========
.br
`\fIextern\fR` Functions to Call External Code
.P
Sometimes, your Rust code might need to interact with code written in anotherlanguage\. For this, Rust has a keyword, `\fIextern\fR`, that facilitates the creationand use of a \fIForeign Function Interface (FFI)\fR\. An FFI is a way for aprogramming language to define functions and enable a different (foreign)programming language to call those functions\.
.P
Listing 19\-8 demonstrates how to set up an integration with the `\fIabs\fR` functionfrom the C standard library\. Functions declared within `\fIextern\fR` blocks arealways unsafe to call from Rust code\. The reason is that other languages don’tenforce Rust’s rules and guarantees, and Rust can’t check them, soresponsibility falls on the programmer to ensure safety\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
extern "C" {
    fn abs(input: i32) \-> i32;
}

fn main() {
    unsafe {
        println!("Absolute value of \-3 according to C: {}", abs(\-3));
    }
}

.EE

.RE
Listing 19\-8: Declaring and calling an `\fIextern\fR` functiondefined in another language
.P
Within the `\fIextern "C"\fR` block, we list the names and signatures of externalfunctions from another language we want to call\. The `\fI"C"\fR` part defines which\fIapplication binary interface (ABI)\fR the external function uses: the ABIdefines how to call the function at the assembly level\. The `\fI"C"\fR` ABI is themost common and follows the C programming language’s ABI\.
.br

.br
\fBCalling Rust Functions from Other Languages\fR
.br
=============================================
.br

.P
We can also use `\fIextern\fR` to create an interface that allows other languagesto call Rust functions\. Instead of an `\fIextern\fR` block, we add the `\fIextern\fR`keyword and specify the ABI to use just before the `\fIfn\fR` keyword\. We also needto add a `\fI#[no_mangle]\fR` annotation to tell the Rust compiler not to manglethe name of this function\. \fIMangling\fR is when a compiler changes the namewe’ve given a function to a different name that contains more information forother parts of the compilation process to consume but is less human readable\.Every programming language compiler mangles names slightly differently, sofor a Rust function to be nameable by other languages, we must disable theRust compiler’s name mangling\.
.P
In the following example, we make the `\fIcall_from_c\fR` function accessible fromC code, after it’s compiled to a shared library and linked from C:
.RS
.IP \fBrust\fR 2

.br
.EX
#[no_mangle]
pub extern "C" fn call_from_c() {
    println!("Just called a Rust function from C!");
}

.EE

.RE
.P
This usage of `\fIextern\fR` does not require `\fIunsafe\fR`\.
.br

.br
\fBAccessing or Modifying a Mutable Static Variable\fR
.br
==================================================
.br

.P
Until now, we’ve not talked about \fIglobal variables\fR, which Rust does supportbut can be problematic with Rust’s ownership rules\. If two threads areaccessing the same mutable global variable, it can cause a data race\.
.P
In Rust, global variables are called \fIstatic\fR variables\. Listing 19\-9 shows anexample declaration and use of a static variable with a string slice as avalue\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
static HELLO_WORLD: &str = "Hello, world!";

fn main() {
    println!("name is: {}", HELLO_WORLD);
}

.EE

.RE
Listing 19\-9: Defining and using an immutable staticvariable
.P
Static variables are similar to constants, which we discussed in the
.UR ch03\-01\-variables\-and\-mutability\.html#differences\-between\-variables\-and\-constants
.UE
“Differences Between Variables andConstants”section in Chapter 3\. The names of static variables are in`\fISCREAMING_SNAKE_CASE\fR` by convention\. Static variables can only storereferences with the `\fI'static\fR` lifetime, which means the Rust compiler canfigure out the lifetime and we aren’t required to annotate it explicitly\.Accessing an immutable static variable is safe\.
.P
Constants and immutable static variables might seem similar, but a subtledifference is that values in a static variable have a fixed address in memory\.Using the value will always access the same data\. Constants, on the other hand,are allowed to duplicate their data whenever they’re used\.
.P
Another difference between constants and static variables is that staticvariables can be mutable\. Accessing and modifying mutable static variables is\fIunsafe\fR\. Listing 19\-10 shows how to declare, access, and modify a mutablestatic variable named `\fICOUNTER\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
static mut COUNTER: u32 = 0;

fn add_to_count(inc: u32) {
    unsafe {
        COUNTER += inc;
    }
}

fn main() {
    add_to_count(3);

    unsafe {
        println!("COUNTER: {}", COUNTER);
    }
}

.EE

.RE
Listing 19\-10: Reading from or writing to a mutablestatic variable is unsafe
.P
As with regular variables, we specify mutability using the `\fImut\fR` keyword\. Anycode that reads or writes from `\fICOUNTER\fR` must be within an `\fIunsafe\fR` block\. Thiscode compiles and prints `\fICOUNTER: 3\fR` as we would expect because it’s singlethreaded\. Having multiple threads access `\fICOUNTER\fR` would likely result in dataraces\.
.P
With mutable data that is globally accessible, it’s difficult to ensure thereare no data races, which is why Rust considers mutable static variables to beunsafe\. Where possible, it’s preferable to use the concurrency techniques andthread\-safe smart pointers we discussed in Chapter 16 so the compiler checksthat data accessed from different threads is done safely\.
.br

.br
\fBImplementing an Unsafe Trait\fR
.br
==============================
.br

.P
Another use case for `\fIunsafe\fR` is implementing an unsafe trait\. A trait isunsafe when at least one of its methods has some invariant that the compilercan’t verify\. We can declare that a trait is `\fIunsafe\fR` by adding the `\fIunsafe\fR`keyword before `\fItrait\fR` and marking the implementation of the trait as `\fIunsafe\fR`too, as shown in Listing 19\-11\.
.RS
.IP \fBrust\fR 2

.br
.EX
unsafe trait Foo {
    // methods go here
}

unsafe impl Foo for i32 {
    // method implementations go here
}

fn main() {}

.EE

.RE
Listing 19\-11: Defining and implementing an unsafetrait
.P
By using `\fIunsafe impl\fR`, we’re promising that we’ll uphold the invariants thatthe compiler can’t verify\.
.P
As an example, recall the `\fISync\fR` and `\fISend\fR` marker traits we discussed in the
.UR ch16\-04\-extensible\-concurrency\-sync\-and\-send\.html#extensible\-concurrency\-with\-the\-sync\-and\-send\-traits
.UE
“Extensible Concurrency with the `\fISync\fR` and `\fISend\fR`Traits”section in Chapter 16: the compiler implements these traits automatically ifour types are composed entirely of `\fISend\fR` and `\fISync\fR` types\. If we implement atype that contains a type that is not `\fISend\fR` or `\fISync\fR`, such as raw pointers,and we want to mark that type as `\fISend\fR` or `\fISync\fR`, we must use `\fIunsafe\fR`\. Rustcan’t verify that our type upholds the guarantees that it can be safely sentacross threads or accessed from multiple threads; therefore, we need to dothose checks manually and indicate as such with `\fIunsafe\fR`\.
.br

.br
\fBAccessing Fields of a Union\fR
.br
=============================
.br

.P
The final action that works only with `\fIunsafe\fR` is accessing fields of a\fIunion\fR\. A `\fIunion\fR` is similar to a `\fIstruct\fR`, but only one declared field isused in a particular instance at one time\. Unions are primarily used tointerface with unions in C code\. Accessing union fields is unsafe because Rustcan’t guarantee the type of the data currently being stored in the unioninstance\. You can learn more about unions in 
.UR \.\./reference/items/unions\.html
.UE
the reference\.
.br

.br
\fBWhen to Use Unsafe Code\fR
.br
=========================
.br

.P
Using `\fIunsafe\fR` to take one of the five actions (superpowers) just discussedisn’t wrong or even frowned upon\. But it is trickier to get `\fIunsafe\fR` codecorrect because the compiler can’t help uphold memory safety\. When you have areason to use `\fIunsafe\fR` code, you can do so, and having the explicit `\fIunsafe\fR`annotation makes it easier to track down the source of problems when they occur\.
.SH "Advanced Traits"

.br

.br
\fBAdvanced Traits\fR
.br
=================
.br

.P
We first covered traits in the 
.UR ch10\-02\-traits\.html#traits\-defining\-shared\-behavior
.UE
“Traits: Defining SharedBehavior” section of Chapter10, but as with lifetimes, we didn’t discuss the more advanced details\. Nowthat you know more about Rust, we can get into the nitty\-gritty\.
.br

.br
\fBSpecifying Placeholder Types in Trait Definitions with Associated Types\fR
.br
=========================================================================
.br
\fIAssociated types\fR connect a type placeholder with a trait such that the traitmethod definitions can use these placeholder types in their signatures\. Theimplementor of a trait will specify the concrete type to be used in this type’splace for the particular implementation\. That way, we can define a trait thatuses some types without needing to know exactly what those types are until thetrait is implemented\.
.P
We’ve described most of the advanced features in this chapter as being rarelyneeded\. Associated types are somewhere in the middle: they’re used more rarelythan features explained in the rest of the book but more commonly than many ofthe other features discussed in this chapter\.
.P
One example of a trait with an associated type is the `\fIIterator\fR` trait that thestandard library provides\. The associated type is named `\fIItem\fR` and stands infor the type of the values the type implementing the `\fIIterator\fR` trait isiterating over\. In 
.UR ch13\-02\-iterators\.html#the\-iterator\-trait\-and\-the\-next\-method
.UE
“The `\fIIterator\fR` Trait and the `\fInext\fR`Method” section ofChapter 13, we mentioned that the definition of the `\fIIterator\fR` trait is asshown in Listing 19\-12\.
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Iterator {
    type Item;

    fn next(&mut self) \-> Option<Self::Item>;
}

.EE

.RE
Listing 19\-12: The definition of the `\fIIterator\fR` traitthat has an associated type `\fIItem\fR`
.P
The type `\fIItem\fR` is a placeholder type, and the `\fInext\fR` method’s definition showsthat it will return values of type `\fIOption<Self::Item>\fR`\. Implementors of the`\fIIterator\fR` trait will specify the concrete type for `\fIItem\fR`, and the `\fInext\fR`method will return an `\fIOption\fR` containing a value of that concrete type\.
.P
Associated types might seem like a similar concept to generics, in that thelatter allow us to define a function without specifying what types it canhandle\. So why use associated types?
.P
Let’s examine the difference between the two concepts with an example fromChapter 13 that implements the `\fIIterator\fR` trait on the `\fICounter\fR` struct\. InListing 13\-21, we specified that the `\fIItem\fR` type was `\fIu32\fR`:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# struct Counter {
#     count: u32,
# }
# 
# impl Counter {
#     fn new() \-> Counter {
#         Counter { count: 0 }
#     }
# }
# 
impl Iterator for Counter {
    type Item = u32;

    fn next(&mut self) \-> Option<Self::Item> {
        // \-\-snip\-\-
#         if self\.count < 5 {
#             self\.count += 1;
#             Some(self\.count)
#         } else {
#             None
#         }
#     }
# }

.EE

.RE
.P
This syntax seems comparable to that of generics\. So why not just define the`\fIIterator\fR` trait with generics, as shown in Listing 19\-13?
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait Iterator<T> {
    fn next(&mut self) \-> Option<T>;
}

.EE

.RE
Listing 19\-13: A hypothetical definition of the`\fIIterator\fR` trait using generics
.P
The difference is that when using generics, as in Listing 19\-13, we mustannotate the types in each implementation; because we can also implement`\fIIterator<String> for Counter\fR` or any other type, we could have multipleimplementations of `\fIIterator\fR` for `\fICounter\fR`\. In other words, when a trait has ageneric parameter, it can be implemented for a type multiple times, changingthe concrete types of the generic type parameters each time\. When we use the`\fInext\fR` method on `\fICounter\fR`, we would have to provide type annotations toindicate which implementation of `\fIIterator\fR` we want to use\.
.P
With associated types, we don’t need to annotate types because we can’timplement a trait on a type multiple times\. In Listing 19\-12 with thedefinition that uses associated types, we can only choose what the type of`\fIItem\fR` will be once, because there can only be one `\fIimpl Iterator for Counter\fR`\.We don’t have to specify that we want an iterator of `\fIu32\fR` values everywherethat we call `\fInext\fR` on `\fICounter\fR`\.
.br

.br
\fBDefault Generic Type Parameters and Operator Overloading\fR
.br
==========================================================
.br

.P
When we use generic type parameters, we can specify a default concrete type forthe generic type\. This eliminates the need for implementors of the trait tospecify a concrete type if the default type works\. The syntax for specifying adefault type for a generic type is `\fI<PlaceholderType=ConcreteType>\fR` whendeclaring the generic type\.
.P
A great example of a situation where this technique is useful is with operatoroverloading\. \fIOperator overloading\fR is customizing the behavior of an operator(such as `\fI+\fR`) in particular situations\.
.P
Rust doesn’t allow you to create your own operators or overload arbitraryoperators\. But you can overload the operations and corresponding traits listedin `\fIstd::ops\fR` by implementing the traits associated with the operator\. Forexample, in Listing 19\-14 we overload the `\fI+\fR` operator to add two `\fIPoint\fR`instances together\. We do this by implementing the `\fIAdd\fR` trait on a `\fIPoint\fR`struct:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::ops::Add;

#[derive(Debug, Copy, Clone, PartialEq)]
struct Point {
    x: i32,
    y: i32,
}

impl Add for Point {
    type Output = Point;

    fn add(self, other: Point) \-> Point {
        Point {
            x: self\.x + other\.x,
            y: self\.y + other\.y,
        }
    }
}

fn main() {
    assert_eq!(
        Point { x: 1, y: 0 } + Point { x: 2, y: 3 },
        Point { x: 3, y: 3 }
    );
}

.EE

.RE
Listing 19\-14: Implementing the `\fIAdd\fR` trait to overloadthe `\fI+\fR` operator for `\fIPoint\fR` instances
.P
The `\fIadd\fR` method adds the `\fIx\fR` values of two `\fIPoint\fR` instances and the `\fIy\fR`values of two `\fIPoint\fR` instances to create a new `\fIPoint\fR`\. The `\fIAdd\fR` trait has anassociated type named `\fIOutput\fR` that determines the type returned from the `\fIadd\fR`method\.
.P
The default generic type in this code is within the `\fIAdd\fR` trait\. Here is itsdefinition:
.RS
.IP \fBrust\fR 2

.br
.EX
trait Add<Rhs=Self> {
    type Output;

    fn add(self, rhs: Rhs) \-> Self::Output;
}

.EE

.RE
.P
This code should look generally familiar: a trait with one method and anassociated type\. The new part is `\fIRhs=Self\fR`: this syntax is called \fIdefault\fRtype parameters\. The `\fIRhs\fR` generic type parameter (short for “right handside”) defines the type of the `\fIrhs\fR` parameter in the `\fIadd\fR` method\. If we don’tspecify a concrete type for `\fIRhs\fR` when we implement the `\fIAdd\fR` trait, the typeof `\fIRhs\fR` will default to `\fISelf\fR`, which will be the type we’re implementing`\fIAdd\fR` on\.
.P
When we implemented `\fIAdd\fR` for `\fIPoint\fR`, we used the default for `\fIRhs\fR` because wewanted to add two `\fIPoint\fR` instances\. Let’s look at an example of implementingthe `\fIAdd\fR` trait where we want to customize the `\fIRhs\fR` type rather than using thedefault\.
.P
We have two structs, `\fIMillimeters\fR` and `\fIMeters\fR`, holding values in differentunits\. This thin wrapping of an existing type in another struct is known as the\fInewtype pattern\fR, which we describe in more detail in the 
.UR ch19\-04\-advanced\-types\.html#using\-the\-newtype\-pattern\-for\-type\-safety\-and\-abstraction
.UE
“Using the NewtypePattern to Implement External Traits on External Types” section\. We want to add values in millimeters to values in meters and havethe implementation of `\fIAdd\fR` do the conversion correctly\. We can implement `\fIAdd\fR`for `\fIMillimeters\fR` with `\fIMeters\fR` as the `\fIRhs\fR`, as shown in Listing 19\-15\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::ops::Add;

struct Millimeters(u32);
struct Meters(u32);

impl Add<Meters> for Millimeters {
    type Output = Millimeters;

    fn add(self, other: Meters) \-> Millimeters {
        Millimeters(self\.0 + (other\.0 * 1000))
    }
}

.EE

.RE
Listing 19\-15: Implementing the `\fIAdd\fR` trait on`\fIMillimeters\fR` to add `\fIMillimeters\fR` to `\fIMeters\fR`
.P
To add `\fIMillimeters\fR` and `\fIMeters\fR`, we specify `\fIimpl Add<Meters>\fR` to set thevalue of the `\fIRhs\fR` type parameter instead of using the default of `\fISelf\fR`\.
.P
You’ll use default type parameters in two main ways:
.P
To extend a type without breaking existing code
.P
To allow customization in specific cases most users won’t need
.P
The standard library’s `\fIAdd\fR` trait is an example of the second purpose:usually, you’ll add two like types, but the `\fIAdd\fR` trait provides the ability tocustomize beyond that\. Using a default type parameter in the `\fIAdd\fR` traitdefinition means you don’t have to specify the extra parameter most of thetime\. In other words, a bit of implementation boilerplate isn’t needed, makingit easier to use the trait\.
.P
The first purpose is similar to the second but in reverse: if you want to add atype parameter to an existing trait, you can give it a default to allowextension of the functionality of the trait without breaking the existingimplementation code\.
.br

.br
\fBFully Qualified Syntax for Disambiguation: Calling Methods with the Same Name\fR
.br
===============================================================================
.br

.P
Nothing in Rust prevents a trait from having a method with the same name asanother trait’s method, nor does Rust prevent you from implementing both traitson one type\. It’s also possible to implement a method directly on the type withthe same name as methods from traits\.
.P
When calling methods with the same name, you’ll need to tell Rust which one youwant to use\. Consider the code in Listing 19\-16 where we’ve defined two traits,`\fIPilot\fR` and `\fIWizard\fR`, that both have a method called `\fIfly\fR`\. We then implementboth traits on a type `\fIHuman\fR` that already has a method named `\fIfly\fR` implementedon it\. Each `\fIfly\fR` method does something different\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
trait Pilot {
    fn fly(&self);
}

trait Wizard {
    fn fly(&self);
}

struct Human;

impl Pilot for Human {
    fn fly(&self) {
        println!("This is your captain speaking\.");
    }
}

impl Wizard for Human {
    fn fly(&self) {
        println!("Up!");
    }
}

impl Human {
    fn fly(&self) {
        println!("*waving arms furiously*");
    }
}
# 
# fn main() {}

.EE

.RE
Listing 19\-16: Two traits are defined to have a `\fIfly\fR`method and are implemented on the `\fIHuman\fR` type, and a `\fIfly\fR` method isimplemented on `\fIHuman\fR` directly
.P
When we call `\fIfly\fR` on an instance of `\fIHuman\fR`, the compiler defaults to callingthe method that is directly implemented on the type, as shown in Listing 19\-17\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# trait Pilot {
#     fn fly(&self);
# }
# 
# trait Wizard {
#     fn fly(&self);
# }
# 
# struct Human;
# 
# impl Pilot for Human {
#     fn fly(&self) {
#         println!("This is your captain speaking\.");
#     }
# }
# 
# impl Wizard for Human {
#     fn fly(&self) {
#         println!("Up!");
#     }
# }
# 
# impl Human {
#     fn fly(&self) {
#         println!("*waving arms furiously*");
#     }
# }
# 
fn main() {
    let person = Human;
    person\.fly();
}

.EE

.RE
Listing 19\-17: Calling `\fIfly\fR` on an instance of`\fIHuman\fR`
.P
Running this code will print `\fI*waving arms furiously*\fR`, showing that Rustcalled the `\fIfly\fR` method implemented on `\fIHuman\fR` directly\.
.P
To call the `\fIfly\fR` methods from either the `\fIPilot\fR` trait or the `\fIWizard\fR` trait,we need to use more explicit syntax to specify which `\fIfly\fR` method we mean\.Listing 19\-18 demonstrates this syntax\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# trait Pilot {
#     fn fly(&self);
# }
# 
# trait Wizard {
#     fn fly(&self);
# }
# 
# struct Human;
# 
# impl Pilot for Human {
#     fn fly(&self) {
#         println!("This is your captain speaking\.");
#     }
# }
# 
# impl Wizard for Human {
#     fn fly(&self) {
#         println!("Up!");
#     }
# }
# 
# impl Human {
#     fn fly(&self) {
#         println!("*waving arms furiously*");
#     }
# }
# 
fn main() {
    let person = Human;
    Pilot::fly(&person);
    Wizard::fly(&person);
    person\.fly();
}

.EE

.RE
Listing 19\-18: Specifying which trait’s `\fIfly\fR` method wewant to call
.P
Specifying the trait name before the method name clarifies to Rust whichimplementation of `\fIfly\fR` we want to call\. We could also write`\fIHuman::fly(&person)\fR`, which is equivalent to the `\fIperson\.fly()\fR` that we usedin Listing 19\-18, but this is a bit longer to write if we don’t need todisambiguate\.
.P
Running this code prints the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.46s
     Running `target/debug/traits\-example`
This is your captain speaking\.
Up!
*waving arms furiously*

.EE

.RE
.P
Because the `\fIfly\fR` method takes a `\fIself\fR` parameter, if we had two \fItypes\fR thatboth implement one \fItrait\fR, Rust could figure out which implementation of atrait to use based on the type of `\fIself\fR`\.
.P
However, associated functions that are part of traits don’t have a `\fIself\fR`parameter\. When two types in the same scope implement that trait, Rust can’tfigure out which type you mean unless you use \fIfully qualified syntax\fR\. Forexample, the `\fIAnimal\fR` trait in Listing 19\-19 has the associated function`\fIbaby_name\fR`, the implementation of `\fIAnimal\fR` for the struct `\fIDog\fR`, and theassociated function `\fIbaby_name\fR` defined on `\fIDog\fR` directly\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
trait Animal {
    fn baby_name() \-> String;
}

struct Dog;

impl Dog {
    fn baby_name() \-> String {
        String::from("Spot")
    }
}

impl Animal for Dog {
    fn baby_name() \-> String {
        String::from("puppy")
    }
}

fn main() {
    println!("A baby dog is called a {}", Dog::baby_name());
}

.EE

.RE
Listing 19\-19: A trait with an associated function and atype with an associated function of the same name that also implements thetrait
.P
This code is for an animal shelter that wants to name all puppies Spot, whichis implemented in the `\fIbaby_name\fR` associated function that is defined on `\fIDog\fR`\.The `\fIDog\fR` type also implements the trait `\fIAnimal\fR`, which describescharacteristics that all animals have\. Baby dogs are called puppies, and thatis expressed in the implementation of the `\fIAnimal\fR` trait on `\fIDog\fR` in the`\fIbaby_name\fR` function associated with the `\fIAnimal\fR` trait\.
.P
In `\fImain\fR`, we call the `\fIDog::baby_name\fR` function, which calls the associatedfunction defined on `\fIDog\fR` directly\. This code prints the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.54s
     Running `target/debug/traits\-example`
A baby dog is called a Spot

.EE

.RE
.P
This output isn’t what we wanted\. We want to call the `\fIbaby_name\fR` function thatis part of the `\fIAnimal\fR` trait that we implemented on `\fIDog\fR` so the code prints`\fIA baby dog is called a puppy\fR`\. The technique of specifying the trait name thatwe used in Listing 19\-18 doesn’t help here; if we change `\fImain\fR` to the code inListing 19\-20, we’ll get a compilation error\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# trait Animal {
#     fn baby_name() \-> String;
# }
# 
# struct Dog;
# 
# impl Dog {
#     fn baby_name() \-> String {
#         String::from("Spot")
#     }
# }
# 
# impl Animal for Dog {
#     fn baby_name() \-> String {
#         String::from("puppy")
#     }
# }
# 
fn main() {
    println!("A baby dog is called a {}", Animal::baby_name());
}

.EE

.RE
Listing 19\-20: Attempting to call the `\fIbaby_name\fR`function from the `\fIAnimal\fR` trait, but Rust doesn’t know which implementation touse
.P
Because `\fIAnimal::baby_name\fR` is an associated function rather than a method, andthus doesn’t have a `\fIself\fR` parameter, Rust can’t figure out whichimplementation of `\fIAnimal::baby_name\fR` we want\. We’ll get this compiler error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
error[E0283]: type annotations needed
  \-\-> src/main\.rs:20:43
   |
2  |     fn baby_name() \-> String;
   |     \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- required by `Animal::baby_name`
\.\.\.
20 |     println!("A baby dog is called a {}", Animal::baby_name());
   |                                           ^^^^^^^^^^^^^^^^^ cannot infer type
   |
   = note: cannot satisfy `_: Animal`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0283`\.
error: could not compile `traits\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
To disambiguate and tell Rust that we want to use the implementation of`\fIAnimal\fR` for `\fIDog\fR`, we need to use fully qualified syntax\. Listing 19\-21demonstrates how to use fully qualified syntax\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# trait Animal {
#     fn baby_name() \-> String;
# }
# 
# struct Dog;
# 
# impl Dog {
#     fn baby_name() \-> String {
#         String::from("Spot")
#     }
# }
# 
# impl Animal for Dog {
#     fn baby_name() \-> String {
#         String::from("puppy")
#     }
# }
# 
fn main() {
    println!("A baby dog is called a {}", <Dog as Animal>::baby_name());
}

.EE

.RE
Listing 19\-21: Using fully qualified syntax to specifythat we want to call the `\fIbaby_name\fR` function from the `\fIAnimal\fR` trait asimplemented on `\fIDog\fR`
.P
We’re providing Rust with a type annotation within the angle brackets, whichindicates we want to call the `\fIbaby_name\fR` method from the `\fIAnimal\fR` trait asimplemented on `\fIDog\fR` by saying that we want to treat the `\fIDog\fR` type as an`\fIAnimal\fR` for this function call\. This code will now print what we want:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.48s
     Running `target/debug/traits\-example`
A baby dog is called a puppy

.EE

.RE
.P
In general, fully qualified syntax is defined as follows:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
<Type as Trait>::function(receiver_if_method, next_arg, \.\.\.);

.EE

.RE
.P
For associated functions, there would not be a `\fIreceiver\fR`: there would only bethe list of other arguments\. You could use fully qualified syntax everywherethat you call functions or methods\. However, you’re allowed to omit any part ofthis syntax that Rust can figure out from other information in the program\. Youonly need to use this more verbose syntax in cases where there are multipleimplementations that use the same name and Rust needs help to identify whichimplementation you want to call\.
.br

.br
\fBUsing Supertraits to Require One Trait’s Functionality Within Another Trait\fR
.br
===============================================================================
.br

.P
Sometimes, you might need one trait to use another trait’s functionality\. Inthis case, you need to rely on the dependent trait also being implemented\.The trait you rely on is a \fIsupertrait\fR of the trait you’re implementing\.
.P
For example, let’s say we want to make an `\fIOutlinePrint\fR` trait with an`\fIoutline_print\fR` method that will print a value framed in asterisks\. That is,given a `\fIPoint\fR` struct that implements `\fIDisplay\fR` to result in `\fI(x, y)\fR`, when wecall `\fIoutline_print\fR` on a `\fIPoint\fR` instance that has `\fI1\fR` for `\fIx\fR` and `\fI3\fR` for`\fIy\fR`, it should print the following:
.RS
.IP \fBtext\fR 2

.br
.EX
**********
*        *
* (1, 3) *
*        *
**********

.EE

.RE
.P
In the implementation of `\fIoutline_print\fR`, we want to use the `\fIDisplay\fR` trait’sfunctionality\. Therefore, we need to specify that the `\fIOutlinePrint\fR` trait willwork only for types that also implement `\fIDisplay\fR` and provide the functionalitythat `\fIOutlinePrint\fR` needs\. We can do that in the trait definition by specifying`\fIOutlinePrint: Display\fR`\. This technique is similar to adding a trait bound tothe trait\. Listing 19\-22 shows an implementation of the `\fIOutlinePrint\fR` trait\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fmt;

trait OutlinePrint: fmt::Display {
    fn outline_print(&self) {
        let output = self\.to_string();
        let len = output\.len();
        println!("{}", "*"\.repeat(len + 4));
        println!("*{}*", " "\.repeat(len + 2));
        println!("* {} *", output);
        println!("*{}*", " "\.repeat(len + 2));
        println!("{}", "*"\.repeat(len + 4));
    }
}
# 
# fn main() {}

.EE

.RE
Listing 19\-22: Implementing the `\fIOutlinePrint\fR` trait thatrequires the functionality from `\fIDisplay\fR`
.P
Because we’ve specified that `\fIOutlinePrint\fR` requires the `\fIDisplay\fR` trait, wecan use the `\fIto_string\fR` function that is automatically implemented for any typethat implements `\fIDisplay\fR`\. If we tried to use `\fIto_string\fR` without adding acolon and specifying the `\fIDisplay\fR` trait after the trait name, we’d get anerror saying that no method named `\fIto_string\fR` was found for the type `\fI&Self\fR` inthe current scope\.
.P
Let’s see what happens when we try to implement `\fIOutlinePrint\fR` on a type thatdoesn’t implement `\fIDisplay\fR`, such as the `\fIPoint\fR` struct:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::fmt;
# 
# trait OutlinePrint: fmt::Display {
#     fn outline_print(&self) {
#         let output = self\.to_string();
#         let len = output\.len();
#         println!("{}", "*"\.repeat(len + 4));
#         println!("*{}*", " "\.repeat(len + 2));
#         println!("* {} *", output);
#         println!("*{}*", " "\.repeat(len + 2));
#         println!("{}", "*"\.repeat(len + 4));
#     }
# }
# 
struct Point {
    x: i32,
    y: i32,
}

impl OutlinePrint for Point {}
# 
# fn main() {
#     let p = Point { x: 1, y: 3 };
#     p\.outline_print();
# }

.EE

.RE
.P
We get an error saying that `\fIDisplay\fR` is required but not implemented:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling traits\-example v0\.1\.0 (file:///projects/traits\-example)
error[E0277]: `Point` doesn't implement `std::fmt::Display`
  \-\-> src/main\.rs:20:6
   |
3  | trait OutlinePrint: fmt::Display {
   |                     \-\-\-\-\-\-\-\-\-\-\-\- required by this bound in `OutlinePrint`
\.\.\.
20 | impl OutlinePrint for Point {}
   |      ^^^^^^^^^^^^ `Point` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `Point`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty\-print) instead

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0277`\.
error: could not compile `traits\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
To fix this, we implement `\fIDisplay\fR` on `\fIPoint\fR` and satisfy the constraint that`\fIOutlinePrint\fR` requires, like so:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
# trait OutlinePrint: fmt::Display {
#     fn outline_print(&self) {
#         let output = self\.to_string();
#         let len = output\.len();
#         println!("{}", "*"\.repeat(len + 4));
#         println!("*{}*", " "\.repeat(len + 2));
#         println!("* {} *", output);
#         println!("*{}*", " "\.repeat(len + 2));
#         println!("{}", "*"\.repeat(len + 4));
#     }
# }
# 
# struct Point {
#     x: i32,
#     y: i32,
# }
# 
# impl OutlinePrint for Point {}
# 
use std::fmt;

impl fmt::Display for Point {
    fn fmt(&self, f: &mut fmt::Formatter) \-> fmt::Result {
        write!(f, "({}, {})", self\.x, self\.y)
    }
}
# 
# fn main() {
#     let p = Point { x: 1, y: 3 };
#     p\.outline_print();
# }

.EE

.RE
.P
Then implementing the `\fIOutlinePrint\fR` trait on `\fIPoint\fR` will compilesuccessfully, and we can call `\fIoutline_print\fR` on a `\fIPoint\fR` instance to displayit within an outline of asterisks\.
.br

.br
\fBUsing the Newtype Pattern to Implement External Traits on External Types\fR
.br
==========================================================================
.br

.P
In Chapter 10 in the 
.UR ch10\-02\-traits\.html#implementing\-a\-trait\-on\-a\-type
.UE
“Implementing a Trait on aType” section, we mentionedthe orphan rule that states we’re allowed to implement a trait on a type aslong as either the trait or the type are local to our crate\. It’s possible toget around this restriction using the \fInewtype pattern\fR, which involvescreating a new type in a tuple struct\. (We covered tuple structs in the
.UR ch05\-01\-defining\-structs\.html#using\-tuple\-structs\-without\-named\-fields\-to\-create\-different\-types
.UE
“Using Tuple Structs without Named Fields to Create DifferentTypes” section of Chapter 5\.) The tuple structwill have one field and be a thin wrapper around the type we want to implementa trait for\. Then the wrapper type is local to our crate, and we can implementthe trait on the wrapper\. \fINewtype\fR is a term that originates from the Haskellprogramming language\. There is no runtime performance penalty for using thispattern, and the wrapper type is elided at compile time\.
.P
As an example, let’s say we want to implement `\fIDisplay\fR` on `\fIVec<T>\fR`, which theorphan rule prevents us from doing directly because the `\fIDisplay\fR` trait and the`\fIVec<T>\fR` type are defined outside our crate\. We can make a `\fIWrapper\fR` structthat holds an instance of `\fIVec<T>\fR`; then we can implement `\fIDisplay\fR` on`\fIWrapper\fR` and use the `\fIVec<T>\fR` value, as shown in Listing 19\-23\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
use std::fmt;

struct Wrapper(Vec<String>);

impl fmt::Display for Wrapper {
    fn fmt(&self, f: &mut fmt::Formatter) \-> fmt::Result {
        write!(f, "[{}]", self\.0\.join(", "))
    }
}

fn main() {
    let w = Wrapper(vec![String::from("hello"), String::from("world")]);
    println!("w = {}", w);
}

.EE

.RE
Listing 19\-23: Creating a `\fIWrapper\fR` type around`\fIVec<String>\fR` to implement `\fIDisplay\fR`
.P
The implementation of `\fIDisplay\fR` uses `\fIself\.0\fR` to access the inner `\fIVec<T>\fR`,because `\fIWrapper\fR` is a tuple struct and `\fIVec<T>\fR` is the item at index 0 in thetuple\. Then we can use the functionality of the `\fIDisplay\fR` type on `\fIWrapper\fR`\.
.P
The downside of using this technique is that `\fIWrapper\fR` is a new type, so itdoesn’t have the methods of the value it’s holding\. We would have to implementall the methods of `\fIVec<T>\fR` directly on `\fIWrapper\fR` such that the methodsdelegate to `\fIself\.0\fR`, which would allow us to treat `\fIWrapper\fR` exactly like a`\fIVec<T>\fR`\. If we wanted the new type to have every method the inner type has,implementing the `\fIDeref\fR` trait (discussed in Chapter 15 in the 
.UR ch15\-02\-deref\.html#treating\-smart\-pointers\-like\-regular\-references\-with\-the\-deref\-trait
.UE
“Treating SmartPointers Like Regular References with the `\fIDeref\fR`Trait” section) on the `\fIWrapper\fR` to returnthe inner type would be a solution\. If we don’t want the `\fIWrapper\fR` type to haveall the methods of the inner type—for example, to restrict the `\fIWrapper\fR` type’sbehavior—we would have to implement just the methods we do want manually\.
.P
Now you know how the newtype pattern is used in relation to traits; it’s also auseful pattern even when traits are not involved\. Let’s switch focus and lookat some advanced ways to interact with Rust’s type system\.
.SH "Advanced Types"

.br

.br
\fBAdvanced Types\fR
.br
================
.br

.P
The Rust type system has some features that we’ve mentioned in this book buthaven’t yet discussed\. We’ll start by discussing newtypes in general as weexamine why newtypes are useful as types\. Then we’ll move on to type aliases, afeature similar to newtypes but with slightly different semantics\. We’ll alsodiscuss the `\fI!\fR` type and dynamically sized types\.
.br

.br
\fBUsing the Newtype Pattern for Type Safety and Abstraction\fR
.br
===========================================================
.br

.P
Note: This section assumes you’ve read the earlier section 
.UR ch19\-03\-advanced\-traits\.html#using\-the\-newtype\-pattern\-to\-implement\-external\-traits\-on\-external\-types
.UE
“Using theNewtype Pattern to Implement External Traits on ExternalTypes\.”
.P
The newtype pattern is useful for tasks beyond those we’ve discussed so far,including statically enforcing that values are never confused and indicatingthe units of a value\. You saw an example of using newtypes to indicate units inListing 19\-15: recall that the `\fIMillimeters\fR` and `\fIMeters\fR` structs wrapped `\fIu32\fR`values in a newtype\. If we wrote a function with a parameter of type`\fIMillimeters\fR`, we couldn’t compile a program that accidentally tried to callthat function with a value of type `\fIMeters\fR` or a plain `\fIu32\fR`\.
.P
Another use of the newtype pattern is in abstracting away some implementationdetails of a type: the new type can expose a public API that is different fromthe API of the private inner type if we used the new type directly to restrictthe available functionality, for example\.
.P
Newtypes can also hide internal implementation\. For example, we could provide a`\fIPeople\fR` type to wrap a `\fIHashMap<i32, String>\fR` that stores a person’s IDassociated with their name\. Code using `\fIPeople\fR` would only interact with thepublic API we provide, such as a method to add a name string to the `\fIPeople\fR`collection; that code wouldn’t need to know that we assign an `\fIi32\fR` ID to namesinternally\. The newtype pattern is a lightweight way to achieve encapsulationto hide implementation details, which we discussed in the 
.UR ch17\-01\-what\-is\-oo\.html#encapsulation\-that\-hides\-implementation\-details
.UE
“Encapsulation thatHides ImplementationDetails”section of Chapter 17\.
.br

.br
\fBCreating Type Synonyms with Type Aliases\fR
.br
==========================================
.br

.P
Along with the newtype pattern, Rust provides the ability to declare a \fItype\fRalias to give an existing type another name\. For this we use the `\fItype\fR`keyword\. For example, we can create the alias `\fIKilometers\fR` to `\fIi32\fR` like so:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    type Kilometers = i32;
# 
#     let x: i32 = 5;
#     let y: Kilometers = 5;
# 
#     println!("x + y = {}", x + y);
# }

.EE

.RE
.P
Now, the alias `\fIKilometers\fR` is a \fIsynonym\fR for `\fIi32\fR`; unlike the `\fIMillimeters\fR`and `\fIMeters\fR` types we created in Listing 19\-15, `\fIKilometers\fR` is not a separate,new type\. Values that have the type `\fIKilometers\fR` will be treated the same asvalues of type `\fIi32\fR`:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    type Kilometers = i32;

    let x: i32 = 5;
    let y: Kilometers = 5;

    println!("x + y = {}", x + y);
# }

.EE

.RE
.P
Because `\fIKilometers\fR` and `\fIi32\fR` are the same type, we can add values of bothtypes and we can pass `\fIKilometers\fR` values to functions that take `\fIi32\fR`parameters\. However, using this method, we don’t get the type checking benefitsthat we get from the newtype pattern discussed earlier\.
.P
The main use case for type synonyms is to reduce repetition\. For example, wemight have a lengthy type like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
Box<dyn Fn() + Send + 'static>

.EE

.RE
.P
Writing this lengthy type in function signatures and as type annotations allover the code can be tiresome and error prone\. Imagine having a project full ofcode like that in Listing 19\-24\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let f: Box<dyn Fn() + Send + 'static> = Box::new(|| println!("hi"));

    fn takes_long_type(f: Box<dyn Fn() + Send + 'static>) {
        // \-\-snip\-\-
    }

    fn returns_long_type() \-> Box<dyn Fn() + Send + 'static> {
        // \-\-snip\-\-
#         Box::new(|| ())
    }
# }

.EE

.RE
Listing 19\-24: Using a long type in many places
.P
A type alias makes this code more manageable by reducing the repetition\. InListing 19\-25, we’ve introduced an alias named `\fIThunk\fR` for the verbose type andcan replace all uses of the type with the shorter alias `\fIThunk\fR`\.
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    type Thunk = Box<dyn Fn() + Send + 'static>;

    let f: Thunk = Box::new(|| println!("hi"));

    fn takes_long_type(f: Thunk) {
        // \-\-snip\-\-
    }

    fn returns_long_type() \-> Thunk {
        // \-\-snip\-\-
#         Box::new(|| ())
    }
# }

.EE

.RE
Listing 19\-25: Introducing a type alias `\fIThunk\fR` to reducerepetition
.P
This code is much easier to read and write! Choosing a meaningful name for atype alias can help communicate your intent as well (\fIthunk\fR is a word for codeto be evaluated at a later time, so it’s an appropriate name for a closure thatgets stored)\.
.P
Type aliases are also commonly used with the `\fIResult<T, E>\fR` type for reducingrepetition\. Consider the `\fIstd::io\fR` module in the standard library\. I/Ooperations often return a `\fIResult<T, E>\fR` to handle situations when operationsfail to work\. This library has a `\fIstd::io::Error\fR` struct that represents allpossible I/O errors\. Many of the functions in `\fIstd::io\fR` will be returning`\fIResult<T, E>\fR` where the `\fIE\fR` is `\fIstd::io::Error\fR`, such as these functions inthe `\fIWrite\fR` trait:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::fmt;
use std::io::Error;

pub trait Write {
    fn write(&mut self, buf: &[u8]) \-> Result<usize, Error>;
    fn flush(&mut self) \-> Result<(), Error>;

    fn write_all(&mut self, buf: &[u8]) \-> Result<(), Error>;
    fn write_fmt(&mut self, fmt: fmt::Arguments) \-> Result<(), Error>;
}

.EE

.RE
.P
The `\fIResult<\.\.\., Error>\fR` is repeated a lot\. As such, `\fIstd::io\fR` has this typealias declaration:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::fmt;
# 
type Result<T> = std::result::Result<T, std::io::Error>;
# 
# pub trait Write {
#     fn write(&mut self, buf: &[u8]) \-> Result<usize>;
#     fn flush(&mut self) \-> Result<()>;
# 
#     fn write_all(&mut self, buf: &[u8]) \-> Result<()>;
#     fn write_fmt(&mut self, fmt: fmt::Arguments) \-> Result<()>;
# }

.EE

.RE
.P
Because this declaration is in the `\fIstd::io\fR` module, we can use the fullyqualified alias `\fIstd::io::Result<T>\fR`—that is, a `\fIResult<T, E>\fR` with the `\fIE\fR`filled in as `\fIstd::io::Error\fR`\. The `\fIWrite\fR` trait function signatures end uplooking like this:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::fmt;
# 
# type Result<T> = std::result::Result<T, std::io::Error>;
# 
pub trait Write {
    fn write(&mut self, buf: &[u8]) \-> Result<usize>;
    fn flush(&mut self) \-> Result<()>;

    fn write_all(&mut self, buf: &[u8]) \-> Result<()>;
    fn write_fmt(&mut self, fmt: fmt::Arguments) \-> Result<()>;
}

.EE

.RE
.P
The type alias helps in two ways: it makes code easier to write \fIand\fR it givesus a consistent interface across all of `\fIstd::io\fR`\. Because it’s an alias, it’sjust another `\fIResult<T, E>\fR`, which means we can use any methods that work on`\fIResult<T, E>\fR` with it, as well as special syntax like the `\fI?\fR` operator\.
.br

.br
\fBThe Never Type that Never Returns\fR
.br
===================================
.br

.P
Rust has a special type named `\fI!\fR` that’s known in type theory lingo as the\fIempty type\fR because it has no values\. We prefer to call it the \fInever type\fRbecause it stands in the place of the return type when a function will neverreturn\. Here is an example:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
fn bar() \-> ! {
    // \-\-snip\-\-
#     panic!();
}

.EE

.RE
.P
This code is read as “the function `\fIbar\fR` returns never\.” Functions that returnnever are called \fIdiverging functions\fR\. We can’t create values of the type `\fI!\fR`so `\fIbar\fR` can never possibly return\.
.P
But what use is a type you can never create values for? Recall the code fromListing 2\-5; we’ve reproduced part of it here in Listing 19\-26\.
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use rand::Rng;
# use std::cmp::Ordering;
# use std::io;
# 
# fn main() {
#     println!("Guess the number!");
# 
#     let secret_number = rand::thread_rng()\.gen_range(1\.\.101);
# 
#     println!("The secret number is: {}", secret_number);
# 
#     loop {
#         println!("Please input your guess\.");
# 
#         let mut guess = String::new();
# 
#         // \-\-snip\-\-
# 
#         io::stdin()
#             \.read_line(&mut guess)
#             \.expect("Failed to read line");
# 
        let guess: u32 = match guess\.trim()\.parse() {
            Ok(num) => num,
            Err(_) => continue,
        };
# 
#         println!("You guessed: {}", guess);
# 
#         // \-\-snip\-\-
# 
#         match guess\.cmp(&secret_number) {
#             Ordering::Less => println!("Too small!"),
#             Ordering::Greater => println!("Too big!"),
#             Ordering::Equal => {
#                 println!("You win!");
#                 break;
#             }
#         }
#     }
# }

.EE

.RE
Listing 19\-26: A `\fImatch\fR` with an arm that ends in`\fIcontinue\fR`
.P
At the time, we skipped over some details in this code\. In Chapter 6 in 
.UR ch06\-02\-match\.html#the\-match\-control\-flow\-operator
.UE
“The`\fImatch\fR` Control Flow Operator” section, we discussed that `\fImatch\fR` arms must all return the same type\. So,for example, the following code doesn’t work:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
#     let guess = "3";
    let guess = match guess\.trim()\.parse() {
        Ok(_) => 5,
        Err(_) => "hello",
    };
# }

.EE

.RE
.P
The type of `\fIguess\fR` in this code would have to be an integer \fIand\fR a string,and Rust requires that `\fIguess\fR` have only one type\. So what does `\fIcontinue\fR`return? How were we allowed to return a `\fIu32\fR` from one arm and have another armthat ends with `\fIcontinue\fR` in Listing 19\-26?
.P
As you might have guessed, `\fIcontinue\fR` has a `\fI!\fR` value\. That is, when Rustcomputes the type of `\fIguess\fR`, it looks at both match arms, the former with avalue of `\fIu32\fR` and the latter with a `\fI!\fR` value\. Because `\fI!\fR` can never have avalue, Rust decides that the type of `\fIguess\fR` is `\fIu32\fR`\.
.P
The formal way of describing this behavior is that expressions of type `\fI!\fR` canbe coerced into any other type\. We’re allowed to end this `\fImatch\fR` arm with`\fIcontinue\fR` because `\fIcontinue\fR` doesn’t return a value; instead, it moves controlback to the top of the loop, so in the `\fIErr\fR` case, we never assign a value to`\fIguess\fR`\.
.P
The never type is useful with the `\fIpanic!\fR` macro as well\. Remember the `\fIunwrap\fR`function that we call on `\fIOption<T>\fR` values to produce a value or panic? Hereis its definition:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# enum Option<T> {
#     Some(T),
#     None,
# }
# 
# use crate::Option::*;
# 
impl<T> Option<T> {
    pub fn unwrap(self) \-> T {
        match self {
            Some(val) => val,
            None => panic!("called `Option::unwrap()` on a `None` value"),
        }
    }
}

.EE

.RE
.P
In this code, the same thing happens as in the `\fImatch\fR` in Listing 19\-26: Rustsees that `\fIval\fR` has the type `\fIT\fR` and `\fIpanic!\fR` has the type `\fI!\fR`, so the resultof the overall `\fImatch\fR` expression is `\fIT\fR`\. This code works because `\fIpanic!\fR`doesn’t produce a value; it ends the program\. In the `\fINone\fR` case, we won’t bereturning a value from `\fIunwrap\fR`, so this code is valid\.
.P
One final expression that has the type `\fI!\fR` is a `\fIloop\fR`:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# fn main() {
    print!("forever ");

    loop {
        print!("and ever ");
    }
# }

.EE

.RE
.P
Here, the loop never ends, so `\fI!\fR` is the value of the expression\. However, thiswouldn’t be true if we included a `\fIbreak\fR`, because the loop would terminatewhen it got to the `\fIbreak\fR`\.
.br

.br
\fBDynamically Sized Types and the \fR
.br
==================================
.br
`\fISized\fR` Trait
.P
Due to Rust’s need to know certain details, such as how much space to allocatefor a value of a particular type, there is a corner of its type system that canbe confusing: the concept of \fIdynamically sized types\fR\. Sometimes referred toas \fIDSTs\fR or \fIunsized types\fR, these types let us write code using values whosesize we can know only at runtime\.
.P
Let’s dig into the details of a dynamically sized type called `\fIstr\fR`, whichwe’ve been using throughout the book\. That’s right, not `\fI&str\fR`, but `\fIstr\fR` onits own, is a DST\. We can’t know how long the string is until runtime, meaningwe can’t create a variable of type `\fIstr\fR`, nor can we take an argument of type`\fIstr\fR`\. Consider the following code, which does not work:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# fn main() {
    let s1: str = "Hello there!";
    let s2: str = "How's it going?";
# }

.EE

.RE
.P
Rust needs to know how much memory to allocate for any value of a particulartype, and all values of a type must use the same amount of memory\. If Rustallowed us to write this code, these two `\fIstr\fR` values would need to take up thesame amount of space\. But they have different lengths: `\fIs1\fR` needs 12 bytes ofstorage and `\fIs2\fR` needs 15\. This is why it’s not possible to create a variableholding a dynamically sized type\.
.P
So what do we do? In this case, you already know the answer: we make the typesof `\fIs1\fR` and `\fIs2\fR` a `\fI&str\fR` rather than a `\fIstr\fR`\. Recall that in the 
.UR ch04\-03\-slices\.html#string\-slices
.UE
“StringSlices” section of Chapter 4, we said the slicedata structure stores the starting position and the length of the slice\.
.P
So although a `\fI&T\fR` is a single value that stores the memory address of wherethe `\fIT\fR` is located, a `\fI&str\fR` is \fItwo\fR values: the address of the `\fIstr\fR` and itslength\. As such, we can know the size of a `\fI&str\fR` value at compile time: it’stwice the length of a `\fIusize\fR`\. That is, we always know the size of a `\fI&str\fR`, nomatter how long the string it refers to is\. In general, this is the way inwhich dynamically sized types are used in Rust: they have an extra bit ofmetadata that stores the size of the dynamic information\. The golden rule ofdynamically sized types is that we must always put values of dynamically sizedtypes behind a pointer of some kind\.
.P
We can combine `\fIstr\fR` with all kinds of pointers: for example, `\fIBox<str>\fR` or`\fIRc<str>\fR`\. In fact, you’ve seen this before but with a different dynamicallysized type: traits\. Every trait is a dynamically sized type we can refer to byusing the name of the trait\. In Chapter 17 in the 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
“Using Trait Objects ThatAllow for Values of DifferentTypes” section, we mentioned that to use traits as trait objects, we mustput them behind a pointer, such as `\fI&dyn Trait\fR` or `\fIBox<dyn Trait>\fR` (`\fIRc<dyn Trait>\fR` would work too)\.
.P
To work with DSTs, Rust has a particular trait called the `\fISized\fR` trait todetermine whether or not a type’s size is known at compile time\. This trait isautomatically implemented for everything whose size is known at compile time\.In addition, Rust implicitly adds a bound on `\fISized\fR` to every generic function\.That is, a generic function definition like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn generic<T>(t: T) {
    // \-\-snip\-\-
}

.EE

.RE
.P
is actually treated as though we had written this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn generic<T: Sized>(t: T) {
    // \-\-snip\-\-
}

.EE

.RE
.P
By default, generic functions will work only on types that have a known size atcompile time\. However, you can use the following special syntax to relax thisrestriction:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
fn generic<T: ?Sized>(t: &T) {
    // \-\-snip\-\-
}

.EE

.RE
.P
A trait bound on `\fI?Sized\fR` means “`\fIT\fR` may or may not be `\fISized\fR`” and thisnotation overrides the default that generic types must have a known size atcompile time\. The `\fI?Trait\fR` syntax with this meaning is only available for`\fISized\fR`, not any other traits\.
.P
Also note that we switched the type of the `\fIt\fR` parameter from `\fIT\fR` to `\fI&T\fR`\.Because the type might not be `\fISized\fR`, we need to use it behind some kind ofpointer\. In this case, we’ve chosen a reference\.
.P
Next, we’ll talk about functions and closures!
.SH "Advanced Functions and Closures"

.br

.br
\fBAdvanced Functions and Closures\fR
.br
=================================
.br

.P
Next, we’ll explore some advanced features related to functions andclosures, which include function pointers and returning closures\.
.br

.br
\fBFunction Pointers\fR
.br
===================
.br

.P
We’ve talked about how to pass closures to functions; you can also pass regularfunctions to functions! This technique is useful when you want to pass afunction you’ve already defined rather than defining a new closure\. Doing thiswith function pointers will allow you to use functions as arguments to otherfunctions\. Functions coerce to the type `\fIfn\fR` (with a lowercase f), not to beconfused with the `\fIFn\fR` closure trait\. The `\fIfn\fR` type is called a \fIfunction\fRpointer\. The syntax for specifying that a parameter is a function pointer issimilar to that of closures, as shown in Listing 19\-27\.Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn add_one(x: i32) \-> i32 {
    x + 1
}

fn do_twice(f: fn(i32) \-> i32, arg: i32) \-> i32 {
    f(arg) + f(arg)
}

fn main() {
    let answer = do_twice(add_one, 5);

    println!("The answer is: {}", answer);
}

.EE

.RE
Listing 19\-27: Using the `\fIfn\fR` type to accept a functionpointer as an argument
.P
This code prints `\fIThe answer is: 12\fR`\. We specify that the parameter `\fIf\fR` in`\fIdo_twice\fR` is an `\fIfn\fR` that takes one parameter of type `\fIi32\fR` and returns an`\fIi32\fR`\. We can then call `\fIf\fR` in the body of `\fIdo_twice\fR`\. In `\fImain\fR`, we can passthe function name `\fIadd_one\fR` as the first argument to `\fIdo_twice\fR`\.
.P
Unlike closures, `\fIfn\fR` is a type rather than a trait, so we specify `\fIfn\fR` as theparameter type directly rather than declaring a generic type parameter with oneof the `\fIFn\fR` traits as a trait bound\.
.P
Function pointers implement all three of the closure traits (`\fIFn\fR`, `\fIFnMut\fR`, and`\fIFnOnce\fR`), so you can always pass a function pointer as an argument for afunction that expects a closure\. It’s best to write functions using a generictype and one of the closure traits so your functions can accept eitherfunctions or closures\.
.P
An example of where you would want to only accept `\fIfn\fR` and not closures is wheninterfacing with external code that doesn’t have closures: C functions canaccept functions as arguments, but C doesn’t have closures\.
.P
As an example of where you could use either a closure defined inline or a namedfunction, let’s look at a use of `\fImap\fR`\. To use the `\fImap\fR` function to turn avector of numbers into a vector of strings, we could use a closure, like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let list_of_numbers = vec![1, 2, 3];
    let list_of_strings: Vec<String> =
        list_of_numbers\.iter()\.map(|i| i\.to_string())\.collect();
# }

.EE

.RE
.P
Or we could name a function as the argument to `\fImap\fR` instead of the closure,like this:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    let list_of_numbers = vec![1, 2, 3];
    let list_of_strings: Vec<String> =
        list_of_numbers\.iter()\.map(ToString::to_string)\.collect();
# }

.EE

.RE
.P
Note that we must use the fully qualified syntax that we talked about earlierin the 
.UR ch19\-03\-advanced\-traits\.html#advanced\-traits
.UE
“Advanced Traits” section becausethere are multiple functions available named `\fIto_string\fR`\. Here, we’re using the`\fIto_string\fR` function defined in the `\fIToString\fR` trait, which the standardlibrary has implemented for any type that implements `\fIDisplay\fR`\.
.P
We have another useful pattern that exploits an implementation detail of tuplestructs and tuple\-struct enum variants\. These types use `\fI()\fR` as initializersyntax, which looks like a function call\. The initializers are actuallyimplemented as functions returning an instance that’s constructed from theirarguments\. We can use these initializer functions as function pointers thatimplement the closure traits, which means we can specify the initializerfunctions as arguments for methods that take closures, like so:
.RS
.IP \fBrust\fR 2

.br
.EX
# fn main() {
    enum Status {
        Value(u32),
        Stop,
    }

    let list_of_statuses: Vec<Status> = (0u32\.\.20)\.map(Status::Value)\.collect();
# }

.EE

.RE
.P
Here we create `\fIStatus::Value\fR` instances using each `\fIu32\fR` value in the rangethat `\fImap\fR` is called on by using the initializer function of `\fIStatus::Value\fR`\.Some people prefer this style, and some people prefer to use closures\. Theycompile to the same code, so use whichever style is clearer to you\.
.br

.br
\fBReturning Closures\fR
.br
====================
.br

.P
Closures are represented by traits, which means you can’t return closuresdirectly\. In most cases where you might want to return a trait, you can insteaduse the concrete type that implements the trait as the return value of thefunction\. But you can’t do that with closures because they don’t have aconcrete type that is returnable; you’re not allowed to use the functionpointer `\fIfn\fR` as a return type, for example\.
.P
The following code tries to return a closure directly, but it won’t compile:
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn returns_closure() \-> dyn Fn(i32) \-> i32 {
    |x| x + 1
}

.EE

.RE
.P
The compiler error is as follows:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling functions\-example v0\.1\.0 (file:///projects/functions\-example)
error[E0746]: return type cannot have an unboxed trait object
 \-\-> src/lib\.rs:1:25
  |
1 | fn returns_closure() \-> dyn Fn(i32) \-> i32 {
  |                         ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile\-time
  |
  = note: for information on `impl Trait`, see <https://doc\.rust\-lang\.org/book/ch10\-02\-traits\.html#returning\-types\-that\-implement\-traits>
help: use `impl Fn(i32) \-> i32` as the return type, as all return paths are of type `[closure@src/lib\.rs:2:5: 2:14]`, which implements `Fn(i32) \-> i32`
  |
1 | fn returns_closure() \-> impl Fn(i32) \-> i32 {
  |                         ^^^^^^^^^^^^^^^^^^^

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0746`\.
error: could not compile `functions\-example`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The error references the `\fISized\fR` trait again! Rust doesn’t know how much spaceit will need to store the closure\. We saw a solution to this problem earlier\.We can use a trait object:
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
fn returns_closure() \-> Box<dyn Fn(i32) \-> i32> {
    Box::new(|x| x + 1)
}

.EE

.RE
.P
This code will compile just fine\. For more about trait objects, refer to thesection 
.UR ch17\-02\-trait\-objects\.html#using\-trait\-objects\-that\-allow\-for\-values\-of\-different\-types
.UE
“Using Trait Objects That Allow for Values of DifferentTypes” in Chapter 17\.
.P
Next, let’s look at macros!
.SH Macros

.br

.br
\fBMacros\fR
.br
========
.br

.P
We’ve used macros like `\fIprintln!\fR` throughout this book, but we haven’t fullyexplored what a macro is and how it works\. The term \fImacro\fR refers to a familyof features in Rust: \fIdeclarative\fR macros with `\fImacro_rules!\fR` and three kindsof \fIprocedural\fR macros:
.P
Custom `\fI#[derive]\fR` macros that specify code added with the `\fIderive\fR` attributeused on structs and enums
.P
Attribute\-like macros that define custom attributes usable on any item
.P
Function\-like macros that look like function calls but operate on the tokensspecified as their argument
.P
We’ll talk about each of these in turn, but first, let’s look at why we evenneed macros when we already have functions\.
.br

.br
\fBThe Difference Between Macros and Functions\fR
.br
=============================================
.br

.P
Fundamentally, macros are a way of writing code that writes other code, whichis known as \fImetaprogramming\fR\. In Appendix C, we discuss the `\fIderive\fR`attribute, which generates an implementation of various traits for you\. We’vealso used the `\fIprintln!\fR` and `\fIvec!\fR` macros throughout the book\. All of thesemacros \fIexpand\fR to produce more code than the code you’ve written manually\.
.P
Metaprogramming is useful for reducing the amount of code you have to write andmaintain, which is also one of the roles of functions\. However, macros havesome additional powers that functions don’t\.
.P
A function signature must declare the number and type of parameters thefunction has\. Macros, on the other hand, can take a variable number ofparameters: we can call `\fIprintln!("hello")\fR` with one argument or`\fIprintln!("hello {}", name)\fR` with two arguments\. Also, macros are expandedbefore the compiler interprets the meaning of the code, so a macro can, forexample, implement a trait on a given type\. A function can’t, because it getscalled at runtime and a trait needs to be implemented at compile time\.
.P
The downside to implementing a macro instead of a function is that macrodefinitions are more complex than function definitions because you’re writingRust code that writes Rust code\. Due to this indirection, macro definitions aregenerally more difficult to read, understand, and maintain than functiondefinitions\.
.P
Another important difference between macros and functions is that you mustdefine macros or bring them into scope \fIbefore\fR you call them in a file, asopposed to functions you can define anywhere and call anywhere\.
.br

.br
\fBDeclarative Macros with \fR
.br
==========================
.br
`\fImacro_rules!\fR` for General Metaprogramming
.P
The most widely used form of macros in Rust is \fIdeclarative macros\fR\. These arealso sometimes referred to as “macros by example,” “`\fImacro_rules!\fR` macros,” orjust plain “macros\.” At their core, declarative macros allow you to writesomething similar to a Rust `\fImatch\fR` expression\. As discussed in Chapter 6,`\fImatch\fR` expressions are control structures that take an expression, compare theresulting value of the expression to patterns, and then run the code associatedwith the matching pattern\. Macros also compare a value to patterns that areassociated with particular code: in this situation, the value is the literalRust source code passed to the macro; the patterns are compared with thestructure of that source code; and the code associated with each pattern, whenmatched, replaces the code passed to the macro\. This all happens duringcompilation\.
.P
To define a macro, you use the `\fImacro_rules!\fR` construct\. Let’s explore how touse `\fImacro_rules!\fR` by looking at how the `\fIvec!\fR` macro is defined\. Chapter 8covered how we can use the `\fIvec!\fR` macro to create a new vector with particularvalues\. For example, the following macro creates a new vector containing threeintegers:
.RS
.IP \fBrust\fR 2

.br
.EX
let v: Vec<u32> = vec![1, 2, 3];

.EE

.RE
.P
We could also use the `\fIvec!\fR` macro to make a vector of two integers or a vectorof five string slices\. We wouldn’t be able to use a function to do the samebecause we wouldn’t know the number or type of values up front\.
.P
Listing 19\-28 shows a slightly simplified definition of the `\fIvec!\fR` macro\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
#[macro_export]
macro_rules! vec {
    ( $( $x:expr ),* ) => {
        {
            let mut temp_vec = Vec::new();
            $(
                temp_vec\.push($x);
            )*
            temp_vec
        }
    };
}

.EE

.RE
Listing 19\-28: A simplified version of the `\fIvec!\fR` macrodefinition
.P
Note: The actual definition of the `\fIvec!\fR` macro in the standard libraryincludes code to preallocate the correct amount of memory up front\. That codeis an optimization that we don’t include here to make the example simpler\.
.P
The `\fI#[macro_export]\fR` annotation indicates that this macro should be madeavailable whenever the crate in which the macro is defined is brought intoscope\. Without this annotation, the macro can’t be brought into scope\.
.P
We then start the macro definition with `\fImacro_rules!\fR` and the name of themacro we’re defining \fIwithout\fR the exclamation mark\. The name, in this case`\fIvec\fR`, is followed by curly brackets denoting the body of the macro definition\.
.P
The structure in the `\fIvec!\fR` body is similar to the structure of a `\fImatch\fR`expression\. Here we have one arm with the pattern `\fI( $( $x:expr ),* )\fR`,followed by `\fI=>\fR` and the block of code associated with this pattern\. If thepattern matches, the associated block of code will be emitted\. Given that thisis the only pattern in this macro, there is only one valid way to match; anyother pattern will result in an error\. More complex macros will have more thanone arm\.
.P
Valid pattern syntax in macro definitions is different than the pattern syntaxcovered in Chapter 18 because macro patterns are matched against Rust codestructure rather than values\. Let’s walk through what the pattern pieces inListing 19\-28 mean; for the full macro pattern syntax, see 
.UR \.\./reference/macros\-by\-example\.html
.UE
the reference\.
.P
First, a set of parentheses encompasses the whole pattern\. A dollar sign (`\fI$\fR`)is next, followed by a set of parentheses that captures values that match thepattern within the parentheses for use in the replacement code\. Within `\fI$()\fR` is`\fI$x:expr\fR`, which matches any Rust expression and gives the expression the name`\fI$x\fR`\.
.P
The comma following `\fI$()\fR` indicates that a literal comma separator charactercould optionally appear after the code that matches the code in `\fI$()\fR`\. The `\fI*\fR`specifies that the pattern matches zero or more of whatever precedes the `\fI*\fR`\.
.P
When we call this macro with `\fIvec![1, 2, 3];\fR`, the `\fI$x\fR` pattern matches threetimes with the three expressions `\fI1\fR`, `\fI2\fR`, and `\fI3\fR`\.
.P
Now let’s look at the pattern in the body of the code associated with this arm:`\fItemp_vec\.push()\fR` within `\fI$()*\fR` is generated for each part that matches `\fI$()\fR`in the pattern zero or more times depending on how many times the patternmatches\. The `\fI$x\fR` is replaced with each expression matched\. When we call thismacro with `\fIvec![1, 2, 3];\fR`, the code generated that replaces this macro callwill be the following:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
{
    let mut temp_vec = Vec::new();
    temp_vec\.push(1);
    temp_vec\.push(2);
    temp_vec\.push(3);
    temp_vec
}

.EE

.RE
.P
We’ve defined a macro that can take any number of arguments of any type and cangenerate code to create a vector containing the specified elements\.
.P
There are some strange edge cases with `\fImacro_rules!\fR`\. In the future, Rust willhave a second kind of declarative macro that will work in a similar fashion butfix some of these edge cases\. After that update, `\fImacro_rules!\fR` will beeffectively deprecated\. With this in mind, as well as the fact that most Rustprogrammers will \fIuse\fR macros more than \fIwrite\fR macros, we won’t discuss`\fImacro_rules!\fR` any further\. To learn more about how to write macros, consultthe online documentation or other resources, such as 
.UR https://veykril\.github\.io/tlborm/
.UE
“The Little Book of RustMacros” started by Daniel Keep and continued by Lukas Wirth\.
.br

.br
\fBProcedural Macros for Generating Code from Attributes\fR
.br
=======================================================
.br

.P
The second form of macros is \fIprocedural macros\fR, which act more like functions(and are a type of procedure)\. Procedural macros accept some code as an input,operate on that code, and produce some code as an output rather than matchingagainst patterns and replacing the code with other code as declarative macrosdo\.
.P
The three kinds of procedural macros (custom derive, attribute\-like, andfunction\-like) all work in a similar fashion\.
.P
When creating procedural macros, the definitions must reside in their own cratewith a special crate type\. This is for complex technical reasons that we hopeto eliminate in the future\. Using procedural macros looks like the code inListing 19\-29, where `\fIsome_attribute\fR` is a placeholder for using a specificmacro\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use proc_macro;

#[some_attribute]
pub fn some_name(input: TokenStream) \-> TokenStream {
}

.EE

.RE
Listing 19\-29: An example of using a proceduralmacro
.P
The function that defines a procedural macro takes a `\fITokenStream\fR` as an inputand produces a `\fITokenStream\fR` as an output\. The `\fITokenStream\fR` type is defined bythe `\fIproc_macro\fR` crate that is included with Rust and represents a sequence oftokens\. This is the core of the macro: the source code that the macro isoperating on makes up the input `\fITokenStream\fR`, and the code the macro producesis the output `\fITokenStream\fR`\. The function also has an attribute attached to itthat specifies which kind of procedural macro we’re creating\. We can havemultiple kinds of procedural macros in the same crate\.
.P
Let’s look at the different kinds of procedural macros\. We’ll start with acustom derive macro and then explain the small dissimilarities that make theother forms different\.
.br

.br
\fBHow to Write a Custom \fR
.br
========================
.br
`\fIderive\fR` Macro
.P
Let’s create a crate named `\fIhello_macro\fR` that defines a trait named`\fIHelloMacro\fR` with one associated function named `\fIhello_macro\fR`\. Rather thanmaking our crate users implement the `\fIHelloMacro\fR` trait for each of theirtypes, we’ll provide a procedural macro so users can annotate their type with`\fI#[derive(HelloMacro)]\fR` to get a default implementation of the `\fIhello_macro\fR`function\. The default implementation will print `\fIHello, Macro! My name is TypeName!\fR` where `\fITypeName\fR` is the name of the type on which this trait hasbeen defined\. In other words, we’ll write a crate that enables anotherprogrammer to write code like Listing 19\-30 using our crate\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
use hello_macro::HelloMacro;
use hello_macro_derive::HelloMacro;

#[derive(HelloMacro)]
struct Pancakes;

fn main() {
    Pancakes::hello_macro();
}

.EE

.RE
Listing 19\-30: The code a user of our crate will be ableto write when using our procedural macro
.P
This code will print `\fIHello, Macro! My name is Pancakes!\fR` when we’re done\. Thefirst step is to make a new library crate, like this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new hello_macro \-\-lib

.EE

.RE
.P
Next, we’ll define the `\fIHelloMacro\fR` trait and its associated function:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub trait HelloMacro {
    fn hello_macro();
}

.EE

.RE
.P
We have a trait and its function\. At this point, our crate user could implementthe trait to achieve the desired functionality, like so:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use hello_macro::HelloMacro;

struct Pancakes;

impl HelloMacro for Pancakes {
    fn hello_macro() {
        println!("Hello, Macro! My name is Pancakes!");
    }
}

fn main() {
    Pancakes::hello_macro();
}

.EE

.RE
.P
However, they would need to write the implementation block for each type theywanted to use with `\fIhello_macro\fR`; we want to spare them from having to do thiswork\.
.P
Additionally, we can’t yet provide the `\fIhello_macro\fR` function with defaultimplementation that will print the name of the type the trait is implementedon: Rust doesn’t have reflection capabilities, so it can’t look up the type’sname at runtime\. We need a macro to generate code at compile time\.
.P
The next step is to define the procedural macro\. At the time of this writing,procedural macros need to be in their own crate\. Eventually, this restrictionmight be lifted\. The convention for structuring crates and macro crates is asfollows: for a crate named `\fIfoo\fR`, a custom derive procedural macro crate iscalled `\fIfoo_derive\fR`\. Let’s start a new crate called `\fIhello_macro_derive\fR` insideour `\fIhello_macro\fR` project:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new hello_macro_derive \-\-lib

.EE

.RE
.P
Our two crates are tightly related, so we create the procedural macro cratewithin the directory of our `\fIhello_macro\fR` crate\. If we change the traitdefinition in `\fIhello_macro\fR`, we’ll have to change the implementation of theprocedural macro in `\fIhello_macro_derive\fR` as well\. The two crates will need tobe published separately, and programmers using these crates will need to addboth as dependencies and bring them both into scope\. We could instead have the`\fIhello_macro\fR` crate use `\fIhello_macro_derive\fR` as a dependency and re\-export theprocedural macro code\. However, the way we’ve structured the project makes itpossible for programmers to use `\fIhello_macro\fR` even if they don’t want the`\fIderive\fR` functionality\.
.P
We need to declare the `\fIhello_macro_derive\fR` crate as a procedural macro crate\.We’ll also need functionality from the `\fIsyn\fR` and `\fIquote\fR` crates, as you’ll seein a moment, so we need to add them as dependencies\. Add the following to the\fICargo\.toml\fR file for `\fIhello_macro_derive\fR`:Filename: hello_macro_derive/Cargo\.toml
.RS
.IP \fBtoml\fR 2

.br
.EX
proc\-macro = true

[dependencies]
syn = "1\.0"
quote = "1\.0"

.EE

.RE
.P
To start defining the procedural macro, place the code in Listing 19\-31 intoyour \fIsrc/lib\.rs\fR file for the `\fIhello_macro_derive\fR` crate\. Note that this codewon’t compile until we add a definition for the `\fIimpl_hello_macro\fR` function\.Filename: hello_macro_derive/src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
extern crate proc_macro;

use proc_macro::TokenStream;
use quote::quote;
use syn;

#[proc_macro_derive(HelloMacro)]
pub fn hello_macro_derive(input: TokenStream) \-> TokenStream {
    // Construct a representation of Rust code as a syntax tree
    // that we can manipulate
    let ast = syn::parse(input)\.unwrap();

    // Build the trait implementation
    impl_hello_macro(&ast)
}

.EE

.RE
Listing 19\-31: Code that most procedural macro crateswill require in order to process Rust code
.P
Notice that we’ve split the code into the `\fIhello_macro_derive\fR` function, whichis responsible for parsing the `\fITokenStream\fR`, and the `\fIimpl_hello_macro\fR`function, which is responsible for transforming the syntax tree: this makeswriting a procedural macro more convenient\. The code in the outer function(`\fIhello_macro_derive\fR` in this case) will be the same for almost everyprocedural macro crate you see or create\. The code you specify in the body ofthe inner function (`\fIimpl_hello_macro\fR` in this case) will be differentdepending on your procedural macro’s purpose\.
.P
We’ve introduced three new crates: `\fIproc_macro\fR`, 
.UR https://crates\.io/crates/syn
.UE
`\fIsyn\fR`, and 
.UR https://crates\.io/crates/quote
.UE
`\fIquote\fR`\. The`\fIproc_macro\fR` crate comes with Rust, so we didn’t need to add that to thedependencies in \fICargo\.toml\fR\. The `\fIproc_macro\fR` crate is the compiler’s API thatallows us to read and manipulate Rust code from our code\.
.P
The `\fIsyn\fR` crate parses Rust code from a string into a data structure that wecan perform operations on\. The `\fIquote\fR` crate turns `\fIsyn\fR` data structures backinto Rust code\. These crates make it much simpler to parse any sort of Rustcode we might want to handle: writing a full parser for Rust code is no simpletask\.
.P
The `\fIhello_macro_derive\fR` function will be called when a user of our libraryspecifies `\fI#[derive(HelloMacro)]\fR` on a type\. This is possible because we’veannotated the `\fIhello_macro_derive\fR` function here with `\fIproc_macro_derive\fR` andspecified the name, `\fIHelloMacro\fR`, which matches our trait name; this is theconvention most procedural macros follow\.
.P
The `\fIhello_macro_derive\fR` function first converts the `\fIinput\fR` from a`\fITokenStream\fR` to a data structure that we can then interpret and performoperations on\. This is where `\fIsyn\fR` comes into play\. The `\fIparse\fR` function in`\fIsyn\fR` takes a `\fITokenStream\fR` and returns a `\fIDeriveInput\fR` struct representing theparsed Rust code\. Listing 19\-32 shows the relevant parts of the `\fIDeriveInput\fR`struct we get from parsing the `\fIstruct Pancakes;\fR` string:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
DeriveInput {
    // \-\-snip\-\-

    ident: Ident {
        ident: "Pancakes",
        span: #0 bytes(95\.\.103)
    },
    data: Struct(
        DataStruct {
            struct_token: Struct,
            fields: Unit,
            semi_token: Some(
                Semi
            )
        }
    )
}

.EE

.RE
Listing 19\-32: The `\fIDeriveInput\fR` instance we get whenparsing the code that has the macro’s attribute in Listing 19\-30
.P
The fields of this struct show that the Rust code we’ve parsed is a unit structwith the `\fIident\fR` (identifier, meaning the name) of `\fIPancakes\fR`\. There are morefields on this struct for describing all sorts of Rust code; check the 
.UR https://docs\.rs/syn/1\.0/syn/struct\.DeriveInput\.html
.UE
`\fIsyn\fR`documentation for `\fIDeriveInput\fR` for more information\.
.P
Soon we’ll define the `\fIimpl_hello_macro\fR` function, which is where we’ll buildthe new Rust code we want to include\. But before we do, note that the outputfor our derive macro is also a `\fITokenStream\fR`\. The returned `\fITokenStream\fR` isadded to the code that our crate users write, so when they compile their crate,they’ll get the extra functionality that we provide in the modified`\fITokenStream\fR`\.
.P
You might have noticed that we’re calling `\fIunwrap\fR` to cause the`\fIhello_macro_derive\fR` function to panic if the call to the `\fIsyn::parse\fR` functionfails here\. It’s necessary for our procedural macro to panic on errors because`\fIproc_macro_derive\fR` functions must return `\fITokenStream\fR` rather than `\fIResult\fR` toconform to the procedural macro API\. We’ve simplified this example by using`\fIunwrap\fR`; in production code, you should provide more specific error messagesabout what went wrong by using `\fIpanic!\fR` or `\fIexpect\fR`\.
.P
Now that we have the code to turn the annotated Rust code from a `\fITokenStream\fR`into a `\fIDeriveInput\fR` instance, let’s generate the code that implements the`\fIHelloMacro\fR` trait on the annotated type, as shown in Listing 19\-33\.Filename: hello_macro_derive/src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# extern crate proc_macro;
# 
# use proc_macro::TokenStream;
# use quote::quote;
# use syn;
# 
# #[proc_macro_derive(HelloMacro)]
# pub fn hello_macro_derive(input: TokenStream) \-> TokenStream {
#     // Construct a representation of Rust code as a syntax tree
#     // that we can manipulate
#     let ast = syn::parse(input)\.unwrap();
# 
#     // Build the trait implementation
#     impl_hello_macro(&ast)
# }
# 
fn impl_hello_macro(ast: &syn::DeriveInput) \-> TokenStream {
    let name = &ast\.ident;
    let gen = quote! {
        impl HelloMacro for #name {
            fn hello_macro() {
                println!("Hello, Macro! My name is {}!", stringify!(#name));
            }
        }
    };
    gen\.into()
}

.EE

.RE
Listing 19\-33: Implementing the `\fIHelloMacro\fR` trait usingthe parsed Rust code
.P
We get an `\fIIdent\fR` struct instance containing the name (identifier) of theannotated type using `\fIast\.ident\fR`\. The struct in Listing 19\-32 shows that whenwe run the `\fIimpl_hello_macro\fR` function on the code in Listing 19\-30, the`\fIident\fR` we get will have the `\fIident\fR` field with a value of `\fI"Pancakes"\fR`\. Thus,the `\fIname\fR` variable in Listing 19\-33 will contain an `\fIIdent\fR` struct instancethat, when printed, will be the string `\fI"Pancakes"\fR`, the name of the struct inListing 19\-30\.
.P
The `\fIquote!\fR` macro lets us define the Rust code that we want to return\. Thecompiler expects something different to the direct result of the `\fIquote!\fR`macro’s execution, so we need to convert it to a `\fITokenStream\fR`\. We do this bycalling the `\fIinto\fR` method, which consumes this intermediate representation andreturns a value of the required `\fITokenStream\fR` type\.
.P
The `\fIquote!\fR` macro also provides some very cool templating mechanics: we canenter `\fI#name\fR`, and `\fIquote!\fR` will replace it with the value in the variable`\fIname\fR`\. You can even do some repetition similar to the way regular macros work\.Check out 
.UR https://docs\.rs/quote
.UE
the `\fIquote\fR` crate’s docs for a thorough introduction\.
.P
We want our procedural macro to generate an implementation of our `\fIHelloMacro\fR`trait for the type the user annotated, which we can get by using `\fI#name\fR`\. Thetrait implementation has one function, `\fIhello_macro\fR`, whose body contains thefunctionality we want to provide: printing `\fIHello, Macro! My name is\fR` and thenthe name of the annotated type\.
.P
The `\fIstringify!\fR` macro used here is built into Rust\. It takes a Rustexpression, such as `\fI1 + 2\fR`, and at compile time turns the expression into astring literal, such as `\fI"1 + 2"\fR`\. This is different than `\fIformat!\fR` or`\fIprintln!\fR`, macros which evaluate the expression and then turn the result intoa `\fIString\fR`\. There is a possibility that the `\fI#name\fR` input might be anexpression to print literally, so we use `\fIstringify!\fR`\. Using `\fIstringify!\fR` alsosaves an allocation by converting `\fI#name\fR` to a string literal at compile time\.
.P
At this point, `\fIcargo build\fR` should complete successfully in both `\fIhello_macro\fR`and `\fIhello_macro_derive\fR`\. Let’s hook up these crates to the code in Listing19\-30 to see the procedural macro in action! Create a new binary project inyour \fIprojects\fR directory using `\fIcargo new pancakes\fR`\. We need to add`\fIhello_macro\fR` and `\fIhello_macro_derive\fR` as dependencies in the `\fIpancakes\fR`crate’s \fICargo\.toml\fR\. If you’re publishing your versions of `\fIhello_macro\fR` and`\fIhello_macro_derive\fR` to 
.UR https://crates\.io/
.UE
crates\.io, they would be regulardependencies; if not, you can specify them as `\fIpath\fR` dependencies as follows:
.RS
.IP \fBtoml\fR 2

.br
.EX
hello_macro = { path = "\.\./hello_macro" }
hello_macro_derive = { path = "\.\./hello_macro/hello_macro_derive" }

.EE

.RE
.P
Put the code in Listing 19\-30 into \fIsrc/main\.rs\fR, and run `\fIcargo run\fR`: itshould print `\fIHello, Macro! My name is Pancakes!\fR` The implementation of the`\fIHelloMacro\fR` trait from the procedural macro was included without the`\fIpancakes\fR` crate needing to implement it; the `\fI#[derive(HelloMacro)]\fR` added thetrait implementation\.
.P
Next, let’s explore how the other kinds of procedural macros differ from customderive macros\.
.br

.br
\fBAttribute\-like macros\fR
.br
=======================
.br

.P
Attribute\-like macros are similar to custom derive macros, but instead ofgenerating code for the `\fIderive\fR` attribute, they allow you to create newattributes\. They’re also more flexible: `\fIderive\fR` only works for structs andenums; attributes can be applied to other items as well, such as functions\.Here’s an example of using an attribute\-like macro: say you have an attributenamed `\fIroute\fR` that annotates functions when using a web application framework:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
#[route(GET, "/")]
fn index() {

.EE

.RE
.P
This `\fI#[route]\fR` attribute would be defined by the framework as a proceduralmacro\. The signature of the macro definition function would look like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
#[proc_macro_attribute]
pub fn route(attr: TokenStream, item: TokenStream) \-> TokenStream {

.EE

.RE
.P
Here, we have two parameters of type `\fITokenStream\fR`\. The first is for thecontents of the attribute: the `\fIGET, "/"\fR` part\. The second is the body of theitem the attribute is attached to: in this case, `\fIfn index() {}\fR` and the restof the function’s body\.
.P
Other than that, attribute\-like macros work the same way as custom derivemacros: you create a crate with the `\fIproc\-macro\fR` crate type and implement afunction that generates the code you want!
.br

.br
\fBFunction\-like macros\fR
.br
======================
.br

.P
Function\-like macros define macros that look like function calls\. Similarly to`\fImacro_rules!\fR` macros, they’re more flexible than functions; for example, theycan take an unknown number of arguments\. However, `\fImacro_rules!\fR` macros can bedefined only using the match\-like syntax we discussed in the section
.UR #declarative\-macros\-with\-macro_rules\-for\-general\-metaprogramming
.UE
“Declarative Macros with `\fImacro_rules!\fR` for General Metaprogramming”earlier\. Function\-like macros take a `\fITokenStream\fR` parameter and theirdefinition manipulates that `\fITokenStream\fR` using Rust code as the other twotypes of procedural macros do\. An example of a function\-like macro is an `\fIsql!\fR`macro that might be called like so:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
let sql = sql!(SELECT * FROM posts WHERE id=1);

.EE

.RE
.P
This macro would parse the SQL statement inside it and check that it’ssyntactically correct, which is much more complex processing than a`\fImacro_rules!\fR` macro can do\. The `\fIsql!\fR` macro would be defined like this:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
#[proc_macro]
pub fn sql(input: TokenStream) \-> TokenStream {

.EE

.RE
.P
This definition is similar to the custom derive macro’s signature: we receivethe tokens that are inside the parentheses and return the code we wanted togenerate\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Whew! Now you have some Rust features in your toolbox that you won’t use often,but you’ll know they’re available in very particular circumstances\. We’veintroduced several complex topics so that when you encounter them in errormessage suggestions or in other peoples’ code, you’ll be able to recognizethese concepts and syntax\. Use this chapter as a reference to guide you tosolutions\.
.P
Next, we’ll put everything we’ve discussed throughout the book into practiceand do one more project!
.SH "Final Project: Building a Multithreaded Web Server"

.br

.br
\fBFinal Project: Building a Multithreaded Web Server\fR
.br
====================================================
.br

.P
It’s been a long journey, but we’ve reached the end of the book\. In thischapter, we’ll build one more project together to demonstrate some of theconcepts we covered in the final chapters, as well as recap some earlierlessons\.
.P
For our final project, we’ll make a web server that says “hello” and looks likeFigure 20\-1 in a web browser\.
.UR img/trpl20\-01\.png
.UE
hello from rustFigure 20\-1: Our final shared project
.P
Here is the plan to build the web server:
.P
Learn a bit about TCP and HTTP\.
.P
Listen for TCP connections on a socket\.
.P
Parse a small number of HTTP requests\.
.P
Create a proper HTTP response\.
.P
Improve the throughput of our server with a thread pool\.
.P
But before we get started, we should mention one detail: the method we’ll usewon’t be the best way to build a web server with Rust\. A number ofproduction\-ready crates are available on 
.UR https://crates\.io/
.UE
crates\.io thatprovide more complete web server and thread pool implementations than we’llbuild\.
.P
However, our intention in this chapter is to help you learn, not to take theeasy route\. Because Rust is a systems programming language, we can choose thelevel of abstraction we want to work with and can go to a lower level than ispossible or practical in other languages\. We’ll write the basic HTTP server andthread pool manually so you can learn the general ideas and techniques behindthe crates you might use in the future\.
.SH "Building a Single\-Threaded Web Server"

.br

.br
\fBBuilding a Single\-Threaded Web Server\fR
.br
=======================================
.br

.P
We’ll start by getting a single\-threaded web server working\. Before we begin,let’s look at a quick overview of the protocols involved in building webservers\. The details of these protocols are beyond the scope of this book, buta brief overview will give you the information you need\.
.P
The two main protocols involved in web servers are the \fIHypertext Transfer\fRProtocol \fI(HTTP)\fR and the \fITransmission Control Protocol\fR \fI(TCP)\fR\. Bothprotocols are \fIrequest\-response\fR protocols, meaning a \fIclient\fR initiatesrequests and a \fIserver\fR listens to the requests and provides a response to theclient\. The contents of those requests and responses are defined by theprotocols\.
.P
TCP is the lower\-level protocol that describes the details of how informationgets from one server to another but doesn’t specify what that information is\.HTTP builds on top of TCP by defining the contents of the requests andresponses\. It’s technically possible to use HTTP with other protocols, but inthe vast majority of cases, HTTP sends its data over TCP\. We’ll work with theraw bytes of TCP and HTTP requests and responses\.
.br

.br
\fBListening to the TCP Connection\fR
.br
=================================
.br

.P
Our web server needs to listen to a TCP connection, so that’s the first partwe’ll work on\. The standard library offers a `\fIstd::net\fR` module that lets us dothis\. Let’s make a new project in the usual fashion:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo new hello
     Created binary (application) `hello` project
$ cd hello

.EE

.RE
.P
Now enter the code in Listing 20\-1 in \fIsrc/main\.rs\fR to start\. This code willlisten at the address `\fI127\.0\.0\.1:7878\fR` for incoming TCP streams\. When it getsan incoming stream, it will print `\fIConnection established!\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
use std::net::TcpListener;

fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        println!("Connection established!");
    }
}

.EE

.RE
Listing 20\-1: Listening for incoming streams and printinga message when we receive a stream
.P
Using `\fITcpListener\fR`, we can listen for TCP connections at the address`\fI127\.0\.0\.1:7878\fR`\. In the address, the section before the colon is an IP addressrepresenting your computer (this is the same on every computer and doesn’trepresent the authors’ computer specifically), and `\fI7878\fR` is the port\. We’vechosen this port for two reasons: HTTP isn't normally accepted on this port, and7878 is \fIrust\fR typed on a telephone\.
.P
The `\fIbind\fR` function in this scenario works like the `\fInew\fR` function in that itwill return a new `\fITcpListener\fR` instance\. The reason the function is called`\fIbind\fR` is that in networking, connecting to a port to listen to is known as“binding to a port\.”
.P
The `\fIbind\fR` function returns a `\fIResult<T, E>\fR`, which indicates that bindingmight fail\. For example, connecting to port 80 requires administratorprivileges (nonadministrators can listen only on ports higher than 1023), so ifwe tried to connect to port 80 without being an administrator, binding wouldn’twork\. As another example, binding wouldn’t work if we ran two instances of ourprogram and so had two programs listening to the same port\. Because we’rewriting a basic server just for learning purposes, we won’t worry abouthandling these kinds of errors; instead, we use `\fIunwrap\fR` to stop the program iferrors happen\.
.P
The `\fIincoming\fR` method on `\fITcpListener\fR` returns an iterator that gives us asequence of streams (more specifically, streams of type `\fITcpStream\fR`)\. A single\fIstream\fR represents an open connection between the client and the server\. A\fIconnection\fR is the name for the full request and response process in which aclient connects to the server, the server generates a response, and the servercloses the connection\. As such, `\fITcpStream\fR` will read from itself to see whatthe client sent and then allow us to write our response to the stream\. Overall,this `\fIfor\fR` loop will process each connection in turn and produce a series ofstreams for us to handle\.
.P
For now, our handling of the stream consists of calling `\fIunwrap\fR` to terminateour program if the stream has any errors; if there aren’t any errors, theprogram prints a message\. We’ll add more functionality for the success case inthe next listing\. The reason we might receive errors from the `\fIincoming\fR` methodwhen a client connects to the server is that we’re not actually iterating overconnections\. Instead, we’re iterating over \fIconnection attempts\fR\. Theconnection might not be successful for a number of reasons, many of themoperating system specific\. For example, many operating systems have a limit tothe number of simultaneous open connections they can support; new connectionattempts beyond that number will produce an error until some of the openconnections are closed\.
.P
Let’s try running this code! Invoke `\fIcargo run\fR` in the terminal and then load\fI127\.0\.0\.1:7878\fR in a web browser\. The browser should show an error messagelike “Connection reset,” because the server isn’t currently sending back anydata\. But when you look at your terminal, you should see several messages thatwere printed when the browser connected to the server!
.RS
.IP \fBtext\fR 2

.br
.EX
     Running `target/debug/hello`
Connection established!
Connection established!
Connection established!

.EE

.RE
.P
Sometimes, you’ll see multiple messages printed for one browser request; thereason might be that the browser is making a request for the page as well as arequest for other resources, like the \fIfavicon\.ico\fR icon that appears in thebrowser tab\.
.P
It could also be that the browser is trying to connect to the server multipletimes because the server isn’t responding with any data\. When `\fIstream\fR` goes outof scope and is dropped at the end of the loop, the connection is closed aspart of the `\fIdrop\fR` implementation\. Browsers sometimes deal with closedconnections by retrying, because the problem might be temporary\. The importantfactor is that we’ve successfully gotten a handle to a TCP connection!
.P
Remember to stop the program by pressing ctrl\-cwhen you’re done running a particular version of the code\. Then restart `\fIcargo run\fR` after you’ve made each set of code changes to make sure you’re running thenewest code\.
.br

.br
\fBReading the Request\fR
.br
=====================
.br

.P
Let’s implement the functionality to read the request from the browser! Toseparate the concerns of first getting a connection and then taking some actionwith the connection, we’ll start a new function for processing connections\. Inthis new `\fIhandle_connection\fR` function, we’ll read data from the TCP stream andprint it so we can see the data being sent from the browser\. Change the code tolook like Listing 20\-2\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
use std::io::prelude::*;
use std::net::TcpListener;
use std::net::TcpStream;

fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        handle_connection(stream);
    }
}

fn handle_connection(mut stream: TcpStream) {
    let mut buffer = [0; 1024];

    stream\.read(&mut buffer)\.unwrap();

    println!("Request: {}", String::from_utf8_lossy(&buffer[\.\.]));
}

.EE

.RE
Listing 20\-2: Reading from the `\fITcpStream\fR` and printingthe data
.P
We bring `\fIstd::io::prelude\fR` into scope to get access to certain traits that letus read from and write to the stream\. In the `\fIfor\fR` loop in the `\fImain\fR` function,instead of printing a message that says we made a connection, we now call thenew `\fIhandle_connection\fR` function and pass the `\fIstream\fR` to it\.
.P
In the `\fIhandle_connection\fR` function, we’ve made the `\fIstream\fR` parameter mutable\.The reason is that the `\fITcpStream\fR` instance keeps track of what data it returnsto us internally\. It might read more data than we asked for and save that datafor the next time we ask for data\. It therefore needs to be `\fImut\fR` because itsinternal state might change; usually, we think of “reading” as not needingmutation, but in this case we need the `\fImut\fR` keyword\.
.P
Next, we need to actually read from the stream\. We do this in two steps:first, we declare a `\fIbuffer\fR` on the stack to hold the data that is read in\.We’ve made the buffer 1024 bytes in size, which is big enough to hold thedata of a basic request and sufficient for our purposes in this chapter\. Ifwe wanted to handle requests of an arbitrary size, buffer management wouldneed to be more complicated; we’ll keep it simple for now\. We pass the bufferto `\fIstream\.read\fR`, which will read bytes from the `\fITcpStream\fR` and put them inthe buffer\.
.P
Second, we convert the bytes in the buffer to a string and print that string\.The `\fIString::from_utf8_lossy\fR` function takes a `\fI&[u8]\fR` and produces a `\fIString\fR`from it\. The “lossy” part of the name indicates the behavior of this functionwhen it sees an invalid UTF\-8 sequence: it will replace the invalid sequencewith `\fI�\fR`, the `\fIU+FFFD REPLACEMENT CHARACTER\fR`\. You might see replacementcharacters for characters in the buffer that aren’t filled by request data\.
.P
Let’s try this code! Start the program and make a request in a web browseragain\. Note that we’ll still get an error page in the browser, but ourprogram’s output in the terminal will now look similar to this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling hello v0\.1\.0 (file:///projects/hello)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.42s
     Running `target/debug/hello`
Request: GET / HTTP/1\.1
Host: 127\.0\.0\.1:7878
User\-Agent: Mozilla/5\.0 (Windows NT 10\.0; WOW64; rv:52\.0) Gecko/20100101
Firefox/52\.0
Accept: text/html,application/xhtml+xml,application/xml;q=0\.9,*/*;q=0\.8
Accept\-Language: en\-US,en;q=0\.5
Accept\-Encoding: gzip, deflate
Connection: keep\-alive
Upgrade\-Insecure\-Requests: 1
������������������������������������

.EE

.RE
.P
Depending on your browser, you might get slightly different output\. Now thatwe’re printing the request data, we can see why we get multiple connectionsfrom one browser request by looking at the path after `\fIRequest: GET\fR`\. If therepeated connections are all requesting \fI/\fR, we know the browser is trying tofetch \fI/\fR repeatedly because it’s not getting a response from our program\.
.P
Let’s break down this request data to understand what the browser is asking ofour program\.
.br

.br
\fBA Closer Look at an HTTP Request\fR
.br
==================================
.br

.P
HTTP is a text\-based protocol, and a request takes this format:
.RS
.IP \fBtext\fR 2

.br
.EX
Method Request\-URI HTTP\-Version CRLF
headers CRLF
message\-body

.EE

.RE
.P
The first line is the \fIrequest line\fR that holds information about what theclient is requesting\. The first part of the request line indicates the \fImethod\fRbeing used, such as `\fIGET\fR` or `\fIPOST\fR`, which describes how the client is makingthis request\. Our client used a `\fIGET\fR` request\.
.P
The next part of the request line is \fI/\fR, which indicates the \fIUniform Resource\fRIdentifier \fI(URI)\fR the client is requesting: a URI is almost, but not quite,the same as a \fIUniform Resource Locator\fR \fI(URL)\fR\. The difference between URIsand URLs isn’t important for our purposes in this chapter, but the HTTP specuses the term URI, so we can just mentally substitute URL for URI here\.
.P
The last part is the HTTP version the client uses, and then the request lineends in a \fICRLF sequence\fR\. (CRLF stands for \fIcarriage return\fR and \fIline feed\fR,which are terms from the typewriter days!) The CRLF sequence can also bewritten as `\fI\r\n\fR`, where `\fI\r\fR` is a carriage return and `\fI\n\fR` is a line feed\. TheCRLF sequence separates the request line from the rest of the request data\.Note that when the CRLF is printed, we see a new line start rather than `\fI\r\n\fR`\.
.P
Looking at the request line data we received from running our program so far,we see that `\fIGET\fR` is the method, \fI/\fR is the request URI, and `\fIHTTP/1\.1\fR` is theversion\.
.P
After the request line, the remaining lines starting from `\fIHost:\fR` onward areheaders\. `\fIGET\fR` requests have no body\.
.P
Try making a request from a different browser or asking for a differentaddress, such as \fI127\.0\.0\.1:7878/test\fR, to see how the request data changes\.
.P
Now that we know what the browser is asking for, let’s send back some data!
.br

.br
\fBWriting a Response\fR
.br
====================
.br

.P
Now we’ll implement sending data in response to a client request\. Responseshave the following format:
.RS
.IP \fBtext\fR 2

.br
.EX
HTTP\-Version Status\-Code Reason\-Phrase CRLF
headers CRLF
message\-body

.EE

.RE
.P
The first line is a \fIstatus line\fR that contains the HTTP version used in theresponse, a numeric status code that summarizes the result of the request, anda reason phrase that provides a text description of the status code\. After theCRLF sequence are any headers, another CRLF sequence, and the body of theresponse\.
.P
Here is an example response that uses HTTP version 1\.1, has a status code of200, an OK reason phrase, no headers, and no body:
.RS
.IP \fBtext\fR 2

.br
.EX
HTTP/1\.1 200 OK\r\n\r\n

.EE

.RE
.P
The status code 200 is the standard success response\. The text is a tinysuccessful HTTP response\. Let’s write this to the stream as our response to asuccessful request! From the `\fIhandle_connection\fR` function, remove the`\fIprintln!\fR` that was printing the request data and replace it with the code inListing 20\-3\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
# 
fn handle_connection(mut stream: TcpStream) {
    let mut buffer = [0; 1024];

    stream\.read(&mut buffer)\.unwrap();

    let response = "HTTP/1\.1 200 OK\r\n\r\n";

    stream\.write(response\.as_bytes())\.unwrap();
    stream\.flush()\.unwrap();
}

.EE

.RE
Listing 20\-3: Writing a tiny successful HTTP response tothe stream
.P
The first new line defines the `\fIresponse\fR` variable that holds the successmessage’s data\. Then we call `\fIas_bytes\fR` on our `\fIresponse\fR` to convert the stringdata to bytes\. The `\fIwrite\fR` method on `\fIstream\fR` takes a `\fI&[u8]\fR` and sends thosebytes directly down the connection\.
.P
Because the `\fIwrite\fR` operation could fail, we use `\fIunwrap\fR` on any error resultas before\. Again, in a real application you would add error handling here\.Finally, `\fIflush\fR` will wait and prevent the program from continuing until allthe bytes are written to the connection; `\fITcpStream\fR` contains an internalbuffer to minimize calls to the underlying operating system\.
.P
With these changes, let’s run our code and make a request\. We’re no longerprinting any data to the terminal, so we won’t see any output other than theoutput from Cargo\. When you load \fI127\.0\.0\.1:7878\fR in a web browser, you shouldget a blank page instead of an error\. You’ve just hand\-coded an HTTP requestand response!
.br

.br
\fBReturning Real HTML\fR
.br
=====================
.br

.P
Let’s implement the functionality for returning more than a blank page\. Createa new file, \fIhello\.html\fR, in the root of your project directory, not in the\fIsrc\fR directory\. You can input any HTML you want; Listing 20\-4 shows onepossibility\.Filename: hello\.html
.RS
.IP \fBhtml\fR 2

.br
.EX
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf\-8">
    <title>Hello!</title>
  </head>
  <body>
    <h1>Hello!</h1>
    <p>Hi from Rust</p>
  </body>
</html>

.EE

.RE
Listing 20\-4: A sample HTML file to return in aresponse
.P
This is a minimal HTML5 document with a heading and some text\. To return thisfrom the server when a request is received, we’ll modify `\fIhandle_connection\fR` asshown in Listing 20\-5 to read the HTML file, add it to the response as a body,and send it\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
use std::fs;
// \-\-snip\-\-

# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
# 
fn handle_connection(mut stream: TcpStream) {
    let mut buffer = [0; 1024];
    stream\.read(&mut buffer)\.unwrap();

    let contents = fs::read_to_string("hello\.html")\.unwrap();

    let response = format!(
        "HTTP/1\.1 200 OK\r\nContent\-Length: {}\r\n\r\n{}",
        contents\.len(),
        contents
    );

    stream\.write(response\.as_bytes())\.unwrap();
    stream\.flush()\.unwrap();
}

.EE

.RE
Listing 20\-5: Sending the contents of \fIhello\.html\fR as thebody of the response
.P
We’ve added a line at the top to bring the standard library’s filesystem moduleinto scope\. The code for reading the contents of a file to a string should lookfamiliar; we used it in Chapter 12 when we read the contents of a file for ourI/O project in Listing 12\-4\.
.P
Next, we use `\fIformat!\fR` to add the file’s contents as the body of the successresponse\. To ensure a valid HTTP response, we add the `\fIContent\-Length\fR` headerwhich is set to the size of our response body, in this case the size of `\fIhello\.html\fR`\.
.P
Run this code with `\fIcargo run\fR` and load \fI127\.0\.0\.1:7878\fR in your browser; youshould see your HTML rendered!
.P
Currently, we’re ignoring the request data in `\fIbuffer\fR` and just sending backthe contents of the HTML file unconditionally\. That means if you try requesting\fI127\.0\.0\.1:7878/something\-else\fR in your browser, you’ll still get back thissame HTML response\. Our server is very limited and is not what most web serversdo\. We want to customize our responses depending on the request and only sendback the HTML file for a well\-formed request to \fI/\fR\.
.br

.br
\fBValidating the Request and Selectively Responding\fR
.br
===================================================
.br

.P
Right now, our web server will return the HTML in the file no matter what theclient requested\. Let’s add functionality to check that the browser isrequesting \fI/\fR before returning the HTML file and return an error if thebrowser requests anything else\. For this we need to modify `\fIhandle_connection\fR`,as shown in Listing 20\-6\. This new code checks the content of the requestreceived against what we know a request for \fI/\fR looks like and adds `\fIif\fR` and`\fIelse\fR` blocks to treat requests differently\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
# 
// \-\-snip\-\-

fn handle_connection(mut stream: TcpStream) {
    let mut buffer = [0; 1024];
    stream\.read(&mut buffer)\.unwrap();

    let get = b"GET / HTTP/1\.1\r\n";

    if buffer\.starts_with(get) {
        let contents = fs::read_to_string("hello\.html")\.unwrap();

        let response = format!(
            "HTTP/1\.1 200 OK\r\nContent\-Length: {}\r\n\r\n{}",
            contents\.len(),
            contents
        );

        stream\.write(response\.as_bytes())\.unwrap();
        stream\.flush()\.unwrap();
    } else {
        // some other request
    }
}

.EE

.RE
Listing 20\-6: Matching the request and handling requeststo \fI/\fR differently from other requests
.P
First, we hardcode the data corresponding to the \fI/\fR request into the `\fIget\fR`variable\. Because we’re reading raw bytes into the buffer, we transform `\fIget\fR`into a byte string by adding the `\fIb""\fR` byte string syntax at the start of thecontent data\. Then we check whether `\fIbuffer\fR` starts with the bytes in `\fIget\fR`\. Ifit does, it means we’ve received a well\-formed request to \fI/\fR, which is thesuccess case we’ll handle in the `\fIif\fR` block that returns the contents of ourHTML file\.
.P
If `\fIbuffer\fR` does \fInot\fR start with the bytes in `\fIget\fR`, it means we’ve receivedsome other request\. We’ll add code to the `\fIelse\fR` block in a moment to respondto all other requests\.
.P
Run this code now and request \fI127\.0\.0\.1:7878\fR; you should get the HTML in\fIhello\.html\fR\. If you make any other request, such as\fI127\.0\.0\.1:7878/something\-else\fR, you’ll get a connection error like those yousaw when running the code in Listing 20\-1 and Listing 20\-2\.
.P
Now let’s add the code in Listing 20\-7 to the `\fIelse\fR` block to return a responsewith the status code 404, which signals that the content for the request wasnot found\. We’ll also return some HTML for a page to render in the browserindicating the response to the end user\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
# 
# fn handle_connection(mut stream: TcpStream) {
#     let mut buffer = [0; 1024];
#     stream\.read(&mut buffer)\.unwrap();
# 
#     let get = b"GET / HTTP/1\.1\r\n";
# 
#     if buffer\.starts_with(get) {
#         let contents = fs::read_to_string("hello\.html")\.unwrap();
# 
#         let response = format!(
#             "HTTP/1\.1 200 OK\r\nContent\-Length: {}\r\n\r\n{}",
#             contents\.len(),
#             contents
#         );
# 
#         stream\.write(response\.as_bytes())\.unwrap();
#         stream\.flush()\.unwrap();
    // \-\-snip\-\-
    } else {
        let status_line = "HTTP/1\.1 404 NOT FOUND";
        let contents = fs::read_to_string("404\.html")\.unwrap();

        let response = format!(
            "{}\r\nContent\-Length: {}\r\n\r\n{}",
            status_line,
            contents\.len(),
            contents
        );

        stream\.write(response\.as_bytes())\.unwrap();
        stream\.flush()\.unwrap();
    }
# }

.EE

.RE
Listing 20\-7: Responding with status code 404 and anerror page if anything other than \fI/\fR was requested
.P
Here, our response has a status line with status code 404 and the reasonphrase `\fINOT FOUND\fR`\. The body of the response will be the HTML in the file\fI404\.html\fR\. You’ll need to create a \fI404\.html\fR file next to \fIhello\.html\fR forthe error page; again feel free to use any HTML you want or use the exampleHTML in Listing 20\-8\.Filename: 404\.html
.RS
.IP \fBhtml\fR 2

.br
.EX
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf\-8">
    <title>Hello!</title>
  </head>
  <body>
    <h1>Oops!</h1>
    <p>Sorry, I don't know what you're asking for\.</p>
  </body>
</html>

.EE

.RE
Listing 20\-8: Sample content for the page to send backwith any 404 response
.P
With these changes, run your server again\. Requesting \fI127\.0\.0\.1:7878\fRshould return the contents of \fIhello\.html\fR, and any other request, like\fI127\.0\.0\.1:7878/foo\fR, should return the error HTML from \fI404\.html\fR\.
.br

.br
\fBA Touch of Refactoring\fR
.br
========================
.br

.P
At the moment the `\fIif\fR` and `\fIelse\fR` blocks have a lot of repetition: they’re bothreading files and writing the contents of the files to the stream\. The onlydifferences are the status line and the filename\. Let’s make the code moreconcise by pulling out those differences into separate `\fIif\fR` and `\fIelse\fR` linesthat will assign the values of the status line and the filename to variables;we can then use those variables unconditionally in the code to read the fileand write the response\. Listing 20\-9 shows the resulting code after replacingthe large `\fIif\fR` and `\fIelse\fR` blocks\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }
# 
// \-\-snip\-\-

fn handle_connection(mut stream: TcpStream) {
    // \-\-snip\-\-

#     let mut buffer = [0; 1024];
#     stream\.read(&mut buffer)\.unwrap();
# 
#     let get = b"GET / HTTP/1\.1\r\n";
# 
    let (status_line, filename) = if buffer\.starts_with(get) {
        ("HTTP/1\.1 200 OK", "hello\.html")
    } else {
        ("HTTP/1\.1 404 NOT FOUND", "404\.html")
    };

    let contents = fs::read_to_string(filename)\.unwrap();

    let response = format!(
        "{}\r\nContent\-Length: {}\r\n\r\n{}",
        status_line,
        contents\.len(),
        contents
    );

    stream\.write(response\.as_bytes())\.unwrap();
    stream\.flush()\.unwrap();
}

.EE

.RE
Listing 20\-9: Refactoring the `\fIif\fR` and `\fIelse\fR` blocks tocontain only the code that differs between the two cases
.P
Now the `\fIif\fR` and `\fIelse\fR` blocks only return the appropriate values for thestatus line and filename in a tuple; we then use destructuring to assign thesetwo values to `\fIstatus_line\fR` and `\fIfilename\fR` using a pattern in the `\fIlet\fR`statement, as discussed in Chapter 18\.
.P
The previously duplicated code is now outside the `\fIif\fR` and `\fIelse\fR` blocks anduses the `\fIstatus_line\fR` and `\fIfilename\fR` variables\. This makes it easier to seethe difference between the two cases, and it means we have only one place toupdate the code if we want to change how the file reading and response writingwork\. The behavior of the code in Listing 20\-9 will be the same as that inListing 20\-8\.
.P
Awesome! We now have a simple web server in approximately 40 lines of Rust codethat responds to one request with a page of content and responds to all otherrequests with a 404 response\.
.P
Currently, our server runs in a single thread, meaning it can only serve onerequest at a time\. Let’s examine how that can be a problem by simulating someslow requests\. Then we’ll fix it so our server can handle multiple requests atonce\.
.SH "Turning Our Single\-Threaded Server into a Multithreaded Server"

.br

.br
\fBTurning Our Single\-Threaded Server into a Multithreaded Server\fR
.br
================================================================
.br

.P
Right now, the server will process each request in turn, meaning it won’tprocess a second connection until the first is finished processing\. If theserver received more and more requests, this serial execution would be less andless optimal\. If the server receives a request that takes a long time toprocess, subsequent requests will have to wait until the long request isfinished, even if the new requests can be processed quickly\. We’ll need to fixthis, but first, we’ll look at the problem in action\.
.br

.br
\fBSimulating a Slow Request in the Current Server Implementation\fR
.br
================================================================
.br

.P
We’ll look at how a slow\-processing request can affect other requests made toour current server implementation\. Listing 20\-10 implements handling a requestto \fI/sleep\fR with a simulated slow response that will cause the server to sleepfor 5 seconds before responding\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
use std::thread;
use std::time::Duration;
// \-\-snip\-\-
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         handle_connection(stream);
#     }
# }

fn handle_connection(mut stream: TcpStream) {
    // \-\-snip\-\-

#     let mut buffer = [0; 1024];
#     stream\.read(&mut buffer)\.unwrap();
# 
    let get = b"GET / HTTP/1\.1\r\n";
    let sleep = b"GET /sleep HTTP/1\.1\r\n";

    let (status_line, filename) = if buffer\.starts_with(get) {
        ("HTTP/1\.1 200 OK", "hello\.html")
    } else if buffer\.starts_with(sleep) {
        thread::sleep(Duration::from_secs(5));
        ("HTTP/1\.1 200 OK", "hello\.html")
    } else {
        ("HTTP/1\.1 404 NOT FOUND", "404\.html")
    };

    // \-\-snip\-\-
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
# 
#     let response = format!(
#         "{}\r\nContent\-Length: {}\r\n\r\n{}",
#         status_line,
#         contents\.len(),
#         contents
#     );
# 
#     stream\.write(response\.as_bytes())\.unwrap();
#     stream\.flush()\.unwrap();
}

.EE

.RE
Listing 20\-10: Simulating a slow request by recognizing\fI/sleep\fR and sleeping for 5 seconds
.P
This code is a bit messy, but it’s good enough for simulation purposes\. Wecreated a second request `\fIsleep\fR`, whose data our server recognizes\. We added an`\fIelse if\fR` after the `\fIif\fR` block to check for the request to \fI/sleep\fR\. When thatrequest is received, the server will sleep for 5 seconds before rendering thesuccessful HTML page\.
.P
You can see how primitive our server is: real libraries would handle therecognition of multiple requests in a much less verbose way!
.P
Start the server using `\fIcargo run\fR`\. Then open two browser windows: one for\fIhttp://127\.0\.0\.1:7878/\fR and the other for \fIhttp://127\.0\.0\.1:7878/sleep\fR\. Ifyou enter the \fI/\fR URI a few times, as before, you’ll see it respond quickly\.But if you enter \fI/sleep\fR and then load \fI/\fR, you’ll see that \fI/\fR waits until`\fIsleep\fR` has slept for its full 5 seconds before loading\.
.P
There are multiple ways we could change how our web server works to avoidhaving more requests back up behind a slow request; the one we’ll implement isa thread pool\.
.br

.br
\fBImproving Throughput with a Thread Pool\fR
.br
=========================================
.br

.P
A \fIthread pool\fR is a group of spawned threads that are waiting and ready tohandle a task\. When the program receives a new task, it assigns one of thethreads in the pool to the task, and that thread will process the task\. Theremaining threads in the pool are available to handle any other tasks that comein while the first thread is processing\. When the first thread is doneprocessing its task, it’s returned to the pool of idle threads, ready to handlea new task\. A thread pool allows you to process connections concurrently,increasing the throughput of your server\.
.P
We’ll limit the number of threads in the pool to a small number to protect usfrom Denial of Service (DoS) attacks; if we had our program create a new threadfor each request as it came in, someone making 10 million requests to ourserver could create havoc by using up all our server’s resources and grindingthe processing of requests to a halt\.
.P
Rather than spawning unlimited threads, we’ll have a fixed number of threadswaiting in the pool\. As requests come in, they’ll be sent to the pool forprocessing\. The pool will maintain a queue of incoming requests\. Each of thethreads in the pool will pop off a request from this queue, handle the request,and then ask the queue for another request\. With this design, we can process`\fIN\fR` requests concurrently, where `\fIN\fR` is the number of threads\. If each threadis responding to a long\-running request, subsequent requests can still back upin the queue, but we’ve increased the number of long\-running requests we canhandle before reaching that point\.
.P
This technique is just one of many ways to improve the throughput of a webserver\. Other options you might explore are the fork/join model and thesingle\-threaded async I/O model\. If you’re interested in this topic, you canread more about other solutions and try to implement them in Rust; with alow\-level language like Rust, all of these options are possible\.
.P
Before we begin implementing a thread pool, let’s talk about what using thepool should look like\. When you’re trying to design code, writing the clientinterface first can help guide your design\. Write the API of the code so it’sstructured in the way you want to call it; then implement the functionalitywithin that structure rather than implementing the functionality and thendesigning the public API\.
.P
Similar to how we used test\-driven development in the project in Chapter 12,we’ll use compiler\-driven development here\. We’ll write the code that calls thefunctions we want, and then we’ll look at errors from the compiler to determinewhat we should change next to get the code to work\.
.br

.br
\fBCode Structure If We Could Spawn a Thread for Each Request\fR
.br
============================================================
.br

.P
First, let’s explore how our code might look if it did create a new thread forevery connection\. As mentioned earlier, this isn’t our final plan due to theproblems with potentially spawning an unlimited number of threads, but it is astarting point\. Listing 20\-11 shows the changes to make to `\fImain\fR` to spawn anew thread to handle each stream within the `\fIfor\fR` loop\.Filename: src/main\.rs
.RS
.IP \fBrust,no_run\fR 2

.br
.EX
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# use std::thread;
# use std::time::Duration;
# 
fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        thread::spawn(|| {
            handle_connection(stream);
        });
    }
}
# 
# fn handle_connection(mut stream: TcpStream) {
#     let mut buffer = [0; 1024];
#     stream\.read(&mut buffer)\.unwrap();
# 
#     let get = b"GET / HTTP/1\.1\r\n";
#     let sleep = b"GET /sleep HTTP/1\.1\r\n";
# 
#     let (status_line, filename) = if buffer\.starts_with(get) {
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else if buffer\.starts_with(sleep) {
#         thread::sleep(Duration::from_secs(5));
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else {
#         ("HTTP/1\.1 404 NOT FOUND", "404\.html")
#     };
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
# 
#     let response = format!(
#         "{}\r\nContent\-Length: {}\r\n\r\n{}",
#         status_line,
#         contents\.len(),
#         contents
#     );
# 
#     stream\.write(response\.as_bytes())\.unwrap();
#     stream\.flush()\.unwrap();
# }

.EE

.RE
Listing 20\-11: Spawning a new thread for eachstream
.P
As you learned in Chapter 16, `\fIthread::spawn\fR` will create a new thread and thenrun the code in the closure in the new thread\. If you run this code and load\fI/sleep\fR in your browser, then \fI/\fR in two more browser tabs, you’ll indeed seethat the requests to \fI/\fR don’t have to wait for \fI/sleep\fR to finish\. But as wementioned, this will eventually overwhelm the system because you’d be makingnew threads without any limit\.
.br

.br
\fBCreating a Similar Interface for a Finite Number of Threads\fR
.br
=============================================================
.br

.P
We want our thread pool to work in a similar, familiar way so switching fromthreads to a thread pool doesn’t require large changes to the code that usesour API\. Listing 20\-12 shows the hypothetical interface for a `\fIThreadPool\fR`struct we want to use instead of `\fIthread::spawn\fR`\.Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# use std::thread;
# use std::time::Duration;
# 
fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
    let pool = ThreadPool::new(4);

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        pool\.execute(|| {
            handle_connection(stream);
        });
    }
}
# 
# fn handle_connection(mut stream: TcpStream) {
#     let mut buffer = [0; 1024];
#     stream\.read(&mut buffer)\.unwrap();
# 
#     let get = b"GET / HTTP/1\.1\r\n";
#     let sleep = b"GET /sleep HTTP/1\.1\r\n";
# 
#     let (status_line, filename) = if buffer\.starts_with(get) {
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else if buffer\.starts_with(sleep) {
#         thread::sleep(Duration::from_secs(5));
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else {
#         ("HTTP/1\.1 404 NOT FOUND", "404\.html")
#     };
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
# 
#     let response = format!(
#         "{}\r\nContent\-Length: {}\r\n\r\n{}",
#         status_line,
#         contents\.len(),
#         contents
#     );
# 
#     stream\.write(response\.as_bytes())\.unwrap();
#     stream\.flush()\.unwrap();
# }

.EE

.RE
Listing 20\-12: Our ideal `\fIThreadPool\fR` interface
.P
We use `\fIThreadPool::new\fR` to create a new thread pool with a configurable numberof threads, in this case four\. Then, in the `\fIfor\fR` loop, `\fIpool\.execute\fR` has asimilar interface as `\fIthread::spawn\fR` in that it takes a closure the pool shouldrun for each stream\. We need to implement `\fIpool\.execute\fR` so it takes theclosure and gives it to a thread in the pool to run\. This code won’t yetcompile, but we’ll try so the compiler can guide us in how to fix it\.
.br

.br
\fBBuilding the \fR
.br
===============
.br
`\fIThreadPool\fR` Struct Using Compiler Driven Development
.P
Make the changes in Listing 20\-12 to \fIsrc/main\.rs\fR, and then let’s use thecompiler errors from `\fIcargo check\fR` to drive our development\. Here is the firsterror we get:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0433]: failed to resolve: use of undeclared type `ThreadPool`
  \-\-> src/main\.rs:10:16
   |
10 |     let pool = ThreadPool::new(4);
   |                ^^^^^^^^^^ use of undeclared type `ThreadPool`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0433`\.
error: could not compile `hello`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Great! This error tells us we need a `\fIThreadPool\fR` type or module, so we’llbuild one now\. Our `\fIThreadPool\fR` implementation will be independent of the kindof work our web server is doing\. So, let’s switch the `\fIhello\fR` crate from abinary crate to a library crate to hold our `\fIThreadPool\fR` implementation\. Afterwe change to a library crate, we could also use the separate thread poollibrary for any work we want to do using a thread pool, not just for servingweb requests\.
.P
Create a \fIsrc/lib\.rs\fR that contains the following, which is the simplestdefinition of a `\fIThreadPool\fR` struct that we can have for now:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct ThreadPool;

.EE

.RE
.P
Then create a new directory, \fIsrc/bin\fR, and move the binary crate rooted in\fIsrc/main\.rs\fR into \fIsrc/bin/main\.rs\fR\. Doing so will make the library crate theprimary crate in the \fIhello\fR directory; we can still run the binary in\fIsrc/bin/main\.rs\fR using `\fIcargo run\fR`\. After moving the \fImain\.rs\fR file, edit itto bring the library crate in and bring `\fIThreadPool\fR` into scope by adding thefollowing code to the top of \fIsrc/bin/main\.rs\fR:Filename: src/bin/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use hello::ThreadPool;
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# use std::thread;
# use std::time::Duration;
# 
# fn main() {
#     let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
#     let pool = ThreadPool::new(4);
# 
#     for stream in listener\.incoming() {
#         let stream = stream\.unwrap();
# 
#         pool\.execute(|| {
#             handle_connection(stream);
#         });
#     }
# }
# 
# fn handle_connection(mut stream: TcpStream) {
#     let mut buffer = [0; 1024];
#     stream\.read(&mut buffer)\.unwrap();
# 
#     let get = b"GET / HTTP/1\.1\r\n";
#     let sleep = b"GET /sleep HTTP/1\.1\r\n";
# 
#     let (status_line, filename) = if buffer\.starts_with(get) {
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else if buffer\.starts_with(sleep) {
#         thread::sleep(Duration::from_secs(5));
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else {
#         ("HTTP/1\.1 404 NOT FOUND", "404\.html")
#     };
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
# 
#     let response = format!(
#         "{}\r\nContent\-Length: {}\r\n\r\n{}",
#         status_line,
#         contents\.len(),
#         contents
#     );
# 
#     stream\.write(response\.as_bytes())\.unwrap();
#     stream\.flush()\.unwrap();
# }

.EE

.RE
.P
This code still won’t work, but let’s check it again to get the next error thatwe need to address:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0599]: no function or associated item named `new` found for struct `ThreadPool` in the current scope
  \-\-> src/bin/main\.rs:11:28
   |
11 |     let pool = ThreadPool::new(4);
   |                            ^^^ function or associated item not found in `ThreadPool`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0599`\.
error: could not compile `hello`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
This error indicates that next we need to create an associated function named`\fInew\fR` for `\fIThreadPool\fR`\. We also know that `\fInew\fR` needs to have one parameterthat can accept `\fI4\fR` as an argument and should return a `\fIThreadPool\fR` instance\.Let’s implement the simplest `\fInew\fR` function that will have thosecharacteristics:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
pub struct ThreadPool;

impl ThreadPool {
    pub fn new(size: usize) \-> ThreadPool {
        ThreadPool
    }
}

.EE

.RE
.P
We chose `\fIusize\fR` as the type of the `\fIsize\fR` parameter, because we know that anegative number of threads doesn’t make any sense\. We also know we’ll use this4 as the number of elements in a collection of threads, which is what the`\fIusize\fR` type is for, as discussed in the 
.UR ch03\-02\-data\-types\.html#integer\-types
.UE
“Integer Types” section of Chapter 3\.
.P
Let’s check the code again:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0599]: no method named `execute` found for struct `ThreadPool` in the current scope
  \-\-> src/bin/main\.rs:16:14
   |
16 |         pool\.execute(|| {
   |              ^^^^^^^ method not found in `ThreadPool`

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0599`\.
error: could not compile `hello`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Now the error occurs because we don’t have an `\fIexecute\fR` method on `\fIThreadPool\fR`\.Recall from the 
.UR #creating\-a\-similar\-interface\-for\-a\-finite\-number\-of\-threads
.UE
“Creating a Similar Interface for a Finite Number ofThreads” section that we decided our thread pool should have an interfacesimilar to `\fIthread::spawn\fR`\. In addition, we’ll implement the `\fIexecute\fR` functionso it takes the closure it’s given and gives it to an idle thread in the poolto run\.
.P
We’ll define the `\fIexecute\fR` method on `\fIThreadPool\fR` to take a closure as aparameter\. Recall from the 
.UR ch13\-01\-closures\.html#storing\-closures\-using\-generic\-parameters\-and\-the\-fn\-traits
.UE
“Storing Closures Using Generic Parameters and the`\fIFn\fR` Traits” section in Chapter 13 that we can take closures as parameters withthree different traits: `\fIFn\fR`, `\fIFnMut\fR`, and `\fIFnOnce\fR`\. We need to decide whichkind of closure to use here\. We know we’ll end up doing something similar tothe standard library `\fIthread::spawn\fR` implementation, so we can look at whatbounds the signature of `\fIthread::spawn\fR` has on its parameter\. The documentationshows us the following:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn spawn<F, T>(f: F) \-> JoinHandle<T>
    where
        F: FnOnce() \-> T,
        F: Send + 'static,
        T: Send + 'static,

.EE

.RE
.P
The `\fIF\fR` type parameter is the one we’re concerned with here; the `\fIT\fR` typeparameter is related to the return value, and we’re not concerned with that\. Wecan see that `\fIspawn\fR` uses `\fIFnOnce\fR` as the trait bound on `\fIF\fR`\. This is probablywhat we want as well, because we’ll eventually pass the argument we get in`\fIexecute\fR` to `\fIspawn\fR`\. We can be further confident that `\fIFnOnce\fR` is the trait wewant to use because the thread for running a request will only execute thatrequest’s closure one time, which matches the `\fIOnce\fR` in `\fIFnOnce\fR`\.
.P
The `\fIF\fR` type parameter also has the trait bound `\fISend\fR` and the lifetime bound`\fI'static\fR`, which are useful in our situation: we need `\fISend\fR` to transfer theclosure from one thread to another and `\fI'static\fR` because we don’t know how longthe thread will take to execute\. Let’s create an `\fIexecute\fR` method on`\fIThreadPool\fR` that will take a generic parameter of type `\fIF\fR` with these bounds:Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct ThreadPool;
# 
impl ThreadPool {
    // \-\-snip\-\-
#     pub fn new(size: usize) \-> ThreadPool {
#         ThreadPool
#     }
# 
    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {
    }
}

.EE

.RE
.P
We still use the `\fI()\fR` after `\fIFnOnce\fR` because this `\fIFnOnce\fR` represents a closurethat takes no parameters and returns the unit type `\fI()\fR`\. Just like functiondefinitions, the return type can be omitted from the signature, but even if wehave no parameters, we still need the parentheses\.
.P
Again, this is the simplest implementation of the `\fIexecute\fR` method: it doesnothing, but we’re trying only to make our code compile\. Let’s check it again:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.24s

.EE

.RE
.P
It compiles! But note that if you try `\fIcargo run\fR` and make a request in thebrowser, you’ll see the errors in the browser that we saw at the beginning ofthe chapter\. Our library isn’t actually calling the closure passed to `\fIexecute\fR`yet!
.P
Note: A saying you might hear about languages with strict compilers, such asHaskell and Rust, is “if the code compiles, it works\.” But this saying is notuniversally true\. Our project compiles, but it does absolutely nothing! If wewere building a real, complete project, this would be a good time to startwriting unit tests to check that the code compiles \fIand\fR has the behavior wewant\.
.br

.br
\fBValidating the Number of Threads in \fR
.br
======================================
.br
`\fInew\fR`
.P
We aren’t doing anything with the parameters to `\fInew\fR` and `\fIexecute\fR`\. Let’simplement the bodies of these functions with the behavior we want\. To start,let’s think about `\fInew\fR`\. Earlier we chose an unsigned type for the `\fIsize\fR`parameter, because a pool with a negative number of threads makes no sense\.However, a pool with zero threads also makes no sense, yet zero is a perfectlyvalid `\fIusize\fR`\. We’ll add code to check that `\fIsize\fR` is greater than zero beforewe return a `\fIThreadPool\fR` instance and have the program panic if it receives azero by using the `\fIassert!\fR` macro, as shown in Listing 20\-13\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# pub struct ThreadPool;
# 
impl ThreadPool {
    /// Create a new ThreadPool\.
    ///
    /// The size is the number of threads in the pool\.
    ///
    /// # Panics
    ///
    /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        ThreadPool
    }

    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

.EE

.RE
Listing 20\-13: Implementing `\fIThreadPool::new\fR` to panic if`\fIsize\fR` is zero
.P
We’ve added some documentation for our `\fIThreadPool\fR` with doc comments\. Notethat we followed good documentation practices by adding a section that callsout the situations in which our function can panic, as discussed in Chapter 14\.Try running `\fIcargo doc \-\-open\fR` and clicking the `\fIThreadPool\fR` struct to see whatthe generated docs for `\fInew\fR` look like!
.P
Instead of adding the `\fIassert!\fR` macro as we’ve done here, we could make `\fInew\fR`return a `\fIResult\fR` like we did with `\fIConfig::new\fR` in the I/O project in Listing12\-9\. But we’ve decided in this case that trying to create a thread poolwithout any threads should be an unrecoverable error\. If you’re feelingambitious, try to write a version of `\fInew\fR` with the following signature tocompare both versions:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn new(size: usize) \-> Result<ThreadPool, PoolCreationError> {

.EE

.RE

.br

.br
\fBCreating Space to Store the Threads\fR
.br
=====================================
.br

.P
Now that we have a way to know we have a valid number of threads to store inthe pool, we can create those threads and store them in the `\fIThreadPool\fR` structbefore returning it\. But how do we “store” a thread? Let’s take another look atthe `\fIthread::spawn\fR` signature:
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
pub fn spawn<F, T>(f: F) \-> JoinHandle<T>
    where
        F: FnOnce() \-> T,
        F: Send + 'static,
        T: Send + 'static,

.EE

.RE
.P
The `\fIspawn\fR` function returns a `\fIJoinHandle<T>\fR`, where `\fIT\fR` is the type that theclosure returns\. Let’s try using `\fIJoinHandle\fR` too and see what happens\. In ourcase, the closures we’re passing to the thread pool will handle the connectionand not return anything, so `\fIT\fR` will be the unit type `\fI()\fR`\.
.P
The code in Listing 20\-14 will compile but doesn’t create any threads yet\.We’ve changed the definition of `\fIThreadPool\fR` to hold a vector of`\fIthread::JoinHandle<()>\fR` instances, initialized the vector with a capacity of`\fIsize\fR`, set up a `\fIfor\fR` loop that will run some code to create the threads, andreturned a `\fIThreadPool\fR` instance containing them\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,not_desired_behavior\fR 2

.br
.EX
use std::thread;

pub struct ThreadPool {
    threads: Vec<thread::JoinHandle<()>>,
}

impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let mut threads = Vec::with_capacity(size);

        for _ in 0\.\.size {
            // create some threads and store them in the vector
        }

        ThreadPool { threads }
    }

    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

.EE

.RE
Listing 20\-14: Creating a vector for `\fIThreadPool\fR` to holdthe threads
.P
We’ve brought `\fIstd::thread\fR` into scope in the library crate, because we’reusing `\fIthread::JoinHandle\fR` as the type of the items in the vector in`\fIThreadPool\fR`\.
.P
Once a valid size is received, our `\fIThreadPool\fR` creates a new vector that canhold `\fIsize\fR` items\. We haven’t used the `\fIwith_capacity\fR` function in this bookyet, which performs the same task as `\fIVec::new\fR` but with an importantdifference: it preallocates space in the vector\. Because we know we need tostore `\fIsize\fR` elements in the vector, doing this allocation up front is slightlymore efficient than using `\fIVec::new\fR`, which resizes itself as elements areinserted\.
.P
When you run `\fIcargo check\fR` again, you’ll get a few more warnings, but it shouldsucceed\.
.br

.br
\fBA \fR
.br
====
.br
`\fIWorker\fR` Struct Responsible for Sending Code from the `\fIThreadPool\fR` to a Thread
.P
We left a comment in the `\fIfor\fR` loop in Listing 20\-14 regarding the creation ofthreads\. Here, we’ll look at how we actually create threads\. The standardlibrary provides `\fIthread::spawn\fR` as a way to create threads, and`\fIthread::spawn\fR` expects to get some code the thread should run as soon as thethread is created\. However, in our case, we want to create the threads and havethem \fIwait\fR for code that we’ll send later\. The standard library’simplementation of threads doesn’t include any way to do that; we have toimplement it manually\.
.P
We’ll implement this behavior by introducing a new data structure between the`\fIThreadPool\fR` and the threads that will manage this new behavior\. We’ll callthis data structure `\fIWorker\fR`, which is a common term in poolingimplementations\. Think of people working in the kitchen at a restaurant: theworkers wait until orders come in from customers, and then they’re responsiblefor taking those orders and filling them\.
.P
Instead of storing a vector of `\fIJoinHandle<()>\fR` instances in the thread pool,we’ll store instances of the `\fIWorker\fR` struct\. Each `\fIWorker\fR` will store a single`\fIJoinHandle<()>\fR` instance\. Then we’ll implement a method on `\fIWorker\fR` that willtake a closure of code to run and send it to the already running thread forexecution\. We’ll also give each worker an `\fIid\fR` so we can distinguish betweenthe different workers in the pool when logging or debugging\.
.P
Let’s make the following changes to what happens when we create a `\fIThreadPool\fR`\.We’ll implement the code that sends the closure to the thread after we have`\fIWorker\fR` set up in this way:
.P
Define a `\fIWorker\fR` struct that holds an `\fIid\fR` and a `\fIJoinHandle<()>\fR`\.
.P
Change `\fIThreadPool\fR` to hold a vector of `\fIWorker\fR` instances\.
.P
Define a `\fIWorker::new\fR` function that takes an `\fIid\fR` number and returns a`\fIWorker\fR` instance that holds the `\fIid\fR` and a thread spawned with an emptyclosure\.
.P
In `\fIThreadPool::new\fR`, use the `\fIfor\fR` loop counter to generate an `\fIid\fR`, createa new `\fIWorker\fR` with that `\fIid\fR`, and store the worker in the vector\.
.P
If you’re up for a challenge, try implementing these changes on your own beforelooking at the code in Listing 20\-15\.
.P
Ready? Here is Listing 20\-15 with one way to make the preceding modifications\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::thread;

pub struct ThreadPool {
    workers: Vec<Worker>,
}

impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id));
        }

        ThreadPool { workers }
    }
    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

struct Worker {
    id: usize,
    thread: thread::JoinHandle<()>,
}

impl Worker {
    fn new(id: usize) \-> Worker {
        let thread = thread::spawn(|| {});

        Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-15: Modifying `\fIThreadPool\fR` to hold `\fIWorker\fR`instances instead of holding threads directly
.P
We’ve changed the name of the field on `\fIThreadPool\fR` from `\fIthreads\fR` to `\fIworkers\fR`because it’s now holding `\fIWorker\fR` instances instead of `\fIJoinHandle<()>\fR`instances\. We use the counter in the `\fIfor\fR` loop as an argument to`\fIWorker::new\fR`, and we store each new `\fIWorker\fR` in the vector named `\fIworkers\fR`\.
.P
External code (like our server in \fIsrc/bin/main\.rs\fR) doesn’t need to know theimplementation details regarding using a `\fIWorker\fR` struct within `\fIThreadPool\fR`,so we make the `\fIWorker\fR` struct and its `\fInew\fR` function private\. The`\fIWorker::new\fR` function uses the `\fIid\fR` we give it and stores a `\fIJoinHandle<()>\fR`instance that is created by spawning a new thread using an empty closure\.
.P
This code will compile and will store the number of `\fIWorker\fR` instances wespecified as an argument to `\fIThreadPool::new\fR`\. But we’re \fIstill\fR not processingthe closure that we get in `\fIexecute\fR`\. Let’s look at how to do that next\.
.br

.br
\fBSending Requests to Threads via Channels\fR
.br
==========================================
.br

.P
Now we’ll tackle the problem that the closures given to `\fIthread::spawn\fR` doabsolutely nothing\. Currently, we get the closure we want to execute in the`\fIexecute\fR` method\. But we need to give `\fIthread::spawn\fR` a closure to run when wecreate each `\fIWorker\fR` during the creation of the `\fIThreadPool\fR`\.
.P
We want the `\fIWorker\fR` structs that we just created to fetch code to run from aqueue held in the `\fIThreadPool\fR` and send that code to its thread to run\.
.P
In Chapter 16, you learned about \fIchannels\fR—a simple way to communicate betweentwo threads—that would be perfect for this use case\. We’ll use a channel tofunction as the queue of jobs, and `\fIexecute\fR` will send a job from the`\fIThreadPool\fR` to the `\fIWorker\fR` instances, which will send the job to its thread\.Here is the plan:
.P
The `\fIThreadPool\fR` will create a channel and hold on to the sending side ofthe channel\.
.P
Each `\fIWorker\fR` will hold on to the receiving side of the channel\.
.P
We’ll create a new `\fIJob\fR` struct that will hold the closures we want to senddown the channel\.
.P
The `\fIexecute\fR` method will send the job it wants to execute down the sendingside of the channel\.
.P
In its thread, the `\fIWorker\fR` will loop over its receiving side of the channeland execute the closures of any jobs it receives\.
.P
Let’s start by creating a channel in `\fIThreadPool::new\fR` and holding the sendingside in the `\fIThreadPool\fR` instance, as shown in Listing 20\-16\. The `\fIJob\fR` structdoesn’t hold anything for now but will be the type of item we’re sending downthe channel\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::thread;
// \-\-snip\-\-
use std::sync::mpsc;

pub struct ThreadPool {
    workers: Vec<Worker>,
    sender: mpsc::Sender<Job>,
}

struct Job;

impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id));
        }

        ThreadPool { workers, sender }
    }
    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
# impl Worker {
#     fn new(id: usize) \-> Worker {
#         let thread = thread::spawn(|| {});
# 
#         Worker { id, thread }
#     }
# }

.EE

.RE
Listing 20\-16: Modifying `\fIThreadPool\fR` to store thesending end of a channel that sends `\fIJob\fR` instances
.P
In `\fIThreadPool::new\fR`, we create our new channel and have the pool hold thesending end\. This will successfully compile, still with warnings\.
.P
Let’s try passing a receiving end of the channel into each worker as the threadpool creates the channel\. We know we want to use the receiving end in thethread that the workers spawn, so we’ll reference the `\fIreceiver\fR` parameter inthe closure\. The code in Listing 20\-17 won’t quite compile yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# struct Job;
# 
impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id, receiver));
        }

        ThreadPool { workers, sender }
    }
    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

// \-\-snip\-\-

# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
impl Worker {
    fn new(id: usize, receiver: mpsc::Receiver<Job>) \-> Worker {
        let thread = thread::spawn(|| {
            receiver;
        });

        Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-17: Passing the receiving end of the channelto the workers
.P
We’ve made some small and straightforward changes: we pass the receiving end ofthe channel into `\fIWorker::new\fR`, and then we use it inside the closure\.
.P
When we try to check this code, we get this error:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0382]: use of moved value: `receiver`
  \-\-> src/lib\.rs:27:42
   |
22 |         let (sender, receiver) = mpsc::channel();
   |                      \-\-\-\-\-\-\-\- move occurs because `receiver` has type `std::sync::mpsc::Receiver<Job>`, which does not implement the `Copy` trait
\.\.\.
27 |             workers\.push(Worker::new(id, receiver));
   |                                          ^^^^^^^^ value moved here, in previous iteration of loop

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0382`\.
error: could not compile `hello`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The code is trying to pass `\fIreceiver\fR` to multiple `\fIWorker\fR` instances\. Thiswon’t work, as you’ll recall from Chapter 16: the channel implementation thatRust provides is multiple \fIproducer\fR, single \fIconsumer\fR\. This means we can’tjust clone the consuming end of the channel to fix this code\. Even if we could,that is not the technique we would want to use; instead, we want to distributethe jobs across threads by sharing the single `\fIreceiver\fR` among all the workers\.
.P
Additionally, taking a job off the channel queue involves mutating the`\fIreceiver\fR`, so the threads need a safe way to share and modify `\fIreceiver\fR`;otherwise, we might get race conditions (as covered in Chapter 16)\.
.P
Recall the thread\-safe smart pointers discussed in Chapter 16: to shareownership across multiple threads and allow the threads to mutate the value, weneed to use `\fIArc<Mutex<T>>\fR`\. The `\fIArc\fR` type will let multiple workers own thereceiver, and `\fIMutex\fR` will ensure that only one worker gets a job from thereceiver at a time\. Listing 20\-18 shows the changes we need to make\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::thread;
use std::sync::Arc;
use std::sync::Mutex;
// \-\-snip\-\-

# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# struct Job;
# 
impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let receiver = Arc::new(Mutex::new(receiver));

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id, Arc::clone(&receiver)));
        }

        ThreadPool { workers, sender }
    }

    // \-\-snip\-\-
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#     }
}

// \-\-snip\-\-

# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        // \-\-snip\-\-
#         let thread = thread::spawn(|| {
#             receiver;
#         });
# 
#         Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-18: Sharing the receiving end of the channelamong the workers using `\fIArc\fR` and `\fIMutex\fR`
.P
In `\fIThreadPool::new\fR`, we put the receiving end of the channel in an `\fIArc\fR` and a`\fIMutex\fR`\. For each new worker, we clone the `\fIArc\fR` to bump the reference count sothe workers can share ownership of the receiving end\.
.P
With these changes, the code compiles! We’re getting there!
.br

.br
\fBImplementing the \fR
.br
===================
.br
`\fIexecute\fR` Method
.P
Let’s finally implement the `\fIexecute\fR` method on `\fIThreadPool\fR`\. We’ll also change`\fIJob\fR` from a struct to a type alias for a trait object that holds the type ofclosure that `\fIexecute\fR` receives\. As discussed in the 
.UR ch19\-04\-advanced\-types\.html#creating\-type\-synonyms\-with\-type\-aliases
.UE
“Creating Type Synonymswith Type Aliases”section of Chapter 19, type aliases allow us to make long types shorter\. Lookat Listing 20\-19\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
// \-\-snip\-\-

type Job = Box<dyn FnOnce() + Send + 'static>;

impl ThreadPool {
    // \-\-snip\-\-
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }

    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {
        let job = Box::new(f);

        self\.sender\.send(job)\.unwrap();
    }
}

// \-\-snip\-\-
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(|| {
#             receiver;
#         });
# 
#         Worker { id, thread }
#     }
# }

.EE

.RE
Listing 20\-19: Creating a `\fIJob\fR` type alias for a `\fIBox\fR`that holds each closure and then sending the job down the channel
.P
After creating a new `\fIJob\fR` instance using the closure we get in `\fIexecute\fR`, wesend that job down the sending end of the channel\. We’re calling `\fIunwrap\fR` on`\fIsend\fR` for the case that sending fails\. This might happen if, for example, westop all our threads from executing, meaning the receiving end has stoppedreceiving new messages\. At the moment, we can’t stop our threads fromexecuting: our threads continue executing as long as the pool exists\. Thereason we use `\fIunwrap\fR` is that we know the failure case won’t happen, but thecompiler doesn’t know that\.
.P
But we’re not quite done yet! In the worker, our closure being passed to`\fIthread::spawn\fR` still only \fIreferences\fR the receiving end of the channel\.Instead, we need the closure to loop forever, asking the receiving end of thechannel for a job and running the job when it gets one\. Let’s make the changeshown in Listing 20\-20 to `\fIWorker::new\fR`\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
// \-\-snip\-\-

impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        let thread = thread::spawn(move || loop {
            let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();

            println!("Worker {} got a job; executing\.", id);

            job();
        });

        Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-20: Receiving and executing the jobs in theworker’s thread
.P
Here, we first call `\fIlock\fR` on the `\fIreceiver\fR` to acquire the mutex, and then wecall `\fIunwrap\fR` to panic on any errors\. Acquiring a lock might fail if the mutexis in a \fIpoisoned\fR state, which can happen if some other thread panicked whileholding the lock rather than releasing the lock\. In this situation, calling`\fIunwrap\fR` to have this thread panic is the correct action to take\. Feel free tochange this `\fIunwrap\fR` to an `\fIexpect\fR` with an error message that is meaningful toyou\.
.P
If we get the lock on the mutex, we call `\fIrecv\fR` to receive a `\fIJob\fR` from thechannel\. A final `\fIunwrap\fR` moves past any errors here as well, which might occurif the thread holding the sending side of the channel has shut down, similar tohow the `\fIsend\fR` method returns `\fIErr\fR` if the receiving side shuts down\.
.P
The call to `\fIrecv\fR` blocks, so if there is no job yet, the current thread willwait until a job becomes available\. The `\fIMutex<T>\fR` ensures that only one`\fIWorker\fR` thread at a time is trying to request a job\.
.P
With the implementation of this trick, our thread pool is in a working state!Give it a `\fIcargo run\fR` and make some requests:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling hello v0\.1\.0 (file:///projects/hello)
warning: field is never read: `workers`
 \-\-> src/lib\.rs:7:5
  |
7 |     workers: Vec<Worker>,
  |     ^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(dead_code)]` on by default

warning: field is never read: `id`
  \-\-> src/lib\.rs:48:5
   |
48 |     id: usize,
   |     ^^^^^^^^^

warning: field is never read: `thread`
  \-\-> src/lib\.rs:49:5
   |
49 |     thread: thread::JoinHandle<()>,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: 3 warnings emitted

    Finished dev [unoptimized + debuginfo] target(s) in 1\.40s
     Running `target/debug/main`
Worker 0 got a job; executing\.
Worker 2 got a job; executing\.
Worker 1 got a job; executing\.
Worker 3 got a job; executing\.
Worker 0 got a job; executing\.
Worker 2 got a job; executing\.
Worker 1 got a job; executing\.
Worker 3 got a job; executing\.
Worker 0 got a job; executing\.
Worker 2 got a job; executing\.

.EE

.RE
.P
Success! We now have a thread pool that executes connections asynchronously\.There are never more than four threads created, so our system won’t getoverloaded if the server receives a lot of requests\. If we make a request to\fI/sleep\fR, the server will be able to serve other requests by having anotherthread run them\.
.P
Note: if you open \fI/sleep\fR in multiple browser windows simultaneously, theymight load one at a time in 5 second intervals\. Some web browsers executemultiple instances of the same request sequentially for caching reasons\. Thislimitation is not caused by our web server\.
.P
After learning about the `\fIwhile let\fR` loop in Chapter 18, you might be wonderingwhy we didn’t write the worker thread code as shown in Listing 20\-21\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,not_desired_behavior\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
// \-\-snip\-\-

impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        let thread = thread::spawn(move || {
            while let Ok(job) = receiver\.lock()\.unwrap()\.recv() {
                println!("Worker {} got a job; executing\.", id);

                job();
            }
        });

        Worker { id, thread }
    }
}

.EE

.RE
Listing 20\-21: An alternative implementation of`\fIWorker::new\fR` using `\fIwhile let\fR`
.P
This code compiles and runs but doesn’t result in the desired threadingbehavior: a slow request will still cause other requests to wait to beprocessed\. The reason is somewhat subtle: the `\fIMutex\fR` struct has no public`\fIunlock\fR` method because the ownership of the lock is based on the lifetime ofthe `\fIMutexGuard<T>\fR` within the `\fILockResult<MutexGuard<T>>\fR` that the `\fIlock\fR`method returns\. At compile time, the borrow checker can then enforce the rulethat a resource guarded by a `\fIMutex\fR` cannot be accessed unless we hold thelock\. But this implementation can also result in the lock being held longerthan intended if we don’t think carefully about the lifetime of the`\fIMutexGuard<T>\fR`\.
.P
The code in Listing 20\-20 that uses `\fIlet job = receiver\.lock()\.unwrap()\.recv()\.unwrap();\fR` works because with `\fIlet\fR`, anytemporary values used in the expression on the right hand side of the equalssign are immediately dropped when the `\fIlet\fR` statement ends\. However, `\fIwhile let\fR` (and `\fIif let\fR` and `\fImatch\fR`) does not drop temporary values until the end ofthe associated block\. In Listing 20\-21, the lock remains held for the durationof the call to `\fIjob()\fR`, meaning other workers cannot receive jobs\.
.SH "Graceful Shutdown and Cleanup"

.br

.br
\fBGraceful Shutdown and Cleanup\fR
.br
===============================
.br

.P
The code in Listing 20\-20 is responding to requests asynchronously through theuse of a thread pool, as we intended\. We get some warnings about the `\fIworkers\fR`,`\fIid\fR`, and `\fIthread\fR` fields that we’re not using in a direct way that reminds uswe’re not cleaning up anything\. When we use the less elegant ctrl\-c method to halt the main thread, all otherthreads are stopped immediately as well, even if they’re in the middle ofserving a request\.
.P
Now we’ll implement the `\fIDrop\fR` trait to call `\fIjoin\fR` on each of the threads inthe pool so they can finish the requests they’re working on before closing\.Then we’ll implement a way to tell the threads they should stop accepting newrequests and shut down\. To see this code in action, we’ll modify our server toaccept only two requests before gracefully shutting down its thread pool\.
.br

.br
\fBImplementing the \fR
.br
===================
.br
`\fIDrop\fR` Trait on `\fIThreadPool\fR`
.P
Let’s start with implementing `\fIDrop\fR` on our thread pool\. When the pool isdropped, our threads should all join to make sure they finish their work\.Listing 20\-22 shows a first attempt at a `\fIDrop\fR` implementation; this code won’tquite work yet\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
impl Drop for ThreadPool {
    fn drop(&mut self) {
        for worker in &mut self\.workers {
            println!("Shutting down worker {}", worker\.id);

            worker\.thread\.join()\.unwrap();
        }
    }
}
# 
# struct Worker {
#     id: usize,
#     thread: thread::JoinHandle<()>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {} got a job; executing\.", id);
# 
#             job();
#         });
# 
#         Worker { id, thread }
#     }
# }

.EE

.RE
Listing 20\-22: Joining each thread when the thread poolgoes out of scope
.P
First, we loop through each of the thread pool `\fIworkers\fR`\. We use `\fI&mut\fR` forthis because `\fIself\fR` is a mutable reference, and we also need to be able tomutate `\fIworker\fR`\. For each worker, we print a message saying that thisparticular worker is shutting down, and then we call `\fIjoin\fR` on that worker’sthread\. If the call to `\fIjoin\fR` fails, we use `\fIunwrap\fR` to make Rust panic and gointo an ungraceful shutdown\.
.P
Here is the error we get when we compile this code:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0507]: cannot move out of `worker\.thread` which is behind a mutable reference
  \-\-> src/lib\.rs:52:13
   |
52 |             worker\.thread\.join()\.unwrap();
   |             ^^^^^^^^^^^^^ move occurs because `worker\.thread` has type `JoinHandle<()>`, which does not implement the `Copy` trait

error: aborting due to previous error

For more information about this error, try `rustc \-\-explain E0507`\.
error: could not compile `hello`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
The error tells us we can’t call `\fIjoin\fR` because we only have a mutable borrowof each `\fIworker\fR` and `\fIjoin\fR` takes ownership of its argument\. To solve thisissue, we need to move the thread out of the `\fIWorker\fR` instance that owns`\fIthread\fR` so `\fIjoin\fR` can consume the thread\. We did this in Listing 17\-15: if`\fIWorker\fR` holds an `\fIOption<thread::JoinHandle<()>>\fR` instead, we can call the`\fItake\fR` method on the `\fIOption\fR` to move the value out of the `\fISome\fR` variant andleave a `\fINone\fR` variant in its place\. In other words, a `\fIWorker\fR` that is runningwill have a `\fISome\fR` variant in `\fIthread\fR`, and when we want to clean up a`\fIWorker\fR`, we’ll replace `\fISome\fR` with `\fINone\fR` so the `\fIWorker\fR` doesn’t have athread to run\.
.P
So we know we want to update the definition of `\fIWorker\fR` like this:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# impl Drop for ThreadPool {
#     fn drop(&mut self) {
#         for worker in &mut self\.workers {
#             println!("Shutting down worker {}", worker\.id);
# 
#             worker\.thread\.join()\.unwrap();
#         }
#     }
# }
# 
struct Worker {
    id: usize,
    thread: Option<thread::JoinHandle<()>>,
}
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {} got a job; executing\.", id);
# 
#             job();
#         });
# 
#         Worker { id, thread }
#     }
# }

.EE

.RE
.P
Now let’s lean on the compiler to find the other places that need to change\.Checking this code, we get two errors:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo check
    Checking hello v0\.1\.0 (file:///projects/hello)
error[E0599]: no method named `join` found for enum `Option` in the current scope
  \-\-> src/lib\.rs:52:27
   |
52 |             worker\.thread\.join()\.unwrap();
   |                           ^^^^ method not found in `Option<JoinHandle<()>>`

error[E0308]: mismatched types
  \-\-> src/lib\.rs:72:22
   |
72 |         Worker { id, thread }
   |                      ^^^^^^
   |                      |
   |                      expected enum `Option`, found struct `JoinHandle`
   |                      help: try using a variant of the expected enum: `Some(thread)`
   |
   = note: expected enum `Option<JoinHandle<()>>`
            found struct `JoinHandle<_>`

error: aborting due to 2 previous errors

Some errors have detailed explanations: E0308, E0599\.
For more information about an error, try `rustc \-\-explain E0308`\.
error: could not compile `hello`

To learn more, run the command again with \-\-verbose\.

.EE

.RE
.P
Let’s address the second error, which points to the code at the end of`\fIWorker::new\fR`; we need to wrap the `\fIthread\fR` value in `\fISome\fR` when we create anew `\fIWorker\fR`\. Make the following changes to fix this error:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# impl Drop for ThreadPool {
#     fn drop(&mut self) {
#         for worker in &mut self\.workers {
#             println!("Shutting down worker {}", worker\.id);
# 
#             worker\.thread\.join()\.unwrap();
#         }
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
        // \-\-snip\-\-

#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {} got a job; executing\.", id);
# 
#             job();
#         });
# 
        Worker {
            id,
            thread: Some(thread),
        }
    }
}

.EE

.RE
.P
The first error is in our `\fIDrop\fR` implementation\. We mentioned earlier that weintended to call `\fItake\fR` on the `\fIOption\fR` value to move `\fIthread\fR` out of `\fIworker\fR`\.The following changes will do so:Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
impl Drop for ThreadPool {
    fn drop(&mut self) {
        for worker in &mut self\.workers {
            println!("Shutting down worker {}", worker\.id);

            if let Some(thread) = worker\.thread\.take() {
                thread\.join()\.unwrap();
            }
        }
    }
}
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {} got a job; executing\.", id);
# 
#             job();
#         });
# 
#         Worker {
#             id,
#             thread: Some(thread),
#         }
#     }
# }

.EE

.RE
.P
As discussed in Chapter 17, the `\fItake\fR` method on `\fIOption\fR` takes the `\fISome\fR`variant out and leaves `\fINone\fR` in its place\. We’re using `\fIif let\fR` to destructurethe `\fISome\fR` and get the thread; then we call `\fIjoin\fR` on the thread\. If a worker’sthread is already `\fINone\fR`, we know that worker has already had its threadcleaned up, so nothing happens in that case\.
.br

.br
\fBSignaling to the Threads to Stop Listening for Jobs\fR
.br
=====================================================
.br

.P
With all the changes we’ve made, our code compiles without any warnings\. Butthe bad news is this code doesn’t function the way we want it to yet\. The keyis the logic in the closures run by the threads of the `\fIWorker\fR` instances: atthe moment, we call `\fIjoin\fR`, but that won’t shut down the threads because they`\fIloop\fR` forever looking for jobs\. If we try to drop our `\fIThreadPool\fR` with ourcurrent implementation of `\fIdrop\fR`, the main thread will block forever waitingfor the first thread to finish\.
.P
To fix this problem, we’ll modify the threads so they listen for either a `\fIJob\fR`to run or a signal that they should stop listening and exit the infinite loop\.Instead of `\fIJob\fR` instances, our channel will send one of these two enumvariants\.Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Job>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
enum Message {
    NewJob(Job),
    Terminate,
}
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(job)\.unwrap();
#     }
# }
# 
# impl Drop for ThreadPool {
#     fn drop(&mut self) {
#         for worker in &mut self\.workers {
#             println!("Shutting down worker {}", worker\.id);
# 
#             if let Some(thread) = worker\.thread\.take() {
#                 thread\.join()\.unwrap();
#             }
#         }
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Job>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let job = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             println!("Worker {} got a job; executing\.", id);
# 
#             job();
#         });
# 
#         Worker {
#             id,
#             thread: Some(thread),
#         }
#     }
# }

.EE

.RE
.P
This `\fIMessage\fR` enum will either be a `\fINewJob\fR` variant that holds the `\fIJob\fR` thethread should run, or it will be a `\fITerminate\fR` variant that will cause thethread to exit its loop and stop\.
.P
We need to adjust the channel to use values of type `\fIMessage\fR` rather than type`\fIJob\fR`, as shown in Listing 20\-23\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
pub struct ThreadPool {
    workers: Vec<Worker>,
    sender: mpsc::Sender<Message>,
}

// \-\-snip\-\-

# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# enum Message {
#     NewJob(Job),
#     Terminate,
# }
# 
impl ThreadPool {
    // \-\-snip\-\-

#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {
        let job = Box::new(f);

        self\.sender\.send(Message::NewJob(job))\.unwrap();
    }
}

// \-\-snip\-\-

# impl Drop for ThreadPool {
#     fn drop(&mut self) {
#         for worker in &mut self\.workers {
#             println!("Shutting down worker {}", worker\.id);
# 
#             if let Some(thread) = worker\.thread\.take() {
#                 thread\.join()\.unwrap();
#             }
#         }
#     }
# }
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) \-> Worker {
        let thread = thread::spawn(move || loop {
            let message = receiver\.lock()\.unwrap()\.recv()\.unwrap();

            match message {
                Message::NewJob(job) => {
                    println!("Worker {} got a job; executing\.", id);

                    job();
                }
                Message::Terminate => {
                    println!("Worker {} was told to terminate\.", id);

                    break;
                }
            }
        });

        Worker {
            id,
            thread: Some(thread),
        }
    }
}

.EE

.RE
Listing 20\-23: Sending and receiving `\fIMessage\fR` values andexiting the loop if a `\fIWorker\fR` receives `\fIMessage::Terminate\fR`
.P
To incorporate the `\fIMessage\fR` enum, we need to change `\fIJob\fR` to `\fIMessage\fR` in twoplaces: the definition of `\fIThreadPool\fR` and the signature of `\fIWorker::new\fR`\. The`\fIexecute\fR` method of `\fIThreadPool\fR` needs to send jobs wrapped in the`\fIMessage::NewJob\fR` variant\. Then, in `\fIWorker::new\fR` where a `\fIMessage\fR` is receivedfrom the channel, the job will be processed if the `\fINewJob\fR` variant isreceived, and the thread will break out of the loop if the `\fITerminate\fR` variantis received\.
.P
With these changes, the code will compile and continue to function in the sameway as it did after Listing 20\-20\. But we’ll get a warning because we aren’tcreating any messages of the `\fITerminate\fR` variety\. Let’s fix this warning bychanging our `\fIDrop\fR` implementation to look like Listing 20\-24\.Filename: src/lib\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use std::sync::mpsc;
# use std::sync::Arc;
# use std::sync::Mutex;
# use std::thread;
# 
# pub struct ThreadPool {
#     workers: Vec<Worker>,
#     sender: mpsc::Sender<Message>,
# }
# 
# type Job = Box<dyn FnOnce() + Send + 'static>;
# 
# enum Message {
#     NewJob(Job),
#     Terminate,
# }
# 
# impl ThreadPool {
#     /// Create a new ThreadPool\.
#     ///
#     /// The size is the number of threads in the pool\.
#     ///
#     /// # Panics
#     ///
#     /// The `new` function will panic if the size is zero\.
#     pub fn new(size: usize) \-> ThreadPool {
#         assert!(size > 0);
# 
#         let (sender, receiver) = mpsc::channel();
# 
#         let receiver = Arc::new(Mutex::new(receiver));
# 
#         let mut workers = Vec::with_capacity(size);
# 
#         for id in 0\.\.size {
#             workers\.push(Worker::new(id, Arc::clone(&receiver)));
#         }
# 
#         ThreadPool { workers, sender }
#     }
# 
#     pub fn execute<F>(&self, f: F)
#     where
#         F: FnOnce() + Send + 'static,
#     {
#         let job = Box::new(f);
# 
#         self\.sender\.send(Message::NewJob(job))\.unwrap();
#     }
# }
# 
impl Drop for ThreadPool {
    fn drop(&mut self) {
        println!("Sending terminate message to all workers\.");

        for _ in &self\.workers {
            self\.sender\.send(Message::Terminate)\.unwrap();
        }

        println!("Shutting down all workers\.");

        for worker in &mut self\.workers {
            println!("Shutting down worker {}", worker\.id);

            if let Some(thread) = worker\.thread\.take() {
                thread\.join()\.unwrap();
            }
        }
    }
}
# 
# struct Worker {
#     id: usize,
#     thread: Option<thread::JoinHandle<()>>,
# }
# 
# impl Worker {
#     fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) \-> Worker {
#         let thread = thread::spawn(move || loop {
#             let message = receiver\.lock()\.unwrap()\.recv()\.unwrap();
# 
#             match message {
#                 Message::NewJob(job) => {
#                     println!("Worker {} got a job; executing\.", id);
# 
#                     job();
#                 }
#                 Message::Terminate => {
#                     println!("Worker {} was told to terminate\.", id);
# 
#                     break;
#                 }
#             }
#         });
# 
#         Worker {
#             id,
#             thread: Some(thread),
#         }
#     }
# }

.EE

.RE
Listing 20\-24: Sending `\fIMessage::Terminate\fR` to theworkers before calling `\fIjoin\fR` on each worker thread
.P
We’re now iterating over the workers twice: once to send one `\fITerminate\fR`message for each worker and once to call `\fIjoin\fR` on each worker’s thread\. If wetried to send a message and `\fIjoin\fR` immediately in the same loop, we couldn’tguarantee that the worker in the current iteration would be the one to get themessage from the channel\.
.P
To better understand why we need two separate loops, imagine a scenario withtwo workers\. If we used a single loop to iterate through each worker, on thefirst iteration a terminate message would be sent down the channel and `\fIjoin\fR`called on the first worker’s thread\. If that first worker was busy processing arequest at that moment, the second worker would pick up the terminate messagefrom the channel and shut down\. We would be left waiting on the first worker toshut down, but it never would because the second thread picked up the terminatemessage\. Deadlock!
.P
To prevent this scenario, we first put all of our `\fITerminate\fR` messages on thechannel in one loop; then we join on all the threads in another loop\. Eachworker will stop receiving requests on the channel once it gets a terminatemessage\. So, we can be sure that if we send the same number of terminatemessages as there are workers, each worker will receive a terminate messagebefore `\fIjoin\fR` is called on its thread\.
.P
To see this code in action, let’s modify `\fImain\fR` to accept only two requestsbefore gracefully shutting down the server, as shown in Listing 20\-25\.Filename: src/bin/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
# use hello::ThreadPool;
# use std::fs;
# use std::io::prelude::*;
# use std::net::TcpListener;
# use std::net::TcpStream;
# use std::thread;
# use std::time::Duration;
# 
fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
    let pool = ThreadPool::new(4);

    for stream in listener\.incoming()\.take(2) {
        let stream = stream\.unwrap();

        pool\.execute(|| {
            handle_connection(stream);
        });
    }

    println!("Shutting down\.");
}
# 
# fn handle_connection(mut stream: TcpStream) {
#     let mut buffer = [0; 1024];
#     stream\.read(&mut buffer)\.unwrap();
# 
#     let get = b"GET / HTTP/1\.1\r\n";
#     let sleep = b"GET /sleep HTTP/1\.1\r\n";
# 
#     let (status_line, filename) = if buffer\.starts_with(get) {
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else if buffer\.starts_with(sleep) {
#         thread::sleep(Duration::from_secs(5));
#         ("HTTP/1\.1 200 OK", "hello\.html")
#     } else {
#         ("HTTP/1\.1 404 NOT FOUND", "404\.html")
#     };
# 
#     let contents = fs::read_to_string(filename)\.unwrap();
# 
#     let response = format!(
#         "{}\r\nContent\-Length: {}\r\n\r\n{}",
#         status_line,
#         contents\.len(),
#         contents
#     );
# 
#     stream\.write(response\.as_bytes())\.unwrap();
#     stream\.flush()\.unwrap();
# }

.EE

.RE
Listing 20\-25: Shut down the server after serving tworequests by exiting the loop
.P
You wouldn’t want a real\-world web server to shut down after serving only tworequests\. This code just demonstrates that the graceful shutdown and cleanup isin working order\.
.P
The `\fItake\fR` method is defined in the `\fIIterator\fR` trait and limits the iterationto the first two items at most\. The `\fIThreadPool\fR` will go out of scope at theend of `\fImain\fR`, and the `\fIdrop\fR` implementation will run\.
.P
Start the server with `\fIcargo run\fR`, and make three requests\. The third requestshould error, and in your terminal you should see output similar to this:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo run
   Compiling hello v0\.1\.0 (file:///projects/hello)
    Finished dev [unoptimized + debuginfo] target(s) in 1\.0s
     Running `target/debug/main`
Worker 0 got a job; executing\.
Worker 3 got a job; executing\.
Shutting down\.
Sending terminate message to all workers\.
Shutting down all workers\.
Shutting down worker 0
Worker 1 was told to terminate\.
Worker 2 was told to terminate\.
Worker 0 was told to terminate\.
Worker 3 was told to terminate\.
Shutting down worker 1
Shutting down worker 2
Shutting down worker 3

.EE

.RE
.P
You might see a different ordering of workers and messages printed\. We can seehow this code works from the messages: workers 0 and 3 got the first tworequests, and then on the third request, the server stopped acceptingconnections\. When the `\fIThreadPool\fR` goes out of scope at the end of `\fImain\fR`, its`\fIDrop\fR` implementation kicks in, and the pool tells all workers to terminate\.The workers each print a message when they see the terminate message, and thenthe thread pool calls `\fIjoin\fR` to shut down each worker thread\.
.P
Notice one interesting aspect of this particular execution: the `\fIThreadPool\fR`sent the terminate messages down the channel, and before any worker receivedthe messages, we tried to join worker 0\. Worker 0 had not yet received theterminate message, so the main thread blocked waiting for worker 0 to finish\.In the meantime, each of the workers received the termination messages\. Whenworker 0 finished, the main thread waited for the rest of the workers tofinish\. At that point, they had all received the termination message and wereable to shut down\.
.P
Congrats! We’ve now completed our project; we have a basic web server that usesa thread pool to respond asynchronously\. We’re able to perform a gracefulshutdown of the server, which cleans up all the threads in the pool\.
.P
Here’s the full code for reference:Filename: src/bin/main\.rs
.RS
.IP \fBrust,ignore\fR 2

.br
.EX
use hello::ThreadPool;
use std::fs;
use std::io::prelude::*;
use std::net::TcpListener;
use std::net::TcpStream;
use std::thread;
use std::time::Duration;

fn main() {
    let listener = TcpListener::bind("127\.0\.0\.1:7878")\.unwrap();
    let pool = ThreadPool::new(4);

    for stream in listener\.incoming() {
        let stream = stream\.unwrap();

        pool\.execute(|| {
            handle_connection(stream);
        });
    }

    println!("Shutting down\.");
}

fn handle_connection(mut stream: TcpStream) {
    let mut buffer = [0; 1024];
    stream\.read(&mut buffer)\.unwrap();

    let get = b"GET / HTTP/1\.1\r\n";
    let sleep = b"GET /sleep HTTP/1\.1\r\n";

    let (status_line, filename) = if buffer\.starts_with(get) {
        ("HTTP/1\.1 200 OK", "hello\.html")
    } else if buffer\.starts_with(sleep) {
        thread::sleep(Duration::from_secs(5));
        ("HTTP/1\.1 200 OK", "hello\.html")
    } else {
        ("HTTP/1\.1 404 NOT FOUND", "404\.html")
    };

    let contents = fs::read_to_string(filename)\.unwrap();

    let response = format!(
        "{}\r\nContent\-Length: {}\r\n\r\n{}",
        status_line,
        contents\.len(),
        contents
    );

    stream\.write(response\.as_bytes())\.unwrap();
    stream\.flush()\.unwrap();
}

.EE

.RE
Filename: src/lib\.rs
.RS
.IP \fBrust,noplayground\fR 2

.br
.EX
use std::sync::mpsc;
use std::sync::Arc;
use std::sync::Mutex;
use std::thread;

pub struct ThreadPool {
    workers: Vec<Worker>,
    sender: mpsc::Sender<Message>,
}

type Job = Box<dyn FnOnce() + Send + 'static>;

enum Message {
    NewJob(Job),
    Terminate,
}

impl ThreadPool {
    /// Create a new ThreadPool\.
    ///
    /// The size is the number of threads in the pool\.
    ///
    /// # Panics
    ///
    /// The `new` function will panic if the size is zero\.
    pub fn new(size: usize) \-> ThreadPool {
        assert!(size > 0);

        let (sender, receiver) = mpsc::channel();

        let receiver = Arc::new(Mutex::new(receiver));

        let mut workers = Vec::with_capacity(size);

        for id in 0\.\.size {
            workers\.push(Worker::new(id, Arc::clone(&receiver)));
        }

        ThreadPool { workers, sender }
    }

    pub fn execute<F>(&self, f: F)
    where
        F: FnOnce() + Send + 'static,
    {
        let job = Box::new(f);

        self\.sender\.send(Message::NewJob(job))\.unwrap();
    }
}

impl Drop for ThreadPool {
    fn drop(&mut self) {
        println!("Sending terminate message to all workers\.");

        for _ in &self\.workers {
            self\.sender\.send(Message::Terminate)\.unwrap();
        }

        println!("Shutting down all workers\.");

        for worker in &mut self\.workers {
            println!("Shutting down worker {}", worker\.id);

            if let Some(thread) = worker\.thread\.take() {
                thread\.join()\.unwrap();
            }
        }
    }
}

struct Worker {
    id: usize,
    thread: Option<thread::JoinHandle<()>>,
}

impl Worker {
    fn new(id: usize, receiver: Arc<Mutex<mpsc::Receiver<Message>>>) \-> Worker {
        let thread = thread::spawn(move || loop {
            let message = receiver\.lock()\.unwrap()\.recv()\.unwrap();

            match message {
                Message::NewJob(job) => {
                    println!("Worker {} got a job; executing\.", id);

                    job();
                }
                Message::Terminate => {
                    println!("Worker {} was told to terminate\.", id);

                    break;
                }
            }
        });

        Worker {
            id,
            thread: Some(thread),
        }
    }
}

.EE

.RE
.P
We could do more here! If you want to continue enhancing this project, here aresome ideas:
.P
Add more documentation to `\fIThreadPool\fR` and its public methods\.
.P
Add tests of the library’s functionality\.
.P
Change calls to `\fIunwrap\fR` to more robust error handling\.
.P
Use `\fIThreadPool\fR` to perform some task other than serving web requests\.
.P
Find a thread pool crate on 
.UR https://crates\.io/
.UE
crates\.io and implement asimilar web server using the crate instead\. Then compare its API androbustness to the thread pool we implemented\.
.br

.br
\fBSummary\fR
.br
=========
.br

.P
Well done! You’ve made it to the end of the book! We want to thank you forjoining us on this tour of Rust\. You’re now ready to implement your own Rustprojects and help with other peoples’ projects\. Keep in mind that there is awelcoming community of other Rustaceans who would love to help you with anychallenges you encounter on your Rust journey\.
.SH Appendix

.br

.br
\fBAppendix\fR
.br
==========
.br

.P
The following sections contain reference material you may find useful in yourRust journey\.
.SH "A \- Keywords"

.br

.br
\fBAppendix A: Keywords\fR
.br
======================
.br

.P
The following list contains keywords that are reserved for current or futureuse by the Rust language\. As such, they cannot be used as identifiers (exceptas raw identifiers as we’ll discuss in the “
.UR #raw\-identifiers
.UE
RawIdentifiers” section), including names offunctions, variables, parameters, struct fields, modules, crates, constants,macros, static values, attributes, types, traits, or lifetimes\.
.br

.br
\fBKeywords Currently in Use\fR
.br
===========================
.br

.P
The following keywords currently have the functionality described\.`\fIas\fR` \- perform primitive casting, disambiguate the specific trait containingan item, or rename items in `\fIuse\fR` and `\fIextern crate\fR` statements`\fIasync\fR` \-  return a `\fIFuture\fR` instead of blocking the current thread`\fIawait\fR` \- suspend execution until the result of a `\fIFuture\fR` is ready`\fIbreak\fR` \- exit a loop immediately`\fIconst\fR` \- define constant items or constant raw pointers`\fIcontinue\fR` \- continue to the next loop iteration`\fIcrate\fR` \- link an external crate or a macro variable representing the crate inwhich the macro is defined`\fIdyn\fR` \- dynamic dispatch to a trait object`\fIelse\fR` \- fallback for `\fIif\fR` and `\fIif let\fR` control flow constructs`\fIenum\fR` \- define an enumeration`\fIextern\fR` \- link an external crate, function, or variable`\fIfalse\fR` \- Boolean false literal`\fIfn\fR` \- define a function or the function pointer type`\fIfor\fR` \- loop over items from an iterator, implement a trait, or specify ahigher\-ranked lifetime`\fIif\fR` \- branch based on the result of a conditional expression`\fIimpl\fR` \- implement inherent or trait functionality`\fIin\fR` \- part of `\fIfor\fR` loop syntax`\fIlet\fR` \- bind a variable`\fIloop\fR` \- loop unconditionally`\fImatch\fR` \- match a value to patterns`\fImod\fR` \- define a module`\fImove\fR` \- make a closure take ownership of all its captures`\fImut\fR` \- denote mutability in references, raw pointers, or pattern bindings`\fIpub\fR` \- denote public visibility in struct fields, `\fIimpl\fR` blocks, or modules`\fIref\fR` \- bind by reference`\fIreturn\fR` \- return from function`\fISelf\fR` \- a type alias for the type we are defining or implementing`\fIself\fR` \- method subject or current module`\fIstatic\fR` \- global variable or lifetime lasting the entire program execution`\fIstruct\fR` \- define a structure`\fIsuper\fR` \- parent module of the current module`\fItrait\fR` \- define a trait`\fItrue\fR` \- Boolean true literal`\fItype\fR` \- define a type alias or associated type`\fIunion\fR` \- define a 
.UR \.\./reference/items/unions\.html
.UE
union and is only a keyword when used in a union declaration`\fIunsafe\fR` \- denote unsafe code, functions, traits, or implementations`\fIuse\fR` \- bring symbols into scope`\fIwhere\fR` \- denote clauses that constrain a type`\fIwhile\fR` \- loop conditionally based on the result of an expression
.br

.br
\fBKeywords Reserved for Future Use\fR
.br
==================================
.br

.P
The following keywords do not have any functionality but are reserved by Rustfor potential future use\.`\fIabstract\fR``\fIbecome\fR``\fIbox\fR``\fIdo\fR``\fIfinal\fR``\fImacro\fR``\fIoverride\fR``\fIpriv\fR``\fItry\fR``\fItypeof\fR``\fIunsized\fR``\fIvirtual\fR``\fIyield\fR`
.br

.br
\fBRaw Identifiers\fR
.br
=================
.br
\fIRaw identifiers\fR are the syntax that lets you use keywords where they wouldn’tnormally be allowed\. You use a raw identifier by prefixing a keyword with `\fIr#\fR`\.
.P
For example, `\fImatch\fR` is a keyword\. If you try to compile the following functionthat uses `\fImatch\fR` as its name:Filename: src/main\.rs
.RS
.IP \fBrust,ignore,does_not_compile\fR 2

.br
.EX
fn match(needle: &str, haystack: &str) \-> bool {
    haystack\.contains(needle)
}

.EE

.RE
.P
you’ll get this error:
.RS
.IP \fBtext\fR 2

.br
.EX
error: expected identifier, found keyword `match`
 \-\-> src/main\.rs:4:4
  |
4 | fn match(needle: &str, haystack: &str) \-> bool {
  |    ^^^^^ expected identifier, found keyword

.EE

.RE
.P
The error shows that you can’t use the keyword `\fImatch\fR` as the functionidentifier\. To use `\fImatch\fR` as a function name, you need to use the rawidentifier syntax, like this:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn r#match(needle: &str, haystack: &str) \-> bool {
    haystack\.contains(needle)
}

fn main() {
    assert!(r#match("foo", "foobar"));
}

.EE

.RE
.P
This code will compile without any errors\. Note the `\fIr#\fR` prefix on the functionname in its definition as well as where the function is called in `\fImain\fR`\.
.P
Raw identifiers allow you to use any word you choose as an identifier, even ifthat word happens to be a reserved keyword\. In addition, raw identifiers allowyou to use libraries written in a different Rust edition than your crate uses\.For example, `\fItry\fR` isn’t a keyword in the 2015 edition but is in the 2018edition\. If you depend on a library that’s written using the 2015 edition andhas a `\fItry\fR` function, you’ll need to use the raw identifier syntax, `\fIr#try\fR` inthis case, to call that function from your 2018 edition code\. See 
.UR appendix\-05\-editions\.html
.UE
AppendixE for more information on editions\.
.SH "B \- Operators and Symbols"

.br

.br
\fBAppendix B: Operators and Symbols\fR
.br
===================================
.br

.P
This appendix contains a glossary of Rust’s syntax, including operators andother symbols that appear by themselves or in the context of paths, generics,trait bounds, macros, attributes, comments, tuples, and brackets\.
.br

.br
\fBOperators\fR
.br
===========
.br

.P
Table B\-1 contains the operators in Rust, an example of how the operator wouldappear in context, a short explanation, and whether that operator isoverloadable\. If an operator is overloadable, the relevant trait to use tooverload that operator is listed\.Table B\-1: Operators
.P
| Operator | Example | Explanation | Overloadable? ||\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI!\fR` | `\fIident!(\.\.\.)\fR`, `\fIident!{\.\.\.}\fR`, `\fIident![\.\.\.]\fR` | Macro expansion | || `\fI!\fR` | `\fI!expr\fR` | Bitwise or logical complement | `\fINot\fR` || `\fI!=\fR` | `\fIvar != expr\fR` | Nonequality comparison | `\fIPartialEq\fR` || `\fI%\fR` | `\fIexpr % expr\fR` | Arithmetic remainder | `\fIRem\fR` || `\fI%=\fR` | `\fIvar %= expr\fR` | Arithmetic remainder and assignment | `\fIRemAssign\fR` || `\fI&\fR` | `\fI&expr\fR`, `\fI&mut expr\fR` | Borrow | || `\fI&\fR` | `\fI&type\fR`, `\fI&mut type\fR`, `\fI&'a type\fR`, `\fI&'a mut type\fR` | Borrowed pointer type | || `\fI&\fR` | `\fIexpr & expr\fR` | Bitwise AND | `\fIBitAnd\fR` || `\fI&=\fR` | `\fIvar &= expr\fR` | Bitwise AND and assignment | `\fIBitAndAssign\fR` || `\fI&&\fR` | `\fIexpr && expr\fR` | Short\-circuiting logical AND | || `\fI*\fR` | `\fIexpr * expr\fR` | Arithmetic multiplication | `\fIMul\fR` || `\fI*=\fR` | `\fIvar *= expr\fR` | Arithmetic multiplication and assignment | `\fIMulAssign\fR` || `\fI*\fR` | `\fI*expr\fR` | Dereference | `\fIDeref\fR` || `\fI*\fR` | `\fI*const type\fR`, `\fI*mut type\fR` | Raw pointer | || `\fI+\fR` | `\fItrait + trait\fR`, `\fI'a + trait\fR` | Compound type constraint | || `\fI+\fR` | `\fIexpr + expr\fR` | Arithmetic addition | `\fIAdd\fR` || `\fI+=\fR` | `\fIvar += expr\fR` | Arithmetic addition and assignment | `\fIAddAssign\fR` || `\fI,\fR` | `\fIexpr, expr\fR` | Argument and element separator | || `\fI\-\fR` | `\fI\- expr\fR` | Arithmetic negation | `\fINeg\fR` || `\fI\-\fR` | `\fIexpr \- expr\fR` | Arithmetic subtraction | `\fISub\fR` || `\fI\-=\fR` | `\fIvar \-= expr\fR` | Arithmetic subtraction and assignment | `\fISubAssign\fR` || `\fI\->\fR` | `\fIfn(\.\.\.) \-> type\fR`, |\.\.\.| \-> type | Function and closure return type | || `\fI\.\fR` | `\fIexpr\.ident\fR` | Member access | || `\fI\.\.\fR` | `\fI\.\.\fR`, `\fIexpr\.\.\fR`, `\fI\.\.expr\fR`, `\fIexpr\.\.expr\fR` | Right\-exclusive range literal | `\fIPartialOrd\fR` || `\fI\.\.=\fR` | `\fI\.\.=expr\fR`, `\fIexpr\.\.=expr\fR` | Right\-inclusive range literal | `\fIPartialOrd\fR` || `\fI\.\.\fR` | `\fI\.\.expr\fR` | Struct literal update syntax | || `\fI\.\.\fR` | `\fIvariant(x, \.\.)\fR`, `\fIstruct_type { x, \.\. }\fR` | “And the rest” pattern binding | || `\fI\.\.\.\fR` | `\fIexpr\.\.\.expr\fR` | (Deprecated, use `\fI\.\.=\fR` instead) In a pattern: inclusive range pattern | || `\fI/\fR` | `\fIexpr / expr\fR` | Arithmetic division | `\fIDiv\fR` || `\fI/=\fR` | `\fIvar /= expr\fR` | Arithmetic division and assignment | `\fIDivAssign\fR` || `\fI:\fR` | `\fIpat: type\fR`, `\fIident: type\fR` | Constraints | || `\fI:\fR` | `\fIident: expr\fR` | Struct field initializer | || `\fI:\fR` | `\fI'a: loop {\.\.\.}\fR` | Loop label | || `\fI;\fR` | `\fIexpr;\fR` | Statement and item terminator | || `\fI;\fR` | `\fI[\.\.\.; len]\fR` | Part of fixed\-size array syntax | || `\fI<<\fR` | `\fIexpr << expr\fR` | Left\-shift | `\fIShl\fR` || `\fI<<=\fR` | `\fIvar <<= expr\fR` | Left\-shift and assignment | `\fIShlAssign\fR` || `\fI<\fR` | `\fIexpr < expr\fR` | Less than comparison | `\fIPartialOrd\fR` || `\fI<=\fR` | `\fIexpr <= expr\fR` | Less than or equal to comparison | `\fIPartialOrd\fR` || `\fI=\fR` | `\fIvar = expr\fR`, `\fIident = type\fR` | Assignment/equivalence | || `\fI==\fR` | `\fIexpr == expr\fR` | Equality comparison | `\fIPartialEq\fR` || `\fI=>\fR` | `\fIpat => expr\fR` | Part of match arm syntax | || `\fI>\fR` | `\fIexpr > expr\fR` | Greater than comparison | `\fIPartialOrd\fR` || `\fI>=\fR` | `\fIexpr >= expr\fR` | Greater than or equal to comparison | `\fIPartialOrd\fR` || `\fI>>\fR` | `\fIexpr >> expr\fR` | Right\-shift | `\fIShr\fR` || `\fI>>=\fR` | `\fIvar >>= expr\fR` | Right\-shift and assignment | `\fIShrAssign\fR` || `\fI@\fR` | `\fIident @ pat\fR` | Pattern binding | || `\fI^\fR` | `\fIexpr ^ expr\fR` | Bitwise exclusive OR | `\fIBitXor\fR` || `\fI^=\fR` | `\fIvar ^= expr\fR` | Bitwise exclusive OR and assignment | `\fIBitXorAssign\fR` || | | pat | pat | Pattern alternatives | || | | expr | expr | Bitwise OR | `\fIBitOr\fR` || |= | var |= expr | Bitwise OR and assignment | `\fIBitOrAssign\fR` || || | expr || expr | Short\-circuiting logical OR | || `\fI?\fR` | `\fIexpr?\fR` | Error propagation | |
.br

.br
\fBNon\-operator Symbols\fR
.br
======================
.br

.P
The following list contains all non\-letters that don’t function as operators;that is, they don’t behave like a function or method call\.
.P
Table B\-2 shows symbols that appear on their own and are valid in a variety oflocations\.Table B\-2: Stand\-Alone Syntax
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI'ident\fR` | Named lifetime or loop label || `\fI\.\.\.u8\fR`, `\fI\.\.\.i32\fR`, `\fI\.\.\.f64\fR`, `\fI\.\.\.usize\fR`, etc\. | Numeric literal of specific type || `\fI"\.\.\."\fR` | String literal || `\fIr"\.\.\."\fR`, `\fIr#"\.\.\."#\fR`, `\fIr##"\.\.\."##\fR`, etc\. | Raw string literal, escape characters not processed || `\fIb"\.\.\."\fR` | Byte string literal; constructs a `\fI[u8]\fR` instead of a string || `\fIbr"\.\.\."\fR`, `\fIbr#"\.\.\."#\fR`, `\fIbr##"\.\.\."##\fR`, etc\. | Raw byte string literal, combination of raw and byte string literal || `\fI'\.\.\.'\fR` | Character literal || `\fIb'\.\.\.'\fR` | ASCII byte literal || |\.\.\.| expr | Closure || `\fI!\fR` | Always empty bottom type for diverging functions || `\fI_\fR` | “Ignored” pattern binding; also used to make integer literals readable |
.P
Table B\-3 shows symbols that appear in the context of a path through the modulehierarchy to an item\.Table B\-3: Path\-Related Syntax
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fIident::ident\fR` | Namespace path || `\fI::path\fR` | Path relative to the crate root (i\.e\., an explicitly absolute path) || `\fIself::path\fR` | Path relative to the current module (i\.e\., an explicitly relative path)\.| `\fIsuper::path\fR` | Path relative to the parent of the current module || `\fItype::ident\fR`, `\fI<type as trait>::ident\fR` | Associated constants, functions, and types || `\fI<type>::\.\.\.\fR` | Associated item for a type that cannot be directly named (e\.g\., `\fI<&T>::\.\.\.\fR`, `\fI<[T]>::\.\.\.\fR`, etc\.) || `\fItrait::method(\.\.\.)\fR` | Disambiguating a method call by naming the trait that defines it || `\fItype::method(\.\.\.)\fR` | Disambiguating a method call by naming the type for which it’s defined || `\fI<type as trait>::method(\.\.\.)\fR` | Disambiguating a method call by naming the trait and type |
.P
Table B\-4 shows symbols that appear in the context of using generic typeparameters\.Table B\-4: Generics
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fIpath<\.\.\.>\fR` | Specifies parameters to generic type in a type (e\.g\., `\fIVec<u8>\fR`) || `\fIpath::<\.\.\.>\fR`, `\fImethod::<\.\.\.>\fR` | Specifies parameters to generic type, function, or method in an expression; often referred to as turbofish (e\.g\., `\fI"42"\.parse::<i32>()\fR`) || `\fIfn ident<\.\.\.> \.\.\.\fR` | Define generic function || `\fIstruct ident<\.\.\.> \.\.\.\fR` | Define generic structure || `\fIenum ident<\.\.\.> \.\.\.\fR` | Define generic enumeration || `\fIimpl<\.\.\.> \.\.\.\fR` | Define generic implementation || `\fIfor<\.\.\.> type\fR` | Higher\-ranked lifetime bounds || `\fItype<ident=type>\fR` | A generic type where one or more associated types have specific assignments (e\.g\., `\fIIterator<Item=T>\fR`) |
.P
Table B\-5 shows symbols that appear in the context of constraining generic typeparameters with trait bounds\.Table B\-5: Trait Bound Constraints
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fIT: U\fR` | Generic parameter `\fIT\fR` constrained to types that implement `\fIU\fR` || `\fIT: 'a\fR` | Generic type `\fIT\fR` must outlive lifetime `\fI'a\fR` (meaning the type cannot transitively contain any references with lifetimes shorter than `\fI'a\fR`) || `\fIT : 'static\fR` | Generic type `\fIT\fR` contains no borrowed references other than `\fI'static\fR` ones || `\fI'b: 'a\fR` | Generic lifetime `\fI'b\fR` must outlive lifetime `\fI'a\fR` || `\fIT: ?Sized\fR` | Allow generic type parameter to be a dynamically sized type || `\fI'a + trait\fR`, `\fItrait + trait\fR` | Compound type constraint |
.P
Table B\-6 shows symbols that appear in the context of calling or definingmacros and specifying attributes on an item\.Table B\-6: Macros and Attributes
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI#[meta]\fR` | Outer attribute || `\fI#![meta]\fR` | Inner attribute || `\fI$ident\fR` | Macro substitution || `\fI$ident:kind\fR` | Macro capture || `\fI$(…)…\fR` | Macro repetition || `\fIident!(\.\.\.)\fR`, `\fIident!{\.\.\.}\fR`, `\fIident![\.\.\.]\fR` | Macro invocation |
.P
Table B\-7 shows symbols that create comments\.Table B\-7: Comments
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI//\fR` | Line comment || `\fI//!\fR` | Inner line doc comment || `\fI///\fR` | Outer line doc comment || `\fI/*\.\.\.*/\fR` | Block comment || `\fI/*!\.\.\.*/\fR` | Inner block doc comment || `\fI/**\.\.\.*/\fR` | Outer block doc comment |
.P
Table B\-8 shows symbols that appear in the context of using tuples\.Table B\-8: Tuples
.P
| Symbol | Explanation ||\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI()\fR` | Empty tuple (aka unit), both literal and type || `\fI(expr)\fR` | Parenthesized expression || `\fI(expr,)\fR` | Single\-element tuple expression || `\fI(type,)\fR` | Single\-element tuple type || `\fI(expr, \.\.\.)\fR` | Tuple expression || `\fI(type, \.\.\.)\fR` | Tuple type || `\fIexpr(expr, \.\.\.)\fR` | Function call expression; also used to initialize tuple `\fIstruct\fR`s and tuple `\fIenum\fR` variants || `\fIexpr\.0\fR`, `\fIexpr\.1\fR`, etc\. | Tuple indexing |
.P
Table B\-9 shows the contexts in which curly braces are used\.Table B\-9: Curly Brackets
.P
| Context | Explanation ||\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI{\.\.\.}\fR` | Block expression || `\fIType {\.\.\.}\fR` | `\fIstruct\fR` literal |
.P
Table B\-10 shows the contexts in which square brackets are used\.Table B\-10: Square Brackets
.P
| Context | Explanation ||\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-|| `\fI[\.\.\.]\fR` | Array literal || `\fI[expr; len]\fR` | Array literal containing `\fIlen\fR` copies of `\fIexpr\fR` || `\fI[type; len]\fR` | Array type containing `\fIlen\fR` instances of `\fItype\fR` || `\fIexpr[expr]\fR` | Collection indexing\. Overloadable (`\fIIndex\fR`, `\fIIndexMut\fR`) || `\fIexpr[\.\.]\fR`, `\fIexpr[a\.\.]\fR`, `\fIexpr[\.\.b]\fR`, `\fIexpr[a\.\.b]\fR` | Collection indexing pretending to be collection slicing, using `\fIRange\fR`, `\fIRangeFrom\fR`, `\fIRangeTo\fR`, or `\fIRangeFull\fR` as the “index” |
.SH "C \- Derivable Traits"

.br

.br
\fBAppendix C: Derivable Traits\fR
.br
==============================
.br

.P
In various places in the book, we’ve discussed the `\fIderive\fR` attribute, whichyou can apply to a struct or enum definition\. The `\fIderive\fR` attribute generatescode that will implement a trait with its own default implementation on thetype you’ve annotated with the `\fIderive\fR` syntax\.
.P
In this appendix, we provide a reference of all the traits in the standardlibrary that you can use with `\fIderive\fR`\. Each section covers:
.P
What operators and methods deriving this trait will enable
.P
What the implementation of the trait provided by `\fIderive\fR` does
.P
What implementing the trait signifies about the type
.P
The conditions in which you’re allowed or not allowed to implement the trait
.P
Examples of operations that require the trait
.P
If you want different behavior from that provided by the `\fIderive\fR` attribute,consult the 
.UR \.\./std/index\.html
.UE
standard library documentationfor each trait for details of how to manually implement them\.
.P
The rest of the traits defined in the standard library can’t be implemented onyour types using `\fIderive\fR`\. These traits don’t have sensible default behavior,so it’s up to you to implement them in the way that makes sense for what you’retrying to accomplish\.
.P
An example of a trait that can’t be derived is `\fIDisplay\fR`, which handlesformatting for end users\. You should always consider the appropriate way todisplay a type to an end user\. What parts of the type should an end user beallowed to see? What parts would they find relevant? What format of the datawould be most relevant to them? The Rust compiler doesn’t have this insight, soit can’t provide appropriate default behavior for you\.
.P
The list of derivable traits provided in this appendix is not comprehensive:libraries can implement `\fIderive\fR` for their own traits, making the list oftraits you can use `\fIderive\fR` with truly open\-ended\. Implementing `\fIderive\fR`involves using a procedural macro, which is covered in the
.UR ch19\-06\-macros\.html#macros
.UE
“Macros” section of Chapter 19\.`\fIDebug\fR` for Programmer Output
.P
The `\fIDebug\fR` trait enables debug formatting in format strings, which youindicate by adding `\fI:?\fR` within `\fI{}\fR` placeholders\.
.P
The `\fIDebug\fR` trait allows you to print instances of a type for debuggingpurposes, so you and other programmers using your type can inspect an instanceat a particular point in a program’s execution\.
.P
The `\fIDebug\fR` trait is required, for example, in use of the `\fIassert_eq!\fR` macro\.This macro prints the values of instances given as arguments if the equalityassertion fails so programmers can see why the two instances weren’t equal\.`\fIPartialEq\fR` and `\fIEq\fR` for Equality Comparisons
.P
The `\fIPartialEq\fR` trait allows you to compare instances of a type to check forequality and enables use of the `\fI==\fR` and `\fI!=\fR` operators\.
.P
Deriving `\fIPartialEq\fR` implements the `\fIeq\fR` method\. When `\fIPartialEq\fR` is derived onstructs, two instances are equal only if \fIall\fR fields are equal, and theinstances are not equal if any fields are not equal\. When derived on enums,each variant is equal to itself and not equal to the other variants\.
.P
The `\fIPartialEq\fR` trait is required, for example, with the use of the`\fIassert_eq!\fR` macro, which needs to be able to compare two instances of a typefor equality\.
.P
The `\fIEq\fR` trait has no methods\. Its purpose is to signal that for every value ofthe annotated type, the value is equal to itself\. The `\fIEq\fR` trait can only beapplied to types that also implement `\fIPartialEq\fR`, although not all types thatimplement `\fIPartialEq\fR` can implement `\fIEq\fR`\. One example of this is floating pointnumber types: the implementation of floating point numbers states that twoinstances of the not\-a\-number (`\fINaN\fR`) value are not equal to each other\.
.P
An example of when `\fIEq\fR` is required is for keys in a `\fIHashMap<K, V>\fR` so the`\fIHashMap<K, V>\fR` can tell whether two keys are the same\.`\fIPartialOrd\fR` and `\fIOrd\fR` for Ordering Comparisons
.P
The `\fIPartialOrd\fR` trait allows you to compare instances of a type for sortingpurposes\. A type that implements `\fIPartialOrd\fR` can be used with the `\fI<\fR`, `\fI>\fR`,`\fI<=\fR`, and `\fI>=\fR` operators\. You can only apply the `\fIPartialOrd\fR` trait to typesthat also implement `\fIPartialEq\fR`\.
.P
Deriving `\fIPartialOrd\fR` implements the `\fIpartial_cmp\fR` method, which returns an`\fIOption<Ordering>\fR` that will be `\fINone\fR` when the values given don’t produce anordering\. An example of a value that doesn’t produce an ordering, even thoughmost values of that type can be compared, is the not\-a\-number (`\fINaN\fR`) floatingpoint value\. Calling `\fIpartial_cmp\fR` with any floating point number and the `\fINaN\fR`floating point value will return `\fINone\fR`\.
.P
When derived on structs, `\fIPartialOrd\fR` compares two instances by comparing thevalue in each field in the order in which the fields appear in the structdefinition\. When derived on enums, variants of the enum declared earlier in theenum definition are considered less than the variants listed later\.
.P
The `\fIPartialOrd\fR` trait is required, for example, for the `\fIgen_range\fR` methodfrom the `\fIrand\fR` crate that generates a random value in the range specified by arange expression\.
.P
The `\fIOrd\fR` trait allows you to know that for any two values of the annotatedtype, a valid ordering will exist\. The `\fIOrd\fR` trait implements the `\fIcmp\fR` method,which returns an `\fIOrdering\fR` rather than an `\fIOption<Ordering>\fR` because a validordering will always be possible\. You can only apply the `\fIOrd\fR` trait to typesthat also implement `\fIPartialOrd\fR` and `\fIEq\fR` (and `\fIEq\fR` requires `\fIPartialEq\fR`)\. Whenderived on structs and enums, `\fIcmp\fR` behaves the same way as the derivedimplementation for `\fIpartial_cmp\fR` does with `\fIPartialOrd\fR`\.
.P
An example of when `\fIOrd\fR` is required is when storing values in a `\fIBTreeSet<T>\fR`,a data structure that stores data based on the sort order of the values\.`\fIClone\fR` and `\fICopy\fR` for Duplicating Values
.P
The `\fIClone\fR` trait allows you to explicitly create a deep copy of a value, andthe duplication process might involve running arbitrary code and copying heapdata\. See the 
.UR ch04\-01\-what\-is\-ownership\.html#ways\-variables\-and\-data\-interact\-clone
.UE
“Ways Variables and Data Interact:Clone” section inChapter 4 for more information on `\fIClone\fR`\.
.P
Deriving `\fIClone\fR` implements the `\fIclone\fR` method, which when implemented for thewhole type, calls `\fIclone\fR` on each of the parts of the type\. This means all thefields or values in the type must also implement `\fIClone\fR` to derive `\fIClone\fR`\.
.P
An example of when `\fIClone\fR` is required is when calling the `\fIto_vec\fR` method on aslice\. The slice doesn’t own the type instances it contains, but the vectorreturned from `\fIto_vec\fR` will need to own its instances, so `\fIto_vec\fR` calls`\fIclone\fR` on each item\. Thus, the type stored in the slice must implement `\fIClone\fR`\.
.P
The `\fICopy\fR` trait allows you to duplicate a value by only copying bits stored onthe stack; no arbitrary code is necessary\. See the 
.UR ch04\-01\-what\-is\-ownership\.html#stack\-only\-data\-copy
.UE
“Stack\-Only Data:Copy” section in Chapter 4 for moreinformation on `\fICopy\fR`\.
.P
The `\fICopy\fR` trait doesn’t define any methods to prevent programmers fromoverloading those methods and violating the assumption that no arbitrary codeis being run\. That way, all programmers can assume that copying a value will bevery fast\.
.P
You can derive `\fICopy\fR` on any type whose parts all implement `\fICopy\fR`\. A type thatimplements `\fICopy\fR` must also implement `\fIClone\fR`, because a type that implements`\fICopy\fR` has a trivial implementation of `\fIClone\fR` that performs the same task as`\fICopy\fR`\.
.P
The `\fICopy\fR` trait is rarely required; types that implement `\fICopy\fR` haveoptimizations available, meaning you don’t have to call `\fIclone\fR`, which makesthe code more concise\.
.P
Everything possible with `\fICopy\fR` you can also accomplish with `\fIClone\fR`, but thecode might be slower or have to use `\fIclone\fR` in places\.`\fIHash\fR` for Mapping a Value to a Value of Fixed Size
.P
The `\fIHash\fR` trait allows you to take an instance of a type of arbitrary size andmap that instance to a value of fixed size using a hash function\. Deriving`\fIHash\fR` implements the `\fIhash\fR` method\. The derived implementation of the `\fIhash\fR`method combines the result of calling `\fIhash\fR` on each of the parts of the type,meaning all fields or values must also implement `\fIHash\fR` to derive `\fIHash\fR`\.
.P
An example of when `\fIHash\fR` is required is in storing keys in a `\fIHashMap<K, V>\fR`to store data efficiently\.`\fIDefault\fR` for Default Values
.P
The `\fIDefault\fR` trait allows you to create a default value for a type\. Deriving`\fIDefault\fR` implements the `\fIdefault\fR` function\. The derived implementation of the`\fIdefault\fR` function calls the `\fIdefault\fR` function on each part of the type,meaning all fields or values in the type must also implement `\fIDefault\fR` toderive `\fIDefault\fR`\.
.P
The `\fIDefault::default\fR` function is commonly used in combination with the structupdate syntax discussed in the 
.UR ch05\-01\-defining\-structs\.html#creating\-instances\-from\-other\-instances\-with\-struct\-update\-syntax
.UE
“Creating Instances From Other Instances WithStruct UpdateSyntax”section in Chapter 5\. You can customize a few fields of a struct and thenset and use a default value for the rest of the fields by using`\fI\.\.Default::default()\fR`\.
.P
The `\fIDefault\fR` trait is required when you use the method `\fIunwrap_or_default\fR` on`\fIOption<T>\fR` instances, for example\. If the `\fIOption<T>\fR` is `\fINone\fR`, the method`\fIunwrap_or_default\fR` will return the result of `\fIDefault::default\fR` for the type`\fIT\fR` stored in the `\fIOption<T>\fR`\.
.SH "D \- Useful Development Tools"

.br

.br
\fBAppendix D \- Useful Development Tools\fR
.br
=======================================
.br

.P
In this appendix, we talk about some useful development tools that the Rustproject provides\. We’ll look at automatic formatting, quick ways to applywarning fixes, a linter, and integrating with IDEs\.
.br

.br
\fBAutomatic Formatting with \fR
.br
============================
.br
`\fIrustfmt\fR`
.P
The `\fIrustfmt\fR` tool reformats your code according to the community code style\.Many collaborative projects use `\fIrustfmt\fR` to prevent arguments about whichstyle to use when writing Rust: everyone formats their code using the tool\.
.P
To install `\fIrustfmt\fR`, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup component add rustfmt

.EE

.RE
.P
This command gives you `\fIrustfmt\fR` and `\fIcargo\-fmt\fR`, similar to how Rust gives youboth `\fIrustc\fR` and `\fIcargo\fR`\. To format any Cargo project, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo fmt

.EE

.RE
.P
Running this command reformats all the Rust code in the current crate\. Thisshould only change the code style, not the code semantics\. For more informationon `\fIrustfmt\fR`, see 
.UR https://github\.com/rust\-lang/rustfmt
.UE
its documentation\.
.br

.br
\fBFix Your Code with \fR
.br
=====================
.br
`\fIrustfix\fR`
.P
The rustfix tool is included with Rust installations and can automatically fixsome compiler warnings\. If you’ve written code in Rust, you’ve probably seencompiler warnings\. For example, consider this code:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn do_something() {}

fn main() {
    for i in 0\.\.100 {
        do_something();
    }
}

.EE

.RE
.P
Here, we’re calling the `\fIdo_something\fR` function 100 times, but we never use thevariable `\fIi\fR` in the body of the `\fIfor\fR` loop\. Rust warns us about that:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo build
   Compiling myprogram v0\.1\.0 (file:///projects/myprogram)
warning: unused variable: `i`
 \-\-> src/main\.rs:4:9
  |
4 |     for i in 1\.\.100 {
  |         ^ help: consider using `_i` instead
  |
  = note: #[warn(unused_variables)] on by default

    Finished dev [unoptimized + debuginfo] target(s) in 0\.50s

.EE

.RE
.P
The warning suggests that we use `\fI_i\fR` as a name instead: the underscoreindicates that we intend for this variable to be unused\. We can automaticallyapply that suggestion using the `\fIrustfix\fR` tool by running the command `\fIcargo fix\fR`:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo fix
    Checking myprogram v0\.1\.0 (file:///projects/myprogram)
      Fixing src/main\.rs (1 fix)
    Finished dev [unoptimized + debuginfo] target(s) in 0\.59s

.EE

.RE
.P
When we look at \fIsrc/main\.rs\fR again, we’ll see that `\fIcargo fix\fR` has changed thecode:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn do_something() {}

fn main() {
    for _i in 0\.\.100 {
        do_something();
    }
}

.EE

.RE
.P
The `\fIfor\fR` loop variable is now named `\fI_i\fR`, and the warning no longer appears\.
.P
You can also use the `\fIcargo fix\fR` command to transition your code betweendifferent Rust editions\. Editions are covered in Appendix E\.
.br

.br
\fBMore Lints with Clippy\fR
.br
========================
.br

.P
The Clippy tool is a collection of lints to analyze your code so you can catchcommon mistakes and improve your Rust code\.
.P
To install Clippy, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup component add clippy

.EE

.RE
.P
To run Clippy’s lints on any Cargo project, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cargo clippy

.EE

.RE
.P
For example, say you write a program that uses an approximation of amathematical constant, such as pi, as this program does:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = 3\.1415;
    let r = 8\.0;
    println!("the area of the circle is {}", x * r * r);
}

.EE

.RE
.P
Running `\fIcargo clippy\fR` on this project results in this error:
.RS
.IP \fBtext\fR 2

.br
.EX
error: approximate value of `f{32, 64}::consts::PI` found\. Consider using it directly
 \-\-> src/main\.rs:2:13
  |
2 |     let x = 3\.1415;
  |             ^^^^^^
  |
  = note: #[deny(clippy::approx_constant)] on by default
  = help: for further information visit https://rust\-lang\-nursery\.github\.io/rust\-clippy/master/index\.html#approx_constant

.EE

.RE
.P
This error lets you know that Rust has this constant defined more precisely andthat your program would be more correct if you used the constant instead\. Youwould then change your code to use the `\fIPI\fR` constant\. The following codedoesn’t result in any errors or warnings from Clippy:Filename: src/main\.rs
.RS
.IP \fBrust\fR 2

.br
.EX
fn main() {
    let x = std::f64::consts::PI;
    let r = 8\.0;
    println!("the area of the circle is {}", x * r * r);
}

.EE

.RE
.P
For more information on Clippy, see 
.UR https://github\.com/rust\-lang/rust\-clippy
.UE
its documentation\.
.br

.br
\fBIDE Integration Using the Rust Language Server\fR
.br
================================================
.br

.P
To help IDE integration, the Rust project distributes the \fIRust Language\fRServer (`\fIrls\fR`)\. This tool speaks the 
.UR http://langserver\.org/
.UE
Language ServerProtocol, which is a specification for IDEs and programminglanguages to communicate with each other\. Different clients can use the `\fIrls\fR`,such as 
.UR https://marketplace\.visualstudio\.com/items?itemName=rust\-lang\.rust
.UE
the Rust plug\-in for Visual Studio Code\.
.P
To install the `\fIrls\fR`, enter the following:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup component add rls

.EE

.RE
.P
Then install the language server support in your particular IDE; you’ll gainabilities such as autocompletion, jump to definition, and inline errors\.
.P
For more information on the `\fIrls\fR`, see 
.UR https://github\.com/rust\-lang/rls
.UE
its documentation\.
.SH "E \- Editions"

.br

.br
\fBAppendix E \- Editions\fR
.br
=======================
.br

.P
In Chapter 1, you saw that `\fIcargo new\fR` adds a bit of metadata to your\fICargo\.toml\fR file about an edition\. This appendix talks about what that means!
.P
The Rust language and compiler have a six\-week release cycle, meaning users geta constant stream of new features\. Other programming languages release largerchanges less often; Rust releases smaller updates more frequently\. After awhile, all of these tiny changes add up\. But from release to release, it can bedifficult to look back and say, “Wow, between Rust 1\.10 and Rust 1\.31, Rust haschanged a lot!”
.P
Every two or three years, the Rust team produces a new Rust \fIedition\fR\. Eachedition brings together the features that have landed into a clear package withfully updated documentation and tooling\. New editions ship as part of the usualsix\-week release process\.
.P
Editions serve different purposes for different people:
.P
For active Rust users, a new edition brings together incremental changes intoan easy\-to\-understand package\.
.P
For non\-users, a new edition signals that some major advancements havelanded, which might make Rust worth another look\.
.P
For those developing Rust, a new edition provides a rallying point for theproject as a whole\.
.P
At the time of this writing, two Rust editions are available: Rust 2015 andRust 2018\. This book is written using Rust 2018 edition idioms\.
.P
The `\fIedition\fR` key in \fICargo\.toml\fR indicates which edition the compiler shoulduse for your code\. If the key doesn’t exist, Rust uses `\fI2015\fR` as the editionvalue for backward compatibility reasons\.
.P
Each project can opt in to an edition other than the default 2015 edition\.Editions can contain incompatible changes, such as including a new keyword thatconflicts with identifiers in code\. However, unless you opt in to thosechanges, your code will continue to compile even as you upgrade the Rustcompiler version you use\.
.P
All Rust compiler versions support any edition that existed prior to thatcompiler’s release, and they can link crates of any supported editionstogether\. Edition changes only affect the way the compiler initially parsescode\. Therefore, if you’re using Rust 2015 and one of your dependencies usesRust 2018, your project will compile and be able to use that dependency\. Theopposite situation, where your project uses Rust 2018 and a dependency usesRust 2015, works as well\.
.P
To be clear: most features will be available on all editions\. Developers usingany Rust edition will continue to see improvements as new stable releases aremade\. However, in some cases, mainly when new keywords are added, some newfeatures might only be available in later editions\. You will need to switcheditions if you want to take advantage of such features\.
.P
For more details, the 
.UR https://doc\.rust\-lang\.org/stable/edition\-guide/
.UE
\fIEdition\fRGuide is a complete bookabout editions that enumerates the differences between editions and explainshow to automatically upgrade your code to a new edition via `\fIcargo fix\fR`\.
.SH "F \- Translations of the Book"

.br

.br
\fBAppendix F: Translations of the Book\fR
.br
======================================
.br

.P
For resources in languages other than English\. Most are still in progress; see
.UR https://github\.com/rust\-lang/book/issues?q=is%3Aopen+is%3Aissue+label%3ATranslations
.UE
the Translations label to help or let us know about a new translation!
.UR https://github\.com/rust\-br/rust\-book\-pt\-br
.UE
Português (BR)
.UR https://github\.com/nunojesus/rust\-book\-pt\-pt
.UE
Português (PT)
.UR https://github\.com/KaiserY/trpl\-zh\-cn
.UE
简体中文
.UR https://github\.com/rust\-tw/book\-tw
.UE
正體中文
.UR https://github\.com/pavloslav/rust\-book\-uk\-ua
.UE
Українська
.UR https://github\.com/thecodix/book
.UE
Español, 
.UR https://github\.com/ManRR/rust\-book\-es
.UE
alternate
.UR https://github\.com/AgeOfWar/rust\-book\-it
.UE
Italiano
.UR https://github\.com/rust\-lang\-ru/book
.UE
Русский
.UR https://github\.com/rinthel/rust\-lang\-book\-ko
.UE
한국어
.UR https://github\.com/rust\-lang\-ja/book\-ja
.UE
日本語
.UR https://github\.com/Jimskapt/rust\-book\-fr
.UE
Français
.UR https://github\.com/paytchoo/book\-pl
.UE
Polski
.UR https://github\.com/idanmel/rust\-book\-heb
.UE
עברית
.UR https://github\.com/agentzero1/book
.UE
Cebuano
.UR https://github\.com/josephace135/book
.UE
Tagalog
.UR https://github\.com/psychoslave/Rust\-libro
.UE
Esperanto
.UR https://github\.com/TChatzigiannakis/rust\-book\-greek
.UE
ελληνική
.UR https://github\.com/sebras/book
.UE
Svenska
.UR https://github\.com/pomokhtari/rust\-book\-fa
.UE
Farsi
.UR https://github\.com/rust\-lang\-de/rustbook\-de
.UE
Deutsch
.UR https://github\.com/RustDili/dokuman/tree/master/ceviriler
.UE
Turkish, 
.UR https://rustdili\.github\.io/
.UE
online
.UR https://github\.com/venkatarun95/rust\-book\-hindi
.UE
हिंदी
.UR https://github\.com/rust\-lang\-th/book\-th
.UE
ไทย
.SH "G \- How Rust is Made and “Nightly Rust”"

.br

.br
\fBAppendix G \- How Rust is Made and “Nightly Rust”\fR
.br
======================================================
.br

.P
This appendix is about how Rust is made and how that affects you as a Rustdeveloper\.
.br

.br
\fBStability Without Stagnation\fR
.br
==============================
.br

.P
As a language, Rust cares a \fIlot\fR about the stability of your code\. We wantRust to be a rock\-solid foundation you can build on, and if things wereconstantly changing, that would be impossible\. At the same time, if we can’texperiment with new features, we may not find out important flaws until aftertheir release, when we can no longer change things\.
.P
Our solution to this problem is what we call “stability without stagnation”,and our guiding principle is this: you should never have to fear upgrading to anew version of stable Rust\. Each upgrade should be painless, but should alsobring you new features, fewer bugs, and faster compile times\.
.br

.br
\fBChoo, Choo! Release Channels and Riding the Trains\fR
.br
====================================================
.br

.P
Rust development operates on a \fItrain schedule\fR\. That is, all development isdone on the `\fImaster\fR` branch of the Rust repository\. Releases follow a softwarerelease train model, which has been used by Cisco IOS and other softwareprojects\. There are three \fIrelease channels\fR for Rust:
.P
Nightly
.P
Beta
.P
Stable
.P
Most Rust developers primarily use the stable channel, but those who want totry out experimental new features may use nightly or beta\.
.P
Here’s an example of how the development and release process works: let’sassume that the Rust team is working on the release of Rust 1\.5\. That releasehappened in December of 2015, but it will provide us with realistic versionnumbers\. A new feature is added to Rust: a new commit lands on the `\fImaster\fR`branch\. Each night, a new nightly version of Rust is produced\. Every day is arelease day, and these releases are created by our release infrastructureautomatically\. So as time passes, our releases look like this, once a night:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- *

.EE

.RE
.P
Every six weeks, it’s time to prepare a new release! The `\fIbeta\fR` branch of theRust repository branches off from the `\fImaster\fR` branch used by nightly\. Now,there are two releases:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- *
                     |
beta:                *

.EE

.RE
.P
Most Rust users do not use beta releases actively, but test against beta intheir CI system to help Rust discover possible regressions\. In the meantime,there’s still a nightly release every night:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- * \- \- * \- \- *
                     |
beta:                *

.EE

.RE
.P
Let’s say a regression is found\. Good thing we had some time to test the betarelease before the regression snuck into a stable release! The fix is appliedto `\fImaster\fR`, so that nightly is fixed, and then the fix is backported to the`\fIbeta\fR` branch, and a new release of beta is produced:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- * \- \- * \- \- * \- \- *
                     |
beta:                * \- \- \- \- \- \- \- \- *

.EE

.RE
.P
Six weeks after the first beta was created, it’s time for a stable release! The`\fIstable\fR` branch is produced from the `\fIbeta\fR` branch:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- * \- \- * \- \- * \- \- * \- * \- *
                     |
beta:                * \- \- \- \- \- \- \- \- *
                                       |
stable:                                *

.EE

.RE
.P
Hooray! Rust 1\.5 is done! However, we’ve forgotten one thing: because the sixweeks have gone by, we also need a new beta of the \fInext\fR version of Rust, 1\.6\.So after `\fIstable\fR` branches off of `\fIbeta\fR`, the next version of `\fIbeta\fR` branchesoff of `\fInightly\fR` again:
.RS
.IP \fBtext\fR 2

.br
.EX
nightly: * \- \- * \- \- * \- \- * \- \- * \- \- * \- * \- *
                     |                         |
beta:                * \- \- \- \- \- \- \- \- *       *
                                       |
stable:                                *

.EE

.RE
.P
This is called the “train model” because every six weeks, a release “leaves thestation”, but still has to take a journey through the beta channel before itarrives as a stable release\.
.P
Rust releases every six weeks, like clockwork\. If you know the date of one Rustrelease, you can know the date of the next one: it’s six weeks later\. A niceaspect of having releases scheduled every six weeks is that the next train iscoming soon\. If a feature happens to miss a particular release, there’s no needto worry: another one is happening in a short time! This helps reduce pressureto sneak possibly unpolished features in close to the release deadline\.
.P
Thanks to this process, you can always check out the next build of Rust andverify for yourself that it’s easy to upgrade to: if a beta release doesn’twork as expected, you can report it to the team and get it fixed before thenext stable release happens! Breakage in a beta release is relatively rare, but`\fIrustc\fR` is still a piece of software, and bugs do exist\.
.br

.br
\fBUnstable Features\fR
.br
===================
.br

.P
There’s one more catch with this release model: unstable features\. Rust uses atechnique called “feature flags” to determine what features are enabled in agiven release\. If a new feature is under active development, it lands on`\fImaster\fR`, and therefore, in nightly, but behind a \fIfeature flag\fR\. If you, as auser, wish to try out the work\-in\-progress feature, you can, but you must beusing a nightly release of Rust and annotate your source code with theappropriate flag to opt in\.
.P
If you’re using a beta or stable release of Rust, you can’t use any featureflags\. This is the key that allows us to get practical use with new featuresbefore we declare them stable forever\. Those who wish to opt into the bleedingedge can do so, and those who want a rock\-solid experience can stick withstable and know that their code won’t break\. Stability without stagnation\.
.P
This book only contains information about stable features, as in\-progressfeatures are still changing, and surely they’ll be different between when thisbook was written and when they get enabled in stable builds\. You can finddocumentation for nightly\-only features online\.
.br

.br
\fBRustup and the Role of Rust Nightly\fR
.br
=====================================
.br

.P
Rustup makes it easy to change between different release channels of Rust, on aglobal or per\-project basis\. By default, you’ll have stable Rust installed\. Toinstall nightly, for example:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ rustup toolchain install nightly

.EE

.RE
.P
You can see all of the \fItoolchains\fR (releases of Rust and associatedcomponents) you have installed with `\fIrustup\fR` as well\. Here’s an example on oneof your authors’ Windows computer:
.RS
.IP \fBpowershell\fR 2

.br
.EX
> rustup toolchain list
stable\-x86_64\-pc\-windows\-msvc (default)
beta\-x86_64\-pc\-windows\-msvc
nightly\-x86_64\-pc\-windows\-msvc

.EE

.RE
.P
As you can see, the stable toolchain is the default\. Most Rust users use stablemost of the time\. You might want to use stable most of the time, but usenightly on a specific project, because you care about a cutting\-edge feature\.To do so, you can use `\fIrustup override\fR` in that project’s directory to set thenightly toolchain as the one `\fIrustup\fR` should use when you’re in that directory:
.RS
.IP \fBconsole\fR 2

.br
.EX
$ cd ~/projects/needs\-nightly
$ rustup override set nightly

.EE

.RE
.P
Now, every time you call `\fIrustc\fR` or `\fIcargo\fR` inside of\fI~/projects/needs\-nightly\fR, `\fIrustup\fR` will make sure that you are using nightlyRust, rather than your default of stable Rust\. This comes in handy when youhave a lot of Rust projects!
.br

.br
\fBThe RFC Process and Teams\fR
.br
===========================
.br

.P
So how do you learn about these new features? Rust’s development model followsa \fIRequest For Comments (RFC) process\fR\. If you’d like an improvement in Rust,you can write up a proposal, called an RFC\.
.P
Anyone can write RFCs to improve Rust, and the proposals are reviewed anddiscussed by the Rust team, which is comprised of many topic subteams\. There’sa full list of the teams 
.UR https://www\.rust\-lang\.org/governance
.UE
on Rust’swebsite, which includes teams foreach area of the project: language design, compiler implementation,infrastructure, documentation, and more\. The appropriate team reads theproposal and the comments, writes some comments of their own, and eventually,there’s consensus to accept or reject the feature\.
.P
If the feature is accepted, an issue is opened on the Rust repository, andsomeone can implement it\. The person who implements it very well may not be theperson who proposed the feature in the first place! When the implementation isready, it lands on the `\fImaster\fR` branch behind a feature gate, as we discussedin the 
.UR #unstable\-features
.UE
“Unstable Features” section\.
.P
After some time, once Rust developers who use nightly releases have been ableto try out the new feature, team members will discuss the feature, how it’sworked out on nightly, and decide if it should make it into stable Rust or not\.If the decision is to move forward, the feature gate is removed, and thefeature is now considered stable! It rides the trains into a new stable releaseof Rust\.